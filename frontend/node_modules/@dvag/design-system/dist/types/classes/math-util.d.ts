export declare const PI = 3.1415;
export declare function clamp(x: number, min: number, max: number): number;
export declare function angleToRadians(angle: number): number;
export declare function getPointOnCircle(radius: number, angle: number): Point;
export declare function normalize(vector: Point): Point;
export declare function angleToDirection(angle: number): Point;
export declare function directionToRadians(direction: Point): number;
export declare function directionToAngle(direction: Point): number;
export declare function isPositiveInteger(num: number): boolean;
export declare function toPoint(other: {
  x: number;
  y: number;
}): Point;
declare type PointOrXY = Point | {
  x: number;
  y: number;
};
export declare class Point {
  x: number;
  y: number;
  constructor(x?: number, y?: number);
  copy(): Point;
  plus(other: PointOrXY): Point;
  minus(other: PointOrXY): Point;
  scale(factor: number): Point;
  divide(factor: number): Point;
  normalize(): Point;
  get lengthSquared(): number;
  get length(): number;
}
export declare function normalizedDirectionBetweenPoints(start: Point, end: Point): Point;
export declare function cutValueToPrecision(value: number, precision: number): number;
export {};
