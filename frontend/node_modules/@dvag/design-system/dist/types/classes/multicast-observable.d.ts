export declare type DsObservableCallback<T> = (newValue: T) => void;
export declare class DsObservable<T> {
  protected _value: T;
  protected subscriptions: Map<ObservableSubscription<T>, DsObservableCallback<T>>;
  get value(): T;
  subscribe(callback: DsObservableCallback<T>): ObservableSubscription<T>;
}
/**
 * Ein einfaches Observables an das man sich anmelden und wieder abmelden kann, sobald sich der interne Wert ver√§ndert
 */
export declare class DsSubject<T> extends DsObservable<T> {
  next(newValue: T): void;
}
export declare class ObservableSubscription<T> {
  private map;
  constructor(map: Map<ObservableSubscription<T>, DsObservableCallback<T>>);
  unsubscribe(): void;
}
