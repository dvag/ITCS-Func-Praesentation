/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AlertButtonData } from "./components/modals/alert/ds-alert-button/ds-alert-button";
import { AlertButtonData as AlertButtonData1 } from "./components/modals/alert/ds-alert-button/ds-alert-button";
import { DateError, DateSelectionMode } from "./components/form/inputs/date/date";
import { DateRange } from "./components/form/inputs/date/date-range.util";
import { ChartSample } from "./components/visualization/ds-chart-sample/ds-chart-sample";
import { StringOrObject } from "./components/form/ds-dropdown/ds-dropdown";
import { StringOrObject as StringOrObject1 } from "./components/form/ds-dropdown/ds-dropdown";
import { DropdownOption } from "./components/form/ds-dropdown/ds-dropdown-option/ds-dropdown-option";
import { ErgebnisUebersichtItem } from "./components/fachmodule/ergebnisuebersicht/ds-fm-ergebnisuebersicht-item/ds-fm-ergebnisuebersicht-item";
import { ErgebnisUebersichtTable } from "./components/fachmodule/ergebnisuebersicht/ds-fm-ergebnisuebersicht-table/ds-fm-ergebnisuebersicht-table";
import { GridSize } from "./components/layout/ds-form-layout/ds-form-layout";
import { GrowStartEvent } from "./components/layout/ds-grow-box/ds-grow-box";
import { HeaderActionConfiguration } from "./components/scaffold/ds-header/ds-header-action/ds-header-action";
import { HeaderActionListConfiguration } from "./components/scaffold/ds-header/ds-header-action-list/ds-header-action-list";
import { HeaderCustomerConfiguration } from "./components/scaffold/ds-header/ds-header-customer/ds-header-customer";
import { HeaderUserConfiguration } from "./components/scaffold/ds-header/ds-header-user/ds-header-user";
import { NavigatedRoute } from "./components/scaffold/navigated-content/ds-navigated-content-menu/ds-navigated-content-menu";
import { MenuItemModel } from "./components/scaffold/navigated-content/ds-navigated-content-menu-item/ds-navigated-content-menu-item";
import { SearchAutoCompleteHandler } from "./components/form/ds-search/auto-complete-value";
import { TableConfig } from "./components/table/ds-table/ds-table";
import { ColumnSettings, ColumnType, SortDirection } from "./components/table/table-common-types";
import { ArrayString } from "./components/table/ds-table-page-size-picker/ds-table-page-size-picker";
import { TextInputAutocompleteController } from "./components/form/inputs/ds-text-input/ds-text-input";
import { UserAvatarSize } from "./components/scaffold/ds-user-avatar/ds-user-avatar";
import { ActionLayoutDirection, AlertType } from "./new/modals/dx-alert/dx-alert";
import { BreadcrumbItem } from "./new/scaffold/dx-header/dx-breadcrumb/dx-breadcrumb-item/dx-breadcrumb-item";
import { ButtonTheme, ButtonType } from "./new/buttons/dx-button/dx-button";
import { HorizontalDirection, Orientation, VerticalDirection } from "./classes/common-types";
import { DateError as DateError1, DateSelectionMode as DateSelectionMode1 } from "./new/form/date/date";
import { DateRange as DateRange1 } from "./new/form/date/date-range.util";
import { NewChartSample } from "./new/visualization/dx-chart-sample/dx-chart-sample";
import { ComboboxSearchController } from "./new/form/dx-combobox/dx-combobox";
import { ContentSwitcherItemValue } from "./new/internal/dx-content-switcher/dx-content-switcher-item/dx-content-switcher-item";
import { ContentSwitcherItemValue as ContentSwitcherItemValue1 } from "./new/internal/dx-content-switcher/dx-content-switcher-item/dx-content-switcher-item";
import { DonutChartColorScheme } from "./new/visualization/dx-donut-chart/dx-donut-chart";
import { ContainerSize } from "./new/functional/input-container";
import { StringOrObject as StringOrObject2 } from "./new/layout/dx-list/list.util";
import { NewDropdownOption } from "./new/form/dx-dropdown/dx-dropdown-option/dx-dropdown-option";
import { NumberOfLines } from "./new/form/dx-error-message/dx-error-message";
import { Size } from "./classes/sizes.util";
import { HeaderTheme } from "./new/scaffold/dx-header/dx-header";
import { NotificationIndicatorThemeType, NotificationIndicatorType } from "./new/internal/dx-notification-indicator/notification-indicator.util";
import { AppFavoritesApp, CloseSidebarDetail, LaunchAppDetail } from "./new/scaffold/dx-header/dx-header-app-favorites/app-favorite";
import { MenuEntry, MenuEntryElement, MenuItemElement } from "./new/scaffold/dx-header/header-menu.util";
import { NavigationItem, NavigationItemInteractionPayload, NavigationItemSize, NavigationPage } from "./new/scaffold/dx-header/dx-header-navigation/dx-header-navigation-item/dx-header-navigation-item";
import { Ref } from "./classes/misc-util";
import { NavigationPage as NavigationPage1 } from "./new/scaffold/dx-header/dx-header-navigation/dx-header-navigation-item/dx-header-navigation-item";
import { WizardStepState } from "./new/layout/dx-wizard/dx-internal-wizard-step/dx-internal-wizard-step";
import { ItemSelectionPayload, ListFlyoutSelectionMode } from "./new/layout/dx-list/dx-list-flyout/dx-list-flyout";
import { ActionIndicatorType, ListItemType } from "./new/layout/dx-list/dx-list-item/dx-list-item";
import { Point } from "./classes/math-util";
import { ModalClosedPayload, ModalHeight } from "./new/modals/dx-modal/dx-modal";
import { PageButtonPayload } from "./new/layout/dx-number-paginator/dx-number-paginator-page-button/dx-number-paginator-page-button";
import { ArrayStringOrArray } from "./new/misc/dx-number-picker/dx-number-picker";
import { ListFlyoutSelectionMode as ListFlyoutSelectionMode1 } from "./new/layout/dx-list/dx-list-flyout/dx-list-flyout";
import { OpenChangePayload, SelectionPayload } from "./new/scaffold/dx-overflow-menu/dx-overflow-menu";
import { OverflowMenuItem } from "./new/scaffold/dx-overflow-menu/dx-overflow-menu-item/dx-overflow-menu-item";
import { PopupPosition } from "./new/internal/dx-overlay/dx-overlay";
import { GrowBoxState } from "./new/internal/dx-simple-grow-box/dx-simple-grow-box";
import { SiteNavigationExpansionBreakpoint } from "./new/site-navigation/dx-site-navigation/dx-site-navigation";
import { SiteNavigationExpansionBreakpoint as SiteNavigationExpansionBreakpoint1 } from "./new/site-navigation/dx-site-navigation/dx-site-navigation";
import { NavigateEventDetail } from "./new/site-navigation/dx-site-navigation-menu/dx-site-navigation-menu";
import { SiteNavigationMenuItemState } from "./new/site-navigation/dx-site-navigation-menu-item/states";
import { SiteNavigationMenuItem } from "./new/site-navigation/dx-site-navigation-menu-item/dx-site-navigation-menu-item";
import { SortDetail } from "./new/internal/dx-sort/dx-sort";
import { TabPage } from "./new/layout/dx-tab-bar/dx-tab-page/dx-tab-page";
import { ArrayStringOrArray as ArrayStringOrArray1 } from "./new/misc/dx-number-picker/dx-number-picker";
import { ColumnAlignment, ColumnSettings as ColumnSettings1, ColumnType as ColumnType1, SelectionMode, SortDirection as SortDirection1, TableSelection } from "./new/table/table-common-types";
import { TableConfig as TableConfig1 } from "./new/table/dx-table/dx-table";
import { TagThemeChoices } from "./new/basics/dx-tag/dx-tag";
import { TextInputAutocompleteController as TextInputAutocompleteController1 } from "./new/form/dx-text-input/dx-text-input";
import { DxUserAvatarSize } from "./new/scaffold/dx-user-avatar/dx-user-avatar";
import { WizardStep } from "./new/layout/dx-wizard/dx-wizard-step/dx-wizard-step";
import { ButtonSize, ButtonValue } from "./new/form/dx-yes-no/dx-yes-no";
export namespace Components {
    interface DsActionList {
    }
    interface DsActionListItem {
    }
    interface DsAlert {
        /**
          * Defines in which direction the buttons should be displayed.
          * @value column: The buttons will be displayed from left to right.
          * @value row: The buttons will be displayed from top to bottom.
          * @value auto: The direction is computed dependant on the label size of the buttons.
          * @example actions-direction-row
          * @example actions-direction-column
          * @example actions-direction-auto-s
          * @example actions-direction-auto-l
         */
        "actionsdirection": "column" | "row" | "auto";
        /**
          * Shows the alert and returns a promise with the users choice. *Important*: This method should not be called with the `showAlert` or `showConfirm` method in an alert's lifecycle.
          * @example method-show
         */
        "show": () => Promise<any>;
        /**
          * Shows a predefined alert with one confirmation button.  *Important*: This method should not be called with the `show` method in an alert's lifecycle.
          * @param title Title text.
          * @param body The content text below the title.
          * @param icon An icon name which is displayed over the title.
          * @param iconColor The icon color.
          * @param okLabel The label text of the confirmation button.
          * @example method-show-alert
         */
        "showAlert": (title: string, body: string, okLabel?: string, icon?: string, iconColor?: string) => Promise<any>;
        /**
          * Shows a predefined alert with two buttons. The right button confirms and the left button cancels the alert. The method returns a promise which resolves when the user interacts with one of the two options. The resolved promise contains `true` when the user confirms the alert and `false` when the user cancels the alert.  *Important*: This method should not be called with the `show` method in an alert's lifecycle.
          * @param title Title text.
          * @param body The content text below the title.
          * @param cancelLabel The label text of the left button (cancel).
          * @param confirmLabel The label text of the right button (confirm).
          * @param icon An icon name which is displayed over the title.
          * @param iconColor The icon color.
          * @param destructive Indicates whether the alert implies a destructive action when confirming (e.g. deletion of a resource).
          * @example method-show-confirm1
          * @example method-show-confirm2
         */
        "showConfirm": (title: string, body: string, cancelLabel: string, confirmLabel: string, icon?: string, iconColor?: string, destructive?: boolean) => Promise<boolean>;
        /**
          * Defines if the alert is visible or not.
          * @value true: Alert is visible.
          * @value false: Alert is not visible.
          * @example visible
         */
        "visible": boolean;
    }
    interface DsAlertButton {
        /**
          * Label color.
          * @value red: rot
          * @value gold: gold
         */
        "color": "gold" | "rot";
        /**
          * Indicates whether this button confirms the upper `<ds-alert>` element.
          * @value true: When typing 'Enter' this button is selected when no other element is in focus.
          * @value false: This button can only be interacted with by clicking or explicitly focusing the corresponding button in the upper `<ds-alert>` element.
         */
        "confirm": boolean;
        /**
          * Disables the interaction with the corresponding button of this element.
          * @value false: Button is interactable.
          * @value true: Button is disabled.
         */
        "disabled": boolean;
        /**
          * The label is displayed with a bold font.
          * @value true: Bold label font.
          * @value false: Default label font.
         */
        "highlight"?: boolean;
        /**
          * Button label.
          * @value string: Text
         */
        "label": string;
        /**
          * Extracts this element's properties into a complex javascript object.
         */
        "toAlertButtonData": () => Promise<AlertButtonData>;
        /**
          * Unique identifier of this component within a `<ds-alert>` element.
          * @value string: Identifier text.
         */
        "value": string;
    }
    interface DsAnnouncementBar {
    }
    interface DsApp {
    }
    interface DsBlink {
        "auto": boolean;
        "color": string;
        "time": number;
    }
    interface DsBorderedFormGroup {
        /**
          * The direction the elements are aligned.
          * @value row: Elements are displayed in a row
          * @value column: Elements are displayed in a column
          * @example column
          * @example row
         */
        "direction": "row" | "column";
        "errormessage"?: string;
        "requirementfulfilled": boolean;
        /**
          * The way how the component computes the width of the child elements.
          * @value parent: Fits the width of the parent element.
          * @value max-content: The largest child element defines the width.
          * @example size-parent
         */
        "size": "parent" | "max-content";
    }
    interface DsBorderedFormItem {
        "getContentWidth": () => Promise<number>;
    }
    interface DsButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
          * @example verschiedene-stile
         */
        "disabled": boolean;
        /**
          * Focuses this element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Defines the size of othe button.
          * @value medium: Medium button size
          * @value small: Small button size, optimized for usage in forms
          * @example size
          * @example verschiedene-stile
         */
        "size": "medium" | "small";
        /**
          * Modifies the button width behavior
          * @value false: Button width is determined by the button content
          * @value true: Button width is stretched to match the width of the host element.
         */
        "stretch": boolean;
        /**
          * Defines the visual representation of the button.
          * @value primary: Flat colored button to indicate an important action.
          * @value secondary: Outlined transparent button for less important actions.
          * @example type
          * @example verschiedene-stile
         */
        "type": "primary" | "secondary";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
          * @example unfocusable
         */
        "unfocusable": boolean;
    }
    interface DsButtonBar {
        /**
          * Specifies the direction in which the buttons get arranged.
          * @value row: Buttons get layouted from left to right.
          * @value column: Buttons get layouted from top to bottom.
          * @value auto: Button get layouted automatically.
          * @example column
          * @example row
         */
        "direction": "row" | "column" | "auto";
    }
    interface DsCalendar {
        "errormessage"?: string;
        /**
          * Define the maximal allow date.
         */
        "max"?: string;
        /**
          * Define the minimal allowed date.
         */
        "min"?: string;
        /**
          * Defines how a date can be selected.
          * @value "day-month-year": The month calendar view is the main view to select a date in. You can click on days within a month to select them.
          * @value "month-year": The year calendar view is the main view to select a date in. You can click on months within a year to select them.
          * @value "day-month": The month calendar view is the main view to select a date in. You can click on days within a month to select them. The year information is irrelevant in this mode. Selected date's years are always 0.
         */
        "mode": DateSelectionMode;
        /**
          * Whether we can select a range of two dates or only one date.
          * @value true: Two separate dates can be selected. All dates between them are highlighted.
          * @value false: Only one date can be selected at a time.
         */
        "rangeenabled": boolean;
        "value": string;
    }
    interface DsCard {
        /**
          * The component throws a shadow. It is used as a contrast to light backgrounds.
          * @value false: Card without shadow
          * @value true: Card with shadow
          * @example shadow
         */
        "shadow": boolean;
    }
    interface DsCardCollapsable {
        /**
          * Title within the Header. Not used when the `type` property equals `custom`
          * @value string: Text
         */
        "label": string;
        /**
          * The current collapse state.
          * @value false: The card is collapsed.
          * @value true: The card is unfolded.
          * @example open
          * @example close
         */
        "open": boolean;
        /**
          * Sets the theme of the `<ds-card-header>` element within this component.
          * @value arrow: Renders an arrow in the header which visualizes the current collapse state.
          * @value checkbox: Render a checkbox in the header which is checked whether the card is collapsed or not.
          * @value custom: Enables the feature to define a custom card header in the `header` slot.
          * @example arrow
          * @example checkbox
          * @example custom
         */
        "type": "checkbox" | "arrow" | "custom";
    }
    interface DsCardContent {
    }
    interface DsCardHeader {
    }
    interface DsCardImageHeader {
        /**
          * Specifies a path to the image file.
          * @value string: The path to the image file.
         */
        "url": string;
    }
    interface DsCardTabBar {
        /**
          * Displays the tab page which `name` property value corresponds to this property.
          * @value string: `name` of the `<ds-card-tabe-page>` to display.
          * @example complex
         */
        "show": string;
    }
    interface DsCardTabPage {
        /**
          * The text which is displayed in the tab.
          * @value string: The label
         */
        "label": string;
        /**
          * Unique identifier of this component within a `<ds-card-tab-bar>` element. The content will be visible when the corresponding `<ds-card-tab-bar>` element's `show` property value equals the `name`.  If no value is specified a random id will be generated.
          * @value string: Identifier
          * @example ohne-name
         */
        "name": string;
    }
    interface DsCenteredBoard {
        /**
          * Die maximale Anzahl an Spalten in die die einzelnen Reihen aufgespalten werden sollen.
          * @value number: Eine Zahl, die größer 0 sein muss.
         */
        "columns": number;
    }
    interface DsCenteredBoardItem {
    }
    interface DsChartSample {
        /**
          * The color of the corresponding chart segment.
          * @value string: The color code.
          * @important
         */
        "color": string;
        /**
          * Formatted representation of the value.
          * @value string: Formatted value.
         */
        "formattedValue"?: string;
        /**
          * Label of the data.
         */
        "label": string;
        /**
          * Maps the component into a JS object.
         */
        "toChartSample": () => Promise<ChartSample>;
        /**
          * Numeric representation of the data value.
          * @value number: The numeric representation.
         */
        "value": number;
    }
    interface DsCheckbox {
        /**
          * State of the Checkbox.
          * @value false: Checkbox is not checked.
          * @value true: Checkbox is checked.
          * @example checked
         */
        "checked": boolean;
        /**
          * Disables the interaction with the checkbox.
          * @value false: Checkbox is interactable.
          * @value true: Checkbox is disabled.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Färbt den Rahmen der Checkbox rot ein.
          * @value true: roter Rahmen
          * @value false: goldener Rahmen
          * @example error
         */
        "error": boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the checkbox.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Text, Label which is displayed next to the checkbox. If there is no `label` set, only the checkbox is displayed.
          * @important 
          * @value string: name of the option e.g. `Ausdruck gewünscht`
          * @example label
         */
        "label"?: string;
        /**
          * The checkbox will be in read-only state. Depending on the `checked`-state an icon icon is rendered.
          * @value false: Default visualization of the checkbox
          * @value true: Icon-representation of the `checked`-state
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this checkbox as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required": boolean;
        "requirementfulfilled": boolean;
    }
    interface DsColumn {
        /**
          * Gibt an, welche Ausrichtung die Elemente haben sollen.
          * @value string: left
          * @value string: center
          * @value string: right
          * @value string: stretch
          * @example example
         */
        "align": "left" | "center" | "right" | "stretch";
    }
    interface DsDateInput {
        /**
          * Indicates whether a calendar is shown when focusing this component.
          * @value true: The calendar is displayed when the date input is focused.
          * @value false: There is no calendar displayed when the date input is focused.
         */
        "calendarenabled": boolean;
        /**
          * Whether the input is interactable or not. The label and border are grey to indicate the disabled state.
          * @value false: Input is not disabled.
          * @value true: Input is disabled.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Displays the border of the input with a red color.
          * @value true: red border
          * @value false: default border
          * @example error
         */
        "error": boolean;
        /**
          * Text, which is displayed in a red popup at the bottom of the input field.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on the day-input element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Remotely triggered by parent date range component
         */
        "internalForceEmitChangeEvent": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Text, which is displayed on the top of the input field.
          * @important 
          * @value string: label text
          * @example label
         */
        "label"?: string;
        /**
          * Define the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "max"?: string;
        /**
          * Define the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "min"?: string;
        /**
          * Defines how a date can be selected or edited.
          * @value "day-month-year": The user can edit three input fields: day (TT), month (MM) and year (JJJJ). The calendar shows all three views (month, year and decade) for selecting a date.
          * @value "month-year": The user can edit two input fields: month (MM) and year (JJJJ). The calendar shows two views (year and decade) for selecting a month.
          * @value "day-month": The user can edit two input fields: day(TT) and month (MM). The calendar shows two views (month and year) for selecting a date.
          * @example mode
         */
        "mode": DateSelectionMode;
        /**
          * Whether the input is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this input as required.
          * @value false: Input is not required
          * @value true: Input is required
          * @example required
         */
        "required": boolean;
        /**
          * The current displayed date.
          * @important 
          * @value string: A date in following format: YYYY-MM-dd
          * @example value
         */
        "value": string;
    }
    interface DsDateRange {
        /**
          * Sets the focus on the first date input element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "min"?: string;
        /**
          * Defines how a date range can be selected or edited.
          * @value "day-month-year": The user can select a specific date range. The calendar shows all three views (month, year and decade) for selecting a date range.
          * @value "month-year": The user can select a month range. The calendar shows two views (year and decade) for selecting a month range.
          * @value "day-month": The user can select two possible dates within a year. The calendar shows two views (month and year) for selecting a date range.
         */
        "mode": DateSelectionMode;
        /**
          * The current displayed date range.
          * @important 
          * @value string: Two comma seperated dates in following format: YYYY-MM-dd (e.g.: 2021-01-01,2021-12-31)
          * @example value
         */
        "value": string;
    }
    interface DsDonutChart {
        /**
          * The distance between all segments.
          * @value number: The distance in pixels.
         */
        "offset"?: number;
        /**
          * The radius of the donut.
          * @value Number:
         */
        "radius"?: number;
        /**
          * Specifies the scale factor of selected segments.
          * @value number: The scaling factor of the selected segment.
         */
        "scale"?: number;
        /**
          * Specifies the width of the donut's segments.
          * @value number: The width of a segment.
         */
        "segmentwidth": number;
        /**
          * The starting angle of the first segment.
          * @value number: An angle between 0 and 360. e.g.: First segment starts... - 0: from the top (12 o'clock) - 90: from the right (3 o'clock) - 180: from the bottom (6 o'clock) - 270: from the left (9 o'clock)
         */
        "startangle": number;
    }
    interface DsDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Whether it is possible to select an option which is not present in the current option list.
          * @value false: The user can only select an option in the list.
          * @value true: The user is able to set a value which is not present in the option list by editing a text field under the selection input field.
          * @example elseoption
         */
        "elseoption": boolean;
        /**
          * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
          * @value string: Button label
          * @example elseoption
         */
        "elseoptionbuttonlabel"?: string;
        /**
          * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
          * @value string: Text input label.
          * @example elseoption
         */
        "elseoptioninputlabel"?: string;
        /**
          * Determines if the else-option input field is visible to the user. This property automatically changes on user interaction or providing a value that doesn't match any dropdown options.
          * @value false: Else-option input field is not displayed.
          * @value true: Else-option input field is displayed.
          * @example elseoption-selected
         */
        "elseoptionselected": boolean;
        /**
          * Indicates that an error exist within the input field. Colors the border in red.
          * @value true: An error exists.
          * @value false: There is no error.
          * @example error
         */
        "error": boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example value
         */
        "label"?: string;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder": string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition": "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required": boolean;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign": string;
        /**
          * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null. Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
          * @important 
          * @value string: The string value of the selected option.
          * @value object: The value of the selected option in case it's a complex type.
          * @value null: No option selected.
          * @example value
         */
        "value": StringOrObject;
    }
    interface DsDropdownOption {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
         */
        "icon"?: string;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
         */
        "label": string;
        /**
          * Text which is displayed below the label.
          * @value string: Text (e.g. description, information)
         */
        "secondarylabel": string;
        /**
          * Text which is displayed below the sublabel.
          * @value string: Text (e.g. description, information)
         */
        "tertiarylabel": string;
        "toOption": () => Promise<DropdownOption>;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example value
         */
        "value"?: StringOrObject1;
    }
    interface DsFmErgebnisuebersicht {
        /**
          * Dislpayed in the center of the chart.
          * @value number: e.g: contribution rate
          * @example example
         */
        "donutcenterlabel": string;
        /**
          * This label is located above the main contribution rate.
          * @value string: e.g: Jährlich
          * @example example
         */
        "donutlabel": string;
        /**
          * This label is located below the center label.
          * @value string: e.g: Jährlich
          * @example example
         */
        "donutsublabel": string;
        /**
          * Indicates whether the donut chart will be displayed or not.
          * @value true: The donut chart is displayed at the top of the component
          * @value false: The donut chart is not displayed.
          * @example donut-visible
         */
        "donutvisible": boolean;
        /**
          * Displays the name of the first column.
          * @value string: e.g: Aktuell
          * @example example
         */
        "firstcolumn": string;
        /**
          * Contains the information text for the first column. Automatically adds an `<ds-info>` to the column to display the information text.
          * @value string: A short description
          * @example example
         */
        "firstcolumninfo": string;
        /**
          * Headline for the first contribution rate. Located below the chart.
          * @value string: e.g:  Gesamtbeitrag Ø Monat
          * @example example
         */
        "firstcontributionlabel": string;
        /**
          * Displays the first contribution rate summary. Located below the chart.
          * @value string: 770€
          * @example example
         */
        "firstcontributionsublabel": string;
        /**
          * Displays the name of the second column.
          * @value string: e.g: Vollschutz
          * @example example
         */
        "secondcolumn": string;
        /**
          * Contains the information text for the second column. Automatically adds an `<ds-info>` to the column to display the information text.
          * @value string: A short description
          * @example example
         */
        "secondcolumninfo": string;
        /**
          * Headline for the second contribution rate. Located below the chart. This label is optional.
          * @value string: e.g: Gesamtbeitrag / Jahr
          * @example example
         */
        "secondcontributionlabel"?: string;
        /**
          * Displays the second contribution rate summary. Located below the chart.
          * @value string: e.g 9.240€
          * @example example
         */
        "secondcontributionsublabel": string;
    }
    interface DsFmErgebnisuebersichtItem {
        /**
          * Information text describing the first column. If set an info-button will be displayed next to the column label.
          * @value string: A short text describing this column.
         */
        "firstcolumninfo": string;
        /**
          * The value visible within the first column.
          * @value number: an amount.
         */
        "firstcolumnvalue": number;
        /**
          * Displays the label within the chart and the table.
          * @value string: e.g: Hausrat
         */
        "label": string;
        /**
          * Information text describing the second column. If set an info-button will be displayed next to the column label.
          * @value string:  A short text describing this column.
         */
        "secondcolumninfo": string;
        /**
          * The value shown in the second column. This value is optional. If no value is entered "unbekannt" will be displayed.
          * @value number: an amount.
         */
        "secondcolumnvalue": number;
        /**
          * Additional information below the label. Not visible within the chart.
          * @value string: e.g Anwartschaft.
         */
        "sublabel": string;
        "toErgebnisUebersichtItem": () => Promise<ErgebnisUebersichtItem>;
    }
    interface DsFmErgebnisuebersichtTable {
        /**
          * Label, displayed within the chart and the table.
          * @value string: e.g a product name
         */
        "label": string;
        "toErgebnisUebersichtTable": () => Promise<ErgebnisUebersichtTable>;
    }
    interface DsFooter {
        /**
          * Company informations (e.g: © 2019 Deutsche Vermögensberatung)
          * @value string: the information
          * @example company-info
         */
        "companyinfo": string;
        /**
          * Defines the visibility of "Impressum".
          * @value true: shows "Impressum".
          * @value false: hides "Impressum".
          * @example show-imprint
         */
        "showimprint": boolean;
        /**
          * Defines the visibility of "Nutzungsbedingungen".
          * @value true: shows "Nutzungsbedinungen".
          * @value false: hides "Nutzungsbedinungen".
          * @example show-terms-of-use
         */
        "showtermsofuse": boolean;
    }
    interface DsFormLayout {
        /**
          * Defines the size layout of the shown elements.
          * @value s: Small elements in a three column layout.
          * @value l: Medium-sized elements in a two column layout.
          * @value xl: A large element in a single column layout.
          * @example size-s
          * @example size-l
          * @example size-xl
         */
        "size": GridSize;
    }
    interface DsFullscreenSpinner {
    }
    interface DsFunctionIconButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Focuses this element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable": boolean;
    }
    interface DsGrid {
        /**
          * Art des Grids (Grad-Basis) die für dieses Grid verwendet wird.
          * @value page: Standard-Seiten-Grid
          * @example page-1
          * @example page-2
         */
        "base": string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Laptop-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "l"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Tablet-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "m"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Smartphone-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "s"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Desktop-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "xl"?: string;
    }
    interface DsGroupedTextInput {
        /**
          * Input is no longer operable. Label and frame are gray.
          * @value true: Input is disabled
          * @value false: Input ist not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Colors the frame of the input field red.
          * @value true: Red outline
          * @value false: Gray outline
          * @example error
         */
        "error": boolean;
        /**
          * Text displayed below the input field in a red dialog.
          * @value string: Errormessage
          * @example error
         */
        "errormessage"?: string;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label": string;
        /**
          * Define your mask using :  § Defines a character like a-zA-Z  \# Defines a number like 0-9  a-zA-Z0-9 in your pattern will render these characters as placeholders.  any non-word character will be used as 'delemiter'.  Example: `DE## #### #### #### #### ####` (German IBAN)
          * @value string: Pattern
          * @example german-iban
          * @example common-iban
         */
        "mask": string;
        /**
          * Input field is in readonly mode. The value of this input is displaey in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
         */
        "readonly": boolean;
        /**
          * Marks this form field as mandatory
          * @value false: Required form field (default)
          * @value true: Reguired form field
          * @example required
         */
        "required": boolean;
        /**
          * @important 
          * @value string: value of this input.
          * @example value
         */
        "value": string;
    }
    interface DsGrowBox {
        /**
          * Gibt an, ob nach dem Initialisieren der Box bereits animiert werden soll.
          * @value true: Sofern das `open`-Attribute den Wert `true` hat, animiert die Box auf seine berechnete Höhe.
          * @value false: Beim Initialisieren der Box wird keine Animation stattfinden.
          * @example animate-on-init
         */
        "animateoninit": boolean;
        /**
          * Gibt an, ob die Box offen oder geschlossen sein soll. Wenn dieser Wert geändert wird, animiert die Box automatisch auf die entsprechende Höhe.
          * @value true: Die Box animiert seine Höhe auf die Höhe seiner Kind-Elemente.
          * @value false: Die Box animiert seine Höhe auf den Wert 0.
          * @example open
         */
        "open": boolean;
        /**
          * Gibt an, ob die Kind-Elemente mitgeschoben werden, wenn sich die Box öffnet oder schließt.
          * @value true: Die Kind-Elemente werden nach oben bzw. unten geschoben, wenn sich der `open`-State der Box verändert.
          * @value false: Die Kind-Elemente bleiben immer an Ort und Stelle.
          * @example slide-content
         */
        "slidecontent"?: boolean;
    }
    interface DsHeader {
        /**
          * Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo).
          * @value default: Deutsche Vermögensberatung (Standardwert)
          * @value allfinanz: Deutsche Vermögensberatung Allfinanz
          * @example header-allfinanz
         */
        "brand": "default" | "allfinanz";
        /**
          * Whether the header is used within a fullscreen application or not.
          * @value true: The header content takes the full application width into consideration.
          * @value false: The header content has a defined maximal width of 1200 pixels.
          * @example fullscreen
         */
        "fullscreen": boolean;
    }
    interface DsHeaderAction {
        /**
          * Highlights this entry
          * @value true: Entry highlighted
          * @value false: Entry not highlighted
         */
        "highlight": boolean;
        /**
          * The label for this entry.
          * @value string: E.g: settings
         */
        "label": string;
        "toHeaderActionConfiguration": () => Promise<HeaderActionConfiguration>;
    }
    interface DsHeaderActionList {
        /**
          * Label for the menu.
          * @value string: E.g: Settings
         */
        "label": string;
        /**
          * Opens and closes the menu.
          * @value true: Menu is open
          * @value false: Menu is closed
         */
        "open": boolean;
        "toHeaderActionListConfiguration": () => Promise<HeaderActionListConfiguration>;
    }
    interface DsHeaderCustomer {
        /**
          * Customer name
          * @value string: first name and last name
         */
        "name": string;
        "toHeaderCustomerConfiguration": () => Promise<HeaderCustomerConfiguration>;
        /**
          * The type of the customer e.g: Kunde
          * @value string: The type of the customer
         */
        "typelabel": string;
    }
    interface DsHeaderUser {
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
         */
        "imageurl"?: string;
        /**
          * Name des Benutzers.
          * @value string: Vor- und Nachname
         */
        "name": string;
        "toHeaderUserConfiguration": () => Promise<HeaderUserConfiguration>;
        /**
          * Determines whether the user name within the user menu is interactable.
          * @value true: The user name is interactable. The `usernameInteraction` event is thrown on interaction.
          * @value false: The user name is not interactable.
         */
        "usernameinteractable": boolean;
    }
    interface DsHeroImage {
        /**
          * Url for the picture that should be displayed.
          * @value string: Image-url
          * @example example
         */
        "url": string;
    }
    interface DsHr {
    }
    interface DsIcon {
        /**
          * Overrides the color of an icon. By default the `gold` color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example alle-icons
         */
        "icon": string;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<ds-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example groessen
          * @example icon-in-kombination-mit-button
         */
        "size": number;
    }
    interface DsIconAchtung {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAchtungcircle {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAddonclearbutton {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAktivitaeten {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAktualisieren {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAnleger {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconArbeitsplatz {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconArbeitsweg {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAuge {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAugedurchgestrichen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAusgehen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAusweis {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconAusweischeck {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconBank {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconBearbeiten {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconBeratungbeenden {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconBueroklammer {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconButton {
        /**
          * Defines the alignment of elements within the button.
          * @value row: Content elements are layouted from left to right.
          * @value column: Content elments are layouted from top to bottom.
          * @example align
         */
        "align": "row" | "column";
        /**
          * Sets the background color.
          * @value hellgrau-4: Button uses a light grey background (default value).
          * @value weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background.
          * @example backgroundcolor
         */
        "backgroundcolor": "weiss" | "hellgrau-4";
        /**
          * Sets the color of the button.
          * @value gold: Gold color (default value)
          * @value rot: Special case for destructive actions
          * @example color
         */
        "color": "gold" | "rot";
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Focuses this element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Defines the size of othe button.
          * @value medium: Medium button size
          * @value small: Small button size, optimized for usage in forms
          * @example size
         */
        "size": "medium" | "small";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable": boolean;
    }
    interface DsIconCheck {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconCollapseclose {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconCollapseopen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconDislike {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconDokumenteupload {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconDownload {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconDropdown {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconEinkaufen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconEinstellungen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconEurozeichen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFaq {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFavoritfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFavoritoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFilter {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFormulare {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFormulareinitial {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFotogalerie {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconFotogalerierahmen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGartenarbeit {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGeld {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGesundheit {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGesundheit2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGlas {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGlas2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconGlocke {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHamburgermenue {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHauptdokument {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHausarbeit {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHausrat {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHausratreise {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconHome {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconInfo {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconInvestment {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon10 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon100 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon105 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon110 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon115 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon120 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon125 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon15 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon20 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon25 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon30 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon35 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon40 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon45 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon5 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon50 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon55 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon60 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon65 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon70 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon75 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon80 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon85 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon90 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconJubilaeumicon95 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconKalender {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconKamera {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconKameravideo {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconKfz {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconLike {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconLiquiditaet {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconListenpfeil {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconLoeschen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconLupevergroessern {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconLupeverkleinern {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconMail {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconMensch {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconMinus {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconMoremenue {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconNeu {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconNeukreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconOrdner {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPfeilnaechsteseingabefeld {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPfeilnaechstespflichtfeld {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPfeilvorherigeseingabefeld {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPfeilvorherigespflichtfeld {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPrivathaftpflicht {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconPrivathaftpflicht2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconProzent {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconRechtschutz {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconRechtschutz2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconReisen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconReparatur {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconScheine {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSchliessendialog {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSchliesseninput {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSchliessenkreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSchlossgesperrt {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSchlossoffen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenanzeigeganzeseite {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenanzeigevollebreite {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenleisteoffen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenleisteoffenfehlermeldung {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenleistezu {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSeitenleistezufehlermeldung {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconServices {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSortieren {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSortieren2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSortierenabsteigend {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSortierenaufsteigend {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSparen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSport {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconStrassenverkehr {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSuccess {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconSuchen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconTelefon {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUebermitteln {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUebermittelnfehlgeschlagen {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUndo {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUnfall {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUnfall2 {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUnterschreiben {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconUpload {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconVersicherung {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconWohngebaeude {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconZusatzdokument {
        /**
          * Size
         */
        "size": number;
    }
    interface DsIconZusatzfotodokument {
        /**
          * Size
         */
        "size": number;
    }
    interface DsInfo {
        /**
          * Hide the Infobutton
          * @value true: Infobutton hidden
          * @value false: Infobutton visible
          * @example hidebutton
         */
        "hidebutton": boolean;
        /**
          * Manually controls the visiblity of the popup that contains the explaination text.
          * @value false: Popup is not visible.
          * @value true: Popup is visible.
          * @example popupvisible
         */
        "popupvisible": boolean;
        /**
          * Sets a modal for the info-I  Should not be used with the modal-slot. The slotted modal is more important.
          * @example remote-modal
         */
        "setModal": (modal: HTMLDsModalElement) => Promise<void>;
        /**
          * Defines which width the info element takes
          * @value string: max-width
          * @value string: content
          * @important
         */
        "size": "max-width" | "content";
    }
    interface DsInputLabel {
        /**
          * Aligns the label to the right. USed for ds-date-input
         */
        "alignRight": boolean;
        /**
          * If the label should be in an disabled state.
         */
        "disabled": boolean;
        /**
          * Defines if the sync icon should be displayed.
         */
        "kisynced": boolean;
        /**
          * The text that will be showed on top of a input.
         */
        "label": string;
    }
    interface DsLink {
        /**
          * Specifies where to open the linked document. This is delegated to the underlying `<a>` element. For more information: https://www.w3schools.com/tags/att_a_target.asp
          * @value string: value delegated to target element
         */
        "target"?: "_blank" | "_self" | "_parent" | "_top" | string;
        /**
          * The URL of the page the link goes to. If undefined the component serves as a button.
          * @value string: The URL or anchor the link refers to.
         */
        "url": string;
    }
    interface DsLogo {
        /**
          * Provides the logo in different styles.
          * @value bildmarke: DVAG-Logo without word mark.
          * @value wortmarke: DVAG-Logo with word-mark.
          * @value wortmarke-allfinanz: DVAG-Logo with `Allfinanz` word mark.
          * @example logo
         */
        "type": string;
    }
    interface DsLogoBildmarke {
    }
    interface DsLogoWortmarke {
    }
    interface DsLogoWortmarkeAllfinanz {
    }
    interface DsModal {
        /**
          * Defines whether a click outside the modal will close the modal or not.
          * @value true: A click on the background causes the modal to close.
          * @value false: A click on the background does nothing.
          * @example allow-background-close
         */
        "allowbackgroundclose": boolean;
        /**
          * Hintergrundfarbe für den Content-Bereich
          * @value weiss: weißer Hintergrund
          * @value grau: gräulicher Hintergrund
          * @example contentcolor
         */
        "contentcolor": "weiss" | "grau";
        /**
          * Titel, der oben im Modal angezeigt wird.
          * @value string: der Titel
         */
        "label": string;
        /**
          * Die Modale-Dialog-Komponente kann entweder im Vollbild angezeigt werden, oder der Dialog passt sich der Größe des Inhalts an.
          * @value fullscreen: Vollbild
          * @value content: Angepasst an die Größe des Inhalts
         */
        "size": "fullscreen" | "content";
        /**
          * Steuert die Sichtbarkeit des Modals.
          * @value true: Modal geöffnet
          * @value false: Modal geschlossen
         */
        "visible": boolean;
    }
    interface DsNavigatedContent {
    }
    interface DsNavigatedContentMenu {
        /**
          * Description of the path of active menus.
          * @value string: Path e.g. `"Toplevel"` or `"Toplevel/sublevel"`
         */
        "active": string;
    }
    interface DsNavigatedContentMenuItem {
        /**
          * Attaches an error-marker.
          * @value true: Error-marker displayed.
          * @value false: No error-marker displayed.
         */
        "error": boolean;
        /**
          * Visible label of this entry.
          * @value string: description.
         */
        "label": string;
        /**
          * Attaches a success-marker.
          * @value true: Marker displayed.
          * @value false: No Marker displayed.
         */
        "success": boolean;
        "toMenuItemModel": () => Promise<MenuItemModel>;
        /**
          * Internal representation of this item which is used for the active path of this Entry.
          * @value string: Internal representation
         */
        "value": string;
        /**
          * Attaches an warn-marker.
          * @value true: Marker displayed.
          * @value false: No Marker displayed.
         */
        "warning": boolean;
    }
    interface DsNotificationToast {
        /**
          * Specifies the time in seconds the notification is visible before it's closed automatically.
          * @value number: A time in seconds. Any number below zero is considered as infinite.
          * @value undefined The notification stays visible until it's closed by clicking on the close button on the top right corner.
          * @example close-after
         */
        "closeafter": number;
        /**
          * The icon which is rendered at the left side of the notification.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * Text under the content. (e.g. for displaying error codes)
          * @value string: Displayed text under the content.
          * @example sub-content
         */
        "subcontent"?: string;
        /**
          * The title of the notification.
          * @value string: The title.
          * @example default
         */
        "titlestring": string;
        /**
          * Specifies the visibility. If the notification closes automatically or by clicking on the close button this attribute will be set to false.
          * @value true: Toast will be displayed under the header.
          * @value false: Toast is invisible.
          * @example default
         */
        "visible": boolean;
    }
    interface DsNumberInput {
        /**
          * Input is not interactable. Label and border are grey.
          * @value true: Input is disabled.
          * @value false: Input is not disabled.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Colors the border of the element red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error": boolean;
        /**
          * Text under the input field, that is shown in a red dialog.
          * @value string: Errormessage.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the tab-focus to the form element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Text on top of the input field.
          * @important 
          * @value string: description e.g `Vorname`
          * @example value
         */
        "label"?: string;
        /**
          * Determines the amount of pre-decimal numbers. The element prevents all inputs higher than this value.
          * @value number: Maximum amount of pre-decimal numbers.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * Determines the maximum value. The maximum value is **within** the possible input.
          * @value number: The maximum value the input field can have.
         */
        "max": number;
        /**
          * Determines the minimal value. The minimal value is **within** the possible input.
          * @value number: The minimal value the input field can have.
         */
        "min": number;
        /**
          * Placeholder that is shown, when the input is empty.
          * @value string: Placeholder.
          * @example custom
         */
        "placeholder"?: string;
        /**
          * Determines the amount of decimal numbers.
          * @value number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)
          * @example custom
         */
        "precision"?: number;
        /**
          * Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision` `placeholder` or `uniticon`
          * @value currency-euro: Euro
          * @value percent: percent value
          * @example profile
         */
        "profile"?: "currency-euro" | "percent";
        /**
          * Input is in read only mode. The content of the input is displayed in a simple way. The input is not interactable.
          * @value false: Formfield.
          * @value true: Text of the value.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks the formfield as mandatory.
          * @value false: Not mandatory (default).
          * @value true: Mandatory.
          * @example required
         */
        "required": boolean;
        /**
          * Controls the visualization of the pre-deciaml thousandseparator.
          * @value true: Usses thousandseparator (default).
          * @value false: No grouping.
          * @example thousandseparator
         */
        "thousandseparator"?: boolean;
        /**
          * Sets the icon for the unit.
          * @value string: Name of the icon.
          * @example custom
         */
        "uniticon"?: string;
        /**
          * Value of the input field.
          * @important 
          * @value string: Value of the input.
          * @example value
         */
        "value": number;
    }
    interface DsPage {
    }
    interface DsPaginator {
        /**
          * Die Anzahl an Seiten, die angezeigt werden sollen.
          * @value number: Der Wert der letzte Seite.
          * @example count
         */
        "count": number;
        /**
          * Die Seite, die beim Initialisieren ausgewählt sein soll.
          * @value number: Die initiale Seite. Dieser Wert ändert sich während der Laufzeit abhängig von der aktuell ausgewählten Seite.
          * @example current
         */
        "current": number;
        /**
          * Gibt an wie viele Seiten links und rechts von der aktuellen Seite angezeigt werden sollen.
          * @value number: Die Anzahl an Seiten links und rechts der aktuellen Seite.
          * @example range
         */
        "range": number;
    }
    interface DsPlaceholder {
        /**
          * Zeigt eine Box an.
          * @value boolean: Box anzeigen
          * @example box
         */
        "box"?: boolean;
        /**
          * Zeigt eine Card an.
          * @value boolean: Card anzeigen
          * @example card
         */
        "card"?: boolean;
    }
    interface DsRadioButton {
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example modes
         */
        "disabled": boolean;
        /**
          * Sets the error state on the group.
          * @value true: An error exists.
          * @value false: No error exists.
         */
        "error": boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @important
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this component.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        "internalSetChecked": (checked: boolean) => Promise<void>;
        /**
          * Text, which is displayed next to the radio button.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Identifier of this option. When selected this value overwrites the `<ds-radio-button-group>`'s value.
          * @value string: The identifier of this option.
          * @example value
         */
        "value": string;
    }
    interface DsRadioButtonGroup {
        /**
          * Disables the ability to interact with this component. Every option inside will also be set to `disabled`.
          * @value false: User can select an option.
          * @value true: User cannot select an option.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Sets the error state on the group.
          * @value true: An error exists.
          * @value false: No error exists.
          * @example error
         */
        "error": boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on the radio group.  If an option is selected it will be focused. If no option is selected the first option will be focused.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        "radiogroupid": string;
        /**
          * Defines if the group is in a read-only state. The label of the current selected radio button will be displayed.
          * @value false: The component is displayed normally.
          * @value true: The current selected option is displayed as text. If no option is selected no text will be displayed.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Defines if the radio button group is a required form element.
          * @value false: It is not required to select an option.
          * @value true: To fulfill the requirement one option has to be selected.
          * @example required
         */
        "required": boolean;
        "select": (value: string) => Promise<void>;
        /**
          * This property mirrors the current selected option. If set, an inner radio button with the same `value` has to exist.
          * @value string: The value of an inner radio button.
          * @example value
          * @example read-value
          * @example write-value
         */
        "value": string;
    }
    interface DsRequiredHint {
        "fulfilled": boolean;
        "required": boolean;
    }
    interface DsScrollContainer {
        "horizontalscrollbarposition": "top" | "bottom";
        "minthumbsize": number;
        "scrollbarborderradius": number;
        "scrollbarcolorfactor": number;
        "scrollbarmargin": number;
        "scrollbaroffset": number;
        "scrollbaropacity": number;
        "scrollbarspace": number;
        "scrollbarwidth": number;
        "thumbcolor": string;
        "thumbmargin": number;
        "thumbopacity": number;
        "thumbwidth": number;
        "verticalscrollbarposition": "left" | "right";
    }
    interface DsSearch {
        /**
          * Component will call the browsers `scrollIntoView()` method on the form component after each search request. So the user can easily see the popup to choose from.
          * @value true: Component will scroll popup list into view.
          * @value false: Component won't touch scrolling at all.
          * @example autoscrollintoview
         */
        "autoscrollintoview": boolean;
        /**
          * Focuses this search.
         */
        "focusControl": () => Promise<void>;
        /**
          * Specifies the text that will be shown when there are no search results.
          * @value string: Text which will be displayed.
          * @example no-results-text
         */
        "noresultstext": string;
        /**
          * Specifies the placeholder text of this component.
          * @value string: Text used as the placeholder.
         */
        "placeholder": string;
        /**
          * Specifies the search term.
          * @value string: Search term
         */
        "value": string;
        /**
          * Specifies how many entries are visible when the popup is open.
          * @value number: a number like 2.5 or 4.5
          * @example example
         */
        "visibleentries": number;
    }
    interface DsSlider {
        /**
          * Text on top of the slider, that displays the current value. A dollarsign followed by a number represents the value of the slider. The amount of numbers determines the amount of decimal numbers.
          * @value string: Formatting of the slider value, e.g. `$1 %` or `$2 €`
          * @example formattedvalue
         */
        "formattedvalue": string;
        /**
          * Text under the slider.
          * @important 
          * @value string: Text, e.g. `Zinsatz`
          * @example label
         */
        "label"?: string;
        /**
          * Maximum value of the range, the slider can have.
          * @value number: Maximum value of the slider.
          * @example min-max-value
         */
        "max": number;
        /**
          * Minimal value of the range, the slider can have.
          * @value number: Minimal value of the slider.
          * @example min-max-value
         */
        "min": number;
        /**
          * Switches the input to the read-only mode. The value of the element is shown in a simple way. The element is not usable anymore.
          * @value false: Formfield
          * @value true: Value as text
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Size of the Steps, the values can be selected.
          * @value number: Minimal possible change.
          * @example step
         */
        "step": number;
        /**
          * Current value of the slider.
          * @value number: Current value
          * @example min-max-value
         */
        "value": number;
    }
    interface DsSpinner {
        /**
          * @value number: The duration of one spin.
         */
        "animationduration": number;
        /**
          * @value number: Number of segments.
         */
        "segments": number;
        /**
          * Specififes the size of the spinner.
          * @value small: Spinner has a size of 16px.
          * @value medium: Spinner has a size of 32px.
          * @value large: Spinner has a size of 72px.
          * @example size
         */
        "size": "small" | "medium" | "large";
        /**
          * Displays the spinner in a light or dark theme.
          * @value light: The segments have a dark tone to contrast a light background.
          * @value dark: The segments have a light tone to contrast a dark background.
          * @example theme
         */
        "theme": "light" | "dark";
    }
    interface DsTable {
        /**
          * Defines the column that is used for initially sorting the table.
          * @value string: The `columnId` or `label` of the column.
          * @example initial-sort
         */
        "initialsort"?: string;
        /**
          * Specifies the initial sort direction.
          * @value asc: Ascending order.
          * @value desc: Descending order.
          * @example initial-sort
         */
        "initialsortdirection": "asc" | "desc";
        "invokeSort": (element: HTMLDsTableHeaderItemElement, reverse: boolean) => Promise<void>;
        /**
          * Specifies whether the table is self-managed or remote-controlled.
          * @value managed: The table is responsible for sorting and pagination.
          * @value remote: The table relies on an external implementation for creating rows, sorting and pagination using the `tableStateChanged` event.
          * @example remote
          * @example remote-complex
         */
        "mode": "managed" | "remote";
        /**
          * The initially selected option for the page size. It only has an effect if the `view` attribute supports pagination.
          * @value number: Number of rows per page.
          * @example paginator
         */
        "pagesize": number;
        /**
          * Defines the options for the page size that a user can pick from. It only has an effect if the `view` attribute supports pagination.
          * @value string: Comma seperated list of numbers (e.g: [25,50,100]).
          * @example paginator
         */
        "pagesizes": string;
        /**
          * The data length this table should visualize. In case the table manages itself this attribute should not be set. If the table is remote-controlled this attribute has to be set because the table needs to know the exact amount of data to visualize the **paging** accordingly.
          * @example remote
          * @example remote-complex
         */
        "rowcount": number;
        /**
          * Specifies if the table should be scrollable. It is necessary to ensure that every `<ds-header-item>` has the width property set.
          * @value true: Table is scrollable.
          * @value false: Table is not scrollable.
          * @example scrollable
         */
        "scrollable": boolean;
        /**
          * **Warning: This feature is highly experimental.**  Enables the selection of rows. A `key` for every row has to be specified.
          * @value true: The selection-group will be opened.
          * @value false: The selection-group will be closed.
          * @example selection
         */
        "selectionenabled": boolean;
        /**
          * **Warning: This feature is highly experimental.**  Specifies if only one or multiple rows can be selected.
          * @value multi: Multiple rows can be selected.
          * @value single: One row can be selected at a time.
          * @example selection-mode
         */
        "selectionmode": "multi" | "single";
        /**
          * Defines the style of this table.
          * @value default: Default table
          * @value paginated-card: Table within a card with pagination.
          * @value paginated-card-shadow: Table within a shadowed card with pagination.
          * @example paginator
         */
        "view": "default" | "paginated-card" | "paginated-card-shadow";
    }
    interface DsTableCell {
        /**
          * The background color.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
         */
        "color": string;
        "obtainSettings": (settings: ColumnSettings) => Promise<void>;
        /**
          * The type of this cell. If not explicity set the cell inherits the type by the corresponding `<ds-table-header-item>`.
          * @value text: The `value` is a string which will be rendered as text. It is defaultly left aligned.
          * @value numeric: The `value` is a number which will be rendered as text. It is defaultly right aligned.
          * @value date:  The `value` is a string ('YYYY-mm-dd') which will be formatted as a date string. It is defaultly left aligned.
          * @value currency: The `value` is a number which will be formatted as a currency string (e.g: 1.120,00 €). The currency itself is rendered as an icon. It is defaultly right aligned.
          * @value html: The default slot will be rendered in place of the `value`.
         */
        "type": string;
        /**
          * The value of this cell. It will be formatted depending the cell `type`.
          * @value string: Ein beliebiger Wert
         */
        "value"?: string;
    }
    interface DsTableFooter {
    }
    interface DsTableHeader {
    }
    interface DsTableHeaderItem {
        /**
          * The alignment of the title text and the cell contents within this column. **Warning:** The default alignment which is defined by the `type` property will be overriden.
          * @value left: Child elements are left-aligned.
          * @value right: Child elements right-aligned.
          * @value center: Child elements are centered.
         */
        "align"?: "left" | "right" | "center";
        /**
          * This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property.. Otherwise the `label` property will be send.
          * @value string: An unique identifikation for this column.
         */
        "columnid"?: string;
        /**
          * Declare your own sorting function for this column. This enables you to sort your own objects.
          * @value function: The sort function.
         */
        "customSort": (
    firstCell: HTMLDsTableCellElement,
    secondCell: HTMLDsTableCellElement
  ) => number;
        /**
          * The title text of this column. This value represents the column identificator if there is no `columnid` specified.
          * @value string: The title text.
         */
        "label"?: string;
        /**
          * Specifies the number of rows within an column.
          * @value s: Table cells have only 1 text row
          * @value m: Table cells have up to 2 text rows.
          * @value l: Table cell have up to 3 text rows.
         */
        "linesize": "s" | "m" | "l";
        /**
          * Define the maximum width of the table in pixels.
          * @value number: The maximal width in pixels.
         */
        "maxwidth"?: number;
        /**
          * Define the minimal width of the table in pixels.
          * @value number: The minimal width in pixels.
         */
        "minwidth"?: number;
        "setSortDirection": (state: SortDirection) => Promise<void>;
        /**
          * Allows the table to sort this column.
          * @value true: The column is sortable.
          * @value false: The column is not sortable.
         */
        "sortable": boolean;
        /**
          * Specifies the priority of this column which is considered in the table's secondary sorting.
          * @value number: Priority. The lower this number the higher the chance this column will be considered first in the secondary sorting of the table.
         */
        "sortpriority"?: number;
        "toColumnSettings": () => Promise<ColumnSettings>;
        /**
          * Defines a type for the whole column.
          * @value text: Renders the provided `value` property of an `<ds-table-cell>` as a left aligned text.
          * @value numeric: Renders the provided `number` value of an `<ds-table-cell>` as a right aligned text.
          * @value date: Renders the provided string ('YYYY-mm-dd') of an `<ds-table-cell>` as a left aligned text.
          * @value currency: Renders the provided `number` of an `<ds-table-cell>` as right aligned text with attached currency icon.
          * @value html: Renders the provided html elements.
         */
        "type": ColumnType;
        "usemaxwidth": boolean;
    }
    interface DsTablePageSizePicker {
        /**
          * Einstellbare Anzahl der Einträge, die vom Benutzer gleichzeitig sichtbar gemacht werden können.
          * @value ArrayString: Komma separierte Zahlen in der Array-Schreibweise z.B: [25,50,100]
         */
        "pagesizes": ArrayString;
        /**
          * Der vorausgewählte Seiten-Wert. Dieser muss innerhalb, des, in `pagesizes` definierten, Arrays liegen.
          * @value : Eine Zahl, die einen Wert im `pagesizes`-Array widerspiegelt.
         */
        "value": number;
    }
    interface DsTableRow {
        /**
          * A unique identifier for the data this row displays in a table.
          * @value string: Unique identifier
         */
        "rowid": string;
        /**
          * Selects this row. If true the row will be selected and the table's selection will be enabled.
          * @value true: Row is selected.
          * @value false: Row is not selected.
          * @example selection
         */
        "selected": boolean;
        "visible": boolean;
    }
    interface DsText {
        /**
          * Defines the text color.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Specifies the responsiveness strategy.
          * @value auto: Text size is automatically determined by evaluating the device screen size.
          * @value small: Use text size for small device screens.
          * @value large: Use text size for large device screens.
         */
        "screensize": "small" | "large" | "auto";
        /**
          * Specifies the style of the text.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
          * @value Ueberschrift-1: Shortcut for `u1`
          * @value Ueberschrift-2: Shortcut for `u2`
          * @value Ueberschrift-3: Shortcut for `u3`
          * @value Ueberschrift-4: Shortcut for `u4`
          * @value Ueberschrift-5: Shortcut for `u5`
          * @value Kapitelueberschrift: Shortcut for `ku`
          * @value Fliesstext-Standard: Shortcut for `ft`
          * @value Fliesstext-Fett: Shortcut for `ftf`
          * @value Fliesstext-Gross: Shortcut for `ftg`
          * @value Infotext-Standard: Shortcut for `it`
          * @value Infotext-Klein: Shortcut for `itk`
          * @important 
          * @example textstile
          * @example textstile-abkuerzungen
         */
        "type": string;
    }
    interface DsTextArea {
        /**
          * Textarea is disabled and cannot be used anymore. Label and border are grey.
          * @value true: Textarea is disabled
          * @value false: Textarea is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Colors the border of the textarea red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error": boolean;
        /**
          * Text that is shown under the textarea in a red dialog.
          * @value string: Errormessage
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus to the textarea.
         */
        "focusControl": () => Promise<void>;
        /**
          * Label shown above the textarea.
          * @value string: Label e.g `Notizen`
          * @important 
          * @example label
         */
        "label"?: string;
        /**
          * Number of lines shown simultaneously.
          * @value number: Number of lines.
          * @example lines
         */
        "lines": number;
        /**
          * Maximum number of characters.
          * @value number: Number of characters
          * @example maxlength
         */
        "maxlength"?: number;
        /**
          * Textarea is in read-only mode. Content of the textare is displayed in a simple way.
          * @value false: Formfield
          * @value true: Shows the content only as text.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks the textarea as mandatory.
          * @value false: Not mandatory (Default).
          * @value true: mandatory field.
          * @example required
          * @example required-maxlength
         */
        "required": boolean;
        /**
          * Text of the textarea.
          * @important 
          * @value string: Content of the textarea.
          * @example value
         */
        "value": string;
    }
    interface DsTextButton {
        /**
          * Sets the color of the button.
          * @value gold: Gold color (default value)
          * @value rot: Special case for destructive actions
          * @example color
         */
        "color": "gold" | "rot";
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Focuses this element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Specifies the responsiveness strategy.
          * @value auto: Text size is automatically determined by evaluating the device screen size.
          * @value small: Use text size for small device screens.
          * @value large: Use text size for large device screens.
          * @example screensize
         */
        "screensize": "small" | "large" | "auto";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable": boolean;
    }
    interface DsTextInput {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Input has a red outline.
          * @value true: red outlined.
          * @value false: gray outlined.
          * @example error
         */
        "error": boolean;
        /**
          * Text, which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Focuses this input field.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limitlength
         */
        "limitlength"?: number;
        /**
          * Assists the user with a masking. The mask is defined as a pattern. The character `X` represents an alphanumeric character and `0` represents numerals. The user can only enter characters that are marked with `X` and `0`. All other delimiters will be replaced automatically by the text input. The delimiters will be removed, when the content is get programmatic.  Beispiel: `XX00 0000 0000 0000 0000 00` (Deutsche IBAN)
          * @value string: Pattern for the mask.
          * @example mask
          * @example mask-iban
          * @example mask-complex
         */
        "mask"?: string;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
         */
        "placeholder": string;
        /**
          * Input field is in readonly mode. The value of this input is displaey in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Input is marked as required. And the user needs to fulfill the input's requirements.
          * @value true: Input field is required and draws a yellow outline and displays an icon beneath the input.
          * @value false: Input field is not required.
          * @example required
         */
        "required": boolean;
        /**
          * The value of this input.
          * @important 
          * @value string: value of this input.
          * @example value
         */
        "value": string;
    }
    interface DsTextList {
        /**
          * Defines the style of the text, that is propagated to the `<ds-text>` child elements, if they have `type` attribute set to `"auto"`.
          * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
          * @value Ueberschrift-1: Shortcut for `u1`
          * @value Ueberschrift-2: Shortcut for `u2`
          * @value Ueberschrift-3: Shortcut for `u3`
          * @value Ueberschrift-4: Shortcut for `u4`
          * @value Ueberschrift-5: Shortcut for `u5`
          * @value Kapitelueberschrift: Shortcut for `ku`
          * @value Fliesstext-Standard: Shortcut for `ft`
          * @value Fliesstext-Fett: Shortcut for `ftf`
          * @value Fliesstext-Gross: Shortcut for `ftg`
          * @value Infotext-Standard: Shortcut for `it`
          * @value Infotext-Klein: Shortcut for `itk`
          * @important 
          * @example type
         */
        "type": string;
    }
    interface DsUserAvatar {
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
          * @important 
          * @example image
         */
        "imageurl"?: string;
        /**
          * Initialen des Nutzers
          * @value string: Initialen, z.B. `"FG"`
          * @important 
          * @example initials
         */
        "initials"?: string;
        /**
          * Größe des Nutzer-Avatars
          * @value header: Für die Nutzung im Header verwendete Größe (32px)
          * @value content-s: Für die Nutzung innerhalb von Content (48px)
          * @value content-m: Für die Nutzung innerhalb von Content (64px)
          * @value content-l: Für die Nutzung innerhalb von Content (72px)
          * @value content-xl: Für die Nutzung innerhalb von Content (144px)
         */
        "size": UserAvatarSize;
    }
    interface DsWorkflowProgress {
        "progress": number;
    }
    interface DsWrappedLayout {
        /**
          * Ausrichtung von Elementen, wenn eine Reihe auf Grund der Anzahl an Elementen nicht vervollständigt werden kann.
          * @value left: Linksbündig
          * @value center: Zentriert
          * @value right: Rechtsbündig
          * @example align-left
          * @example align-center
          * @example align-right
         */
        "align": "left" | "center" | "right";
        /**
          * Legt die Größe der Elemente fest.  Je kleiner die Elementgröße festgelegt wird, desto mehr Elemente werden in einer Reihe angezeigt.
          * @value xs: Sehr klein
          * @value s: Klein
          * @value m: Normal
          * @value l: Groß
          * @value xl: Sehr groß
          * @example sizes
         */
        "size": "xs" | "s" | "m" | "l" | "xl";
    }
    interface DsYesNo {
        /**
          * Deactivates the Radio-Button.
          * @value false: The Radio-Button is interactable.
          * @value true: The Radio-Button is deactivated.
          * @example value-disabled
         */
        "disabled": boolean;
        /**
          * Colors the border of the element red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error": boolean;
        /**
          * Text under the element showed in a red dialog.
          * @value string: Errormessage.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the tab-focus to the element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * The yes/no component is in read-only mode. A text is rendered that shown the `label`-value of the selected Radio-Button.
          * @value false: Default mode.
          * @value true: Text of the `value`-attribute is shown.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks the element as mandarory.
          * @value false: Not mandatory. (Default)
          * @value true: Mandatory field.
          * @example required
         */
        "required": boolean;
        /**
          * How the width of the child elements is determined.
          * @value parent: The Parent element determines the width.
          * @value max-content: The widest child element determines the width of all child elements.
          * @example size-parent
         */
        "size": "parent" | "max-content";
        /**
          * State of the yes/no-selection
          * @value "yes": yes is selected
          * @value "no": no is selected
          * @value "unset": nothing is selected
          * @example value
         */
        "value": "yes" | "no" | "unset";
    }
    interface DxAccordion {
        /**
          * The text which is displayed within the header.
          * @value string: The title text.
          * @example label
         */
        "label": string;
        /**
          * Defines whether the content is visible or not.
          * @value true: The content below the header is visible.
          * @value false: The content below the header is not displayed.
          * @example open
         */
        "open": boolean;
    }
    interface DxAccordionGroup {
    }
    interface DxAlert {
        /**
          * Defines in which direction the buttons should be displayed.
          * @value column: The buttons will be displayed from left to right.
          * @value row: The buttons will be displayed from top to bottom.
          * @example actions-direction-row
          * @example actions-direction-column
          * @default "column"
         */
        "actionsdirection": ActionLayoutDirection;
        /**
          * The content of the dialog.
          * @value string: The content which is displayed below the title.
          * @example content
         */
        "content"?: string;
        /**
          * Specifies the icon which will be shown above the text.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The sublabel of the dialog which can be used for e.g. error codes.
          * @value string: The sublabel.
          * @example sublabel
         */
        "sublabel"?: string;
        /**
          * The title of the dialog.
          * @value string: The title.
          * @example titlestring
         */
        "titlestring": string;
        /**
          * Defines the visual representation of the button.
          * @value default: Shows the titlestring and icon in a dark color.
          * @value error: Shows the titlestring and icon in a red color to imply an error.
          * @example type-error
          * @example type-default
         */
        "type": AlertType;
        /**
          * Defines the visibility of the alert.
          * @value true: Alert is visible.
          * @value false: Alert is not visible.
          * @example visible
         */
        "visible": boolean;
    }
    interface DxAnnouncementBar {
        /**
          * Specifies the color of the icon.
          * @value string: The background color of this component.
          * @example color
         */
        "color": string;
        /**
          * Specifies the icon which will be shown beside the text.
          * @value string: A valid icon name.
          * @important 
          * @example icon
         */
        "icon"?: string;
        /**
          * Specifies the color of the icon.
          * @value string: A color from the color palette. (e.g. white, default, error, ...);
          * @example icon
         */
        "iconcolor"?: string;
    }
    interface DxApp {
    }
    interface DxBreadcrumb {
    }
    interface DxBreadcrumbItem {
        /**
          * Specifies the name of this item in the breadcrumb path which is displayed in `<dx-breadcrumb>`.
          * @value string: the name of the breadcrumb item.
         */
        "label": string;
        "toItem": () => Promise<BreadcrumbItem>;
        /**
          * Specifies the value of this item.
          * @value string: the value of this part.
         */
        "value": string;
    }
    interface DxButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Focuses this element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Specifies the icon which will be shown beside the text.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * Specifies whether the icon is positioned left or right of the text as long a text is defined.
          * @value left: The icon is displayed left of the text.
          * @value right: The icon is displayed right of the text.
          * @example icon
         */
        "iconposition": HorizontalDirection;
        /**
          * The text which is displayed within the button.
          * @value string: The text.
          * @example label
         */
        "label"?: string;
        /**
          * Shows a loading spinner within the button. The spinner location can be controlled with the `iconposition` property.
          * @value true: Loading spinner is visible.
          * @value false: Loading spinner is not visible.
          * @example loading-spinner
         */
        "loading": boolean;
        /**
          * Modifies the button width behavior
          * @value false: Button width is determined by the button content
          * @value true: Button width is stretched to match the width of the host element.
         */
        "stretch": boolean;
        /**
          * The theme of the button defines the look and feel of the button, which is dependent in which context the button is used.
          * @value default: The default button can be placed anywhere and is the main usage of a button.
          * @value on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background.
          * @value destructive: A button which implies a destructive action. (e.g deleting an item from a list)
          * @example theme
         */
        "theme": ButtonTheme;
        /**
          * Defines the visual representation of the button.
          * @value primary-s: Small flat colored button to indicate an important action.
          * @value primary-m: Medium sized flat colored button to indicate an important action.
          * @value primary-l: Large flat colored button to indicate an important action.
          * @value secondary-s: Small outlined transparent button for less important actions.
          * @value secondary-m: Medium sized outlined transparent button for less important actions.
          * @value secondary-l: Large outlined transparent button for less important actions.
          * @value text: Small button with no default background color.
          * @example type
         */
        "type": ButtonType;
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
          * @example unfocusable
         */
        "unfocusable": boolean;
    }
    interface DxCalendar {
        /**
          * Error message which is displayed above the calendar view.
          * @value string: Error message.
         */
        "errormessage"?: string;
        /**
          * Defines the maximal allow date.
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
         */
        "min"?: string;
        /**
          * Defines how a date can be selected.
          * @value "day-month-year": The month calendar view is the main view to select a date in. You can click on days within a month to select them.
          * @value "month-year": The year calendar view is the main view to select a date in. You can click on months within a year to select them.
          * @value "day-month": The month calendar view is the main view to select a date in. You can click on days within a month to select them. The year information is irrelevant in this mode. Selected date's years are always 0.
         */
        "mode": DateSelectionMode1;
        /**
          * Whether we can select a range of two dates or only one date.
          * @value true: Two separate dates can be selected. All dates between them are highlighted.
          * @value false: Only one date can be selected at a time.
         */
        "rangeenabled": boolean;
        "value": string;
    }
    interface DxCard {
        /**
          * Whether the card has a max height of it's parent or it's content.
         */
        "maxcontent": boolean;
    }
    interface DxCardCollapsable {
        /**
          * The current collapse state.
          * @value false: The card is collapsed.
          * @value true: The card is unfolded.
          * @example open
         */
        "open": boolean;
    }
    interface DxCardContent {
    }
    interface DxCardHeader {
        /**
          * If true, the header is clickable and shows a chevron icon on the left side.
         */
        "collapsable": boolean;
        /**
          * Whether the header chevron points down or up.
         */
        "collapsed": boolean;
        /**
          * The icon which is displayed left of the label.
          * @value string: The icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon. This has only an effect when the `icon` property is defined.
          * @value string: Name of the color from the color palette.
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * The label which is displayed on the left side.
          * @value string: The label text.
          * @example label
         */
        "label": string;
    }
    interface DxCardImage {
        /**
          * Defines the height of the image for the MQ1 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or `%`.
         */
        "coverheightmq1"?: string;
        /**
          * Defines the height of the image for the MQ2 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq2"?: string;
        /**
          * Defines the height of the image for the MQ3 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or `%`.
         */
        "coverheightmq3"?: string;
        /**
          * Defines the height of the image for the MQ4 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq4"?: string;
        /**
          * Defines the height of the image for the MQ5 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq5"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq1"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq2"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq3"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq4"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq5"?: string;
        /**
          * Defines the fit of the image.
          * @value proportional: The image is scaled proportional to its width.
          * @value cover: The image is displayed with a set height. The height is set via the `coverheightmq` properties. The visible part of the image can be controlled using the `coverpositionmq` properties.
         */
        "fit": "proportional" | "cover";
        /**
          * Specifies a path to the image file.
          * @value string: The path to the image file.
         */
        "url": string;
    }
    interface DxChartSample {
        /**
          * The color of the corresponding chart segment.
          * @value string: The color code.
          * @important
         */
        "color": string;
        /**
          * The icon which is displayed next to the label.
          * @value string: Name of the icon.
         */
        "icon": string;
        /**
          * Label of the data.
         */
        "label": string;
        /**
          * The color of the corresponding chart segment when selected.
          * @value string: The color code.
          * @important
         */
        "selectedcolor": string;
        /**
          * Maps the component into a JS object.
         */
        "toChartSample": () => Promise<NewChartSample>;
        /**
          * Numeric representation of the data value.
          * @value number: The numeric representation.
         */
        "value": number;
    }
    interface DxCheckbox {
        /**
          * Defines whether the checkbox is checked or not.
          * @value false: Checkbox is unchecked.
          * @value true: Checkbox is checked.
          * @example checked
         */
        "checked": boolean;
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this component.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Text, which is displayed next to the checkbox.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Defines if the checkbox is in a read-only state. If the `checked` property is false, the component will not be rendered.
          * @value false: The checkbox is displayed normally.
          * @value true: A success icon and the label are displayed next to each other.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Defines if the checkbox is a required form element.
          * @value false: It is not required to set the checkbox`s `checked` state to true.
          * @value true: The checkbox's `checked` state has to be true to fulfill the requirement.
          * @example required
         */
        "required": boolean;
    }
    interface DxChevron {
        /**
          * If `false` the chevron will be displayed with color `default` If `true` the chevron will be displayed with color `active` or the color set via `activecolor`
         */
        "active": boolean;
        /**
          * Color of the chevron when active property is `true`. Use a color from the color palette.
          * @value string: The name of a color from the color palette.
         */
        "activecolor": string;
        /**
          * Defines the direction the arrow is pointing to.
          * @value true: the arrow is pointing up.
          * @value false: the arrow is pointing down.
         */
        "directiontop": boolean;
        /**
          * Color of the chevron when active property is `false`. Use a color from the color palette.
          * @value string: The name of a color from the color palette.
         */
        "inactivecolor": string;
        "size": 16 | 24;
    }
    interface DxClearButton {
        "size": 24 | 32;
        "visible": boolean;
    }
    interface DxCombobox {
        /**
          * Defines if the input field is disabled or not.
          * @value true: Input is disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * The text which is displayed within the flyout when no entries are found with the input provided by the user.
          * @value string: The empty search result text.
          * @example empty-search-text
         */
        "emptysearchtext": string;
        /**
          * Error text which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Focuses this input field.
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * The text which is displayed within the flyout while the search is in progress.
          * @value string: The loading text.
          * @example loading-text
         */
        "loadingtext": string;
        /**
          * The maximum height the list can reach when opened.
          * @value number: The height in pixels.
          * @example max-list-height
         */
        "maxlistheight": number;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
          * @example placeholder
         */
        "placeholder": string;
        /**
          * The text which is displayed when the input length is less than the `presearchlettercount`.
          * @value string: A text describing the condition to start a search.
          * @example pre-search-condition-text
         */
        "presearchconditiontext": string;
        /**
          * The minimum number of letters before starting the search.
          * @value number: The number of letters that allow starting the search.
          * @example pre-search-letter-count
         */
        "presearchlettercount": number;
        /**
          * Input field is in readonly mode. The value of this input is display in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Input is marked as required.
          * @value false: Not required.
          * @value true: Input field is required, and an icon is displayed below the input field.
          * @example required
         */
        "required": boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
          * @example size
         */
        "size": "s" | "m";
        /**
          * The value of this input.
          * @important 
          * @value string: Value of this input.
          * @example value
         */
        "value": string;
    }
    interface DxContainer {
        /**
          * The background color of the container.
          * @value string: The name of a color from the color palette.
          * @example color
         */
        "color": string;
        /**
          * The type of the container.
          * @value page: The container contains paddings and margins necessary to position the content in the middle of the screen. This type should only be used in a top level context.
          * @value div: The container behaves like a div.
         */
        "type": "page" | "div";
    }
    interface DxContentSwitcher {
        "showValue": (value: ContentSwitcherItemValue, animate?: boolean) => Promise<void>;
        "value": ContentSwitcherItemValue;
    }
    interface DxContentSwitcherItem {
        "animatable": boolean;
        "reverse": boolean;
        "value": ContentSwitcherItemValue;
        "visible": boolean;
    }
    interface DxDateInput {
        /**
          * Indicates whether a calendar is shown when focusing this component.
          * @value true: The calendar is displayed when the date input is focused.
          * @value false: There is no calendar displayed when the date input is focused.
         */
        "calendarenabled": boolean;
        /**
          * Whether the input is interactable or not. The label and border are grey to indicate the disabled state.
          * @value false: Input is not disabled.
          * @value true: Input is disabled.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Text, which is displayed in a red popup at the bottom of the input field.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on the day-input element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Remotely triggered by parent date range component
         */
        "internalForceEmitChangeEvent": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label text, which is displayed on the top of the input field.
          * @important 
          * @value string: label text
          * @example label
         */
        "label"?: string;
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "min"?: string;
        /**
          * Defines how a date can be selected or edited.
          * @value "day-month-year": The user can edit three input fields: day (TT), month (MM) and year (JJJJ). The calendar shows all three views (month, year and decade) for selecting a date.
          * @value "month-year": The user can edit two input fields: month (MM) and year (JJJJ). The calendar shows two views (year and decade) for selecting a month.
          * @value "day-month": The user can edit two input fields: day(TT) and month (MM). The calendar shows two views (month and year) for selecting a date.
          * @example mode
         */
        "mode": DateSelectionMode1;
        /**
          * Whether the input is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this input as required.
          * @value false: Input is not required
          * @value true: Input is required
          * @example required
         */
        "required": boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
          * @example size
         */
        "size": "s" | "m";
        /**
          * The current displayed date.
          * @important 
          * @value string: A date in following format: YYYY-MM-dd
          * @example value
         */
        "value": string;
    }
    interface DxDateRange {
        /**
          * Sets the focus on the first date input element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "min"?: string;
        /**
          * Defines how a date range can be selected or edited.
          * @value "day-month-year": The user can select a specific date range. The calendar shows all three views (month, year and decade) for selecting a date range.
          * @value "month-year": The user can select a month range. The calendar shows two views (year and decade) for selecting a month range.
          * @value "day-month": The user can select two possible dates within a year. The calendar shows two views (month and year) for selecting a date range.
         */
        "mode": DateSelectionMode1;
        /**
          * The current displayed date range.
          * @important 
          * @value string: Two comma seperated dates in following format: YYYY-MM-dd (e.g.: 2021-01-01,2021-12-31)
          * @example value
         */
        "value": string;
    }
    interface DxDonutChart {
        /**
          * The color scheme which is used to color the segments
          * @value blue: All segments are displayed in a predefined blue color
          * @value gray: All segments are displayed in a predefined gray color
          * @value signal: The segments can be displayed in the three different signal colors (success, warning, error).
          * @value custom: The color of segments can be set to any color in the color palette.
          * @example color-scheme
          * @example signal
         */
        "colorscheme": DonutChartColorScheme;
        /**
          * A label which is displayed in the center of the component.
          * @value string: The label text.
          * @example label
         */
        "label": string;
        /**
          * The index of the selected segment.
          * @value number: An index between 0 and (n - 1), whereas n = number of segments.
          * @example selected
         */
        "selected": number;
        /**
          * Defines whether to show the outer labels of the segments or not.
          * @value true: The label of every segment is displayed.
          * @value false: No segment labels are visible.
          * @example show-segment-labels
         */
        "showsegmentlabels": boolean;
        /**
          * A sub-label which is displayed below the `label` in the center of the component.
          * @value string: The sub-label text.
          * @example label
         */
        "sublabel": string;
        "update": () => Promise<void>;
    }
    interface DxDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Whether it is possible to select an option which is not present in the current option list.
          * @value false: The user can only select an option in the list.
          * @value true: The user is able to set a value which is not present in the option list by editing a text field under the selection input field.
          * @example elseoption
         */
        "elseoption": boolean;
        /**
          * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
          * @value string: Button label
          * @example elseoption
         */
        "elseoptionbuttonlabel"?: string;
        /**
          * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
          * @value string: Text input label.
          * @example elseoption
         */
        "elseoptioninputlabel"?: string;
        /**
          * Determines if the else-option input field is visible to the user. This property automatically changes on user interaction or providing a value that doesn't match any dropdown options.
          * @value false: Else-option input field is not displayed.
          * @value true: Else-option input field is displayed.
          * @example elseoption-selected
         */
        "elseoptionselected": boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        "formatter": (input: string) => string;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example label
         */
        "label"?: string;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder": string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition": "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required": boolean;
        /**
          * The size of the dropdown.
          * @value s: A small dropdown is displayed.
          * @value m: A medium sized dropdown is displayed.
         */
        "size": ContainerSize;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign": HorizontalDirection;
        /**
          * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null. Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
          * @important 
          * @value string: The string value of the selected option.
          * @value object: The value of the selected option in case it's a complex type.
          * @value null: No option selected.
          * @example value
         */
        "value": StringOrObject2;
    }
    interface DxDropdownOption {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
         */
        "icon"?: string;
        /**
          * This is an experimental feature to display a dropdown option as a non-selectable separator.
         */
        "isseparator": boolean;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
         */
        "label": string;
        /**
          * Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last option which selected attribute is true, will be selected.
          * @value true: This option is selected (Depending on the selection rule of the parent dropdown)
          * @value false: This option is not selected.
         */
        "selected": boolean;
        "toOption": () => Promise<NewDropdownOption>;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example value
         */
        "value"?: StringOrObject2;
    }
    interface DxElementSwapper {
        /**
          * Defines whether the first or the second slot is currently visible.
          * @value first: First slot is visible.
          * @value second: Second slot is visible.
          * @value none: No slot is visible.
         */
        "active": "first" | "second" | "none";
    }
    interface DxErrorMessage {
        /**
          * The number of lines the error message should display.
          * @value 1, 2, 3: The number of lines the text can display simultaneously.
          * @value all: The error message will not be clipped. This mode should only be used in important cases.
          * @example lines
         */
        "lines": NumberOfLines;
    }
    interface DxErrorPage {
        /**
          * The description of the action button.
          * @value string: The action description text.
          * @example action
          * @important
         */
        "actiondescription": string;
        /**
          * The label of the action-button below the action description.
          * @value string: The action description text.
          * @example action
         */
        "actionlabel": string;
        /**
          * The description of the error that occurred.
          * @value string: The description text.
          * @example labels
          * @important
         */
        "description": string;
        /**
          * The reason the error page is displayed.
          * @value string: The reason text.
          * @example labels
          * @important
         */
        "reason": string;
    }
    interface DxExpanded {
    }
    interface DxFdOutlineBox {
        /**
          * The color of the outline.
          * @value string: Name of the color.
         */
        "color": string;
        "strokewidth": number;
    }
    interface DxFdSeparator {
        /**
          * The background color of the top container which should be separated from a bottom container.
          * @value string: Name of the color from the color palette.
         */
        "fromcolor": string;
        /**
          * The background color of the bottom container which should be separated from a top container.
          * @value string: Name of the color from the color palette.
         */
        "tocolor": string;
    }
    interface DxFlyout {
        "direction": HorizontalDirection;
        "hideoverlay": boolean;
        "offsety": number;
        "open": boolean;
        "position": VerticalDirection;
    }
    interface DxFooter {
        /**
          * The color of the previous container to ensure a smooth transition for the separator.
          * @value string: The name of a color from the color palette.
          * @example from-color-white
          * @example from-color-gray
         */
        "fromcolor": string;
    }
    interface DxFormWrapper {
        /**
          * Error text which is displayed below the slotted content.
          * @value string: error message
          * @example error
         */
        "errormessage": string;
        /**
          * Indicates that the form is synced with KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the slotted content.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label": string;
        /**
          * An asterisk next to the label indicates that the wrapped form element is required.
          * @value false: Not required.
          * @value true: Required.
          * @example required
         */
        "required": boolean;
    }
    interface DxGoldenStage {
        /**
          * The alignment of the golden container.
          * @value left: The container is left-aligned and the golden triangle is displayed below the container.
          * @value right: The container is right-aligned and the golden triangle is displayed over the container.
          * @example alignment
         */
        "alignment": HorizontalDirection;
        /**
          * The background color behind the hero image.
          * @value string: The name of the color from the color palette.
          * @example background-color
         */
        "backgroundcolor": string;
        /**
          * The y-offset of the golden container.
          * @value number: The y-offset.
          * @example content-offset-y
         */
        "contentoffsety": number;
        /**
          * The size of the golden container.
          * @value s: Small sized container occupying 4 grid columns.
          * @value m: Medium sized container occupying 6 grid columns.
          * @value l: Large sized container occupying 8 grid columns.
          * @example size
         */
        "size": "s" | "m" | "l";
    }
    interface DxGrid {
        /**
          * The grid's base. Different bases can define a custom amount of columns for every breakpoint.
          * @value page: Default page grid.
          * @example page-1
          * @example page-2
         */
        "base": string;
        /**
          * Grid-Layout definition for the MQ1-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq1"?: string;
        /**
          * Grid-Layout definition for the MQ2-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq2"?: string;
        /**
          * Grid-Layout definition for the MQ3-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq3"?: string;
        /**
          * Grid-Layout definition for the MQ4-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq4"?: string;
        /**
          * Grid-Layout definition for the MQ5-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq5"?: string;
        /**
          * The gap between the rows of the grid.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The gap between the rows.
          * @example row-gap
         */
        "rowgap": Size;
    }
    interface DxHeader {
        /**
          * The name of the application this component runs with.
          * @value string: The name of the app.
          * @example app-name
         */
        "appname"?: string;
        /**
          * Defines the brand appearance of header internal branding elements (e.g. the logo image).
          * @value default: The default brand of the DVAG is used.
         */
        "brand": "default";
        /**
          * The logo which is displayed in the left corner of the header.
          * @value text: Brand Logo with the company's name. The `applicationname` will not be displayed.
          * @value image: Brand Logo without a name. The `applicationname` will be displayed next to the logo.
         */
        "logo": "text" | "image";
        /**
          * Whether to show the current announcement bar or not.
          * @value true: Shows an announcement in case the "announcement-bar" slot is defined.
          * @value false: Hides the announcement.
         */
        "showannouncement": boolean;
        /**
          * The theme of the header defines the color palette which is used for it's sub-elements.
          * @value white: The default theme displays the header with a white background.
          * @value gold: The golden theme which is implemented for "meine.dvag".
          * @warning This property must not be used by other projects than "meine.dvag".
         */
        "theme": HeaderTheme;
    }
    interface DxHeaderAppFavorites {
        "getDefaultWidth": () => Promise<number>;
        "internalactive": boolean;
        "internalopen": boolean;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
         */
        "notifications": NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "notificationstheme": NotificationIndicatorThemeType;
        /**
          * The priority indicates the order in which the entries can be shown and hidden.
          * @value number: The priority of the user menu item.
         */
        "priority": number;
        "renderSidebarContent": () => Promise<any>;
    }
    interface DxHeaderAppFavoritesApp {
        /**
          * An identificator of the application.
          * @value string: An unique id of the application.
         */
        "appid": string;
        /**
          * The name of the application.
          * @value string: The name.
         */
        "appname": string;
        /**
          * An icon belonging to the application.
          * @value string: An icon name.
         */
        "icon": string;
        "toAppFavoritesApp": () => Promise<AppFavoritesApp>;
    }
    interface DxHeaderAppFavoritesSidebarContent {
        "apps": AppFavoritesApp[];
    }
    interface DxHeaderApplicationName {
        /**
          * The name of the application.
          * @value string: Application name.
          * @important
         */
        "appname": string;
    }
    interface DxHeaderMenuBar {
        "updateChildren": (possibleAvailableSpace: number) => Promise<void>;
    }
    interface DxHeaderMenuButton {
        /**
          * Displays this menu button as active.
          * @value true: The menu button displays a line at the bottom and replaces the slotted content with a close icon.
          * @value false: The menu button item displays the slotted content.
         */
        "active": boolean;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
         */
        "notifications": NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "notificationstheme": NotificationIndicatorThemeType;
        /**
          * Displays this menu button as selected.
          * @value true: The menu button displays a line under the slotted content.
          * @value false: The menu button item displays the slotted content.
         */
        "selected": boolean;
    }
    interface DxHeaderMenuCustom {
        "getDefaultWidth": () => Promise<number>;
        "internalopen"?: boolean;
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority": number;
    }
    interface DxHeaderMenuGroup {
        "getDefaultWidth": () => Promise<any>;
        "getInnerMenuItems": () => Promise<MenuItemElement[]>;
        "internalopen": boolean;
        /**
          * The priority indicates the order in which the entries inside a `<dx-header>` can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the group.
          * @example priority
         */
        "priority": number;
    }
    interface DxHeaderMenuItem {
        /**
          * The `<dx-header>` slot which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload.
          * @value string: The name of the connected slot which is displayed within the `<dx-header>` sidebar when interacted with.
          * @example connected-slot
         */
        "connectedslot": string;
        "getDefaultWidth": () => Promise<number>;
        /**
          * The icon which is displayed in the menu item.
          * @value string: The name of the icon.
          * @example icon
         */
        "icon": string;
        /**
          * Highlights this entry
          * @value true: Entry highlighted
          * @value false: Entry not highlighted
         */
        "internalactive": boolean;
        "internalopen": boolean;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
          * @example notifications
         */
        "notifications": NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications
         */
        "notificationstheme": NotificationIndicatorThemeType;
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority": number;
    }
    interface DxHeaderMenuLink {
        /**
          * The `<dx-header-navigation-item>` value which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload.
          * @value string: The name of the connected value which is displayed within the `<dx-header>` sidebar navigation when interacted with.
          * @example connected-value
         */
        "connectednavigationvalue": string;
        "getDefaultWidth": () => Promise<number>;
        "internalopen": boolean;
        /**
          * The label which is displayed in the menu item.
          * @value string: The label which is displayed in the menu item.
          * @example label
         */
        "label": string;
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority": number;
        /**
          * Highlights this entry.
          * @value true: Entry highlighted as selected.
          * @value false: Entry not highlighted as selected.
          * @example selected
         */
        "selected": boolean;
    }
    interface DxHeaderNavigation {
        /**
          * Defines whether the sidebar closes automatically on interacting with a navigation item with no children.
          * @value true: When interacting with a navigation item which has no child navigation items the sidebar closes.
          * @value false: The sidebar does not close when interacting with any navigation items.
          * @example auto-close
         */
        "autoclose": boolean;
        "getDefaultWidth": () => Promise<any>;
        "internalactive": boolean;
        "internalnotification": boolean;
        "internalnotificationstheme": NotificationIndicatorThemeType;
        /**
          * Defines whether there is a notification within this component or not.
          * @value true: A notification indication is shown at the top right of the navigation menu item.
          * @value false: There is no notification indication on the navigation menu item.
          * @example notification
         */
        "notification": boolean;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications-theme
         */
        "notificationstheme": NotificationIndicatorThemeType;
        "priority": number;
        "renderSidebarContent": () => Promise<any>;
    }
    interface DxHeaderNavigationItem {
        /**
          * @param belongsToPage : The page the navigation item belongs to
          * @param pageIndexCount : An iterating pageIndex reference which
         */
        "insertNavigationTree": (belongsToPage: NavigationPage, pageIndexCount: Ref<number>) => Promise<void>;
        /**
          * The displayed label.
          * @value string: The text which is displayed inside the navigation item.
          * @example example
         */
        "label": string;
        /**
          * The size of the dropdown.
          * @value m: A medium sized navigation item is displayed.
          * @value l: A large sized navigation item is displayed.
         */
        "size": NavigationItemSize;
        /**
          * Unique identifier of this component within a `<dx-header-navigation>` element.
          * @value string: Identifier
          * @example example
         */
        "value": string;
    }
    interface DxHeaderNavigationSidebarContent {
        /**
          * Generated navigation page tree which is needed to construct the visual navigation tree.
         */
        "rootnavigationpage": NavigationPage1;
    }
    interface DxHeaderUser {
        /**
          * Defines whether the account button "Benutzerkonto" is displayed or not.
          * @value true: The account button is visible.
          * @value false: The account button is not visible.
          * @example account-available
         */
        "accountavailable": boolean;
        "getDefaultWidth": () => Promise<any>;
        /**
          * The image URL of the user.
          * @value string: URL
          * @example image
         */
        "imageurl"?: string;
        "internalactive": boolean;
        "internalopen": boolean;
        /**
          * The full name of the user.
          * @value string: Firstname, middle names and lastname separated by spaces.
          * @example name
         */
        "name": string;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
          * @example notifications
         */
        "notifications": NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications-theme
         */
        "notificationstheme": NotificationIndicatorThemeType;
        /**
          * The priority indicates the order in which the entries can be shown and hidden.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority": number;
        "renderSidebarContent": () => Promise<any>;
    }
    interface DxHeaderUserSidebarContent {
        /**
          * Defines whether the account button "Benutzerkonto" is displayed or not.
          * @value true: The account button is visible.
          * @value false: The account button is not visible.
         */
        "accountavailable": boolean;
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
         */
        "imageurl"?: string;
        /**
          * The full name of the user.
          * @value string: Firstname, middle names and lastname separated by spaces.
          * @example name
         */
        "name": string;
    }
    interface DxHeroImage {
        /**
          * Url for the picture that should be displayed at the mq1 stage.
          * @value string: Image-url
          * @example example
         */
        "mq1": string;
        /**
          * Url for the picture that should be displayed at the mq2 stage.
          * @value string: Image-url
          * @example example
         */
        "mq2": string;
        /**
          * Url for the picture that should be displayed at the mq3 stage.
          * @value string: Image-url
          * @example example
         */
        "mq3": string;
        /**
          * Url for the picture that should be displayed at the mq4 stage.
          * @value string: Image-url
          * @example example
         */
        "mq4": string;
        /**
          * Url for the picture that should be displayed at the mq5 stage.
          * @value string: Image-url
          * @example example
         */
        "mq5": string;
    }
    interface DxHorizontalGrowBox {
        "animationmode": "open-from-left" | "open-from-right";
        "forcewidth": number;
        /**
          * Disconnects the resizeObserver after
         */
        "limitresizes": number;
        /**
          * Whether the container is open or not. When changed the container transitions smoothly to the correct width.
          * @value true: The container displays it's content.
          * @value false: The container hides it's content.
         */
        "open": boolean;
    }
    interface DxIcon {
        /**
          * Overrides the color of an icon. By default a `grey` (`icons`) color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example all-icons
         */
        "icon": string;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example sizes
         */
        "size": number;
    }
    interface DxIconAllfinanzberatungwebportaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAnfuehrungszeichen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAntragdvagoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAntragfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppportal01filled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppportal01outlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppportal02filled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppportal02outlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppstoregfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAppstorewoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAuftragsportalfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAuftragsportaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAuge {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAugegestrichen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAusfuellen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAusweis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAusweischeck {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconAutorisierungvertragsabschluss {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBausparenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBausparenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBentobox {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBeratugsweltfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBeratugsweltoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBlinkitfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconBlinkitoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconCheck {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconCheckkreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconCheckkreisthinoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconCheckthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronhoch {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronlinks {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronlinkskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronlinkskreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronrechts {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronrechtskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronrechtskreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChevronrunter {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconChip {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconCookie {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDatensavefilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDatensaveoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDatenturbofilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDatenturbooutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDauer {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDauer3min {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDbnetfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDbnetoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDepotsbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDepotsthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDesktoppc {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDevicesandere {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDiedvagfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDiedvagoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDnetfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDnetoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDokument {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDoppelchevronlinkskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDoppelchevronrechtskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDownload {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDrucker {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvabrechrungsplusportalfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvabrechrungsplusportaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagcloudfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagcloudoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvaghypfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvaghypoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagloginfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagloginoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesystemkifilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesystempimfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesystemvbifilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesytstemkioutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesytstempimoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagonlinesytstemvbioutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagunternehmenspraesentationfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvagunternehmenspraesentationoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvfactoringplusportalfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconDvfactoringplusportaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEasyvbfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEasyvboutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEdit {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEditthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEingabe {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEinkaufenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEinkaufenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEinstellungen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEnergieportalfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEnergieportaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconError {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconErrorthinoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEuro {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEventfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconEventoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFacebook {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFacebookbaukastenfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFacebookbaukastenoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFastforward {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFastrewind {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFile {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFileaudio {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFileaudiothin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFiledoc {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFiledocthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilejpg {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilepdf {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilepdfthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilepng {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFileppt {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilepptthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilevideo {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilevideothin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilexls {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFilter {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconForward30 {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFotokamera {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFragekreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFragekreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFrontcam {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFullscreenstart {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconFullscreenstop {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGeldschein {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGesundheitbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGesundheitthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGlasbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGlasthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGoldbarrenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGoldbarrenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconGoogleplus {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHamburgermenue {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHandy {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHausratbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHausratthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHd {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHeadphones {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHeadset {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHerzfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHerzoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHerzplus {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHome {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHomepagekonfiguratorfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHomepagekonfiguratoroutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconHomethin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIddonlinewbthekgfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIddonlinewbthekwoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIhrefragenunsereantwortenmeineappfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIhrefragenunsereantwortenmeineappoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIhrefragenunsereantwortenzuritfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconIhrefragenunsereantwortenzuritoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconImmobilienbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconImmobilienfinanzierungbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconImmobilienfinanzierungthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconImmobilienthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconInformation {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconInstagram {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconInvestmentdialogfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconInvestmentdialogoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconItweltfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconItweltoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKalender {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKarriereplanungfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKarriereplanungoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKarriereseitefilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKarriereseiteoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKfztarif02filled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKfztarif02outlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKlemmbrett {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKoffer {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKompass {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKontosaldobold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconKontosaldothin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLaptop {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLesezeichenfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLesezeichenoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLinkedin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLinkextern {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLinksoderrechts {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLogo {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLupe {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLupeminus {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconLupeplus {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMail {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMaus {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeineantraegefilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeineantraegeoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinedvagfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinedvagoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinekundenfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinekundenoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinenachrichten01filled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMeinenachrichteniconoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMensch {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMikrofon {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMinuskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMonitor {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMove {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMovethin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMovie {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMuell {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMyimmoplanetfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconMyimmoplanetoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconNotstarted {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconOrdner {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconOrt {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconOrtfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPassfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPassoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPause {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPausekreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPausekreisoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPfeilhoch {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPfeillinks {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPfeilrechts {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPfeilrunter {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPhonelink {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPhotovoltaikbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPhotovoltaikthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPlaceholder {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPlay {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPlaykreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPlaykreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPlaykreisoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPluskreis {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPrivathaftpflichtbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPrivathaftpflichtthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPrivatkreditbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconPrivatkreditthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconProjezieren {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRechtsschutzbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRechtsschutzthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReisenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReisenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReload {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRepeat {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRepeat1 {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRepeatfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReplay {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReplay10 {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReplay30 {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconReplaykreisfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRequiredbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRequiredthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRewind {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconRewind10 {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchliessen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchlossauf {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchlossoffenthinoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchlosszu {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchlosszuthinoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchulungsreisenfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchulungsreisenoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchutzengelbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchutzengelthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSchutzschild {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSeitenanfang {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSenden {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSendenerror {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconShuffle {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconShufflefill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSidebarauf {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSidebarerror {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSidebarzu {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSkiptonext {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSkiptoprevious {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSkype {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSlideshow {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSparenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSparenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSparkontenbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSparkontenthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSpaten {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSpeakersfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSpeakersoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSprechblase {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSprechblasen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStartupappfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStartupappoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStateerror {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStaterequired {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStatesuccess {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSternhalb {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSternleer {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSternvoll {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconStop {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSystemstatusfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconSystemstatusoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTablet {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTastatur {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTeilen {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTelefon {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconThumbsupfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconThumbsupoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTv {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTvconnected {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconTwitter {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUeberlaufmenue {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUhr {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnfallbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnfallthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnternehmenspraesentationfuerfirmenkundenfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnternehmenspraesentationfuerfirmenkundenoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnternehmenspraesentationprivatkundenfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUnternehmenspraesentationprivatkundenoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconUpload {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbnewsappfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbnewsappoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbpostservicefilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbpostserviceoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbshopfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbshopoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbweltfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVbweltoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVeranstaltungsverwaltungfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVeranstaltungsverwaltungoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVerguetungsrechnerfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVerguetungsrechneroutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVerteilenhoriz {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVerteilenvertik {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideoadd {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideoaddcheck {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideocall {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideocallmissed {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideocamera {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideocamoff {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideochatfill {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideochatoutline {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideosettings {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVideothek {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVollebreite {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVorteilsrechnergeneralivitalityfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVorteilsrechnergeneralivitalityoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVpdigitalfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVpdigitaloutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVspvertragsmanagementplusfilled {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVspvertragsmanagementplusoutlined {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVuvbold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconVuvthin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconWeg {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconWhatsapp {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconWohngebaeudebold {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconWohngebaeudethin {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconXing {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconYoutube {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconZeitraffer {
        /**
          * Size
         */
        "size": number;
    }
    interface DxIconZurueck {
        /**
          * Size
         */
        "size": number;
    }
    interface DxInfo {
        /**
          * Defines whether the info button is visible or hidden.
          * @value true: The info button is not visible.
          * @value false: The info button is visible.
          * @example hidebutton
         */
        "hidebutton": boolean;
        /**
          * Sets a modal for the info element. This function has no effect when there is a slotted modal within this element.
          * @example remote-modal
         */
        "setModal": (modal: HTMLDxModalElement) => Promise<void>;
        /**
          * Defines the width the info element gets.
          * @value max-width: The info element takes the available space independant of the width of it's inner element.
          * @value content: The info button is displayed right next to the content.
          * @important 
          * @example example
         */
        "size": "max-width" | "content";
    }
    interface DxInputLabel {
        /**
          * Aligns the icons in a compressed manner.
         */
        "condensedlayout": boolean;
        /**
          * If the label should be in an disabled state.
         */
        "disabled": boolean;
        /**
          * Indicates when the data is synced to ki.
         */
        "kisynced": boolean;
        /**
          * The text that will be showed on top of a input.
         */
        "label": string;
        /**
          * Indicates whether an asterisk is displayed next to the label or not.
         */
        "required": boolean;
        /**
          * The font type.
         */
        "type": string;
    }
    interface DxInternalWizardStep {
        "finished": boolean;
        "isExtendedView": boolean;
        "isFirstStep": boolean;
        "isLastStep": boolean;
        "label": string;
        "neighborIsInteractive": boolean;
        "orientation": Orientation;
        "state": WizardStepState;
        "value": string;
    }
    interface DxLegend {
        /**
          * Indicates if the KI-Sync hint is shown.
          * @value true: KI-Sync hint is shown.
          * @value false: KI-Sync hint is not shown.
         */
        "kisynchint": boolean;
        /**
          * Indicates if the required hint is shown.
          * @value false: Required hint is not shown.
          * @value true: Required hint is shown.
         */
        "requiredhint": boolean;
    }
    interface DxLink {
        /**
          * Specifies where to open the linked document. This is delegated to the underlying `<a>` element. For more information: https://www.w3schools.com/tags/att_a_target.asp
          * @value string: value delegated to target element
         */
        "target"?: "_blank" | "_self" | "_parent" | "_top" | string;
        /**
          * The URL of the page the link goes to. If undefined the component serves as a button.
          * @value string: The URL or anchor the link refers to.
         */
        "url": string;
    }
    interface DxList {
        /**
          * Defines whether the content of the child `<dx-list-item>` elements display their content next to or below the label.
          * @value true: The content of the child `<dx-list-item>` elements is displayed below their label.
          * @value false: The content of the child `<dx-list-item>` elements is displayed next to their label.
         */
        "contentbelow": boolean;
        /**
          * The default size of the underlying `dx-list-item` elements.
          * @value m: default sized list
          * @value l: large sized list
          * @example size
         */
        "size": "m" | "l";
        /**
          * Indicates whether the list is keeping its width according to the biggest child or keeping the parent's width and wrap the inner labels of the `dx-list-item` elements.
          * @value parent: The list does not overflow the parent width. The labels of the underlying `dx-list-item` elements wrap themselves.
          * @value content: The biggest `dx-list-item` element purports the width of the list.
         */
        "width": "parent" | "content";
    }
    interface DxListFlyout {
        /**
          * Automatically clears the current selected item when the list closes.
         */
        "clearselectiononclose": boolean;
        "defaulthighlightfirst": boolean;
        "direction": HorizontalDirection;
        "focusable": boolean;
        "itemsvisible": number;
        "maxheight": number;
        /**
          * Defines the maximal number of menu items the user is able to select. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
          * @value undefined: The user is able to select all menu items.
         */
        "maxselections": number;
        "open": boolean;
        "position": VerticalDirection;
        "preventArrowSelection": boolean;
        "preventSpaceSelection": boolean;
        "selectionmode": ListFlyoutSelectionMode;
        /**
          * Whether a list item should be selected when focused with the keyboard or not.
         */
        "selectonhighlight": boolean;
        "size": "m" | "l";
        "stopclickpropagationonpopup": boolean;
    }
    interface DxListItem {
        /**
          * Implies the action which is triggered when this list item is interacted with.
          * @value navigate: The list item implies that another view is shown after clicking it.
          * @example action-indicator
         */
        "actionindicator"?: ActionIndicatorType;
        /**
          * Defines whether the item is disabled or not.
          * @value true: The item is displayed in a gray tone and can't be interacted with
          * @value false: The item is displayed normally.
          * @exmaple disabled
         */
        "disabled": boolean;
        "focusControl": () => Promise<void>;
        "getRadioElement": () => Promise<HTMLDxRadioButtonElement>;
        /**
          * The icon which is displayed next to the label.
          * @value string: The icon name.
          * @example icon
         */
        "icon": string;
        "internalanimation": boolean;
        "internalcontentbelow": boolean;
        "internaldraggable": boolean;
        "internaldragging": boolean;
        /**
          * The size of this item.
         */
        "internalsize": "m" | "l";
        /**
          * The text which is displayed within the item.
          * @value string: A text
          * @example label
         */
        "label": string;
        /**
          * The text which is displayed above the label.
          * @value string: A text
         */
        "prelabel": string;
        /**
          * The current selection state of this item.
          * @value true: The item is selected. This state will be visualized according to the `type`.
          * @value false: The item is not selected.
          * @example selected
         */
        "selected": boolean;
        /**
          * The text which is displayed below the label.
          * @value string: A text
          * @example sub-label
         */
        "sublabel": string;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign": HorizontalDirection;
        /**
          * The type of the item.
          * @value default: The item will be displayed with an optional icon and a label.
          * @value selectable: The item is displayed like the default and can be selected.
          * @value checkbox: The item displays a checkbox instead of an icon. The selection can be toggled by clicking the item.
          * @example type
         */
        "type": ListItemType;
        /**
          * The internal value of this item, which is either a string or an object. It will be delegated by the `itemSelectionChange` event of the upper `dx-list-flyout` element when the selection changes. Currently only important for dx-dropdown and dx-multi-dropdown.
          * @value string: e.g. `Hausrat-1`
          * @value object: e.g. `{id: "hausrat", index: 1}`
          * @example radio-group
         */
        "value": StringOrObject2;
    }
    interface DxLogo {
        /**
          * Provides the logo in different styles.
          * @value bildmarke: DVAG-Logo banner image.
          * @value wortmarke: DVAG-Logo with word mark.
          * @example logo
         */
        "type": "bildmarke" | "wortmarke";
    }
    interface DxLogoBildmarke {
    }
    interface DxLogoWortmarke {
    }
    interface DxMediaQueryValue {
        /**
          * The value of the property when the current breakpoint is MQ1.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq1": any;
        /**
          * The value of the property when the current breakpoint is MQ2.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq2": any;
        /**
          * The value of the property when the current breakpoint is MQ3.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq3": any;
        /**
          * The value of the property when the current breakpoint is MQ4.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq4": any;
        /**
          * The value of the property when the current breakpoint is MQ5.
          * @value any: Any value the property can be overriden with.
         */
        "mq5": any;
        /**
          * The name of the property which should be changed.
          * @value string: Name of the parent property.
          * @example example
         */
        "property": string;
    }
    interface DxModal {
        /**
          * The modal dialog component can either be displayed in fullscreen, or the dialog adjusts to the size of the content.
          * @value fullscreen: The dialog is displayed in fullscreen mode.
          * @value content: The dialog adjusts to the content.
          * @value number: A custom defined max-height in pixels.
          * @example content-small
          * @example content-large
          * @example fullscreen-small
          * @example fullscreen-large
          * @example defined-small
          * @example defined-large
         */
        "height": ModalHeight;
        /**
          * The label of the dialog.
          * @value string: the title.
         */
        "label": string;
        /**
          * Defines if the dialog is visible or not.
          * @value true: Dialog is visible.
          * @value false: Dialog is not visible.
         */
        "visible": boolean;
        /**
          * Defines the modal's width dependent on the current breakpoint.
          * @value s: The modal takes up to 444 pixels width.
          * @value m: The modal takes up to 678 pixels width.
          * @value l: The modal takes up to 912 pixels width.
          * @value xl: The modal takes up to 1146 pixels width.
          * @value xxl: The modal takes up to 1380 pixels width.
          * @example width
         */
        "width": | "s"
    | "m"
    | "l"
    | "xl"
    | "xxl"
    | "internal-site-navigation-menu";
    }
    interface DxMultiDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on this element.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example label
         */
        "label"?: string;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder": string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition": "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required": boolean;
        /**
          * The selection label will be displayed when at least one option is selected.
          * @value string: The text which is displayed next to the amount of selected options.
         */
        "selectionlabel": string;
        /**
          * The size of the dropdown.
          * @value s: A small dropdown is displayed.
          * @value m: A medium sized dropdown is displayed.
         */
        "size": "s" | "m";
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign": HorizontalDirection;
    }
    interface DxNotificationBar {
        /**
          * Shows or hides the notification.
          * @value true: Notification is displayed.
          * @value false: Notification is hidden.
          * @example header-integration
         */
        "visible": boolean;
    }
    interface DxNotificationIndicator {
        "notifications": NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "theme": NotificationIndicatorThemeType;
    }
    interface DxNotificationToast {
        /**
          * Specifies the time in seconds the notification is visible before it's closed automatically. The specified time has to be greater than 0.
          * @value number: A time in seconds.
          * @example close-after
         */
        "closeafter": number;
        /**
          * The icon which is rendered at the left side of the notification.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * Text under the content. (e.g. for displaying error codes)
          * @value string: Displayed text under the content.
          * @example sub-content
         */
        "subcontent"?: string;
        /**
          * The title of the notification.
          * @value string: The title.
          * @example default
         */
        "titlestring": string;
        /**
          * Specifies the visibility. If the notification closes automatically, by swiping the toast away (mobile only) or by clicking on the close button. this attribute will be set to false.
          * @value true: Toast will be displayed under the header.
          * @value false: Toast is invisible.
          * @example default
         */
        "visible": boolean;
    }
    interface DxNumberInput {
        /**
          * Input is not interactable. Label and border are grey.
          * @value true: Input is disabled.
          * @value false: Input is not disabled.
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Text under the input field, that is shown in a red dialog.
          * @value string: Errormessage.
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Sets the tab-focus to the form element.
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Text on top of the input field.
          * @important 
          * @value string: description e.g `Vorname`
          * @example value
         */
        "label"?: string;
        /**
          * Determines the amount of pre-decimal numbers. The element prevents all inputs higher than this value.
          * @value number: Maximum amount of pre-decimal numbers.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * Determines the maximum value. The maximum value is **within** the possible input.
          * @value number: The maximum value the input field can have.
         */
        "max": number;
        /**
          * Determines the minimal value. The minimal value is **within** the possible input.
          * @value number: The minimal value the input field can have.
         */
        "min": number;
        /**
          * Placeholder that is shown, when the input is empty.
          * @value string: Placeholder.
          * @example custom
         */
        "placeholder"?: string;
        /**
          * Determines the amount of decimal numbers.
          * @value number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)
          * @example custom
         */
        "precision"?: number;
        /**
          * Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision` `placeholder` or `unit`
          * @value currency-euro: Euro
          * @value percent: percent value
          * @example profile
         */
        "profile"?: "currency-euro" | "percent";
        /**
          * Input is in read only mode. The content of the input is displayed in a simple way. The input is not interactable.
          * @value false: Formfield.
          * @value true: Text of the value.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks the formfield as mandatory.
          * @value false: Not mandatory (default).
          * @value true: Mandatory.
          * @example required
         */
        "required": boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
         */
        "size": "s" | "m";
        /**
          * The step size defines the steps you can access when pressing the arrow up or arrow down key. The possible numbers are dependent on the `step` and the `min` value of this component.  Example: if step=3 and min=undefined, possible numbers are [..., -6, -3, 0, 3, 6, 9, ...]. Example: if step=3 and min=2 the possible numbers shift by 2: [..., -4, -1, 2, 5, 8, 11, ...].
          * @value number: The step size.
          * @example step
         */
        "step"?: number;
        /**
          * Controls the visualization of the pre-deciaml thousandseparator.
          * @value true: Usses thousandseparator (default).
          * @value false: No grouping.
          * @example thousandseparator
         */
        "thousandseparator"?: boolean;
        /**
          * Displays a unit next to the input.
          * @value string: A unit text (e.g: "€", "$", "qm").
          * @example custom
         */
        "unit": string;
        /**
          * Value of the input field.
          * @important 
          * @value string: Value of the input.
          * @example value
         */
        "value": number;
    }
    interface DxNumberPaginator {
        /**
          * The number of pages which can be selected.
          * @value number: The number of pages.
          * @example count
         */
        "count": number;
        /**
          * The current selected page.
          * @value number: The current selected page from 1 to `count`.
          * @example current
         */
        "current": number;
    }
    interface DxNumberPaginatorPageButton {
        "state": PageButtonPayload;
    }
    interface DxNumberPicker {
        /**
          * Defines whether the numbers are displayed from left to right, right to left or centered.
          * @value left: The numbers will be displayed from left to right.
          * @value right: The numbers will be displayed from right to left.
          * @value center: The numbers will are centered.
         */
        "align": "left" | "right" | "center";
        /**
          * The current selected value. It has to be within the provided `values` array.
          * @value : One of the numbers provided in the `values` array.
         */
        "value": number;
        /**
          * The possible values to pick from.
          * @value ArrayString: Comma separated List of values in JSON-format e.g.: "[5,10,25]"
          * @value number[]: Array of numbers.
         */
        "values": ArrayStringOrArray;
    }
    interface DxOverflowMenu {
        /**
          * The alignment defines in which direction the menu button aligns.
          * @value left: The menu button is displayed on the left and the list anchors on the left of the button.
          * @value right: The menu button is displayed on the right and the list anchors on the right of the button.
          * @example align
         */
        "align": HorizontalDirection;
        /**
          * The text which is displayed instead of the menu icon.
          * @value string: The text.
          * @example label
         */
        "label": string;
        /**
          * Defines the maximum number of selected menu-item labels the menu displays. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of labels being displayed in the menu.
          * @value undefined: All selected labels are displayed in the menu.
          * @example max-labels
         */
        "maxlabels": number;
        /**
          * Defines the maximum number of menu items the user is able to select. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
          * @value undefined: The user is able to select all menu items.
          * @example max-selections
         */
        "maxselections": number;
        /**
          * Defines whether the user is able to select only one or multiple menu items.
          * @value single: The user can select only one menu-item which immediately closes the flyout.
          * @value multi: The user is able to select multiple menu items.
          * @example selection-mode
         */
        "selectionmode": ListFlyoutSelectionMode1;
    }
    interface DxOverflowMenuItem {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
          * @example label
         */
        "label": string;
        /**
          * Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last option which selected attribute is true, will be selected.
          * @value true: This option is selected (Depending on the selection rule of the parent dropdown)
          * @value false: This option is not selected.
         */
        "selected": boolean;
        "toOverflowMenuItem": () => Promise<OverflowMenuItem>;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example label
         */
        "value"?: StringOrObject2;
    }
    interface DxOverlay {
        /**
          * The position to anchor ("right" or "left" to the content width) the popup to.
         */
        "anchorposition": HorizontalDirection;
        /**
          * CSS display mode of the content area.
         */
        "contentdisplay": "block" | "inline-block";
        /**
          * When the overlay is disabled the width and position is not updated anymore.
         */
        "disabled": boolean;
        /**
          * Whether the overlay's position and bounding can be changed over time.
         */
        "fixate": boolean;
        /**
          * The width of the popup. This simplifies the compution of the popup position. If not fixatewidth is defined the width of the parent bounding box is used instead.
         */
        "fixatewidth": number;
        /**
          * Additional pixels between content and popup when using horizontal placement.
         */
        "offsetx": number;
        /**
          * Additional pixels between content and popup when using vertical placement.
         */
        "offsety": number;
        /**
          * Pointer events are delegated to the popup element if true.
         */
        "popupinteractable": boolean;
        /**
          * Position, where to place the popup
         */
        "position": PopupPosition;
    }
    interface DxPaginator {
        /**
          * The number of pages.
          * @value number: Number of pages.
          * @example count
         */
        "count": number;
        /**
          * The first page which should be displayed.
          * @value number: A number from 1 to `count`. This property is mutable and will be delegated by the `pageChanged` event.
          * @example current
         */
        "current": number;
    }
    interface DxPlaceholder {
        /**
          * Displays a box.
          * @value boolean: Display box.
          * @example box
         */
        "box"?: boolean;
        /**
          * Displays a Card.
          * @value boolean: Display card.
          * @example card
         */
        "card"?: boolean;
    }
    interface DxPopup {
        /**
          * Specifies the position of the arrow.
         */
        "arrowposition": HorizontalDirection;
        /**
          * Specifies the width behavior of the popup bubble.
          * @value parent: width will increases until it matches the parent size
          * @value unconstrained: width will increase unconstrained
         */
        "contentwidth": "unconstrained" | "parent";
        /**
          * Uses old theme from <ds-popup>
         */
        "dstheme": boolean;
        /**
          * Is popup displayed?
         */
        "show": boolean;
        /**
          * Show info or error popup
         */
        "type": "info" | "error";
    }
    interface DxProcessHeader {
        /**
          * A headline text representing the name of the current page or context.
          * @string : A string which must not be undefined or empty.
          * @example headline
         */
        "headline": string;
    }
    interface DxPulseIcon {
        /**
          * Overrides the color of an icon. By default a `grey` (`icons`) color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example all-icons
         */
        "icon": string;
        "pulsate": () => Promise<void>;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example sizes
         */
        "size": number;
    }
    interface DxRadioButton {
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example modes
         */
        "disabled": boolean;
        /**
          * Sets the focus on this component.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        "forceUpdate": () => Promise<void>;
        /**
          * The group id of the parent radio button group. If not defined the first radio-button-group which is found will be elected as the owner of this radio-button
         */
        "groupid": string;
        "internalSelect": () => Promise<void>;
        "internalSetChecked": (checked: boolean) => Promise<void>;
        /**
          * Text, which is displayed next to the radio button.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Identifier of this option. When selected this value overwrites the `<dx-radio-button-group>`'s value.
          * @value string: The identifier of this option.
          * @example value
         */
        "value": string;
    }
    interface DxRadioButtonGroup {
        "connectRadioButton": (connectedRadioButton: HTMLDxRadioButtonElement) => Promise<void>;
        /**
          * Disables the ability to interact with this component. Every option inside will also be set to `disabled`.
          * @value false: User can select an option.
          * @value true: User cannot select an option.
          * @example disabled
         */
        "disabled": boolean;
        "disconnectRadioButton": (disconnectedRadioButton: HTMLDxRadioButtonElement) => Promise<void>;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Sets the focus on the radio group.  If an option is selected it will be focused. If no option is selected the first option will be focused.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the radio group.
          * @important 
          * @value string: Label e.g `Choose an option`
          * @example label
         */
        "label"?: string;
        "radiogroupid": string;
        /**
          * Defines if the group is in a read-only state. The label of the current selected radio button will be displayed.
          * @value false: The component is displayed normally.
          * @value true: The current selected option is displayed as text. If no option is selected no text will be displayed.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Defines if the radio button group is a required form element.
          * @value false: It is not required to select an option.
          * @value true: To fulfill the requirement one option has to be selected.
          * @example required
         */
        "required": boolean;
        "select": (value: string) => Promise<void>;
        /**
          * This property mirrors the current selected option. If set, an inner radio button with the same `value` has to exist.
          * @value string: The value of an inner radio button.
          * @example value
          * @example read-value
          * @example write-value
         */
        "value": string;
    }
    interface DxRepresentativeInfo {
        /**
          * Specifies the name of the representative.
          * @value string: the name of the representative.
          * @example example
          * @example type
          * @important
         */
        "name": string;
        /**
          * Specifies the text before mentioning the name of the representative.
          * @value assistant: Shows "Assistent von: " as name prefix.
          * @value representative: Shows "Vertreter von: " as name prefix.
          * @example type
         */
        "type": "assistant" | "representative";
    }
    interface DxScrollableShadow {
        "showborders": boolean;
    }
    interface DxSidebar {
        "open": boolean;
    }
    interface DxSidebarContent {
        /**
          * Defines if the content area should claim the available space.
         */
        "contentgrows": boolean;
    }
    interface DxSimpleGrowBox {
        "animationmode": "top-to-bottom" | "bottom-to-top";
        /**
          * Defines whether the content is visible or not.
          * @value true: The content under the header is visible.
          * @value false: The content under the header is not displayed.
         */
        "open": boolean;
        /**
          * Reserves space before opening the grow-box. The reserved space equals the final height of the animated content.
         */
        "reservespaceonopen": boolean;
        "slidecontent": boolean;
    }
    interface DxSiteNavigation {
        /**
          * Defines from which breakpoint the expanded large screen layout of the component is displayed.
          * @value mq3: The expanded layout starts at mq3 or bigger.
          * @value mq4: The expanded layout starts at mq4 or bigger.
          * @example expanded-layout-at
         */
        "expandedlayoutat": SiteNavigationExpansionBreakpoint;
    }
    interface DxSiteNavigationMenu {
        /**
          * Registers a new dx-site-navigation-scope element for tracking
         */
        "addScope": (scope: HTMLDxSiteNavigationScopeElement) => Promise<void>;
        /**
          * If activated, the menu looks out for dx-site-navigation-section elements with the same value as the menu items, to automatically scroll into view.
          * @value true: Automatic navigation is enabled (default)
          * @value false: No automatic navigation
         */
        "autonavigation": boolean;
        "expandedlayoutat": SiteNavigationExpansionBreakpoint1;
        /**
          * Removes a previously registered dx-site-navigation-scope element from tracking
         */
        "removeScope": (scope: HTMLDxSiteNavigationScopeElement) => Promise<void>;
        /**
          * The value of the selected menu item.
         */
        "selectedvalue": string;
        /**
          * Title of the page. The text is display in the modal view on the small screen modals.
          * @value string: Page title.
         */
        "titlestring": string;
    }
    interface DxSiteNavigationMenuItem {
        /**
          * Label of the menu item that is displayed to the user.
          * @value String: label of the item.
         */
        "label": string;
        /**
          * State of the content section represented by this menu item.
          * @value error: There is an error within content.
          * @value required: There is an essential information needed in order to continue.
          * @value success: Everything is okay within that section.
          * @value none: No state. (default value)
         */
        "state": SiteNavigationMenuItemState;
        "toMenuItemModel": () => Promise<SiteNavigationMenuItem>;
        /**
          * Unique value to identify this menu item. Use for interaction event handling or when using site navigation scopes.
          * @value String: unique identifier.
         */
        "value": string;
    }
    interface DxSiteNavigationScope {
        /**
          * Unique value to identify this section scope.
          * @value string: identifier matching the associated menu item
         */
        "value": string;
    }
    interface DxSlideShow {
        /**
          * The initial page which is displayed when loading the component.
          * @value number: The first page to show.
         */
        "initialpage"?: number;
        /**
          * Defines the amount of items visible for the MQ1 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq1amount"?: number;
        /**
          * Defines the amount of items visible for the MQ2 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq2amount"?: number;
        /**
          * Defines the amount of items visible for the MQ3 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq3amount"?: number;
        /**
          * Defines the amount of items visible for the MQ4 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq4amount"?: number;
        /**
          * Defines the amount of items visible for the MQ5 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq5amount"?: number;
        /**
          * A function to programmatically transition to the specified page. Returns a promise which is fulfilled after the transition is done.
          * @param page The page to transition to.
          * @example set-page
         */
        "setPage": (page: number) => Promise<void>;
        /**
          * The space between the slotted elements.
          * @value number: Pixel value of the space between the slotted elements.
         */
        "spacebetween": number;
        /**
          * Specifies which navigation element should be displayed.
          * @value paginator: A paginator is displayed under the slide-show.
          * @value slider: A slider is displayed under the slide-show.
          * @example slider
         */
        "viewmode": "paginator" | "slider";
    }
    interface DxSlider {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Pattern used to format the current value. A '$' followed by a digit represents the value of the slider. The value of digits determines the amount of decimal numbers.
          * @value string: formatting of the slider value, e.g. `$1 %` or `$2 €`
          * @example formattingpattern
         */
        "formattingpattern": string;
        /**
          * Label text below the slider.
          * @important 
          * @value string: Text, e.g. `Amount`
          * @example label
         */
        "label"?: string;
        /**
          * Upper bounds of the slider range.
          * @value number: maximum value of the slider.
          * @example min-max-value
         */
        "max": number;
        /**
          * Lower bounds of the slider range.
          * @value number: minimal value of the slider.
          * @example min-max-value
         */
        "min": number;
        /**
          * Turns the input into the read-only mode.
          * @value false: value can be modified by the user (default)
          * @value true: value can not be modified by the user
          * @example readonly
         */
        "readonly": boolean;
        /**
          * If enabled, it displays labels for the minimum and maximum values.
          * @value false: labels are hidden (default)
          * @value true: labels are shown
          * @example show-min-max-label
         */
        "showminmaxlabel": boolean;
        /**
          * If enabled, it displays a label with the current value above the knob.
          * @value true: label is shown (default)
          * @value false: label is hidden
          * @example show-value-label
         */
        "showvaluelabel": boolean;
        /**
          * Step size of the slider values. Possible values are always multiples of the step size. Values are automatically rounded to match the step size.
          * @value number: step size.
          * @example step
         */
        "step": number;
        /**
          * Current value of the slider.
          * @value number: current value
          * @example min-max-value
         */
        "value": number;
    }
    interface DxSlideshowSlider {
        /**
          * Maximum value of the range, the slider can have.
          * @value number: Maximum value of the slider.
          * @example min-max-value
         */
        "max": number;
        /**
          * Size of the Steps, the values can be selected.
          * @value number: Minimal possible change.
          * @example step
         */
        "step": number;
        /**
          * Current value of the slider.
          * @value number: Current value
          * @example min-max-value
         */
        "value": number;
    }
    interface DxSort {
        /**
          * Whether the sorting is enabled or not.
          * @example sortable
         */
        "sortable": boolean;
    }
    interface DxSortHandle {
        "internaldraggable": boolean;
        "internaldragging": boolean;
    }
    interface DxSortItem {
        "internaldraggable": boolean;
        /**
          * Internal representation of the sort item.
          * @value string: Identificator
         */
        "value": string;
    }
    interface DxSpacer {
        /**
          * Defines the size of the spacer for the MQ1 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq1": Size;
        /**
          * Defines the size of the spacer for the MQ2 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq2": Size;
        /**
          * Defines the size of the spacer for the MQ3 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq3": Size;
        /**
          * Defines the size of the spacer for the MQ4 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq4": Size;
        /**
          * Defines the size of the spacer for the MQ5 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq5": Size;
    }
    interface DxSpinner {
        /**
          * @value number: Number of segments.
         */
        "segments": number;
        /**
          * Specififes the size of the spinner.
          * @value small: Spinner has a size of 16px.
          * @value medium: Spinner has a size of 24px.
          * @value large: Spinner has a size of 32px.
          * @value xlarge: Spinner has a size of 72px.
          * @example size
         */
        "size": "small" | "medium" | "large" | "xlarge";
        /**
          * Displays the spinner in a light or dark theme.
          * @value light: The segments have a dark tone to contrast a light background.
          * @value dark: The segments have a light tone to contrast a dark background.
          * @example theme
         */
        "theme": "light" | "dark";
    }
    interface DxTabBar {
        /**
          * Displays the tab page which `value` property corresponds to this property.
          * @important 
          * @value string: `value` of the `<dx-tab-page>` to display.
          * @example selected
         */
        "selected"?: string;
    }
    interface DxTabDropdown {
        "label": string;
    }
    interface DxTabPage {
        /**
          * The text which is displayed in the tab.
          * @value string: The label
         */
        "label": string;
        "toTabPage": () => Promise<TabPage>;
        /**
          * Unique identifier of this component within a `<dx-tab-bar>` element. The content will be visible when the corresponding `<dx-tab-bar>` element's `show` property value equals the `name`.  If no value is specified the parent `dx-tab-bar` elements falls back on the `label` property to differentiate this page.
          * @value string: Identifier
          * @example value
         */
        "value": string;
    }
    interface DxTable {
        /**
          * Defines the column that is used for initially sorting the table.
          * @value string: The `columnId` or `label` of the column.
          * @example initial-sort
         */
        "initialsort"?: string;
        /**
          * Specifies the initial sort direction.
          * @value asc: Ascending order.
          * @value desc: Descending order.
          * @example initial-sort
         */
        "initialsortdirection": "asc" | "desc";
        "internalScrollable": boolean;
        "invokeSort": (element: HTMLDxTableHeaderItemElement, reverse: boolean) => Promise<void>;
        /**
          * Specifies whether the table is self-managed or remote-controlled.
          * @value managed: The table is responsible for sorting and pagination.
          * @value remote: The table relies on an external implementation for creating rows, sorting and pagination using the `tableStateChanged` event.
          * @example remote
          * @example remote-complex
         */
        "mode": "managed" | "remote";
        /**
          * The initially selected option for the page size. It only has an effect if the `pagesizes` property is defined.
          * @value number: Number of rows per page.
          * @example paginator
         */
        "pagesize": number;
        /**
          * When defined it enables the pagination for this table. It defines the available page sizes a user is able to select.
          * @value ArrayString: Comma separated List of values in JSON-format e.g.: "[5,10,25]"
          * @value number[]: Array of numbers.
          * @example paginator
         */
        "pagesizes": ArrayStringOrArray1;
        /**
          * The data length this table should visualize. In case the table manages itself this attribute should not be set. If the table is remote-controlled this attribute has to be set because the table needs to know the exact amount of data to visualize the **paging** accordingly.
          * @example remote
          * @example remote-complex
         */
        "rowcount": number;
        /**
          * Specifies if the table should be scrollable. It is necessary to ensure that every `<dx-header-item>` has the width property set.
          * @value true: Table is scrollable.
          * @value false: Table is not scrollable.
          * @example scrollable
         */
        "scrollable": boolean;
        /**
          * Enables the selection of rows. A `key` for every row has to be specified.
          * @value true: The selection-group will be opened.
          * @value false: The selection-group will be closed.
          * @example selection
         */
        "selectionenabled": boolean;
        /**
          * Specifies if only one or multiple rows can be selected.
          * @value multi: Multiple rows can be selected.
          * @value single: One row can be selected at a time.
          * @example selection-mode
         */
        "selectionmode": SelectionMode;
    }
    interface DxTableCell {
        /**
          * The alignment of this cell. If not explicity set the cell derives the alignment
         */
        "align": ColumnAlignment;
        /**
          * The background color.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: blue-100, error, etc.)
         */
        "color": string;
        "obtainSettings": (settings: ColumnSettings1) => Promise<void>;
        /**
          * The type of this cell. If not explicity set the cell inherits the type by the corresponding `<dx-table-header-item>`.
          * @value text: The `value` is a string which will be rendered as text. It is left-aligned by default.
          * @value numeric: The `value` is a number which will be rendered as text. It is right-aligned by default.
          * @value date:  The `value` is a string ('YYYY-mm-dd') which will be formatted as a date string. It is left-aligned by default.
          * @value currency: The `value` is a number which will be formatted as a currency string (e.g: 1.120,00 €). The currency itself is rendered as an icon. It is right-aligned by default.
          * @value html: The default slot will be rendered in place of the `value`.
         */
        "type": string;
        /**
          * The value of this cell. It will be formatted depending on the cell's `type`.
          * @value string: The value which is formatted within the cell.
         */
        "value"?: string;
    }
    interface DxTableFooter {
    }
    interface DxTableHeader {
    }
    interface DxTableHeaderItem {
        /**
          * The alignment of the title text and the cell contents within this column. **Warning:** The default alignment which is defined by the `type` property will be overriden.
          * @value left: Child elements are left-aligned.
          * @value right: Child elements right-aligned.
          * @value center: Child elements are centered.
         */
        "align"?: "left" | "right" | "center";
        /**
          * This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property. Otherwise the `label` property will be send.
          * @value string: An unique identifikation for this column.
         */
        "columnid"?: string;
        /**
          * Declare your own sorting function for this column. This enables you to sort your own objects.
          * @value function: The sort function.
         */
        "customSort": (
    firstCell: HTMLDxTableCellElement,
    secondCell: HTMLDxTableCellElement
  ) => number;
        "getMaxWidth": () => Promise<number>;
        "getMinWidth": () => Promise<number>;
        /**
          * The title text of this column. This value represents the column identificator if there is no `columnid` specified.
          * @value string: The title text.
         */
        "label"?: string;
        /**
          * Specifies the number of rows within an column.
          * @value s: Table cells have only 1 text row
          * @value m: Table cells have up to 2 text rows.
          * @value l: Table cell have up to 3 text rows.
         */
        "linesize": "s" | "m" | "l";
        /**
          * Define the maximum width of the table in pixels.
          * @value number: The maximal width in pixels.
         */
        "maxwidth"?: number;
        /**
          * Define the minimal width of the table in pixels.
          * @value number: The minimal width in pixels.
         */
        "minwidth"?: number;
        "setSortDirection": (state: SortDirection1) => Promise<void>;
        /**
          * Allows the table to sort this column.
          * @value true: The column is sortable.
          * @value false: The column is not sortable.
         */
        "sortable": boolean;
        /**
          * Specifies the priority of this column which is considered in the table's secondary sorting.
          * @value number: Priority. The lower this number the higher the chance this column will be considered first in the secondary sorting of the table.
         */
        "sortpriority"?: number;
        /**
          * Whether this column is sticky or not.
          * @value true: The column and the corresponding cells are sticky and cannot be scrolled
          * @value false: The column can be scrolled away.
         */
        "sticky": boolean;
        "toColumnSettings": () => Promise<ColumnSettings1>;
        /**
          * Defines a type for the whole column.
          * @value text: Renders the provided `value` property of an `<dx-table-cell>` as a left aligned text.
          * @value numeric: Renders the provided `number` value of an `<dx-table-cell>` as a right aligned text.
          * @value date: Renders the provided string ('YYYY-mm-dd') of an `<dx-table-cell>` as a left aligned text.
          * @value currency: Renders the provided `number` of an `<dx-table-cell>` as right aligned text with attached currency icon.
          * @value html: Renders the provided html elements.
         */
        "type": ColumnType1;
        "usemaxwidth": boolean;
    }
    interface DxTableRow {
        /**
          * A unique identifier for the data this row displays in a table.
          * @value string: Unique identifier
         */
        "rowid": string;
        /**
          * Selects this row. If true the row will be selected and the table's selection will be enabled.
          * @value true: Row is selected.
          * @value false: Row is not selected.
          * @example selection
         */
        "selected": boolean;
        "visible": boolean;
    }
    interface DxTag {
        /**
          * Colors the background in the given color from the color palette. Only works for the `static` tag type.
          * @value string: A color from the color palette
          * @example custom-colors
         */
        "color"?: string;
        /**
          * Displays the given value
          * @value string: A text to display.
         */
        "label": string;
        /**
          * Defines if the interactive tag displays a remove button. Only works in comination with the `type` property set to `interactive` and the tag is not `selectable`.
          * @value true: tag shows button.
          * @value false: tag does not show button.
          * @example remove-event
         */
        "removeable": boolean;
        /**
          * Defines whether the tag is selectable or not.
          * @value true: tag is selectable .
          * @value false: tag is not selectable.
          * @example select-event
         */
        "selectable"?: boolean;
        /**
          * Defines if the tag is selected. When the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired.
          * @value true: tag is selected.
          * @value false: tag is not selected.
         */
        "selected": boolean;
        /**
          * Colors the tag text in the given color from the color palette. Only works for the `static` tag type.
          * @value string: A color from the color palette
          * @example custom-colors
         */
        "textcolor"?: string;
        /**
          * Defines the theme for this tag. The theme tag only works in combination with `static` tag type.
          * @value gray: Gray theme
          * @value gold: Gold theme
          * @value green: Green theme
          * @value red: Red theme
          * @value orange: Orange theme
          * @value purple: Purple theme
          * @value turquoise: Turquoise theme
          * @example themes
          * @important
         */
        "theme"?: TagThemeChoices;
        /**
          * Defines the type of tag.
          * @value static: Tag is not interactable by the user. The tag only shows its given label.
          * @value interactive: Tag is interactable by the user.
         */
        "type": "static" | "interactive";
    }
    interface DxText {
        /**
          * Defines the text color.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Specifies the style of the text.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value auto: The style is determined automatically based on the position the `<dx-text>` in the element tree.
          * @value Headline-1: Shortcut is `h1`
          * @value Headline-2: Shortcut is `h2`
          * @value Headline-3: Shortcut is `h3`
          * @value Headline-4: Shortcut is `h4`
          * @value Headline-5: Shortcut is `h5`
          * @value Paragraph-Big: Shortcut is `pb`
          * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
          * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
          * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
          * @value Paragraph-Standard: Shortcut is `ps`
          * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
          * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
          * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
          * @value Infotext-Standard: Shortcut is `it`
          * @value Infotext-Standard-Italic: Shortcut is `it-italic`
          * @value Infotext-Standard-Bold: Shortcut is `it-bold`
          * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
          * @value Infotext-Small: Shortcut is `its`
          * @value Infotext-Small-Italic: Shortcut is `its-italic`
          * @value Infotext-Small-Bold: Shortcut is `its-bold`
          * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
          * @important 
          * @example text-styles
          * @example text-styles-shortcuts
         */
        "type": string;
    }
    interface DxTextArea {
        /**
          * Textarea is disabled and cannot be used anymore. Label and border are grey.
          * @value true: Textarea is disabled
          * @value false: Textarea is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Text that is shown under the textarea in a red dialog.
          * @value string: Errormessage
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Sets the focus to the textarea.
         */
        "focusControl": () => Promise<void>;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label shown above the textarea.
          * @value string: Label e.g `Notizen`
          * @important 
          * @example label
         */
        "label"?: string;
        /**
          * Number of lines shown simultaneously.
          * @value number: Number of lines.
          * @example lines
         */
        "lines": number;
        /**
          * Maximum number of characters.
          * @value number: Number of characters
          * @example maxlength
         */
        "maxlength"?: number;
        /**
          * Placeholder for this text area.
          * @value string: The placeholder text.
          * @example placeholder
         */
        "placeholder": string;
        /**
          * Textarea is in read-only mode. Content of the textare is displayed in a simple way.
          * @value false: Formfield
          * @value true: Shows the content only as text.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Marks the textarea as mandatory.
          * @value false: Not mandatory (Default).
          * @value true: mandatory field.
          * @example required
          * @example required-maxlength
         */
        "required": boolean;
        /**
          * Text of the textarea.
          * @important 
          * @value string: Content of the textarea.
          * @example value
         */
        "value": string;
    }
    interface DxTextInput {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Error text which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Focuses this input field.
          * @example focus
         */
        "focusControl": () => Promise<void>;
        /**
          * Displays an icon when the input is not active or empty.
          * @value string: the name of the icon.
          * @example icon
         */
        "icon": string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced": boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limitlength
         */
        "limitlength"?: number;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
         */
        "placeholder": string;
        /**
          * Input field is in readonly mode. The value of this input is display in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly": boolean;
        /**
          * Input is marked as required.
          * @value false: Not required.
          * @value true: Input field is required, and an icon is displayed below the input field.
          * @example required
         */
        "required": boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
         */
        "size": "s" | "m";
        /**
          * The value of this input.
          * @important 
          * @value string: Value of this input.
          * @example value
         */
        "value": string;
    }
    interface DxTextList {
        /**
          * Specifies the style all text within this text list.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value Headline-1: Shortcut is `h1`
          * @value Headline-2: Shortcut is `h2`
          * @value Headline-3: Shortcut is `h3`
          * @value Headline-4: Shortcut is `h4`
          * @value Headline-5: Shortcut is `h5`
          * @value Paragraph-Big: Shortcut is `pb`
          * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
          * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
          * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
          * @value Paragraph-Standard: Shortcut is `ps`
          * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
          * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
          * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
          * @value Infotext-Standard: Shortcut is `it`
          * @value Infotext-Standard-Italic: Shortcut is `it-italic`
          * @value Infotext-Standard-Bold: Shortcut is `it-bold`
          * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
          * @value Infotext-Small: Shortcut is `its`
          * @value Infotext-Small-Italic: Shortcut is `its-italic`
          * @value Infotext-Small-Bold: Shortcut is `its-bold`
          * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
          * @example type
         */
        "type": string;
    }
    interface DxToggle {
        /**
          * Defines if the toggle is checked or not.
          * @value true: Toggle is checked
          * @value false: Toggle is not checked
          * @example checked
         */
        "checked": boolean;
        /**
          * Defines if the toggle is disabled or not.
          * @value true: Toggle is disabled
          * @value false: Toggle is not disabled
          * @example disabled
         */
        "disabled": boolean;
    }
    interface DxUserAvatar {
        /**
          * The image URL of the user.
          * @value string: URL
          * @example image
         */
        "imageurl"?: string;
        /**
          * The initials of the user's name.
          * @value string: Initials, e.g. `"FG"`
          * @important 
          * @example initials
         */
        "initials"?: string;
        /**
          * The size of the user avatar.
          * @value xs: Extra-small sized user avatar (40px)
          * @value s: Small sized user avatar (56px)
          * @value m: Medium sized user avatar (72px)
          * @value l: Large sized user avatar (96px)
          * @value xl: Extra-large sized user avatar (120px)
          * @value xxl: Extra-extra-large sized user avatar (160px)
         */
        "size": DxUserAvatarSize;
    }
    interface DxWizard {
        /**
          * The current visible step.
          * @value string: The `value` value of an inner `<dx-wizard-step>` element.
          * @example current-step
         */
        "currentstep": string;
        /**
          * Defines from which breakpoint the expanded large screen layout of the component is displayed.
          * @value auto: The expanded layout starts at mq2 for the `horizontal` layout and mq3 for the `vertical` layout.
          * @value mq3: The expanded layout starts at mq3 or bigger.
          * @value mq4: The expanded layout starts at mq4 or bigger.
          * @example expanded-layout-at
         */
        "expandedlayoutat": "auto" | "mq3" | "mq4";
        /**
          * This text will be displayed within the mobile-view's modal and should reflect the headline of the current page the user is in.
          * @value string: The headline of the current site.
          * @example headline
          * @important
         */
        "headline": string;
        /**
          * Defines the orientation of the wizard's expanded view. The default orientation of the mobile view (dependent on `expandedlayoutat` property) is always `horizontal`.
          * @value horizontal: All wizards will be displayed from left to right as long as there are six steps at most. If there are more than six steps the `vertical` view will be displayed instead.
          * @value vertical: All steps are displayed from top to bottom. Only the mobile view displays a horizontal setup.
          * @example orientation
          * @example orientation-invalid
         */
        "orientation": Orientation;
    }
    interface DxWizardStep {
        /**
          * Whether this step is already finished or not.
          * @value true: The step is finished. If all previous steps are finished as well the wizard automatically switches to the next page.
          * @value false: The step is not finished yet.
          * @example finished
         */
        "finished": boolean;
        /**
          * The displayed name of this step.
          * @value string: The displayed name.
          * @example label
         */
        "label": string;
        "toWizardStep": () => Promise<WizardStep>;
        /**
          * A unique identifier within a `<dx-wizard>` element.
          * @value string: A non-displayed text representing this component. It also serves the purpose of identifying which slot to show when this step is currently edited.
          * @example value
         */
        "value": string;
    }
    interface DxYesNo {
        /**
          * Defines if the buttons are disabled or not.
          * @value true: Buttons are disabled
          * @value false: Buttons are not disabled
          * @example disabled
         */
        "disabled": boolean;
        /**
          * Error text which is displayed within a red dialog below the input.
          * @value string: error message
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Defines the height of the buttons.
          * @value s: Buttons are small.
          * @value m: Buttons are a bit bigger.
          * @example size
         */
        "size": ButtonSize;
        /**
          * The value of this component.
          * @important 
          * @value yes: yes button is selected
          * @value no: no button is selected.
          * @value unset: Nothing is selected.
          * @example value
         */
        "value": ButtonValue;
    }
}
export interface DsAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsAlertElement;
}
export interface DsBorderedFormItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsBorderedFormItemElement;
}
export interface DsCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCalendarElement;
}
export interface DsCardTabBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCardTabBarElement;
}
export interface DsChartSampleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsChartSampleElement;
}
export interface DsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsCheckboxElement;
}
export interface DsDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsDateInputElement;
}
export interface DsDonutChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsDonutChartElement;
}
export interface DsDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsDropdownElement;
}
export interface DsFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsFooterElement;
}
export interface DsGroupedTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsGroupedTextInputElement;
}
export interface DsGrowBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsGrowBoxElement;
}
export interface DsHeaderActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsHeaderActionElement;
}
export interface DsHeaderUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsHeaderUserElement;
}
export interface DsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsModalElement;
}
export interface DsNavigatedContentMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsNavigatedContentMenuElement;
}
export interface DsNotificationToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsNotificationToastElement;
}
export interface DsNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsNumberInputElement;
}
export interface DsPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsPaginatorElement;
}
export interface DsRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsRadioButtonGroupElement;
}
export interface DsScrollContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsScrollContainerElement;
}
export interface DsSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsSearchElement;
}
export interface DsSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsSliderElement;
}
export interface DsTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTableElement;
}
export interface DsTablePageSizePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTablePageSizePickerElement;
}
export interface DsTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTableRowElement;
}
export interface DsTextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTextAreaElement;
}
export interface DsTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsTextInputElement;
}
export interface DsYesNoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsYesNoElement;
}
export interface DxBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxBreadcrumbElement;
}
export interface DxCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxCalendarElement;
}
export interface DxCardHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxCardHeaderElement;
}
export interface DxChartSampleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxChartSampleElement;
}
export interface DxCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxCheckboxElement;
}
export interface DxClearButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxClearButtonElement;
}
export interface DxComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxComboboxElement;
}
export interface DxContentSwitcherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxContentSwitcherElement;
}
export interface DxDateInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxDateInputElement;
}
export interface DxDonutChartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxDonutChartElement;
}
export interface DxDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxDropdownElement;
}
export interface DxErrorMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxErrorMessageElement;
}
export interface DxErrorPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxErrorPageElement;
}
export interface DxHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderElement;
}
export interface DxHeaderAppFavoritesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderAppFavoritesElement;
}
export interface DxHeaderAppFavoritesSidebarContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderAppFavoritesSidebarContentElement;
}
export interface DxHeaderApplicationNameCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderApplicationNameElement;
}
export interface DxHeaderMenuBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderMenuBarElement;
}
export interface DxHeaderMenuButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderMenuButtonElement;
}
export interface DxHeaderMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderMenuItemElement;
}
export interface DxHeaderMenuLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderMenuLinkElement;
}
export interface DxHeaderNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderNavigationElement;
}
export interface DxHeaderNavigationItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderNavigationItemElement;
}
export interface DxHeaderNavigationSidebarContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderNavigationSidebarContentElement;
}
export interface DxHeaderUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderUserElement;
}
export interface DxHeaderUserSidebarContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxHeaderUserSidebarContentElement;
}
export interface DxInternalWizardStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxInternalWizardStepElement;
}
export interface DxListFlyoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxListFlyoutElement;
}
export interface DxListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxListItemElement;
}
export interface DxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxModalElement;
}
export interface DxMultiDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxMultiDropdownElement;
}
export interface DxNotificationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNotificationBarElement;
}
export interface DxNotificationToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNotificationToastElement;
}
export interface DxNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNumberInputElement;
}
export interface DxNumberPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNumberPaginatorElement;
}
export interface DxNumberPaginatorPageButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNumberPaginatorPageButtonElement;
}
export interface DxNumberPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxNumberPickerElement;
}
export interface DxOverflowMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxOverflowMenuElement;
}
export interface DxOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxOverlayElement;
}
export interface DxPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxPaginatorElement;
}
export interface DxRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxRadioButtonElement;
}
export interface DxRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxRadioButtonGroupElement;
}
export interface DxSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSidebarElement;
}
export interface DxSimpleGrowBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSimpleGrowBoxElement;
}
export interface DxSiteNavigationMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSiteNavigationMenuElement;
}
export interface DxSlideShowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSlideShowElement;
}
export interface DxSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSliderElement;
}
export interface DxSlideshowSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSlideshowSliderElement;
}
export interface DxSortCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSortElement;
}
export interface DxSortHandleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSortHandleElement;
}
export interface DxSortItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxSortItemElement;
}
export interface DxTabBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTabBarElement;
}
export interface DxTabDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTabDropdownElement;
}
export interface DxTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTableElement;
}
export interface DxTableRowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTableRowElement;
}
export interface DxTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTagElement;
}
export interface DxTextAreaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTextAreaElement;
}
export interface DxTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxTextInputElement;
}
export interface DxToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxToggleElement;
}
export interface DxWizardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxWizardElement;
}
export interface DxWizardStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxWizardStepElement;
}
export interface DxYesNoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDxYesNoElement;
}
declare global {
    interface HTMLDsActionListElement extends Components.DsActionList, HTMLStencilElement {
    }
    var HTMLDsActionListElement: {
        prototype: HTMLDsActionListElement;
        new (): HTMLDsActionListElement;
    };
    interface HTMLDsActionListItemElement extends Components.DsActionListItem, HTMLStencilElement {
    }
    var HTMLDsActionListItemElement: {
        prototype: HTMLDsActionListItemElement;
        new (): HTMLDsActionListItemElement;
    };
    interface HTMLDsAlertElement extends Components.DsAlert, HTMLStencilElement {
    }
    var HTMLDsAlertElement: {
        prototype: HTMLDsAlertElement;
        new (): HTMLDsAlertElement;
    };
    interface HTMLDsAlertButtonElement extends Components.DsAlertButton, HTMLStencilElement {
    }
    var HTMLDsAlertButtonElement: {
        prototype: HTMLDsAlertButtonElement;
        new (): HTMLDsAlertButtonElement;
    };
    interface HTMLDsAnnouncementBarElement extends Components.DsAnnouncementBar, HTMLStencilElement {
    }
    var HTMLDsAnnouncementBarElement: {
        prototype: HTMLDsAnnouncementBarElement;
        new (): HTMLDsAnnouncementBarElement;
    };
    interface HTMLDsAppElement extends Components.DsApp, HTMLStencilElement {
    }
    var HTMLDsAppElement: {
        prototype: HTMLDsAppElement;
        new (): HTMLDsAppElement;
    };
    interface HTMLDsBlinkElement extends Components.DsBlink, HTMLStencilElement {
    }
    var HTMLDsBlinkElement: {
        prototype: HTMLDsBlinkElement;
        new (): HTMLDsBlinkElement;
    };
    interface HTMLDsBorderedFormGroupElement extends Components.DsBorderedFormGroup, HTMLStencilElement {
    }
    var HTMLDsBorderedFormGroupElement: {
        prototype: HTMLDsBorderedFormGroupElement;
        new (): HTMLDsBorderedFormGroupElement;
    };
    interface HTMLDsBorderedFormItemElement extends Components.DsBorderedFormItem, HTMLStencilElement {
    }
    var HTMLDsBorderedFormItemElement: {
        prototype: HTMLDsBorderedFormItemElement;
        new (): HTMLDsBorderedFormItemElement;
    };
    interface HTMLDsButtonElement extends Components.DsButton, HTMLStencilElement {
    }
    var HTMLDsButtonElement: {
        prototype: HTMLDsButtonElement;
        new (): HTMLDsButtonElement;
    };
    interface HTMLDsButtonBarElement extends Components.DsButtonBar, HTMLStencilElement {
    }
    var HTMLDsButtonBarElement: {
        prototype: HTMLDsButtonBarElement;
        new (): HTMLDsButtonBarElement;
    };
    interface HTMLDsCalendarElement extends Components.DsCalendar, HTMLStencilElement {
    }
    var HTMLDsCalendarElement: {
        prototype: HTMLDsCalendarElement;
        new (): HTMLDsCalendarElement;
    };
    interface HTMLDsCardElement extends Components.DsCard, HTMLStencilElement {
    }
    var HTMLDsCardElement: {
        prototype: HTMLDsCardElement;
        new (): HTMLDsCardElement;
    };
    interface HTMLDsCardCollapsableElement extends Components.DsCardCollapsable, HTMLStencilElement {
    }
    var HTMLDsCardCollapsableElement: {
        prototype: HTMLDsCardCollapsableElement;
        new (): HTMLDsCardCollapsableElement;
    };
    interface HTMLDsCardContentElement extends Components.DsCardContent, HTMLStencilElement {
    }
    var HTMLDsCardContentElement: {
        prototype: HTMLDsCardContentElement;
        new (): HTMLDsCardContentElement;
    };
    interface HTMLDsCardHeaderElement extends Components.DsCardHeader, HTMLStencilElement {
    }
    var HTMLDsCardHeaderElement: {
        prototype: HTMLDsCardHeaderElement;
        new (): HTMLDsCardHeaderElement;
    };
    interface HTMLDsCardImageHeaderElement extends Components.DsCardImageHeader, HTMLStencilElement {
    }
    var HTMLDsCardImageHeaderElement: {
        prototype: HTMLDsCardImageHeaderElement;
        new (): HTMLDsCardImageHeaderElement;
    };
    interface HTMLDsCardTabBarElement extends Components.DsCardTabBar, HTMLStencilElement {
    }
    var HTMLDsCardTabBarElement: {
        prototype: HTMLDsCardTabBarElement;
        new (): HTMLDsCardTabBarElement;
    };
    interface HTMLDsCardTabPageElement extends Components.DsCardTabPage, HTMLStencilElement {
    }
    var HTMLDsCardTabPageElement: {
        prototype: HTMLDsCardTabPageElement;
        new (): HTMLDsCardTabPageElement;
    };
    interface HTMLDsCenteredBoardElement extends Components.DsCenteredBoard, HTMLStencilElement {
    }
    var HTMLDsCenteredBoardElement: {
        prototype: HTMLDsCenteredBoardElement;
        new (): HTMLDsCenteredBoardElement;
    };
    interface HTMLDsCenteredBoardItemElement extends Components.DsCenteredBoardItem, HTMLStencilElement {
    }
    var HTMLDsCenteredBoardItemElement: {
        prototype: HTMLDsCenteredBoardItemElement;
        new (): HTMLDsCenteredBoardItemElement;
    };
    interface HTMLDsChartSampleElement extends Components.DsChartSample, HTMLStencilElement {
    }
    var HTMLDsChartSampleElement: {
        prototype: HTMLDsChartSampleElement;
        new (): HTMLDsChartSampleElement;
    };
    interface HTMLDsCheckboxElement extends Components.DsCheckbox, HTMLStencilElement {
    }
    var HTMLDsCheckboxElement: {
        prototype: HTMLDsCheckboxElement;
        new (): HTMLDsCheckboxElement;
    };
    interface HTMLDsColumnElement extends Components.DsColumn, HTMLStencilElement {
    }
    var HTMLDsColumnElement: {
        prototype: HTMLDsColumnElement;
        new (): HTMLDsColumnElement;
    };
    interface HTMLDsDateInputElement extends Components.DsDateInput, HTMLStencilElement {
    }
    var HTMLDsDateInputElement: {
        prototype: HTMLDsDateInputElement;
        new (): HTMLDsDateInputElement;
    };
    interface HTMLDsDateRangeElement extends Components.DsDateRange, HTMLStencilElement {
    }
    var HTMLDsDateRangeElement: {
        prototype: HTMLDsDateRangeElement;
        new (): HTMLDsDateRangeElement;
    };
    interface HTMLDsDonutChartElement extends Components.DsDonutChart, HTMLStencilElement {
    }
    var HTMLDsDonutChartElement: {
        prototype: HTMLDsDonutChartElement;
        new (): HTMLDsDonutChartElement;
    };
    interface HTMLDsDropdownElement extends Components.DsDropdown, HTMLStencilElement {
    }
    var HTMLDsDropdownElement: {
        prototype: HTMLDsDropdownElement;
        new (): HTMLDsDropdownElement;
    };
    interface HTMLDsDropdownOptionElement extends Components.DsDropdownOption, HTMLStencilElement {
    }
    var HTMLDsDropdownOptionElement: {
        prototype: HTMLDsDropdownOptionElement;
        new (): HTMLDsDropdownOptionElement;
    };
    interface HTMLDsFmErgebnisuebersichtElement extends Components.DsFmErgebnisuebersicht, HTMLStencilElement {
    }
    var HTMLDsFmErgebnisuebersichtElement: {
        prototype: HTMLDsFmErgebnisuebersichtElement;
        new (): HTMLDsFmErgebnisuebersichtElement;
    };
    interface HTMLDsFmErgebnisuebersichtItemElement extends Components.DsFmErgebnisuebersichtItem, HTMLStencilElement {
    }
    var HTMLDsFmErgebnisuebersichtItemElement: {
        prototype: HTMLDsFmErgebnisuebersichtItemElement;
        new (): HTMLDsFmErgebnisuebersichtItemElement;
    };
    interface HTMLDsFmErgebnisuebersichtTableElement extends Components.DsFmErgebnisuebersichtTable, HTMLStencilElement {
    }
    var HTMLDsFmErgebnisuebersichtTableElement: {
        prototype: HTMLDsFmErgebnisuebersichtTableElement;
        new (): HTMLDsFmErgebnisuebersichtTableElement;
    };
    interface HTMLDsFooterElement extends Components.DsFooter, HTMLStencilElement {
    }
    var HTMLDsFooterElement: {
        prototype: HTMLDsFooterElement;
        new (): HTMLDsFooterElement;
    };
    interface HTMLDsFormLayoutElement extends Components.DsFormLayout, HTMLStencilElement {
    }
    var HTMLDsFormLayoutElement: {
        prototype: HTMLDsFormLayoutElement;
        new (): HTMLDsFormLayoutElement;
    };
    interface HTMLDsFullscreenSpinnerElement extends Components.DsFullscreenSpinner, HTMLStencilElement {
    }
    var HTMLDsFullscreenSpinnerElement: {
        prototype: HTMLDsFullscreenSpinnerElement;
        new (): HTMLDsFullscreenSpinnerElement;
    };
    interface HTMLDsFunctionIconButtonElement extends Components.DsFunctionIconButton, HTMLStencilElement {
    }
    var HTMLDsFunctionIconButtonElement: {
        prototype: HTMLDsFunctionIconButtonElement;
        new (): HTMLDsFunctionIconButtonElement;
    };
    interface HTMLDsGridElement extends Components.DsGrid, HTMLStencilElement {
    }
    var HTMLDsGridElement: {
        prototype: HTMLDsGridElement;
        new (): HTMLDsGridElement;
    };
    interface HTMLDsGroupedTextInputElement extends Components.DsGroupedTextInput, HTMLStencilElement {
    }
    var HTMLDsGroupedTextInputElement: {
        prototype: HTMLDsGroupedTextInputElement;
        new (): HTMLDsGroupedTextInputElement;
    };
    interface HTMLDsGrowBoxElement extends Components.DsGrowBox, HTMLStencilElement {
    }
    var HTMLDsGrowBoxElement: {
        prototype: HTMLDsGrowBoxElement;
        new (): HTMLDsGrowBoxElement;
    };
    interface HTMLDsHeaderElement extends Components.DsHeader, HTMLStencilElement {
    }
    var HTMLDsHeaderElement: {
        prototype: HTMLDsHeaderElement;
        new (): HTMLDsHeaderElement;
    };
    interface HTMLDsHeaderActionElement extends Components.DsHeaderAction, HTMLStencilElement {
    }
    var HTMLDsHeaderActionElement: {
        prototype: HTMLDsHeaderActionElement;
        new (): HTMLDsHeaderActionElement;
    };
    interface HTMLDsHeaderActionListElement extends Components.DsHeaderActionList, HTMLStencilElement {
    }
    var HTMLDsHeaderActionListElement: {
        prototype: HTMLDsHeaderActionListElement;
        new (): HTMLDsHeaderActionListElement;
    };
    interface HTMLDsHeaderCustomerElement extends Components.DsHeaderCustomer, HTMLStencilElement {
    }
    var HTMLDsHeaderCustomerElement: {
        prototype: HTMLDsHeaderCustomerElement;
        new (): HTMLDsHeaderCustomerElement;
    };
    interface HTMLDsHeaderUserElement extends Components.DsHeaderUser, HTMLStencilElement {
    }
    var HTMLDsHeaderUserElement: {
        prototype: HTMLDsHeaderUserElement;
        new (): HTMLDsHeaderUserElement;
    };
    interface HTMLDsHeroImageElement extends Components.DsHeroImage, HTMLStencilElement {
    }
    var HTMLDsHeroImageElement: {
        prototype: HTMLDsHeroImageElement;
        new (): HTMLDsHeroImageElement;
    };
    interface HTMLDsHrElement extends Components.DsHr, HTMLStencilElement {
    }
    var HTMLDsHrElement: {
        prototype: HTMLDsHrElement;
        new (): HTMLDsHrElement;
    };
    interface HTMLDsIconElement extends Components.DsIcon, HTMLStencilElement {
    }
    var HTMLDsIconElement: {
        prototype: HTMLDsIconElement;
        new (): HTMLDsIconElement;
    };
    interface HTMLDsIconAchtungElement extends Components.DsIconAchtung, HTMLStencilElement {
    }
    var HTMLDsIconAchtungElement: {
        prototype: HTMLDsIconAchtungElement;
        new (): HTMLDsIconAchtungElement;
    };
    interface HTMLDsIconAchtungcircleElement extends Components.DsIconAchtungcircle, HTMLStencilElement {
    }
    var HTMLDsIconAchtungcircleElement: {
        prototype: HTMLDsIconAchtungcircleElement;
        new (): HTMLDsIconAchtungcircleElement;
    };
    interface HTMLDsIconAddonclearbuttonElement extends Components.DsIconAddonclearbutton, HTMLStencilElement {
    }
    var HTMLDsIconAddonclearbuttonElement: {
        prototype: HTMLDsIconAddonclearbuttonElement;
        new (): HTMLDsIconAddonclearbuttonElement;
    };
    interface HTMLDsIconAktivitaetenElement extends Components.DsIconAktivitaeten, HTMLStencilElement {
    }
    var HTMLDsIconAktivitaetenElement: {
        prototype: HTMLDsIconAktivitaetenElement;
        new (): HTMLDsIconAktivitaetenElement;
    };
    interface HTMLDsIconAktualisierenElement extends Components.DsIconAktualisieren, HTMLStencilElement {
    }
    var HTMLDsIconAktualisierenElement: {
        prototype: HTMLDsIconAktualisierenElement;
        new (): HTMLDsIconAktualisierenElement;
    };
    interface HTMLDsIconAnlegerElement extends Components.DsIconAnleger, HTMLStencilElement {
    }
    var HTMLDsIconAnlegerElement: {
        prototype: HTMLDsIconAnlegerElement;
        new (): HTMLDsIconAnlegerElement;
    };
    interface HTMLDsIconArbeitsplatzElement extends Components.DsIconArbeitsplatz, HTMLStencilElement {
    }
    var HTMLDsIconArbeitsplatzElement: {
        prototype: HTMLDsIconArbeitsplatzElement;
        new (): HTMLDsIconArbeitsplatzElement;
    };
    interface HTMLDsIconArbeitswegElement extends Components.DsIconArbeitsweg, HTMLStencilElement {
    }
    var HTMLDsIconArbeitswegElement: {
        prototype: HTMLDsIconArbeitswegElement;
        new (): HTMLDsIconArbeitswegElement;
    };
    interface HTMLDsIconAugeElement extends Components.DsIconAuge, HTMLStencilElement {
    }
    var HTMLDsIconAugeElement: {
        prototype: HTMLDsIconAugeElement;
        new (): HTMLDsIconAugeElement;
    };
    interface HTMLDsIconAugedurchgestrichenElement extends Components.DsIconAugedurchgestrichen, HTMLStencilElement {
    }
    var HTMLDsIconAugedurchgestrichenElement: {
        prototype: HTMLDsIconAugedurchgestrichenElement;
        new (): HTMLDsIconAugedurchgestrichenElement;
    };
    interface HTMLDsIconAusgehenElement extends Components.DsIconAusgehen, HTMLStencilElement {
    }
    var HTMLDsIconAusgehenElement: {
        prototype: HTMLDsIconAusgehenElement;
        new (): HTMLDsIconAusgehenElement;
    };
    interface HTMLDsIconAusweisElement extends Components.DsIconAusweis, HTMLStencilElement {
    }
    var HTMLDsIconAusweisElement: {
        prototype: HTMLDsIconAusweisElement;
        new (): HTMLDsIconAusweisElement;
    };
    interface HTMLDsIconAusweischeckElement extends Components.DsIconAusweischeck, HTMLStencilElement {
    }
    var HTMLDsIconAusweischeckElement: {
        prototype: HTMLDsIconAusweischeckElement;
        new (): HTMLDsIconAusweischeckElement;
    };
    interface HTMLDsIconBankElement extends Components.DsIconBank, HTMLStencilElement {
    }
    var HTMLDsIconBankElement: {
        prototype: HTMLDsIconBankElement;
        new (): HTMLDsIconBankElement;
    };
    interface HTMLDsIconBearbeitenElement extends Components.DsIconBearbeiten, HTMLStencilElement {
    }
    var HTMLDsIconBearbeitenElement: {
        prototype: HTMLDsIconBearbeitenElement;
        new (): HTMLDsIconBearbeitenElement;
    };
    interface HTMLDsIconBeratungbeendenElement extends Components.DsIconBeratungbeenden, HTMLStencilElement {
    }
    var HTMLDsIconBeratungbeendenElement: {
        prototype: HTMLDsIconBeratungbeendenElement;
        new (): HTMLDsIconBeratungbeendenElement;
    };
    interface HTMLDsIconBueroklammerElement extends Components.DsIconBueroklammer, HTMLStencilElement {
    }
    var HTMLDsIconBueroklammerElement: {
        prototype: HTMLDsIconBueroklammerElement;
        new (): HTMLDsIconBueroklammerElement;
    };
    interface HTMLDsIconButtonElement extends Components.DsIconButton, HTMLStencilElement {
    }
    var HTMLDsIconButtonElement: {
        prototype: HTMLDsIconButtonElement;
        new (): HTMLDsIconButtonElement;
    };
    interface HTMLDsIconCheckElement extends Components.DsIconCheck, HTMLStencilElement {
    }
    var HTMLDsIconCheckElement: {
        prototype: HTMLDsIconCheckElement;
        new (): HTMLDsIconCheckElement;
    };
    interface HTMLDsIconCollapsecloseElement extends Components.DsIconCollapseclose, HTMLStencilElement {
    }
    var HTMLDsIconCollapsecloseElement: {
        prototype: HTMLDsIconCollapsecloseElement;
        new (): HTMLDsIconCollapsecloseElement;
    };
    interface HTMLDsIconCollapseopenElement extends Components.DsIconCollapseopen, HTMLStencilElement {
    }
    var HTMLDsIconCollapseopenElement: {
        prototype: HTMLDsIconCollapseopenElement;
        new (): HTMLDsIconCollapseopenElement;
    };
    interface HTMLDsIconDislikeElement extends Components.DsIconDislike, HTMLStencilElement {
    }
    var HTMLDsIconDislikeElement: {
        prototype: HTMLDsIconDislikeElement;
        new (): HTMLDsIconDislikeElement;
    };
    interface HTMLDsIconDokumenteuploadElement extends Components.DsIconDokumenteupload, HTMLStencilElement {
    }
    var HTMLDsIconDokumenteuploadElement: {
        prototype: HTMLDsIconDokumenteuploadElement;
        new (): HTMLDsIconDokumenteuploadElement;
    };
    interface HTMLDsIconDownloadElement extends Components.DsIconDownload, HTMLStencilElement {
    }
    var HTMLDsIconDownloadElement: {
        prototype: HTMLDsIconDownloadElement;
        new (): HTMLDsIconDownloadElement;
    };
    interface HTMLDsIconDropdownElement extends Components.DsIconDropdown, HTMLStencilElement {
    }
    var HTMLDsIconDropdownElement: {
        prototype: HTMLDsIconDropdownElement;
        new (): HTMLDsIconDropdownElement;
    };
    interface HTMLDsIconEinkaufenElement extends Components.DsIconEinkaufen, HTMLStencilElement {
    }
    var HTMLDsIconEinkaufenElement: {
        prototype: HTMLDsIconEinkaufenElement;
        new (): HTMLDsIconEinkaufenElement;
    };
    interface HTMLDsIconEinstellungenElement extends Components.DsIconEinstellungen, HTMLStencilElement {
    }
    var HTMLDsIconEinstellungenElement: {
        prototype: HTMLDsIconEinstellungenElement;
        new (): HTMLDsIconEinstellungenElement;
    };
    interface HTMLDsIconEurozeichenElement extends Components.DsIconEurozeichen, HTMLStencilElement {
    }
    var HTMLDsIconEurozeichenElement: {
        prototype: HTMLDsIconEurozeichenElement;
        new (): HTMLDsIconEurozeichenElement;
    };
    interface HTMLDsIconFaqElement extends Components.DsIconFaq, HTMLStencilElement {
    }
    var HTMLDsIconFaqElement: {
        prototype: HTMLDsIconFaqElement;
        new (): HTMLDsIconFaqElement;
    };
    interface HTMLDsIconFavoritfilledElement extends Components.DsIconFavoritfilled, HTMLStencilElement {
    }
    var HTMLDsIconFavoritfilledElement: {
        prototype: HTMLDsIconFavoritfilledElement;
        new (): HTMLDsIconFavoritfilledElement;
    };
    interface HTMLDsIconFavoritoutlineElement extends Components.DsIconFavoritoutline, HTMLStencilElement {
    }
    var HTMLDsIconFavoritoutlineElement: {
        prototype: HTMLDsIconFavoritoutlineElement;
        new (): HTMLDsIconFavoritoutlineElement;
    };
    interface HTMLDsIconFilterElement extends Components.DsIconFilter, HTMLStencilElement {
    }
    var HTMLDsIconFilterElement: {
        prototype: HTMLDsIconFilterElement;
        new (): HTMLDsIconFilterElement;
    };
    interface HTMLDsIconFormulareElement extends Components.DsIconFormulare, HTMLStencilElement {
    }
    var HTMLDsIconFormulareElement: {
        prototype: HTMLDsIconFormulareElement;
        new (): HTMLDsIconFormulareElement;
    };
    interface HTMLDsIconFormulareinitialElement extends Components.DsIconFormulareinitial, HTMLStencilElement {
    }
    var HTMLDsIconFormulareinitialElement: {
        prototype: HTMLDsIconFormulareinitialElement;
        new (): HTMLDsIconFormulareinitialElement;
    };
    interface HTMLDsIconFotogalerieElement extends Components.DsIconFotogalerie, HTMLStencilElement {
    }
    var HTMLDsIconFotogalerieElement: {
        prototype: HTMLDsIconFotogalerieElement;
        new (): HTMLDsIconFotogalerieElement;
    };
    interface HTMLDsIconFotogalerierahmenElement extends Components.DsIconFotogalerierahmen, HTMLStencilElement {
    }
    var HTMLDsIconFotogalerierahmenElement: {
        prototype: HTMLDsIconFotogalerierahmenElement;
        new (): HTMLDsIconFotogalerierahmenElement;
    };
    interface HTMLDsIconGartenarbeitElement extends Components.DsIconGartenarbeit, HTMLStencilElement {
    }
    var HTMLDsIconGartenarbeitElement: {
        prototype: HTMLDsIconGartenarbeitElement;
        new (): HTMLDsIconGartenarbeitElement;
    };
    interface HTMLDsIconGeldElement extends Components.DsIconGeld, HTMLStencilElement {
    }
    var HTMLDsIconGeldElement: {
        prototype: HTMLDsIconGeldElement;
        new (): HTMLDsIconGeldElement;
    };
    interface HTMLDsIconGesundheitElement extends Components.DsIconGesundheit, HTMLStencilElement {
    }
    var HTMLDsIconGesundheitElement: {
        prototype: HTMLDsIconGesundheitElement;
        new (): HTMLDsIconGesundheitElement;
    };
    interface HTMLDsIconGesundheit2Element extends Components.DsIconGesundheit2, HTMLStencilElement {
    }
    var HTMLDsIconGesundheit2Element: {
        prototype: HTMLDsIconGesundheit2Element;
        new (): HTMLDsIconGesundheit2Element;
    };
    interface HTMLDsIconGlasElement extends Components.DsIconGlas, HTMLStencilElement {
    }
    var HTMLDsIconGlasElement: {
        prototype: HTMLDsIconGlasElement;
        new (): HTMLDsIconGlasElement;
    };
    interface HTMLDsIconGlas2Element extends Components.DsIconGlas2, HTMLStencilElement {
    }
    var HTMLDsIconGlas2Element: {
        prototype: HTMLDsIconGlas2Element;
        new (): HTMLDsIconGlas2Element;
    };
    interface HTMLDsIconGlockeElement extends Components.DsIconGlocke, HTMLStencilElement {
    }
    var HTMLDsIconGlockeElement: {
        prototype: HTMLDsIconGlockeElement;
        new (): HTMLDsIconGlockeElement;
    };
    interface HTMLDsIconHamburgermenueElement extends Components.DsIconHamburgermenue, HTMLStencilElement {
    }
    var HTMLDsIconHamburgermenueElement: {
        prototype: HTMLDsIconHamburgermenueElement;
        new (): HTMLDsIconHamburgermenueElement;
    };
    interface HTMLDsIconHauptdokumentElement extends Components.DsIconHauptdokument, HTMLStencilElement {
    }
    var HTMLDsIconHauptdokumentElement: {
        prototype: HTMLDsIconHauptdokumentElement;
        new (): HTMLDsIconHauptdokumentElement;
    };
    interface HTMLDsIconHausarbeitElement extends Components.DsIconHausarbeit, HTMLStencilElement {
    }
    var HTMLDsIconHausarbeitElement: {
        prototype: HTMLDsIconHausarbeitElement;
        new (): HTMLDsIconHausarbeitElement;
    };
    interface HTMLDsIconHausratElement extends Components.DsIconHausrat, HTMLStencilElement {
    }
    var HTMLDsIconHausratElement: {
        prototype: HTMLDsIconHausratElement;
        new (): HTMLDsIconHausratElement;
    };
    interface HTMLDsIconHausratreiseElement extends Components.DsIconHausratreise, HTMLStencilElement {
    }
    var HTMLDsIconHausratreiseElement: {
        prototype: HTMLDsIconHausratreiseElement;
        new (): HTMLDsIconHausratreiseElement;
    };
    interface HTMLDsIconHomeElement extends Components.DsIconHome, HTMLStencilElement {
    }
    var HTMLDsIconHomeElement: {
        prototype: HTMLDsIconHomeElement;
        new (): HTMLDsIconHomeElement;
    };
    interface HTMLDsIconInfoElement extends Components.DsIconInfo, HTMLStencilElement {
    }
    var HTMLDsIconInfoElement: {
        prototype: HTMLDsIconInfoElement;
        new (): HTMLDsIconInfoElement;
    };
    interface HTMLDsIconInvestmentElement extends Components.DsIconInvestment, HTMLStencilElement {
    }
    var HTMLDsIconInvestmentElement: {
        prototype: HTMLDsIconInvestmentElement;
        new (): HTMLDsIconInvestmentElement;
    };
    interface HTMLDsIconJubilaeumicon10Element extends Components.DsIconJubilaeumicon10, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon10Element: {
        prototype: HTMLDsIconJubilaeumicon10Element;
        new (): HTMLDsIconJubilaeumicon10Element;
    };
    interface HTMLDsIconJubilaeumicon100Element extends Components.DsIconJubilaeumicon100, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon100Element: {
        prototype: HTMLDsIconJubilaeumicon100Element;
        new (): HTMLDsIconJubilaeumicon100Element;
    };
    interface HTMLDsIconJubilaeumicon105Element extends Components.DsIconJubilaeumicon105, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon105Element: {
        prototype: HTMLDsIconJubilaeumicon105Element;
        new (): HTMLDsIconJubilaeumicon105Element;
    };
    interface HTMLDsIconJubilaeumicon110Element extends Components.DsIconJubilaeumicon110, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon110Element: {
        prototype: HTMLDsIconJubilaeumicon110Element;
        new (): HTMLDsIconJubilaeumicon110Element;
    };
    interface HTMLDsIconJubilaeumicon115Element extends Components.DsIconJubilaeumicon115, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon115Element: {
        prototype: HTMLDsIconJubilaeumicon115Element;
        new (): HTMLDsIconJubilaeumicon115Element;
    };
    interface HTMLDsIconJubilaeumicon120Element extends Components.DsIconJubilaeumicon120, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon120Element: {
        prototype: HTMLDsIconJubilaeumicon120Element;
        new (): HTMLDsIconJubilaeumicon120Element;
    };
    interface HTMLDsIconJubilaeumicon125Element extends Components.DsIconJubilaeumicon125, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon125Element: {
        prototype: HTMLDsIconJubilaeumicon125Element;
        new (): HTMLDsIconJubilaeumicon125Element;
    };
    interface HTMLDsIconJubilaeumicon15Element extends Components.DsIconJubilaeumicon15, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon15Element: {
        prototype: HTMLDsIconJubilaeumicon15Element;
        new (): HTMLDsIconJubilaeumicon15Element;
    };
    interface HTMLDsIconJubilaeumicon20Element extends Components.DsIconJubilaeumicon20, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon20Element: {
        prototype: HTMLDsIconJubilaeumicon20Element;
        new (): HTMLDsIconJubilaeumicon20Element;
    };
    interface HTMLDsIconJubilaeumicon25Element extends Components.DsIconJubilaeumicon25, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon25Element: {
        prototype: HTMLDsIconJubilaeumicon25Element;
        new (): HTMLDsIconJubilaeumicon25Element;
    };
    interface HTMLDsIconJubilaeumicon30Element extends Components.DsIconJubilaeumicon30, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon30Element: {
        prototype: HTMLDsIconJubilaeumicon30Element;
        new (): HTMLDsIconJubilaeumicon30Element;
    };
    interface HTMLDsIconJubilaeumicon35Element extends Components.DsIconJubilaeumicon35, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon35Element: {
        prototype: HTMLDsIconJubilaeumicon35Element;
        new (): HTMLDsIconJubilaeumicon35Element;
    };
    interface HTMLDsIconJubilaeumicon40Element extends Components.DsIconJubilaeumicon40, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon40Element: {
        prototype: HTMLDsIconJubilaeumicon40Element;
        new (): HTMLDsIconJubilaeumicon40Element;
    };
    interface HTMLDsIconJubilaeumicon45Element extends Components.DsIconJubilaeumicon45, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon45Element: {
        prototype: HTMLDsIconJubilaeumicon45Element;
        new (): HTMLDsIconJubilaeumicon45Element;
    };
    interface HTMLDsIconJubilaeumicon5Element extends Components.DsIconJubilaeumicon5, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon5Element: {
        prototype: HTMLDsIconJubilaeumicon5Element;
        new (): HTMLDsIconJubilaeumicon5Element;
    };
    interface HTMLDsIconJubilaeumicon50Element extends Components.DsIconJubilaeumicon50, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon50Element: {
        prototype: HTMLDsIconJubilaeumicon50Element;
        new (): HTMLDsIconJubilaeumicon50Element;
    };
    interface HTMLDsIconJubilaeumicon55Element extends Components.DsIconJubilaeumicon55, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon55Element: {
        prototype: HTMLDsIconJubilaeumicon55Element;
        new (): HTMLDsIconJubilaeumicon55Element;
    };
    interface HTMLDsIconJubilaeumicon60Element extends Components.DsIconJubilaeumicon60, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon60Element: {
        prototype: HTMLDsIconJubilaeumicon60Element;
        new (): HTMLDsIconJubilaeumicon60Element;
    };
    interface HTMLDsIconJubilaeumicon65Element extends Components.DsIconJubilaeumicon65, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon65Element: {
        prototype: HTMLDsIconJubilaeumicon65Element;
        new (): HTMLDsIconJubilaeumicon65Element;
    };
    interface HTMLDsIconJubilaeumicon70Element extends Components.DsIconJubilaeumicon70, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon70Element: {
        prototype: HTMLDsIconJubilaeumicon70Element;
        new (): HTMLDsIconJubilaeumicon70Element;
    };
    interface HTMLDsIconJubilaeumicon75Element extends Components.DsIconJubilaeumicon75, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon75Element: {
        prototype: HTMLDsIconJubilaeumicon75Element;
        new (): HTMLDsIconJubilaeumicon75Element;
    };
    interface HTMLDsIconJubilaeumicon80Element extends Components.DsIconJubilaeumicon80, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon80Element: {
        prototype: HTMLDsIconJubilaeumicon80Element;
        new (): HTMLDsIconJubilaeumicon80Element;
    };
    interface HTMLDsIconJubilaeumicon85Element extends Components.DsIconJubilaeumicon85, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon85Element: {
        prototype: HTMLDsIconJubilaeumicon85Element;
        new (): HTMLDsIconJubilaeumicon85Element;
    };
    interface HTMLDsIconJubilaeumicon90Element extends Components.DsIconJubilaeumicon90, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon90Element: {
        prototype: HTMLDsIconJubilaeumicon90Element;
        new (): HTMLDsIconJubilaeumicon90Element;
    };
    interface HTMLDsIconJubilaeumicon95Element extends Components.DsIconJubilaeumicon95, HTMLStencilElement {
    }
    var HTMLDsIconJubilaeumicon95Element: {
        prototype: HTMLDsIconJubilaeumicon95Element;
        new (): HTMLDsIconJubilaeumicon95Element;
    };
    interface HTMLDsIconKalenderElement extends Components.DsIconKalender, HTMLStencilElement {
    }
    var HTMLDsIconKalenderElement: {
        prototype: HTMLDsIconKalenderElement;
        new (): HTMLDsIconKalenderElement;
    };
    interface HTMLDsIconKameraElement extends Components.DsIconKamera, HTMLStencilElement {
    }
    var HTMLDsIconKameraElement: {
        prototype: HTMLDsIconKameraElement;
        new (): HTMLDsIconKameraElement;
    };
    interface HTMLDsIconKameravideoElement extends Components.DsIconKameravideo, HTMLStencilElement {
    }
    var HTMLDsIconKameravideoElement: {
        prototype: HTMLDsIconKameravideoElement;
        new (): HTMLDsIconKameravideoElement;
    };
    interface HTMLDsIconKfzElement extends Components.DsIconKfz, HTMLStencilElement {
    }
    var HTMLDsIconKfzElement: {
        prototype: HTMLDsIconKfzElement;
        new (): HTMLDsIconKfzElement;
    };
    interface HTMLDsIconLikeElement extends Components.DsIconLike, HTMLStencilElement {
    }
    var HTMLDsIconLikeElement: {
        prototype: HTMLDsIconLikeElement;
        new (): HTMLDsIconLikeElement;
    };
    interface HTMLDsIconLiquiditaetElement extends Components.DsIconLiquiditaet, HTMLStencilElement {
    }
    var HTMLDsIconLiquiditaetElement: {
        prototype: HTMLDsIconLiquiditaetElement;
        new (): HTMLDsIconLiquiditaetElement;
    };
    interface HTMLDsIconListenpfeilElement extends Components.DsIconListenpfeil, HTMLStencilElement {
    }
    var HTMLDsIconListenpfeilElement: {
        prototype: HTMLDsIconListenpfeilElement;
        new (): HTMLDsIconListenpfeilElement;
    };
    interface HTMLDsIconLoeschenElement extends Components.DsIconLoeschen, HTMLStencilElement {
    }
    var HTMLDsIconLoeschenElement: {
        prototype: HTMLDsIconLoeschenElement;
        new (): HTMLDsIconLoeschenElement;
    };
    interface HTMLDsIconLupevergroessernElement extends Components.DsIconLupevergroessern, HTMLStencilElement {
    }
    var HTMLDsIconLupevergroessernElement: {
        prototype: HTMLDsIconLupevergroessernElement;
        new (): HTMLDsIconLupevergroessernElement;
    };
    interface HTMLDsIconLupeverkleinernElement extends Components.DsIconLupeverkleinern, HTMLStencilElement {
    }
    var HTMLDsIconLupeverkleinernElement: {
        prototype: HTMLDsIconLupeverkleinernElement;
        new (): HTMLDsIconLupeverkleinernElement;
    };
    interface HTMLDsIconMailElement extends Components.DsIconMail, HTMLStencilElement {
    }
    var HTMLDsIconMailElement: {
        prototype: HTMLDsIconMailElement;
        new (): HTMLDsIconMailElement;
    };
    interface HTMLDsIconMenschElement extends Components.DsIconMensch, HTMLStencilElement {
    }
    var HTMLDsIconMenschElement: {
        prototype: HTMLDsIconMenschElement;
        new (): HTMLDsIconMenschElement;
    };
    interface HTMLDsIconMinusElement extends Components.DsIconMinus, HTMLStencilElement {
    }
    var HTMLDsIconMinusElement: {
        prototype: HTMLDsIconMinusElement;
        new (): HTMLDsIconMinusElement;
    };
    interface HTMLDsIconMoremenueElement extends Components.DsIconMoremenue, HTMLStencilElement {
    }
    var HTMLDsIconMoremenueElement: {
        prototype: HTMLDsIconMoremenueElement;
        new (): HTMLDsIconMoremenueElement;
    };
    interface HTMLDsIconNeuElement extends Components.DsIconNeu, HTMLStencilElement {
    }
    var HTMLDsIconNeuElement: {
        prototype: HTMLDsIconNeuElement;
        new (): HTMLDsIconNeuElement;
    };
    interface HTMLDsIconNeukreisElement extends Components.DsIconNeukreis, HTMLStencilElement {
    }
    var HTMLDsIconNeukreisElement: {
        prototype: HTMLDsIconNeukreisElement;
        new (): HTMLDsIconNeukreisElement;
    };
    interface HTMLDsIconOrdnerElement extends Components.DsIconOrdner, HTMLStencilElement {
    }
    var HTMLDsIconOrdnerElement: {
        prototype: HTMLDsIconOrdnerElement;
        new (): HTMLDsIconOrdnerElement;
    };
    interface HTMLDsIconPfeilnaechsteseingabefeldElement extends Components.DsIconPfeilnaechsteseingabefeld, HTMLStencilElement {
    }
    var HTMLDsIconPfeilnaechsteseingabefeldElement: {
        prototype: HTMLDsIconPfeilnaechsteseingabefeldElement;
        new (): HTMLDsIconPfeilnaechsteseingabefeldElement;
    };
    interface HTMLDsIconPfeilnaechstespflichtfeldElement extends Components.DsIconPfeilnaechstespflichtfeld, HTMLStencilElement {
    }
    var HTMLDsIconPfeilnaechstespflichtfeldElement: {
        prototype: HTMLDsIconPfeilnaechstespflichtfeldElement;
        new (): HTMLDsIconPfeilnaechstespflichtfeldElement;
    };
    interface HTMLDsIconPfeilvorherigeseingabefeldElement extends Components.DsIconPfeilvorherigeseingabefeld, HTMLStencilElement {
    }
    var HTMLDsIconPfeilvorherigeseingabefeldElement: {
        prototype: HTMLDsIconPfeilvorherigeseingabefeldElement;
        new (): HTMLDsIconPfeilvorherigeseingabefeldElement;
    };
    interface HTMLDsIconPfeilvorherigespflichtfeldElement extends Components.DsIconPfeilvorherigespflichtfeld, HTMLStencilElement {
    }
    var HTMLDsIconPfeilvorherigespflichtfeldElement: {
        prototype: HTMLDsIconPfeilvorherigespflichtfeldElement;
        new (): HTMLDsIconPfeilvorherigespflichtfeldElement;
    };
    interface HTMLDsIconPrivathaftpflichtElement extends Components.DsIconPrivathaftpflicht, HTMLStencilElement {
    }
    var HTMLDsIconPrivathaftpflichtElement: {
        prototype: HTMLDsIconPrivathaftpflichtElement;
        new (): HTMLDsIconPrivathaftpflichtElement;
    };
    interface HTMLDsIconPrivathaftpflicht2Element extends Components.DsIconPrivathaftpflicht2, HTMLStencilElement {
    }
    var HTMLDsIconPrivathaftpflicht2Element: {
        prototype: HTMLDsIconPrivathaftpflicht2Element;
        new (): HTMLDsIconPrivathaftpflicht2Element;
    };
    interface HTMLDsIconProzentElement extends Components.DsIconProzent, HTMLStencilElement {
    }
    var HTMLDsIconProzentElement: {
        prototype: HTMLDsIconProzentElement;
        new (): HTMLDsIconProzentElement;
    };
    interface HTMLDsIconRechtschutzElement extends Components.DsIconRechtschutz, HTMLStencilElement {
    }
    var HTMLDsIconRechtschutzElement: {
        prototype: HTMLDsIconRechtschutzElement;
        new (): HTMLDsIconRechtschutzElement;
    };
    interface HTMLDsIconRechtschutz2Element extends Components.DsIconRechtschutz2, HTMLStencilElement {
    }
    var HTMLDsIconRechtschutz2Element: {
        prototype: HTMLDsIconRechtschutz2Element;
        new (): HTMLDsIconRechtschutz2Element;
    };
    interface HTMLDsIconReisenElement extends Components.DsIconReisen, HTMLStencilElement {
    }
    var HTMLDsIconReisenElement: {
        prototype: HTMLDsIconReisenElement;
        new (): HTMLDsIconReisenElement;
    };
    interface HTMLDsIconReparaturElement extends Components.DsIconReparatur, HTMLStencilElement {
    }
    var HTMLDsIconReparaturElement: {
        prototype: HTMLDsIconReparaturElement;
        new (): HTMLDsIconReparaturElement;
    };
    interface HTMLDsIconScheineElement extends Components.DsIconScheine, HTMLStencilElement {
    }
    var HTMLDsIconScheineElement: {
        prototype: HTMLDsIconScheineElement;
        new (): HTMLDsIconScheineElement;
    };
    interface HTMLDsIconSchliessendialogElement extends Components.DsIconSchliessendialog, HTMLStencilElement {
    }
    var HTMLDsIconSchliessendialogElement: {
        prototype: HTMLDsIconSchliessendialogElement;
        new (): HTMLDsIconSchliessendialogElement;
    };
    interface HTMLDsIconSchliesseninputElement extends Components.DsIconSchliesseninput, HTMLStencilElement {
    }
    var HTMLDsIconSchliesseninputElement: {
        prototype: HTMLDsIconSchliesseninputElement;
        new (): HTMLDsIconSchliesseninputElement;
    };
    interface HTMLDsIconSchliessenkreisElement extends Components.DsIconSchliessenkreis, HTMLStencilElement {
    }
    var HTMLDsIconSchliessenkreisElement: {
        prototype: HTMLDsIconSchliessenkreisElement;
        new (): HTMLDsIconSchliessenkreisElement;
    };
    interface HTMLDsIconSchlossgesperrtElement extends Components.DsIconSchlossgesperrt, HTMLStencilElement {
    }
    var HTMLDsIconSchlossgesperrtElement: {
        prototype: HTMLDsIconSchlossgesperrtElement;
        new (): HTMLDsIconSchlossgesperrtElement;
    };
    interface HTMLDsIconSchlossoffenElement extends Components.DsIconSchlossoffen, HTMLStencilElement {
    }
    var HTMLDsIconSchlossoffenElement: {
        prototype: HTMLDsIconSchlossoffenElement;
        new (): HTMLDsIconSchlossoffenElement;
    };
    interface HTMLDsIconSeitenanzeigeganzeseiteElement extends Components.DsIconSeitenanzeigeganzeseite, HTMLStencilElement {
    }
    var HTMLDsIconSeitenanzeigeganzeseiteElement: {
        prototype: HTMLDsIconSeitenanzeigeganzeseiteElement;
        new (): HTMLDsIconSeitenanzeigeganzeseiteElement;
    };
    interface HTMLDsIconSeitenanzeigevollebreiteElement extends Components.DsIconSeitenanzeigevollebreite, HTMLStencilElement {
    }
    var HTMLDsIconSeitenanzeigevollebreiteElement: {
        prototype: HTMLDsIconSeitenanzeigevollebreiteElement;
        new (): HTMLDsIconSeitenanzeigevollebreiteElement;
    };
    interface HTMLDsIconSeitenleisteoffenElement extends Components.DsIconSeitenleisteoffen, HTMLStencilElement {
    }
    var HTMLDsIconSeitenleisteoffenElement: {
        prototype: HTMLDsIconSeitenleisteoffenElement;
        new (): HTMLDsIconSeitenleisteoffenElement;
    };
    interface HTMLDsIconSeitenleisteoffenfehlermeldungElement extends Components.DsIconSeitenleisteoffenfehlermeldung, HTMLStencilElement {
    }
    var HTMLDsIconSeitenleisteoffenfehlermeldungElement: {
        prototype: HTMLDsIconSeitenleisteoffenfehlermeldungElement;
        new (): HTMLDsIconSeitenleisteoffenfehlermeldungElement;
    };
    interface HTMLDsIconSeitenleistezuElement extends Components.DsIconSeitenleistezu, HTMLStencilElement {
    }
    var HTMLDsIconSeitenleistezuElement: {
        prototype: HTMLDsIconSeitenleistezuElement;
        new (): HTMLDsIconSeitenleistezuElement;
    };
    interface HTMLDsIconSeitenleistezufehlermeldungElement extends Components.DsIconSeitenleistezufehlermeldung, HTMLStencilElement {
    }
    var HTMLDsIconSeitenleistezufehlermeldungElement: {
        prototype: HTMLDsIconSeitenleistezufehlermeldungElement;
        new (): HTMLDsIconSeitenleistezufehlermeldungElement;
    };
    interface HTMLDsIconServicesElement extends Components.DsIconServices, HTMLStencilElement {
    }
    var HTMLDsIconServicesElement: {
        prototype: HTMLDsIconServicesElement;
        new (): HTMLDsIconServicesElement;
    };
    interface HTMLDsIconSortierenElement extends Components.DsIconSortieren, HTMLStencilElement {
    }
    var HTMLDsIconSortierenElement: {
        prototype: HTMLDsIconSortierenElement;
        new (): HTMLDsIconSortierenElement;
    };
    interface HTMLDsIconSortieren2Element extends Components.DsIconSortieren2, HTMLStencilElement {
    }
    var HTMLDsIconSortieren2Element: {
        prototype: HTMLDsIconSortieren2Element;
        new (): HTMLDsIconSortieren2Element;
    };
    interface HTMLDsIconSortierenabsteigendElement extends Components.DsIconSortierenabsteigend, HTMLStencilElement {
    }
    var HTMLDsIconSortierenabsteigendElement: {
        prototype: HTMLDsIconSortierenabsteigendElement;
        new (): HTMLDsIconSortierenabsteigendElement;
    };
    interface HTMLDsIconSortierenaufsteigendElement extends Components.DsIconSortierenaufsteigend, HTMLStencilElement {
    }
    var HTMLDsIconSortierenaufsteigendElement: {
        prototype: HTMLDsIconSortierenaufsteigendElement;
        new (): HTMLDsIconSortierenaufsteigendElement;
    };
    interface HTMLDsIconSparenElement extends Components.DsIconSparen, HTMLStencilElement {
    }
    var HTMLDsIconSparenElement: {
        prototype: HTMLDsIconSparenElement;
        new (): HTMLDsIconSparenElement;
    };
    interface HTMLDsIconSportElement extends Components.DsIconSport, HTMLStencilElement {
    }
    var HTMLDsIconSportElement: {
        prototype: HTMLDsIconSportElement;
        new (): HTMLDsIconSportElement;
    };
    interface HTMLDsIconStrassenverkehrElement extends Components.DsIconStrassenverkehr, HTMLStencilElement {
    }
    var HTMLDsIconStrassenverkehrElement: {
        prototype: HTMLDsIconStrassenverkehrElement;
        new (): HTMLDsIconStrassenverkehrElement;
    };
    interface HTMLDsIconSuccessElement extends Components.DsIconSuccess, HTMLStencilElement {
    }
    var HTMLDsIconSuccessElement: {
        prototype: HTMLDsIconSuccessElement;
        new (): HTMLDsIconSuccessElement;
    };
    interface HTMLDsIconSuchenElement extends Components.DsIconSuchen, HTMLStencilElement {
    }
    var HTMLDsIconSuchenElement: {
        prototype: HTMLDsIconSuchenElement;
        new (): HTMLDsIconSuchenElement;
    };
    interface HTMLDsIconTelefonElement extends Components.DsIconTelefon, HTMLStencilElement {
    }
    var HTMLDsIconTelefonElement: {
        prototype: HTMLDsIconTelefonElement;
        new (): HTMLDsIconTelefonElement;
    };
    interface HTMLDsIconUebermittelnElement extends Components.DsIconUebermitteln, HTMLStencilElement {
    }
    var HTMLDsIconUebermittelnElement: {
        prototype: HTMLDsIconUebermittelnElement;
        new (): HTMLDsIconUebermittelnElement;
    };
    interface HTMLDsIconUebermittelnfehlgeschlagenElement extends Components.DsIconUebermittelnfehlgeschlagen, HTMLStencilElement {
    }
    var HTMLDsIconUebermittelnfehlgeschlagenElement: {
        prototype: HTMLDsIconUebermittelnfehlgeschlagenElement;
        new (): HTMLDsIconUebermittelnfehlgeschlagenElement;
    };
    interface HTMLDsIconUndoElement extends Components.DsIconUndo, HTMLStencilElement {
    }
    var HTMLDsIconUndoElement: {
        prototype: HTMLDsIconUndoElement;
        new (): HTMLDsIconUndoElement;
    };
    interface HTMLDsIconUnfallElement extends Components.DsIconUnfall, HTMLStencilElement {
    }
    var HTMLDsIconUnfallElement: {
        prototype: HTMLDsIconUnfallElement;
        new (): HTMLDsIconUnfallElement;
    };
    interface HTMLDsIconUnfall2Element extends Components.DsIconUnfall2, HTMLStencilElement {
    }
    var HTMLDsIconUnfall2Element: {
        prototype: HTMLDsIconUnfall2Element;
        new (): HTMLDsIconUnfall2Element;
    };
    interface HTMLDsIconUnterschreibenElement extends Components.DsIconUnterschreiben, HTMLStencilElement {
    }
    var HTMLDsIconUnterschreibenElement: {
        prototype: HTMLDsIconUnterschreibenElement;
        new (): HTMLDsIconUnterschreibenElement;
    };
    interface HTMLDsIconUploadElement extends Components.DsIconUpload, HTMLStencilElement {
    }
    var HTMLDsIconUploadElement: {
        prototype: HTMLDsIconUploadElement;
        new (): HTMLDsIconUploadElement;
    };
    interface HTMLDsIconVersicherungElement extends Components.DsIconVersicherung, HTMLStencilElement {
    }
    var HTMLDsIconVersicherungElement: {
        prototype: HTMLDsIconVersicherungElement;
        new (): HTMLDsIconVersicherungElement;
    };
    interface HTMLDsIconWohngebaeudeElement extends Components.DsIconWohngebaeude, HTMLStencilElement {
    }
    var HTMLDsIconWohngebaeudeElement: {
        prototype: HTMLDsIconWohngebaeudeElement;
        new (): HTMLDsIconWohngebaeudeElement;
    };
    interface HTMLDsIconZusatzdokumentElement extends Components.DsIconZusatzdokument, HTMLStencilElement {
    }
    var HTMLDsIconZusatzdokumentElement: {
        prototype: HTMLDsIconZusatzdokumentElement;
        new (): HTMLDsIconZusatzdokumentElement;
    };
    interface HTMLDsIconZusatzfotodokumentElement extends Components.DsIconZusatzfotodokument, HTMLStencilElement {
    }
    var HTMLDsIconZusatzfotodokumentElement: {
        prototype: HTMLDsIconZusatzfotodokumentElement;
        new (): HTMLDsIconZusatzfotodokumentElement;
    };
    interface HTMLDsInfoElement extends Components.DsInfo, HTMLStencilElement {
    }
    var HTMLDsInfoElement: {
        prototype: HTMLDsInfoElement;
        new (): HTMLDsInfoElement;
    };
    interface HTMLDsInputLabelElement extends Components.DsInputLabel, HTMLStencilElement {
    }
    var HTMLDsInputLabelElement: {
        prototype: HTMLDsInputLabelElement;
        new (): HTMLDsInputLabelElement;
    };
    interface HTMLDsLinkElement extends Components.DsLink, HTMLStencilElement {
    }
    var HTMLDsLinkElement: {
        prototype: HTMLDsLinkElement;
        new (): HTMLDsLinkElement;
    };
    interface HTMLDsLogoElement extends Components.DsLogo, HTMLStencilElement {
    }
    var HTMLDsLogoElement: {
        prototype: HTMLDsLogoElement;
        new (): HTMLDsLogoElement;
    };
    interface HTMLDsLogoBildmarkeElement extends Components.DsLogoBildmarke, HTMLStencilElement {
    }
    var HTMLDsLogoBildmarkeElement: {
        prototype: HTMLDsLogoBildmarkeElement;
        new (): HTMLDsLogoBildmarkeElement;
    };
    interface HTMLDsLogoWortmarkeElement extends Components.DsLogoWortmarke, HTMLStencilElement {
    }
    var HTMLDsLogoWortmarkeElement: {
        prototype: HTMLDsLogoWortmarkeElement;
        new (): HTMLDsLogoWortmarkeElement;
    };
    interface HTMLDsLogoWortmarkeAllfinanzElement extends Components.DsLogoWortmarkeAllfinanz, HTMLStencilElement {
    }
    var HTMLDsLogoWortmarkeAllfinanzElement: {
        prototype: HTMLDsLogoWortmarkeAllfinanzElement;
        new (): HTMLDsLogoWortmarkeAllfinanzElement;
    };
    interface HTMLDsModalElement extends Components.DsModal, HTMLStencilElement {
    }
    var HTMLDsModalElement: {
        prototype: HTMLDsModalElement;
        new (): HTMLDsModalElement;
    };
    interface HTMLDsNavigatedContentElement extends Components.DsNavigatedContent, HTMLStencilElement {
    }
    var HTMLDsNavigatedContentElement: {
        prototype: HTMLDsNavigatedContentElement;
        new (): HTMLDsNavigatedContentElement;
    };
    interface HTMLDsNavigatedContentMenuElement extends Components.DsNavigatedContentMenu, HTMLStencilElement {
    }
    var HTMLDsNavigatedContentMenuElement: {
        prototype: HTMLDsNavigatedContentMenuElement;
        new (): HTMLDsNavigatedContentMenuElement;
    };
    interface HTMLDsNavigatedContentMenuItemElement extends Components.DsNavigatedContentMenuItem, HTMLStencilElement {
    }
    var HTMLDsNavigatedContentMenuItemElement: {
        prototype: HTMLDsNavigatedContentMenuItemElement;
        new (): HTMLDsNavigatedContentMenuItemElement;
    };
    interface HTMLDsNotificationToastElement extends Components.DsNotificationToast, HTMLStencilElement {
    }
    var HTMLDsNotificationToastElement: {
        prototype: HTMLDsNotificationToastElement;
        new (): HTMLDsNotificationToastElement;
    };
    interface HTMLDsNumberInputElement extends Components.DsNumberInput, HTMLStencilElement {
    }
    var HTMLDsNumberInputElement: {
        prototype: HTMLDsNumberInputElement;
        new (): HTMLDsNumberInputElement;
    };
    interface HTMLDsPageElement extends Components.DsPage, HTMLStencilElement {
    }
    var HTMLDsPageElement: {
        prototype: HTMLDsPageElement;
        new (): HTMLDsPageElement;
    };
    interface HTMLDsPaginatorElement extends Components.DsPaginator, HTMLStencilElement {
    }
    var HTMLDsPaginatorElement: {
        prototype: HTMLDsPaginatorElement;
        new (): HTMLDsPaginatorElement;
    };
    interface HTMLDsPlaceholderElement extends Components.DsPlaceholder, HTMLStencilElement {
    }
    var HTMLDsPlaceholderElement: {
        prototype: HTMLDsPlaceholderElement;
        new (): HTMLDsPlaceholderElement;
    };
    interface HTMLDsRadioButtonElement extends Components.DsRadioButton, HTMLStencilElement {
    }
    var HTMLDsRadioButtonElement: {
        prototype: HTMLDsRadioButtonElement;
        new (): HTMLDsRadioButtonElement;
    };
    interface HTMLDsRadioButtonGroupElement extends Components.DsRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLDsRadioButtonGroupElement: {
        prototype: HTMLDsRadioButtonGroupElement;
        new (): HTMLDsRadioButtonGroupElement;
    };
    interface HTMLDsRequiredHintElement extends Components.DsRequiredHint, HTMLStencilElement {
    }
    var HTMLDsRequiredHintElement: {
        prototype: HTMLDsRequiredHintElement;
        new (): HTMLDsRequiredHintElement;
    };
    interface HTMLDsScrollContainerElement extends Components.DsScrollContainer, HTMLStencilElement {
    }
    var HTMLDsScrollContainerElement: {
        prototype: HTMLDsScrollContainerElement;
        new (): HTMLDsScrollContainerElement;
    };
    interface HTMLDsSearchElement extends Components.DsSearch, HTMLStencilElement {
    }
    var HTMLDsSearchElement: {
        prototype: HTMLDsSearchElement;
        new (): HTMLDsSearchElement;
    };
    interface HTMLDsSliderElement extends Components.DsSlider, HTMLStencilElement {
    }
    var HTMLDsSliderElement: {
        prototype: HTMLDsSliderElement;
        new (): HTMLDsSliderElement;
    };
    interface HTMLDsSpinnerElement extends Components.DsSpinner, HTMLStencilElement {
    }
    var HTMLDsSpinnerElement: {
        prototype: HTMLDsSpinnerElement;
        new (): HTMLDsSpinnerElement;
    };
    interface HTMLDsTableElement extends Components.DsTable, HTMLStencilElement {
    }
    var HTMLDsTableElement: {
        prototype: HTMLDsTableElement;
        new (): HTMLDsTableElement;
    };
    interface HTMLDsTableCellElement extends Components.DsTableCell, HTMLStencilElement {
    }
    var HTMLDsTableCellElement: {
        prototype: HTMLDsTableCellElement;
        new (): HTMLDsTableCellElement;
    };
    interface HTMLDsTableFooterElement extends Components.DsTableFooter, HTMLStencilElement {
    }
    var HTMLDsTableFooterElement: {
        prototype: HTMLDsTableFooterElement;
        new (): HTMLDsTableFooterElement;
    };
    interface HTMLDsTableHeaderElement extends Components.DsTableHeader, HTMLStencilElement {
    }
    var HTMLDsTableHeaderElement: {
        prototype: HTMLDsTableHeaderElement;
        new (): HTMLDsTableHeaderElement;
    };
    interface HTMLDsTableHeaderItemElement extends Components.DsTableHeaderItem, HTMLStencilElement {
    }
    var HTMLDsTableHeaderItemElement: {
        prototype: HTMLDsTableHeaderItemElement;
        new (): HTMLDsTableHeaderItemElement;
    };
    interface HTMLDsTablePageSizePickerElement extends Components.DsTablePageSizePicker, HTMLStencilElement {
    }
    var HTMLDsTablePageSizePickerElement: {
        prototype: HTMLDsTablePageSizePickerElement;
        new (): HTMLDsTablePageSizePickerElement;
    };
    interface HTMLDsTableRowElement extends Components.DsTableRow, HTMLStencilElement {
    }
    var HTMLDsTableRowElement: {
        prototype: HTMLDsTableRowElement;
        new (): HTMLDsTableRowElement;
    };
    interface HTMLDsTextElement extends Components.DsText, HTMLStencilElement {
    }
    var HTMLDsTextElement: {
        prototype: HTMLDsTextElement;
        new (): HTMLDsTextElement;
    };
    interface HTMLDsTextAreaElement extends Components.DsTextArea, HTMLStencilElement {
    }
    var HTMLDsTextAreaElement: {
        prototype: HTMLDsTextAreaElement;
        new (): HTMLDsTextAreaElement;
    };
    interface HTMLDsTextButtonElement extends Components.DsTextButton, HTMLStencilElement {
    }
    var HTMLDsTextButtonElement: {
        prototype: HTMLDsTextButtonElement;
        new (): HTMLDsTextButtonElement;
    };
    interface HTMLDsTextInputElement extends Components.DsTextInput, HTMLStencilElement {
    }
    var HTMLDsTextInputElement: {
        prototype: HTMLDsTextInputElement;
        new (): HTMLDsTextInputElement;
    };
    interface HTMLDsTextListElement extends Components.DsTextList, HTMLStencilElement {
    }
    var HTMLDsTextListElement: {
        prototype: HTMLDsTextListElement;
        new (): HTMLDsTextListElement;
    };
    interface HTMLDsUserAvatarElement extends Components.DsUserAvatar, HTMLStencilElement {
    }
    var HTMLDsUserAvatarElement: {
        prototype: HTMLDsUserAvatarElement;
        new (): HTMLDsUserAvatarElement;
    };
    interface HTMLDsWorkflowProgressElement extends Components.DsWorkflowProgress, HTMLStencilElement {
    }
    var HTMLDsWorkflowProgressElement: {
        prototype: HTMLDsWorkflowProgressElement;
        new (): HTMLDsWorkflowProgressElement;
    };
    interface HTMLDsWrappedLayoutElement extends Components.DsWrappedLayout, HTMLStencilElement {
    }
    var HTMLDsWrappedLayoutElement: {
        prototype: HTMLDsWrappedLayoutElement;
        new (): HTMLDsWrappedLayoutElement;
    };
    interface HTMLDsYesNoElement extends Components.DsYesNo, HTMLStencilElement {
    }
    var HTMLDsYesNoElement: {
        prototype: HTMLDsYesNoElement;
        new (): HTMLDsYesNoElement;
    };
    interface HTMLDxAccordionElement extends Components.DxAccordion, HTMLStencilElement {
    }
    var HTMLDxAccordionElement: {
        prototype: HTMLDxAccordionElement;
        new (): HTMLDxAccordionElement;
    };
    interface HTMLDxAccordionGroupElement extends Components.DxAccordionGroup, HTMLStencilElement {
    }
    var HTMLDxAccordionGroupElement: {
        prototype: HTMLDxAccordionGroupElement;
        new (): HTMLDxAccordionGroupElement;
    };
    interface HTMLDxAlertElement extends Components.DxAlert, HTMLStencilElement {
    }
    var HTMLDxAlertElement: {
        prototype: HTMLDxAlertElement;
        new (): HTMLDxAlertElement;
    };
    interface HTMLDxAnnouncementBarElement extends Components.DxAnnouncementBar, HTMLStencilElement {
    }
    var HTMLDxAnnouncementBarElement: {
        prototype: HTMLDxAnnouncementBarElement;
        new (): HTMLDxAnnouncementBarElement;
    };
    interface HTMLDxAppElement extends Components.DxApp, HTMLStencilElement {
    }
    var HTMLDxAppElement: {
        prototype: HTMLDxAppElement;
        new (): HTMLDxAppElement;
    };
    interface HTMLDxBreadcrumbElement extends Components.DxBreadcrumb, HTMLStencilElement {
    }
    var HTMLDxBreadcrumbElement: {
        prototype: HTMLDxBreadcrumbElement;
        new (): HTMLDxBreadcrumbElement;
    };
    interface HTMLDxBreadcrumbItemElement extends Components.DxBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLDxBreadcrumbItemElement: {
        prototype: HTMLDxBreadcrumbItemElement;
        new (): HTMLDxBreadcrumbItemElement;
    };
    interface HTMLDxButtonElement extends Components.DxButton, HTMLStencilElement {
    }
    var HTMLDxButtonElement: {
        prototype: HTMLDxButtonElement;
        new (): HTMLDxButtonElement;
    };
    interface HTMLDxCalendarElement extends Components.DxCalendar, HTMLStencilElement {
    }
    var HTMLDxCalendarElement: {
        prototype: HTMLDxCalendarElement;
        new (): HTMLDxCalendarElement;
    };
    interface HTMLDxCardElement extends Components.DxCard, HTMLStencilElement {
    }
    var HTMLDxCardElement: {
        prototype: HTMLDxCardElement;
        new (): HTMLDxCardElement;
    };
    interface HTMLDxCardCollapsableElement extends Components.DxCardCollapsable, HTMLStencilElement {
    }
    var HTMLDxCardCollapsableElement: {
        prototype: HTMLDxCardCollapsableElement;
        new (): HTMLDxCardCollapsableElement;
    };
    interface HTMLDxCardContentElement extends Components.DxCardContent, HTMLStencilElement {
    }
    var HTMLDxCardContentElement: {
        prototype: HTMLDxCardContentElement;
        new (): HTMLDxCardContentElement;
    };
    interface HTMLDxCardHeaderElement extends Components.DxCardHeader, HTMLStencilElement {
    }
    var HTMLDxCardHeaderElement: {
        prototype: HTMLDxCardHeaderElement;
        new (): HTMLDxCardHeaderElement;
    };
    interface HTMLDxCardImageElement extends Components.DxCardImage, HTMLStencilElement {
    }
    var HTMLDxCardImageElement: {
        prototype: HTMLDxCardImageElement;
        new (): HTMLDxCardImageElement;
    };
    interface HTMLDxChartSampleElement extends Components.DxChartSample, HTMLStencilElement {
    }
    var HTMLDxChartSampleElement: {
        prototype: HTMLDxChartSampleElement;
        new (): HTMLDxChartSampleElement;
    };
    interface HTMLDxCheckboxElement extends Components.DxCheckbox, HTMLStencilElement {
    }
    var HTMLDxCheckboxElement: {
        prototype: HTMLDxCheckboxElement;
        new (): HTMLDxCheckboxElement;
    };
    interface HTMLDxChevronElement extends Components.DxChevron, HTMLStencilElement {
    }
    var HTMLDxChevronElement: {
        prototype: HTMLDxChevronElement;
        new (): HTMLDxChevronElement;
    };
    interface HTMLDxClearButtonElement extends Components.DxClearButton, HTMLStencilElement {
    }
    var HTMLDxClearButtonElement: {
        prototype: HTMLDxClearButtonElement;
        new (): HTMLDxClearButtonElement;
    };
    interface HTMLDxComboboxElement extends Components.DxCombobox, HTMLStencilElement {
    }
    var HTMLDxComboboxElement: {
        prototype: HTMLDxComboboxElement;
        new (): HTMLDxComboboxElement;
    };
    interface HTMLDxContainerElement extends Components.DxContainer, HTMLStencilElement {
    }
    var HTMLDxContainerElement: {
        prototype: HTMLDxContainerElement;
        new (): HTMLDxContainerElement;
    };
    interface HTMLDxContentSwitcherElement extends Components.DxContentSwitcher, HTMLStencilElement {
    }
    var HTMLDxContentSwitcherElement: {
        prototype: HTMLDxContentSwitcherElement;
        new (): HTMLDxContentSwitcherElement;
    };
    interface HTMLDxContentSwitcherItemElement extends Components.DxContentSwitcherItem, HTMLStencilElement {
    }
    var HTMLDxContentSwitcherItemElement: {
        prototype: HTMLDxContentSwitcherItemElement;
        new (): HTMLDxContentSwitcherItemElement;
    };
    interface HTMLDxDateInputElement extends Components.DxDateInput, HTMLStencilElement {
    }
    var HTMLDxDateInputElement: {
        prototype: HTMLDxDateInputElement;
        new (): HTMLDxDateInputElement;
    };
    interface HTMLDxDateRangeElement extends Components.DxDateRange, HTMLStencilElement {
    }
    var HTMLDxDateRangeElement: {
        prototype: HTMLDxDateRangeElement;
        new (): HTMLDxDateRangeElement;
    };
    interface HTMLDxDonutChartElement extends Components.DxDonutChart, HTMLStencilElement {
    }
    var HTMLDxDonutChartElement: {
        prototype: HTMLDxDonutChartElement;
        new (): HTMLDxDonutChartElement;
    };
    interface HTMLDxDropdownElement extends Components.DxDropdown, HTMLStencilElement {
    }
    var HTMLDxDropdownElement: {
        prototype: HTMLDxDropdownElement;
        new (): HTMLDxDropdownElement;
    };
    interface HTMLDxDropdownOptionElement extends Components.DxDropdownOption, HTMLStencilElement {
    }
    var HTMLDxDropdownOptionElement: {
        prototype: HTMLDxDropdownOptionElement;
        new (): HTMLDxDropdownOptionElement;
    };
    interface HTMLDxElementSwapperElement extends Components.DxElementSwapper, HTMLStencilElement {
    }
    var HTMLDxElementSwapperElement: {
        prototype: HTMLDxElementSwapperElement;
        new (): HTMLDxElementSwapperElement;
    };
    interface HTMLDxErrorMessageElement extends Components.DxErrorMessage, HTMLStencilElement {
    }
    var HTMLDxErrorMessageElement: {
        prototype: HTMLDxErrorMessageElement;
        new (): HTMLDxErrorMessageElement;
    };
    interface HTMLDxErrorPageElement extends Components.DxErrorPage, HTMLStencilElement {
    }
    var HTMLDxErrorPageElement: {
        prototype: HTMLDxErrorPageElement;
        new (): HTMLDxErrorPageElement;
    };
    interface HTMLDxExpandedElement extends Components.DxExpanded, HTMLStencilElement {
    }
    var HTMLDxExpandedElement: {
        prototype: HTMLDxExpandedElement;
        new (): HTMLDxExpandedElement;
    };
    interface HTMLDxFdOutlineBoxElement extends Components.DxFdOutlineBox, HTMLStencilElement {
    }
    var HTMLDxFdOutlineBoxElement: {
        prototype: HTMLDxFdOutlineBoxElement;
        new (): HTMLDxFdOutlineBoxElement;
    };
    interface HTMLDxFdSeparatorElement extends Components.DxFdSeparator, HTMLStencilElement {
    }
    var HTMLDxFdSeparatorElement: {
        prototype: HTMLDxFdSeparatorElement;
        new (): HTMLDxFdSeparatorElement;
    };
    interface HTMLDxFlyoutElement extends Components.DxFlyout, HTMLStencilElement {
    }
    var HTMLDxFlyoutElement: {
        prototype: HTMLDxFlyoutElement;
        new (): HTMLDxFlyoutElement;
    };
    interface HTMLDxFooterElement extends Components.DxFooter, HTMLStencilElement {
    }
    var HTMLDxFooterElement: {
        prototype: HTMLDxFooterElement;
        new (): HTMLDxFooterElement;
    };
    interface HTMLDxFormWrapperElement extends Components.DxFormWrapper, HTMLStencilElement {
    }
    var HTMLDxFormWrapperElement: {
        prototype: HTMLDxFormWrapperElement;
        new (): HTMLDxFormWrapperElement;
    };
    interface HTMLDxGoldenStageElement extends Components.DxGoldenStage, HTMLStencilElement {
    }
    var HTMLDxGoldenStageElement: {
        prototype: HTMLDxGoldenStageElement;
        new (): HTMLDxGoldenStageElement;
    };
    interface HTMLDxGridElement extends Components.DxGrid, HTMLStencilElement {
    }
    var HTMLDxGridElement: {
        prototype: HTMLDxGridElement;
        new (): HTMLDxGridElement;
    };
    interface HTMLDxHeaderElement extends Components.DxHeader, HTMLStencilElement {
    }
    var HTMLDxHeaderElement: {
        prototype: HTMLDxHeaderElement;
        new (): HTMLDxHeaderElement;
    };
    interface HTMLDxHeaderAppFavoritesElement extends Components.DxHeaderAppFavorites, HTMLStencilElement {
    }
    var HTMLDxHeaderAppFavoritesElement: {
        prototype: HTMLDxHeaderAppFavoritesElement;
        new (): HTMLDxHeaderAppFavoritesElement;
    };
    interface HTMLDxHeaderAppFavoritesAppElement extends Components.DxHeaderAppFavoritesApp, HTMLStencilElement {
    }
    var HTMLDxHeaderAppFavoritesAppElement: {
        prototype: HTMLDxHeaderAppFavoritesAppElement;
        new (): HTMLDxHeaderAppFavoritesAppElement;
    };
    interface HTMLDxHeaderAppFavoritesSidebarContentElement extends Components.DxHeaderAppFavoritesSidebarContent, HTMLStencilElement {
    }
    var HTMLDxHeaderAppFavoritesSidebarContentElement: {
        prototype: HTMLDxHeaderAppFavoritesSidebarContentElement;
        new (): HTMLDxHeaderAppFavoritesSidebarContentElement;
    };
    interface HTMLDxHeaderApplicationNameElement extends Components.DxHeaderApplicationName, HTMLStencilElement {
    }
    var HTMLDxHeaderApplicationNameElement: {
        prototype: HTMLDxHeaderApplicationNameElement;
        new (): HTMLDxHeaderApplicationNameElement;
    };
    interface HTMLDxHeaderMenuBarElement extends Components.DxHeaderMenuBar, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuBarElement: {
        prototype: HTMLDxHeaderMenuBarElement;
        new (): HTMLDxHeaderMenuBarElement;
    };
    interface HTMLDxHeaderMenuButtonElement extends Components.DxHeaderMenuButton, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuButtonElement: {
        prototype: HTMLDxHeaderMenuButtonElement;
        new (): HTMLDxHeaderMenuButtonElement;
    };
    interface HTMLDxHeaderMenuCustomElement extends Components.DxHeaderMenuCustom, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuCustomElement: {
        prototype: HTMLDxHeaderMenuCustomElement;
        new (): HTMLDxHeaderMenuCustomElement;
    };
    interface HTMLDxHeaderMenuGroupElement extends Components.DxHeaderMenuGroup, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuGroupElement: {
        prototype: HTMLDxHeaderMenuGroupElement;
        new (): HTMLDxHeaderMenuGroupElement;
    };
    interface HTMLDxHeaderMenuItemElement extends Components.DxHeaderMenuItem, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuItemElement: {
        prototype: HTMLDxHeaderMenuItemElement;
        new (): HTMLDxHeaderMenuItemElement;
    };
    interface HTMLDxHeaderMenuLinkElement extends Components.DxHeaderMenuLink, HTMLStencilElement {
    }
    var HTMLDxHeaderMenuLinkElement: {
        prototype: HTMLDxHeaderMenuLinkElement;
        new (): HTMLDxHeaderMenuLinkElement;
    };
    interface HTMLDxHeaderNavigationElement extends Components.DxHeaderNavigation, HTMLStencilElement {
    }
    var HTMLDxHeaderNavigationElement: {
        prototype: HTMLDxHeaderNavigationElement;
        new (): HTMLDxHeaderNavigationElement;
    };
    interface HTMLDxHeaderNavigationItemElement extends Components.DxHeaderNavigationItem, HTMLStencilElement {
    }
    var HTMLDxHeaderNavigationItemElement: {
        prototype: HTMLDxHeaderNavigationItemElement;
        new (): HTMLDxHeaderNavigationItemElement;
    };
    interface HTMLDxHeaderNavigationSidebarContentElement extends Components.DxHeaderNavigationSidebarContent, HTMLStencilElement {
    }
    var HTMLDxHeaderNavigationSidebarContentElement: {
        prototype: HTMLDxHeaderNavigationSidebarContentElement;
        new (): HTMLDxHeaderNavigationSidebarContentElement;
    };
    interface HTMLDxHeaderUserElement extends Components.DxHeaderUser, HTMLStencilElement {
    }
    var HTMLDxHeaderUserElement: {
        prototype: HTMLDxHeaderUserElement;
        new (): HTMLDxHeaderUserElement;
    };
    interface HTMLDxHeaderUserSidebarContentElement extends Components.DxHeaderUserSidebarContent, HTMLStencilElement {
    }
    var HTMLDxHeaderUserSidebarContentElement: {
        prototype: HTMLDxHeaderUserSidebarContentElement;
        new (): HTMLDxHeaderUserSidebarContentElement;
    };
    interface HTMLDxHeroImageElement extends Components.DxHeroImage, HTMLStencilElement {
    }
    var HTMLDxHeroImageElement: {
        prototype: HTMLDxHeroImageElement;
        new (): HTMLDxHeroImageElement;
    };
    interface HTMLDxHorizontalGrowBoxElement extends Components.DxHorizontalGrowBox, HTMLStencilElement {
    }
    var HTMLDxHorizontalGrowBoxElement: {
        prototype: HTMLDxHorizontalGrowBoxElement;
        new (): HTMLDxHorizontalGrowBoxElement;
    };
    interface HTMLDxIconElement extends Components.DxIcon, HTMLStencilElement {
    }
    var HTMLDxIconElement: {
        prototype: HTMLDxIconElement;
        new (): HTMLDxIconElement;
    };
    interface HTMLDxIconAllfinanzberatungwebportaloutlinedElement extends Components.DxIconAllfinanzberatungwebportaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconAllfinanzberatungwebportaloutlinedElement: {
        prototype: HTMLDxIconAllfinanzberatungwebportaloutlinedElement;
        new (): HTMLDxIconAllfinanzberatungwebportaloutlinedElement;
    };
    interface HTMLDxIconAnfuehrungszeichenElement extends Components.DxIconAnfuehrungszeichen, HTMLStencilElement {
    }
    var HTMLDxIconAnfuehrungszeichenElement: {
        prototype: HTMLDxIconAnfuehrungszeichenElement;
        new (): HTMLDxIconAnfuehrungszeichenElement;
    };
    interface HTMLDxIconAntragdvagoutlinedElement extends Components.DxIconAntragdvagoutlined, HTMLStencilElement {
    }
    var HTMLDxIconAntragdvagoutlinedElement: {
        prototype: HTMLDxIconAntragdvagoutlinedElement;
        new (): HTMLDxIconAntragdvagoutlinedElement;
    };
    interface HTMLDxIconAntragfilledElement extends Components.DxIconAntragfilled, HTMLStencilElement {
    }
    var HTMLDxIconAntragfilledElement: {
        prototype: HTMLDxIconAntragfilledElement;
        new (): HTMLDxIconAntragfilledElement;
    };
    interface HTMLDxIconAppportal01filledElement extends Components.DxIconAppportal01filled, HTMLStencilElement {
    }
    var HTMLDxIconAppportal01filledElement: {
        prototype: HTMLDxIconAppportal01filledElement;
        new (): HTMLDxIconAppportal01filledElement;
    };
    interface HTMLDxIconAppportal01outlinedElement extends Components.DxIconAppportal01outlined, HTMLStencilElement {
    }
    var HTMLDxIconAppportal01outlinedElement: {
        prototype: HTMLDxIconAppportal01outlinedElement;
        new (): HTMLDxIconAppportal01outlinedElement;
    };
    interface HTMLDxIconAppportal02filledElement extends Components.DxIconAppportal02filled, HTMLStencilElement {
    }
    var HTMLDxIconAppportal02filledElement: {
        prototype: HTMLDxIconAppportal02filledElement;
        new (): HTMLDxIconAppportal02filledElement;
    };
    interface HTMLDxIconAppportal02outlinedElement extends Components.DxIconAppportal02outlined, HTMLStencilElement {
    }
    var HTMLDxIconAppportal02outlinedElement: {
        prototype: HTMLDxIconAppportal02outlinedElement;
        new (): HTMLDxIconAppportal02outlinedElement;
    };
    interface HTMLDxIconAppstoregfilledElement extends Components.DxIconAppstoregfilled, HTMLStencilElement {
    }
    var HTMLDxIconAppstoregfilledElement: {
        prototype: HTMLDxIconAppstoregfilledElement;
        new (): HTMLDxIconAppstoregfilledElement;
    };
    interface HTMLDxIconAppstorewoutlinedElement extends Components.DxIconAppstorewoutlined, HTMLStencilElement {
    }
    var HTMLDxIconAppstorewoutlinedElement: {
        prototype: HTMLDxIconAppstorewoutlinedElement;
        new (): HTMLDxIconAppstorewoutlinedElement;
    };
    interface HTMLDxIconAuftragsportalfilledElement extends Components.DxIconAuftragsportalfilled, HTMLStencilElement {
    }
    var HTMLDxIconAuftragsportalfilledElement: {
        prototype: HTMLDxIconAuftragsportalfilledElement;
        new (): HTMLDxIconAuftragsportalfilledElement;
    };
    interface HTMLDxIconAuftragsportaloutlinedElement extends Components.DxIconAuftragsportaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconAuftragsportaloutlinedElement: {
        prototype: HTMLDxIconAuftragsportaloutlinedElement;
        new (): HTMLDxIconAuftragsportaloutlinedElement;
    };
    interface HTMLDxIconAugeElement extends Components.DxIconAuge, HTMLStencilElement {
    }
    var HTMLDxIconAugeElement: {
        prototype: HTMLDxIconAugeElement;
        new (): HTMLDxIconAugeElement;
    };
    interface HTMLDxIconAugegestrichenElement extends Components.DxIconAugegestrichen, HTMLStencilElement {
    }
    var HTMLDxIconAugegestrichenElement: {
        prototype: HTMLDxIconAugegestrichenElement;
        new (): HTMLDxIconAugegestrichenElement;
    };
    interface HTMLDxIconAusfuellenElement extends Components.DxIconAusfuellen, HTMLStencilElement {
    }
    var HTMLDxIconAusfuellenElement: {
        prototype: HTMLDxIconAusfuellenElement;
        new (): HTMLDxIconAusfuellenElement;
    };
    interface HTMLDxIconAusweisElement extends Components.DxIconAusweis, HTMLStencilElement {
    }
    var HTMLDxIconAusweisElement: {
        prototype: HTMLDxIconAusweisElement;
        new (): HTMLDxIconAusweisElement;
    };
    interface HTMLDxIconAusweischeckElement extends Components.DxIconAusweischeck, HTMLStencilElement {
    }
    var HTMLDxIconAusweischeckElement: {
        prototype: HTMLDxIconAusweischeckElement;
        new (): HTMLDxIconAusweischeckElement;
    };
    interface HTMLDxIconAutorisierungvertragsabschlussElement extends Components.DxIconAutorisierungvertragsabschluss, HTMLStencilElement {
    }
    var HTMLDxIconAutorisierungvertragsabschlussElement: {
        prototype: HTMLDxIconAutorisierungvertragsabschlussElement;
        new (): HTMLDxIconAutorisierungvertragsabschlussElement;
    };
    interface HTMLDxIconBausparenboldElement extends Components.DxIconBausparenbold, HTMLStencilElement {
    }
    var HTMLDxIconBausparenboldElement: {
        prototype: HTMLDxIconBausparenboldElement;
        new (): HTMLDxIconBausparenboldElement;
    };
    interface HTMLDxIconBausparenthinElement extends Components.DxIconBausparenthin, HTMLStencilElement {
    }
    var HTMLDxIconBausparenthinElement: {
        prototype: HTMLDxIconBausparenthinElement;
        new (): HTMLDxIconBausparenthinElement;
    };
    interface HTMLDxIconBentoboxElement extends Components.DxIconBentobox, HTMLStencilElement {
    }
    var HTMLDxIconBentoboxElement: {
        prototype: HTMLDxIconBentoboxElement;
        new (): HTMLDxIconBentoboxElement;
    };
    interface HTMLDxIconBeratugsweltfilledElement extends Components.DxIconBeratugsweltfilled, HTMLStencilElement {
    }
    var HTMLDxIconBeratugsweltfilledElement: {
        prototype: HTMLDxIconBeratugsweltfilledElement;
        new (): HTMLDxIconBeratugsweltfilledElement;
    };
    interface HTMLDxIconBeratugsweltoutlinedElement extends Components.DxIconBeratugsweltoutlined, HTMLStencilElement {
    }
    var HTMLDxIconBeratugsweltoutlinedElement: {
        prototype: HTMLDxIconBeratugsweltoutlinedElement;
        new (): HTMLDxIconBeratugsweltoutlinedElement;
    };
    interface HTMLDxIconBlinkitfilledElement extends Components.DxIconBlinkitfilled, HTMLStencilElement {
    }
    var HTMLDxIconBlinkitfilledElement: {
        prototype: HTMLDxIconBlinkitfilledElement;
        new (): HTMLDxIconBlinkitfilledElement;
    };
    interface HTMLDxIconBlinkitoutlinedElement extends Components.DxIconBlinkitoutlined, HTMLStencilElement {
    }
    var HTMLDxIconBlinkitoutlinedElement: {
        prototype: HTMLDxIconBlinkitoutlinedElement;
        new (): HTMLDxIconBlinkitoutlinedElement;
    };
    interface HTMLDxIconCheckElement extends Components.DxIconCheck, HTMLStencilElement {
    }
    var HTMLDxIconCheckElement: {
        prototype: HTMLDxIconCheckElement;
        new (): HTMLDxIconCheckElement;
    };
    interface HTMLDxIconCheckkreisElement extends Components.DxIconCheckkreis, HTMLStencilElement {
    }
    var HTMLDxIconCheckkreisElement: {
        prototype: HTMLDxIconCheckkreisElement;
        new (): HTMLDxIconCheckkreisElement;
    };
    interface HTMLDxIconCheckkreisthinoutlinedElement extends Components.DxIconCheckkreisthinoutlined, HTMLStencilElement {
    }
    var HTMLDxIconCheckkreisthinoutlinedElement: {
        prototype: HTMLDxIconCheckkreisthinoutlinedElement;
        new (): HTMLDxIconCheckkreisthinoutlinedElement;
    };
    interface HTMLDxIconCheckthinElement extends Components.DxIconCheckthin, HTMLStencilElement {
    }
    var HTMLDxIconCheckthinElement: {
        prototype: HTMLDxIconCheckthinElement;
        new (): HTMLDxIconCheckthinElement;
    };
    interface HTMLDxIconChevronhochElement extends Components.DxIconChevronhoch, HTMLStencilElement {
    }
    var HTMLDxIconChevronhochElement: {
        prototype: HTMLDxIconChevronhochElement;
        new (): HTMLDxIconChevronhochElement;
    };
    interface HTMLDxIconChevronlinksElement extends Components.DxIconChevronlinks, HTMLStencilElement {
    }
    var HTMLDxIconChevronlinksElement: {
        prototype: HTMLDxIconChevronlinksElement;
        new (): HTMLDxIconChevronlinksElement;
    };
    interface HTMLDxIconChevronlinkskreisElement extends Components.DxIconChevronlinkskreis, HTMLStencilElement {
    }
    var HTMLDxIconChevronlinkskreisElement: {
        prototype: HTMLDxIconChevronlinkskreisElement;
        new (): HTMLDxIconChevronlinkskreisElement;
    };
    interface HTMLDxIconChevronlinkskreisfillElement extends Components.DxIconChevronlinkskreisfill, HTMLStencilElement {
    }
    var HTMLDxIconChevronlinkskreisfillElement: {
        prototype: HTMLDxIconChevronlinkskreisfillElement;
        new (): HTMLDxIconChevronlinkskreisfillElement;
    };
    interface HTMLDxIconChevronrechtsElement extends Components.DxIconChevronrechts, HTMLStencilElement {
    }
    var HTMLDxIconChevronrechtsElement: {
        prototype: HTMLDxIconChevronrechtsElement;
        new (): HTMLDxIconChevronrechtsElement;
    };
    interface HTMLDxIconChevronrechtskreisElement extends Components.DxIconChevronrechtskreis, HTMLStencilElement {
    }
    var HTMLDxIconChevronrechtskreisElement: {
        prototype: HTMLDxIconChevronrechtskreisElement;
        new (): HTMLDxIconChevronrechtskreisElement;
    };
    interface HTMLDxIconChevronrechtskreisfillElement extends Components.DxIconChevronrechtskreisfill, HTMLStencilElement {
    }
    var HTMLDxIconChevronrechtskreisfillElement: {
        prototype: HTMLDxIconChevronrechtskreisfillElement;
        new (): HTMLDxIconChevronrechtskreisfillElement;
    };
    interface HTMLDxIconChevronrunterElement extends Components.DxIconChevronrunter, HTMLStencilElement {
    }
    var HTMLDxIconChevronrunterElement: {
        prototype: HTMLDxIconChevronrunterElement;
        new (): HTMLDxIconChevronrunterElement;
    };
    interface HTMLDxIconChipElement extends Components.DxIconChip, HTMLStencilElement {
    }
    var HTMLDxIconChipElement: {
        prototype: HTMLDxIconChipElement;
        new (): HTMLDxIconChipElement;
    };
    interface HTMLDxIconCookieElement extends Components.DxIconCookie, HTMLStencilElement {
    }
    var HTMLDxIconCookieElement: {
        prototype: HTMLDxIconCookieElement;
        new (): HTMLDxIconCookieElement;
    };
    interface HTMLDxIconDatensavefilledElement extends Components.DxIconDatensavefilled, HTMLStencilElement {
    }
    var HTMLDxIconDatensavefilledElement: {
        prototype: HTMLDxIconDatensavefilledElement;
        new (): HTMLDxIconDatensavefilledElement;
    };
    interface HTMLDxIconDatensaveoutlinedElement extends Components.DxIconDatensaveoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDatensaveoutlinedElement: {
        prototype: HTMLDxIconDatensaveoutlinedElement;
        new (): HTMLDxIconDatensaveoutlinedElement;
    };
    interface HTMLDxIconDatenturbofilledElement extends Components.DxIconDatenturbofilled, HTMLStencilElement {
    }
    var HTMLDxIconDatenturbofilledElement: {
        prototype: HTMLDxIconDatenturbofilledElement;
        new (): HTMLDxIconDatenturbofilledElement;
    };
    interface HTMLDxIconDatenturbooutlinedElement extends Components.DxIconDatenturbooutlined, HTMLStencilElement {
    }
    var HTMLDxIconDatenturbooutlinedElement: {
        prototype: HTMLDxIconDatenturbooutlinedElement;
        new (): HTMLDxIconDatenturbooutlinedElement;
    };
    interface HTMLDxIconDauerElement extends Components.DxIconDauer, HTMLStencilElement {
    }
    var HTMLDxIconDauerElement: {
        prototype: HTMLDxIconDauerElement;
        new (): HTMLDxIconDauerElement;
    };
    interface HTMLDxIconDauer3minElement extends Components.DxIconDauer3min, HTMLStencilElement {
    }
    var HTMLDxIconDauer3minElement: {
        prototype: HTMLDxIconDauer3minElement;
        new (): HTMLDxIconDauer3minElement;
    };
    interface HTMLDxIconDbnetfilledElement extends Components.DxIconDbnetfilled, HTMLStencilElement {
    }
    var HTMLDxIconDbnetfilledElement: {
        prototype: HTMLDxIconDbnetfilledElement;
        new (): HTMLDxIconDbnetfilledElement;
    };
    interface HTMLDxIconDbnetoutlinedElement extends Components.DxIconDbnetoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDbnetoutlinedElement: {
        prototype: HTMLDxIconDbnetoutlinedElement;
        new (): HTMLDxIconDbnetoutlinedElement;
    };
    interface HTMLDxIconDepotsboldElement extends Components.DxIconDepotsbold, HTMLStencilElement {
    }
    var HTMLDxIconDepotsboldElement: {
        prototype: HTMLDxIconDepotsboldElement;
        new (): HTMLDxIconDepotsboldElement;
    };
    interface HTMLDxIconDepotsthinElement extends Components.DxIconDepotsthin, HTMLStencilElement {
    }
    var HTMLDxIconDepotsthinElement: {
        prototype: HTMLDxIconDepotsthinElement;
        new (): HTMLDxIconDepotsthinElement;
    };
    interface HTMLDxIconDesktoppcElement extends Components.DxIconDesktoppc, HTMLStencilElement {
    }
    var HTMLDxIconDesktoppcElement: {
        prototype: HTMLDxIconDesktoppcElement;
        new (): HTMLDxIconDesktoppcElement;
    };
    interface HTMLDxIconDevicesandereElement extends Components.DxIconDevicesandere, HTMLStencilElement {
    }
    var HTMLDxIconDevicesandereElement: {
        prototype: HTMLDxIconDevicesandereElement;
        new (): HTMLDxIconDevicesandereElement;
    };
    interface HTMLDxIconDiedvagfilledElement extends Components.DxIconDiedvagfilled, HTMLStencilElement {
    }
    var HTMLDxIconDiedvagfilledElement: {
        prototype: HTMLDxIconDiedvagfilledElement;
        new (): HTMLDxIconDiedvagfilledElement;
    };
    interface HTMLDxIconDiedvagoutlinedElement extends Components.DxIconDiedvagoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDiedvagoutlinedElement: {
        prototype: HTMLDxIconDiedvagoutlinedElement;
        new (): HTMLDxIconDiedvagoutlinedElement;
    };
    interface HTMLDxIconDnetfilledElement extends Components.DxIconDnetfilled, HTMLStencilElement {
    }
    var HTMLDxIconDnetfilledElement: {
        prototype: HTMLDxIconDnetfilledElement;
        new (): HTMLDxIconDnetfilledElement;
    };
    interface HTMLDxIconDnetoutlinedElement extends Components.DxIconDnetoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDnetoutlinedElement: {
        prototype: HTMLDxIconDnetoutlinedElement;
        new (): HTMLDxIconDnetoutlinedElement;
    };
    interface HTMLDxIconDokumentElement extends Components.DxIconDokument, HTMLStencilElement {
    }
    var HTMLDxIconDokumentElement: {
        prototype: HTMLDxIconDokumentElement;
        new (): HTMLDxIconDokumentElement;
    };
    interface HTMLDxIconDoppelchevronlinkskreisElement extends Components.DxIconDoppelchevronlinkskreis, HTMLStencilElement {
    }
    var HTMLDxIconDoppelchevronlinkskreisElement: {
        prototype: HTMLDxIconDoppelchevronlinkskreisElement;
        new (): HTMLDxIconDoppelchevronlinkskreisElement;
    };
    interface HTMLDxIconDoppelchevronrechtskreisElement extends Components.DxIconDoppelchevronrechtskreis, HTMLStencilElement {
    }
    var HTMLDxIconDoppelchevronrechtskreisElement: {
        prototype: HTMLDxIconDoppelchevronrechtskreisElement;
        new (): HTMLDxIconDoppelchevronrechtskreisElement;
    };
    interface HTMLDxIconDownloadElement extends Components.DxIconDownload, HTMLStencilElement {
    }
    var HTMLDxIconDownloadElement: {
        prototype: HTMLDxIconDownloadElement;
        new (): HTMLDxIconDownloadElement;
    };
    interface HTMLDxIconDruckerElement extends Components.DxIconDrucker, HTMLStencilElement {
    }
    var HTMLDxIconDruckerElement: {
        prototype: HTMLDxIconDruckerElement;
        new (): HTMLDxIconDruckerElement;
    };
    interface HTMLDxIconDvabrechrungsplusportalfilledElement extends Components.DxIconDvabrechrungsplusportalfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvabrechrungsplusportalfilledElement: {
        prototype: HTMLDxIconDvabrechrungsplusportalfilledElement;
        new (): HTMLDxIconDvabrechrungsplusportalfilledElement;
    };
    interface HTMLDxIconDvabrechrungsplusportaloutlinedElement extends Components.DxIconDvabrechrungsplusportaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvabrechrungsplusportaloutlinedElement: {
        prototype: HTMLDxIconDvabrechrungsplusportaloutlinedElement;
        new (): HTMLDxIconDvabrechrungsplusportaloutlinedElement;
    };
    interface HTMLDxIconDvagcloudfilledElement extends Components.DxIconDvagcloudfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagcloudfilledElement: {
        prototype: HTMLDxIconDvagcloudfilledElement;
        new (): HTMLDxIconDvagcloudfilledElement;
    };
    interface HTMLDxIconDvagcloudoutlinedElement extends Components.DxIconDvagcloudoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagcloudoutlinedElement: {
        prototype: HTMLDxIconDvagcloudoutlinedElement;
        new (): HTMLDxIconDvagcloudoutlinedElement;
    };
    interface HTMLDxIconDvaghypfilledElement extends Components.DxIconDvaghypfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvaghypfilledElement: {
        prototype: HTMLDxIconDvaghypfilledElement;
        new (): HTMLDxIconDvaghypfilledElement;
    };
    interface HTMLDxIconDvaghypoutlinedElement extends Components.DxIconDvaghypoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvaghypoutlinedElement: {
        prototype: HTMLDxIconDvaghypoutlinedElement;
        new (): HTMLDxIconDvaghypoutlinedElement;
    };
    interface HTMLDxIconDvagloginfilledElement extends Components.DxIconDvagloginfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagloginfilledElement: {
        prototype: HTMLDxIconDvagloginfilledElement;
        new (): HTMLDxIconDvagloginfilledElement;
    };
    interface HTMLDxIconDvagloginoutlinedElement extends Components.DxIconDvagloginoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagloginoutlinedElement: {
        prototype: HTMLDxIconDvagloginoutlinedElement;
        new (): HTMLDxIconDvagloginoutlinedElement;
    };
    interface HTMLDxIconDvagonlinesystemkifilledElement extends Components.DxIconDvagonlinesystemkifilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesystemkifilledElement: {
        prototype: HTMLDxIconDvagonlinesystemkifilledElement;
        new (): HTMLDxIconDvagonlinesystemkifilledElement;
    };
    interface HTMLDxIconDvagonlinesystempimfilledElement extends Components.DxIconDvagonlinesystempimfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesystempimfilledElement: {
        prototype: HTMLDxIconDvagonlinesystempimfilledElement;
        new (): HTMLDxIconDvagonlinesystempimfilledElement;
    };
    interface HTMLDxIconDvagonlinesystemvbifilledElement extends Components.DxIconDvagonlinesystemvbifilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesystemvbifilledElement: {
        prototype: HTMLDxIconDvagonlinesystemvbifilledElement;
        new (): HTMLDxIconDvagonlinesystemvbifilledElement;
    };
    interface HTMLDxIconDvagonlinesytstemkioutlinedElement extends Components.DxIconDvagonlinesytstemkioutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesytstemkioutlinedElement: {
        prototype: HTMLDxIconDvagonlinesytstemkioutlinedElement;
        new (): HTMLDxIconDvagonlinesytstemkioutlinedElement;
    };
    interface HTMLDxIconDvagonlinesytstempimoutlinedElement extends Components.DxIconDvagonlinesytstempimoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesytstempimoutlinedElement: {
        prototype: HTMLDxIconDvagonlinesytstempimoutlinedElement;
        new (): HTMLDxIconDvagonlinesytstempimoutlinedElement;
    };
    interface HTMLDxIconDvagonlinesytstemvbioutlinedElement extends Components.DxIconDvagonlinesytstemvbioutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagonlinesytstemvbioutlinedElement: {
        prototype: HTMLDxIconDvagonlinesytstemvbioutlinedElement;
        new (): HTMLDxIconDvagonlinesytstemvbioutlinedElement;
    };
    interface HTMLDxIconDvagunternehmenspraesentationfilledElement extends Components.DxIconDvagunternehmenspraesentationfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvagunternehmenspraesentationfilledElement: {
        prototype: HTMLDxIconDvagunternehmenspraesentationfilledElement;
        new (): HTMLDxIconDvagunternehmenspraesentationfilledElement;
    };
    interface HTMLDxIconDvagunternehmenspraesentationoutlinedElement extends Components.DxIconDvagunternehmenspraesentationoutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvagunternehmenspraesentationoutlinedElement: {
        prototype: HTMLDxIconDvagunternehmenspraesentationoutlinedElement;
        new (): HTMLDxIconDvagunternehmenspraesentationoutlinedElement;
    };
    interface HTMLDxIconDvfactoringplusportalfilledElement extends Components.DxIconDvfactoringplusportalfilled, HTMLStencilElement {
    }
    var HTMLDxIconDvfactoringplusportalfilledElement: {
        prototype: HTMLDxIconDvfactoringplusportalfilledElement;
        new (): HTMLDxIconDvfactoringplusportalfilledElement;
    };
    interface HTMLDxIconDvfactoringplusportaloutlinedElement extends Components.DxIconDvfactoringplusportaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconDvfactoringplusportaloutlinedElement: {
        prototype: HTMLDxIconDvfactoringplusportaloutlinedElement;
        new (): HTMLDxIconDvfactoringplusportaloutlinedElement;
    };
    interface HTMLDxIconEasyvbfilledElement extends Components.DxIconEasyvbfilled, HTMLStencilElement {
    }
    var HTMLDxIconEasyvbfilledElement: {
        prototype: HTMLDxIconEasyvbfilledElement;
        new (): HTMLDxIconEasyvbfilledElement;
    };
    interface HTMLDxIconEasyvboutlinedElement extends Components.DxIconEasyvboutlined, HTMLStencilElement {
    }
    var HTMLDxIconEasyvboutlinedElement: {
        prototype: HTMLDxIconEasyvboutlinedElement;
        new (): HTMLDxIconEasyvboutlinedElement;
    };
    interface HTMLDxIconEditElement extends Components.DxIconEdit, HTMLStencilElement {
    }
    var HTMLDxIconEditElement: {
        prototype: HTMLDxIconEditElement;
        new (): HTMLDxIconEditElement;
    };
    interface HTMLDxIconEditthinElement extends Components.DxIconEditthin, HTMLStencilElement {
    }
    var HTMLDxIconEditthinElement: {
        prototype: HTMLDxIconEditthinElement;
        new (): HTMLDxIconEditthinElement;
    };
    interface HTMLDxIconEingabeElement extends Components.DxIconEingabe, HTMLStencilElement {
    }
    var HTMLDxIconEingabeElement: {
        prototype: HTMLDxIconEingabeElement;
        new (): HTMLDxIconEingabeElement;
    };
    interface HTMLDxIconEinkaufenboldElement extends Components.DxIconEinkaufenbold, HTMLStencilElement {
    }
    var HTMLDxIconEinkaufenboldElement: {
        prototype: HTMLDxIconEinkaufenboldElement;
        new (): HTMLDxIconEinkaufenboldElement;
    };
    interface HTMLDxIconEinkaufenthinElement extends Components.DxIconEinkaufenthin, HTMLStencilElement {
    }
    var HTMLDxIconEinkaufenthinElement: {
        prototype: HTMLDxIconEinkaufenthinElement;
        new (): HTMLDxIconEinkaufenthinElement;
    };
    interface HTMLDxIconEinstellungenElement extends Components.DxIconEinstellungen, HTMLStencilElement {
    }
    var HTMLDxIconEinstellungenElement: {
        prototype: HTMLDxIconEinstellungenElement;
        new (): HTMLDxIconEinstellungenElement;
    };
    interface HTMLDxIconEnergieportalfilledElement extends Components.DxIconEnergieportalfilled, HTMLStencilElement {
    }
    var HTMLDxIconEnergieportalfilledElement: {
        prototype: HTMLDxIconEnergieportalfilledElement;
        new (): HTMLDxIconEnergieportalfilledElement;
    };
    interface HTMLDxIconEnergieportaloutlinedElement extends Components.DxIconEnergieportaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconEnergieportaloutlinedElement: {
        prototype: HTMLDxIconEnergieportaloutlinedElement;
        new (): HTMLDxIconEnergieportaloutlinedElement;
    };
    interface HTMLDxIconErrorElement extends Components.DxIconError, HTMLStencilElement {
    }
    var HTMLDxIconErrorElement: {
        prototype: HTMLDxIconErrorElement;
        new (): HTMLDxIconErrorElement;
    };
    interface HTMLDxIconErrorthinoutlinedElement extends Components.DxIconErrorthinoutlined, HTMLStencilElement {
    }
    var HTMLDxIconErrorthinoutlinedElement: {
        prototype: HTMLDxIconErrorthinoutlinedElement;
        new (): HTMLDxIconErrorthinoutlinedElement;
    };
    interface HTMLDxIconEuroElement extends Components.DxIconEuro, HTMLStencilElement {
    }
    var HTMLDxIconEuroElement: {
        prototype: HTMLDxIconEuroElement;
        new (): HTMLDxIconEuroElement;
    };
    interface HTMLDxIconEventfilledElement extends Components.DxIconEventfilled, HTMLStencilElement {
    }
    var HTMLDxIconEventfilledElement: {
        prototype: HTMLDxIconEventfilledElement;
        new (): HTMLDxIconEventfilledElement;
    };
    interface HTMLDxIconEventoutlinedElement extends Components.DxIconEventoutlined, HTMLStencilElement {
    }
    var HTMLDxIconEventoutlinedElement: {
        prototype: HTMLDxIconEventoutlinedElement;
        new (): HTMLDxIconEventoutlinedElement;
    };
    interface HTMLDxIconFacebookElement extends Components.DxIconFacebook, HTMLStencilElement {
    }
    var HTMLDxIconFacebookElement: {
        prototype: HTMLDxIconFacebookElement;
        new (): HTMLDxIconFacebookElement;
    };
    interface HTMLDxIconFacebookbaukastenfilledElement extends Components.DxIconFacebookbaukastenfilled, HTMLStencilElement {
    }
    var HTMLDxIconFacebookbaukastenfilledElement: {
        prototype: HTMLDxIconFacebookbaukastenfilledElement;
        new (): HTMLDxIconFacebookbaukastenfilledElement;
    };
    interface HTMLDxIconFacebookbaukastenoutlinedElement extends Components.DxIconFacebookbaukastenoutlined, HTMLStencilElement {
    }
    var HTMLDxIconFacebookbaukastenoutlinedElement: {
        prototype: HTMLDxIconFacebookbaukastenoutlinedElement;
        new (): HTMLDxIconFacebookbaukastenoutlinedElement;
    };
    interface HTMLDxIconFastforwardElement extends Components.DxIconFastforward, HTMLStencilElement {
    }
    var HTMLDxIconFastforwardElement: {
        prototype: HTMLDxIconFastforwardElement;
        new (): HTMLDxIconFastforwardElement;
    };
    interface HTMLDxIconFastrewindElement extends Components.DxIconFastrewind, HTMLStencilElement {
    }
    var HTMLDxIconFastrewindElement: {
        prototype: HTMLDxIconFastrewindElement;
        new (): HTMLDxIconFastrewindElement;
    };
    interface HTMLDxIconFileElement extends Components.DxIconFile, HTMLStencilElement {
    }
    var HTMLDxIconFileElement: {
        prototype: HTMLDxIconFileElement;
        new (): HTMLDxIconFileElement;
    };
    interface HTMLDxIconFileaudioElement extends Components.DxIconFileaudio, HTMLStencilElement {
    }
    var HTMLDxIconFileaudioElement: {
        prototype: HTMLDxIconFileaudioElement;
        new (): HTMLDxIconFileaudioElement;
    };
    interface HTMLDxIconFileaudiothinElement extends Components.DxIconFileaudiothin, HTMLStencilElement {
    }
    var HTMLDxIconFileaudiothinElement: {
        prototype: HTMLDxIconFileaudiothinElement;
        new (): HTMLDxIconFileaudiothinElement;
    };
    interface HTMLDxIconFiledocElement extends Components.DxIconFiledoc, HTMLStencilElement {
    }
    var HTMLDxIconFiledocElement: {
        prototype: HTMLDxIconFiledocElement;
        new (): HTMLDxIconFiledocElement;
    };
    interface HTMLDxIconFiledocthinElement extends Components.DxIconFiledocthin, HTMLStencilElement {
    }
    var HTMLDxIconFiledocthinElement: {
        prototype: HTMLDxIconFiledocthinElement;
        new (): HTMLDxIconFiledocthinElement;
    };
    interface HTMLDxIconFilejpgElement extends Components.DxIconFilejpg, HTMLStencilElement {
    }
    var HTMLDxIconFilejpgElement: {
        prototype: HTMLDxIconFilejpgElement;
        new (): HTMLDxIconFilejpgElement;
    };
    interface HTMLDxIconFilepdfElement extends Components.DxIconFilepdf, HTMLStencilElement {
    }
    var HTMLDxIconFilepdfElement: {
        prototype: HTMLDxIconFilepdfElement;
        new (): HTMLDxIconFilepdfElement;
    };
    interface HTMLDxIconFilepdfthinElement extends Components.DxIconFilepdfthin, HTMLStencilElement {
    }
    var HTMLDxIconFilepdfthinElement: {
        prototype: HTMLDxIconFilepdfthinElement;
        new (): HTMLDxIconFilepdfthinElement;
    };
    interface HTMLDxIconFilepngElement extends Components.DxIconFilepng, HTMLStencilElement {
    }
    var HTMLDxIconFilepngElement: {
        prototype: HTMLDxIconFilepngElement;
        new (): HTMLDxIconFilepngElement;
    };
    interface HTMLDxIconFilepptElement extends Components.DxIconFileppt, HTMLStencilElement {
    }
    var HTMLDxIconFilepptElement: {
        prototype: HTMLDxIconFilepptElement;
        new (): HTMLDxIconFilepptElement;
    };
    interface HTMLDxIconFilepptthinElement extends Components.DxIconFilepptthin, HTMLStencilElement {
    }
    var HTMLDxIconFilepptthinElement: {
        prototype: HTMLDxIconFilepptthinElement;
        new (): HTMLDxIconFilepptthinElement;
    };
    interface HTMLDxIconFilevideoElement extends Components.DxIconFilevideo, HTMLStencilElement {
    }
    var HTMLDxIconFilevideoElement: {
        prototype: HTMLDxIconFilevideoElement;
        new (): HTMLDxIconFilevideoElement;
    };
    interface HTMLDxIconFilevideothinElement extends Components.DxIconFilevideothin, HTMLStencilElement {
    }
    var HTMLDxIconFilevideothinElement: {
        prototype: HTMLDxIconFilevideothinElement;
        new (): HTMLDxIconFilevideothinElement;
    };
    interface HTMLDxIconFilexlsElement extends Components.DxIconFilexls, HTMLStencilElement {
    }
    var HTMLDxIconFilexlsElement: {
        prototype: HTMLDxIconFilexlsElement;
        new (): HTMLDxIconFilexlsElement;
    };
    interface HTMLDxIconFilterElement extends Components.DxIconFilter, HTMLStencilElement {
    }
    var HTMLDxIconFilterElement: {
        prototype: HTMLDxIconFilterElement;
        new (): HTMLDxIconFilterElement;
    };
    interface HTMLDxIconForward30Element extends Components.DxIconForward30, HTMLStencilElement {
    }
    var HTMLDxIconForward30Element: {
        prototype: HTMLDxIconForward30Element;
        new (): HTMLDxIconForward30Element;
    };
    interface HTMLDxIconFotokameraElement extends Components.DxIconFotokamera, HTMLStencilElement {
    }
    var HTMLDxIconFotokameraElement: {
        prototype: HTMLDxIconFotokameraElement;
        new (): HTMLDxIconFotokameraElement;
    };
    interface HTMLDxIconFragekreisElement extends Components.DxIconFragekreis, HTMLStencilElement {
    }
    var HTMLDxIconFragekreisElement: {
        prototype: HTMLDxIconFragekreisElement;
        new (): HTMLDxIconFragekreisElement;
    };
    interface HTMLDxIconFragekreisfillElement extends Components.DxIconFragekreisfill, HTMLStencilElement {
    }
    var HTMLDxIconFragekreisfillElement: {
        prototype: HTMLDxIconFragekreisfillElement;
        new (): HTMLDxIconFragekreisfillElement;
    };
    interface HTMLDxIconFrontcamElement extends Components.DxIconFrontcam, HTMLStencilElement {
    }
    var HTMLDxIconFrontcamElement: {
        prototype: HTMLDxIconFrontcamElement;
        new (): HTMLDxIconFrontcamElement;
    };
    interface HTMLDxIconFullscreenstartElement extends Components.DxIconFullscreenstart, HTMLStencilElement {
    }
    var HTMLDxIconFullscreenstartElement: {
        prototype: HTMLDxIconFullscreenstartElement;
        new (): HTMLDxIconFullscreenstartElement;
    };
    interface HTMLDxIconFullscreenstopElement extends Components.DxIconFullscreenstop, HTMLStencilElement {
    }
    var HTMLDxIconFullscreenstopElement: {
        prototype: HTMLDxIconFullscreenstopElement;
        new (): HTMLDxIconFullscreenstopElement;
    };
    interface HTMLDxIconGeldscheinElement extends Components.DxIconGeldschein, HTMLStencilElement {
    }
    var HTMLDxIconGeldscheinElement: {
        prototype: HTMLDxIconGeldscheinElement;
        new (): HTMLDxIconGeldscheinElement;
    };
    interface HTMLDxIconGesundheitboldElement extends Components.DxIconGesundheitbold, HTMLStencilElement {
    }
    var HTMLDxIconGesundheitboldElement: {
        prototype: HTMLDxIconGesundheitboldElement;
        new (): HTMLDxIconGesundheitboldElement;
    };
    interface HTMLDxIconGesundheitthinElement extends Components.DxIconGesundheitthin, HTMLStencilElement {
    }
    var HTMLDxIconGesundheitthinElement: {
        prototype: HTMLDxIconGesundheitthinElement;
        new (): HTMLDxIconGesundheitthinElement;
    };
    interface HTMLDxIconGlasboldElement extends Components.DxIconGlasbold, HTMLStencilElement {
    }
    var HTMLDxIconGlasboldElement: {
        prototype: HTMLDxIconGlasboldElement;
        new (): HTMLDxIconGlasboldElement;
    };
    interface HTMLDxIconGlasthinElement extends Components.DxIconGlasthin, HTMLStencilElement {
    }
    var HTMLDxIconGlasthinElement: {
        prototype: HTMLDxIconGlasthinElement;
        new (): HTMLDxIconGlasthinElement;
    };
    interface HTMLDxIconGoldbarrenboldElement extends Components.DxIconGoldbarrenbold, HTMLStencilElement {
    }
    var HTMLDxIconGoldbarrenboldElement: {
        prototype: HTMLDxIconGoldbarrenboldElement;
        new (): HTMLDxIconGoldbarrenboldElement;
    };
    interface HTMLDxIconGoldbarrenthinElement extends Components.DxIconGoldbarrenthin, HTMLStencilElement {
    }
    var HTMLDxIconGoldbarrenthinElement: {
        prototype: HTMLDxIconGoldbarrenthinElement;
        new (): HTMLDxIconGoldbarrenthinElement;
    };
    interface HTMLDxIconGoogleplusElement extends Components.DxIconGoogleplus, HTMLStencilElement {
    }
    var HTMLDxIconGoogleplusElement: {
        prototype: HTMLDxIconGoogleplusElement;
        new (): HTMLDxIconGoogleplusElement;
    };
    interface HTMLDxIconHamburgermenueElement extends Components.DxIconHamburgermenue, HTMLStencilElement {
    }
    var HTMLDxIconHamburgermenueElement: {
        prototype: HTMLDxIconHamburgermenueElement;
        new (): HTMLDxIconHamburgermenueElement;
    };
    interface HTMLDxIconHandyElement extends Components.DxIconHandy, HTMLStencilElement {
    }
    var HTMLDxIconHandyElement: {
        prototype: HTMLDxIconHandyElement;
        new (): HTMLDxIconHandyElement;
    };
    interface HTMLDxIconHausratboldElement extends Components.DxIconHausratbold, HTMLStencilElement {
    }
    var HTMLDxIconHausratboldElement: {
        prototype: HTMLDxIconHausratboldElement;
        new (): HTMLDxIconHausratboldElement;
    };
    interface HTMLDxIconHausratthinElement extends Components.DxIconHausratthin, HTMLStencilElement {
    }
    var HTMLDxIconHausratthinElement: {
        prototype: HTMLDxIconHausratthinElement;
        new (): HTMLDxIconHausratthinElement;
    };
    interface HTMLDxIconHdElement extends Components.DxIconHd, HTMLStencilElement {
    }
    var HTMLDxIconHdElement: {
        prototype: HTMLDxIconHdElement;
        new (): HTMLDxIconHdElement;
    };
    interface HTMLDxIconHeadphonesElement extends Components.DxIconHeadphones, HTMLStencilElement {
    }
    var HTMLDxIconHeadphonesElement: {
        prototype: HTMLDxIconHeadphonesElement;
        new (): HTMLDxIconHeadphonesElement;
    };
    interface HTMLDxIconHeadsetElement extends Components.DxIconHeadset, HTMLStencilElement {
    }
    var HTMLDxIconHeadsetElement: {
        prototype: HTMLDxIconHeadsetElement;
        new (): HTMLDxIconHeadsetElement;
    };
    interface HTMLDxIconHerzfillElement extends Components.DxIconHerzfill, HTMLStencilElement {
    }
    var HTMLDxIconHerzfillElement: {
        prototype: HTMLDxIconHerzfillElement;
        new (): HTMLDxIconHerzfillElement;
    };
    interface HTMLDxIconHerzoutlineElement extends Components.DxIconHerzoutline, HTMLStencilElement {
    }
    var HTMLDxIconHerzoutlineElement: {
        prototype: HTMLDxIconHerzoutlineElement;
        new (): HTMLDxIconHerzoutlineElement;
    };
    interface HTMLDxIconHerzplusElement extends Components.DxIconHerzplus, HTMLStencilElement {
    }
    var HTMLDxIconHerzplusElement: {
        prototype: HTMLDxIconHerzplusElement;
        new (): HTMLDxIconHerzplusElement;
    };
    interface HTMLDxIconHomeElement extends Components.DxIconHome, HTMLStencilElement {
    }
    var HTMLDxIconHomeElement: {
        prototype: HTMLDxIconHomeElement;
        new (): HTMLDxIconHomeElement;
    };
    interface HTMLDxIconHomepagekonfiguratorfilledElement extends Components.DxIconHomepagekonfiguratorfilled, HTMLStencilElement {
    }
    var HTMLDxIconHomepagekonfiguratorfilledElement: {
        prototype: HTMLDxIconHomepagekonfiguratorfilledElement;
        new (): HTMLDxIconHomepagekonfiguratorfilledElement;
    };
    interface HTMLDxIconHomepagekonfiguratoroutlinedElement extends Components.DxIconHomepagekonfiguratoroutlined, HTMLStencilElement {
    }
    var HTMLDxIconHomepagekonfiguratoroutlinedElement: {
        prototype: HTMLDxIconHomepagekonfiguratoroutlinedElement;
        new (): HTMLDxIconHomepagekonfiguratoroutlinedElement;
    };
    interface HTMLDxIconHomethinElement extends Components.DxIconHomethin, HTMLStencilElement {
    }
    var HTMLDxIconHomethinElement: {
        prototype: HTMLDxIconHomethinElement;
        new (): HTMLDxIconHomethinElement;
    };
    interface HTMLDxIconIddonlinewbthekgfilledElement extends Components.DxIconIddonlinewbthekgfilled, HTMLStencilElement {
    }
    var HTMLDxIconIddonlinewbthekgfilledElement: {
        prototype: HTMLDxIconIddonlinewbthekgfilledElement;
        new (): HTMLDxIconIddonlinewbthekgfilledElement;
    };
    interface HTMLDxIconIddonlinewbthekwoutlinedElement extends Components.DxIconIddonlinewbthekwoutlined, HTMLStencilElement {
    }
    var HTMLDxIconIddonlinewbthekwoutlinedElement: {
        prototype: HTMLDxIconIddonlinewbthekwoutlinedElement;
        new (): HTMLDxIconIddonlinewbthekwoutlinedElement;
    };
    interface HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement extends Components.DxIconIhrefragenunsereantwortenmeineappfilled, HTMLStencilElement {
    }
    var HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement: {
        prototype: HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement;
        new (): HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement;
    };
    interface HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement extends Components.DxIconIhrefragenunsereantwortenmeineappoutlined, HTMLStencilElement {
    }
    var HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement: {
        prototype: HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement;
        new (): HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement;
    };
    interface HTMLDxIconIhrefragenunsereantwortenzuritfilledElement extends Components.DxIconIhrefragenunsereantwortenzuritfilled, HTMLStencilElement {
    }
    var HTMLDxIconIhrefragenunsereantwortenzuritfilledElement: {
        prototype: HTMLDxIconIhrefragenunsereantwortenzuritfilledElement;
        new (): HTMLDxIconIhrefragenunsereantwortenzuritfilledElement;
    };
    interface HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement extends Components.DxIconIhrefragenunsereantwortenzuritoutlined, HTMLStencilElement {
    }
    var HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement: {
        prototype: HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement;
        new (): HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement;
    };
    interface HTMLDxIconImmobilienboldElement extends Components.DxIconImmobilienbold, HTMLStencilElement {
    }
    var HTMLDxIconImmobilienboldElement: {
        prototype: HTMLDxIconImmobilienboldElement;
        new (): HTMLDxIconImmobilienboldElement;
    };
    interface HTMLDxIconImmobilienfinanzierungboldElement extends Components.DxIconImmobilienfinanzierungbold, HTMLStencilElement {
    }
    var HTMLDxIconImmobilienfinanzierungboldElement: {
        prototype: HTMLDxIconImmobilienfinanzierungboldElement;
        new (): HTMLDxIconImmobilienfinanzierungboldElement;
    };
    interface HTMLDxIconImmobilienfinanzierungthinElement extends Components.DxIconImmobilienfinanzierungthin, HTMLStencilElement {
    }
    var HTMLDxIconImmobilienfinanzierungthinElement: {
        prototype: HTMLDxIconImmobilienfinanzierungthinElement;
        new (): HTMLDxIconImmobilienfinanzierungthinElement;
    };
    interface HTMLDxIconImmobilienthinElement extends Components.DxIconImmobilienthin, HTMLStencilElement {
    }
    var HTMLDxIconImmobilienthinElement: {
        prototype: HTMLDxIconImmobilienthinElement;
        new (): HTMLDxIconImmobilienthinElement;
    };
    interface HTMLDxIconInformationElement extends Components.DxIconInformation, HTMLStencilElement {
    }
    var HTMLDxIconInformationElement: {
        prototype: HTMLDxIconInformationElement;
        new (): HTMLDxIconInformationElement;
    };
    interface HTMLDxIconInstagramElement extends Components.DxIconInstagram, HTMLStencilElement {
    }
    var HTMLDxIconInstagramElement: {
        prototype: HTMLDxIconInstagramElement;
        new (): HTMLDxIconInstagramElement;
    };
    interface HTMLDxIconInvestmentdialogfilledElement extends Components.DxIconInvestmentdialogfilled, HTMLStencilElement {
    }
    var HTMLDxIconInvestmentdialogfilledElement: {
        prototype: HTMLDxIconInvestmentdialogfilledElement;
        new (): HTMLDxIconInvestmentdialogfilledElement;
    };
    interface HTMLDxIconInvestmentdialogoutlinedElement extends Components.DxIconInvestmentdialogoutlined, HTMLStencilElement {
    }
    var HTMLDxIconInvestmentdialogoutlinedElement: {
        prototype: HTMLDxIconInvestmentdialogoutlinedElement;
        new (): HTMLDxIconInvestmentdialogoutlinedElement;
    };
    interface HTMLDxIconItweltfilledElement extends Components.DxIconItweltfilled, HTMLStencilElement {
    }
    var HTMLDxIconItweltfilledElement: {
        prototype: HTMLDxIconItweltfilledElement;
        new (): HTMLDxIconItweltfilledElement;
    };
    interface HTMLDxIconItweltoutlinedElement extends Components.DxIconItweltoutlined, HTMLStencilElement {
    }
    var HTMLDxIconItweltoutlinedElement: {
        prototype: HTMLDxIconItweltoutlinedElement;
        new (): HTMLDxIconItweltoutlinedElement;
    };
    interface HTMLDxIconKalenderElement extends Components.DxIconKalender, HTMLStencilElement {
    }
    var HTMLDxIconKalenderElement: {
        prototype: HTMLDxIconKalenderElement;
        new (): HTMLDxIconKalenderElement;
    };
    interface HTMLDxIconKarriereplanungfilledElement extends Components.DxIconKarriereplanungfilled, HTMLStencilElement {
    }
    var HTMLDxIconKarriereplanungfilledElement: {
        prototype: HTMLDxIconKarriereplanungfilledElement;
        new (): HTMLDxIconKarriereplanungfilledElement;
    };
    interface HTMLDxIconKarriereplanungoutlinedElement extends Components.DxIconKarriereplanungoutlined, HTMLStencilElement {
    }
    var HTMLDxIconKarriereplanungoutlinedElement: {
        prototype: HTMLDxIconKarriereplanungoutlinedElement;
        new (): HTMLDxIconKarriereplanungoutlinedElement;
    };
    interface HTMLDxIconKarriereseitefilledElement extends Components.DxIconKarriereseitefilled, HTMLStencilElement {
    }
    var HTMLDxIconKarriereseitefilledElement: {
        prototype: HTMLDxIconKarriereseitefilledElement;
        new (): HTMLDxIconKarriereseitefilledElement;
    };
    interface HTMLDxIconKarriereseiteoutlinedElement extends Components.DxIconKarriereseiteoutlined, HTMLStencilElement {
    }
    var HTMLDxIconKarriereseiteoutlinedElement: {
        prototype: HTMLDxIconKarriereseiteoutlinedElement;
        new (): HTMLDxIconKarriereseiteoutlinedElement;
    };
    interface HTMLDxIconKfztarif02filledElement extends Components.DxIconKfztarif02filled, HTMLStencilElement {
    }
    var HTMLDxIconKfztarif02filledElement: {
        prototype: HTMLDxIconKfztarif02filledElement;
        new (): HTMLDxIconKfztarif02filledElement;
    };
    interface HTMLDxIconKfztarif02outlinedElement extends Components.DxIconKfztarif02outlined, HTMLStencilElement {
    }
    var HTMLDxIconKfztarif02outlinedElement: {
        prototype: HTMLDxIconKfztarif02outlinedElement;
        new (): HTMLDxIconKfztarif02outlinedElement;
    };
    interface HTMLDxIconKlemmbrettElement extends Components.DxIconKlemmbrett, HTMLStencilElement {
    }
    var HTMLDxIconKlemmbrettElement: {
        prototype: HTMLDxIconKlemmbrettElement;
        new (): HTMLDxIconKlemmbrettElement;
    };
    interface HTMLDxIconKofferElement extends Components.DxIconKoffer, HTMLStencilElement {
    }
    var HTMLDxIconKofferElement: {
        prototype: HTMLDxIconKofferElement;
        new (): HTMLDxIconKofferElement;
    };
    interface HTMLDxIconKompassElement extends Components.DxIconKompass, HTMLStencilElement {
    }
    var HTMLDxIconKompassElement: {
        prototype: HTMLDxIconKompassElement;
        new (): HTMLDxIconKompassElement;
    };
    interface HTMLDxIconKontosaldoboldElement extends Components.DxIconKontosaldobold, HTMLStencilElement {
    }
    var HTMLDxIconKontosaldoboldElement: {
        prototype: HTMLDxIconKontosaldoboldElement;
        new (): HTMLDxIconKontosaldoboldElement;
    };
    interface HTMLDxIconKontosaldothinElement extends Components.DxIconKontosaldothin, HTMLStencilElement {
    }
    var HTMLDxIconKontosaldothinElement: {
        prototype: HTMLDxIconKontosaldothinElement;
        new (): HTMLDxIconKontosaldothinElement;
    };
    interface HTMLDxIconLaptopElement extends Components.DxIconLaptop, HTMLStencilElement {
    }
    var HTMLDxIconLaptopElement: {
        prototype: HTMLDxIconLaptopElement;
        new (): HTMLDxIconLaptopElement;
    };
    interface HTMLDxIconLesezeichenfillElement extends Components.DxIconLesezeichenfill, HTMLStencilElement {
    }
    var HTMLDxIconLesezeichenfillElement: {
        prototype: HTMLDxIconLesezeichenfillElement;
        new (): HTMLDxIconLesezeichenfillElement;
    };
    interface HTMLDxIconLesezeichenoutlineElement extends Components.DxIconLesezeichenoutline, HTMLStencilElement {
    }
    var HTMLDxIconLesezeichenoutlineElement: {
        prototype: HTMLDxIconLesezeichenoutlineElement;
        new (): HTMLDxIconLesezeichenoutlineElement;
    };
    interface HTMLDxIconLinkedinElement extends Components.DxIconLinkedin, HTMLStencilElement {
    }
    var HTMLDxIconLinkedinElement: {
        prototype: HTMLDxIconLinkedinElement;
        new (): HTMLDxIconLinkedinElement;
    };
    interface HTMLDxIconLinkexternElement extends Components.DxIconLinkextern, HTMLStencilElement {
    }
    var HTMLDxIconLinkexternElement: {
        prototype: HTMLDxIconLinkexternElement;
        new (): HTMLDxIconLinkexternElement;
    };
    interface HTMLDxIconLinksoderrechtsElement extends Components.DxIconLinksoderrechts, HTMLStencilElement {
    }
    var HTMLDxIconLinksoderrechtsElement: {
        prototype: HTMLDxIconLinksoderrechtsElement;
        new (): HTMLDxIconLinksoderrechtsElement;
    };
    interface HTMLDxIconLogoElement extends Components.DxIconLogo, HTMLStencilElement {
    }
    var HTMLDxIconLogoElement: {
        prototype: HTMLDxIconLogoElement;
        new (): HTMLDxIconLogoElement;
    };
    interface HTMLDxIconLupeElement extends Components.DxIconLupe, HTMLStencilElement {
    }
    var HTMLDxIconLupeElement: {
        prototype: HTMLDxIconLupeElement;
        new (): HTMLDxIconLupeElement;
    };
    interface HTMLDxIconLupeminusElement extends Components.DxIconLupeminus, HTMLStencilElement {
    }
    var HTMLDxIconLupeminusElement: {
        prototype: HTMLDxIconLupeminusElement;
        new (): HTMLDxIconLupeminusElement;
    };
    interface HTMLDxIconLupeplusElement extends Components.DxIconLupeplus, HTMLStencilElement {
    }
    var HTMLDxIconLupeplusElement: {
        prototype: HTMLDxIconLupeplusElement;
        new (): HTMLDxIconLupeplusElement;
    };
    interface HTMLDxIconMailElement extends Components.DxIconMail, HTMLStencilElement {
    }
    var HTMLDxIconMailElement: {
        prototype: HTMLDxIconMailElement;
        new (): HTMLDxIconMailElement;
    };
    interface HTMLDxIconMausElement extends Components.DxIconMaus, HTMLStencilElement {
    }
    var HTMLDxIconMausElement: {
        prototype: HTMLDxIconMausElement;
        new (): HTMLDxIconMausElement;
    };
    interface HTMLDxIconMeineantraegefilledElement extends Components.DxIconMeineantraegefilled, HTMLStencilElement {
    }
    var HTMLDxIconMeineantraegefilledElement: {
        prototype: HTMLDxIconMeineantraegefilledElement;
        new (): HTMLDxIconMeineantraegefilledElement;
    };
    interface HTMLDxIconMeineantraegeoutlinedElement extends Components.DxIconMeineantraegeoutlined, HTMLStencilElement {
    }
    var HTMLDxIconMeineantraegeoutlinedElement: {
        prototype: HTMLDxIconMeineantraegeoutlinedElement;
        new (): HTMLDxIconMeineantraegeoutlinedElement;
    };
    interface HTMLDxIconMeinedvagfilledElement extends Components.DxIconMeinedvagfilled, HTMLStencilElement {
    }
    var HTMLDxIconMeinedvagfilledElement: {
        prototype: HTMLDxIconMeinedvagfilledElement;
        new (): HTMLDxIconMeinedvagfilledElement;
    };
    interface HTMLDxIconMeinedvagoutlinedElement extends Components.DxIconMeinedvagoutlined, HTMLStencilElement {
    }
    var HTMLDxIconMeinedvagoutlinedElement: {
        prototype: HTMLDxIconMeinedvagoutlinedElement;
        new (): HTMLDxIconMeinedvagoutlinedElement;
    };
    interface HTMLDxIconMeinekundenfilledElement extends Components.DxIconMeinekundenfilled, HTMLStencilElement {
    }
    var HTMLDxIconMeinekundenfilledElement: {
        prototype: HTMLDxIconMeinekundenfilledElement;
        new (): HTMLDxIconMeinekundenfilledElement;
    };
    interface HTMLDxIconMeinekundenoutlinedElement extends Components.DxIconMeinekundenoutlined, HTMLStencilElement {
    }
    var HTMLDxIconMeinekundenoutlinedElement: {
        prototype: HTMLDxIconMeinekundenoutlinedElement;
        new (): HTMLDxIconMeinekundenoutlinedElement;
    };
    interface HTMLDxIconMeinenachrichten01filledElement extends Components.DxIconMeinenachrichten01filled, HTMLStencilElement {
    }
    var HTMLDxIconMeinenachrichten01filledElement: {
        prototype: HTMLDxIconMeinenachrichten01filledElement;
        new (): HTMLDxIconMeinenachrichten01filledElement;
    };
    interface HTMLDxIconMeinenachrichteniconoutlinedElement extends Components.DxIconMeinenachrichteniconoutlined, HTMLStencilElement {
    }
    var HTMLDxIconMeinenachrichteniconoutlinedElement: {
        prototype: HTMLDxIconMeinenachrichteniconoutlinedElement;
        new (): HTMLDxIconMeinenachrichteniconoutlinedElement;
    };
    interface HTMLDxIconMenschElement extends Components.DxIconMensch, HTMLStencilElement {
    }
    var HTMLDxIconMenschElement: {
        prototype: HTMLDxIconMenschElement;
        new (): HTMLDxIconMenschElement;
    };
    interface HTMLDxIconMikrofonElement extends Components.DxIconMikrofon, HTMLStencilElement {
    }
    var HTMLDxIconMikrofonElement: {
        prototype: HTMLDxIconMikrofonElement;
        new (): HTMLDxIconMikrofonElement;
    };
    interface HTMLDxIconMinuskreisElement extends Components.DxIconMinuskreis, HTMLStencilElement {
    }
    var HTMLDxIconMinuskreisElement: {
        prototype: HTMLDxIconMinuskreisElement;
        new (): HTMLDxIconMinuskreisElement;
    };
    interface HTMLDxIconMonitorElement extends Components.DxIconMonitor, HTMLStencilElement {
    }
    var HTMLDxIconMonitorElement: {
        prototype: HTMLDxIconMonitorElement;
        new (): HTMLDxIconMonitorElement;
    };
    interface HTMLDxIconMoveElement extends Components.DxIconMove, HTMLStencilElement {
    }
    var HTMLDxIconMoveElement: {
        prototype: HTMLDxIconMoveElement;
        new (): HTMLDxIconMoveElement;
    };
    interface HTMLDxIconMovethinElement extends Components.DxIconMovethin, HTMLStencilElement {
    }
    var HTMLDxIconMovethinElement: {
        prototype: HTMLDxIconMovethinElement;
        new (): HTMLDxIconMovethinElement;
    };
    interface HTMLDxIconMovieElement extends Components.DxIconMovie, HTMLStencilElement {
    }
    var HTMLDxIconMovieElement: {
        prototype: HTMLDxIconMovieElement;
        new (): HTMLDxIconMovieElement;
    };
    interface HTMLDxIconMuellElement extends Components.DxIconMuell, HTMLStencilElement {
    }
    var HTMLDxIconMuellElement: {
        prototype: HTMLDxIconMuellElement;
        new (): HTMLDxIconMuellElement;
    };
    interface HTMLDxIconMyimmoplanetfilledElement extends Components.DxIconMyimmoplanetfilled, HTMLStencilElement {
    }
    var HTMLDxIconMyimmoplanetfilledElement: {
        prototype: HTMLDxIconMyimmoplanetfilledElement;
        new (): HTMLDxIconMyimmoplanetfilledElement;
    };
    interface HTMLDxIconMyimmoplanetoutlinedElement extends Components.DxIconMyimmoplanetoutlined, HTMLStencilElement {
    }
    var HTMLDxIconMyimmoplanetoutlinedElement: {
        prototype: HTMLDxIconMyimmoplanetoutlinedElement;
        new (): HTMLDxIconMyimmoplanetoutlinedElement;
    };
    interface HTMLDxIconNotstartedElement extends Components.DxIconNotstarted, HTMLStencilElement {
    }
    var HTMLDxIconNotstartedElement: {
        prototype: HTMLDxIconNotstartedElement;
        new (): HTMLDxIconNotstartedElement;
    };
    interface HTMLDxIconOrdnerElement extends Components.DxIconOrdner, HTMLStencilElement {
    }
    var HTMLDxIconOrdnerElement: {
        prototype: HTMLDxIconOrdnerElement;
        new (): HTMLDxIconOrdnerElement;
    };
    interface HTMLDxIconOrtElement extends Components.DxIconOrt, HTMLStencilElement {
    }
    var HTMLDxIconOrtElement: {
        prototype: HTMLDxIconOrtElement;
        new (): HTMLDxIconOrtElement;
    };
    interface HTMLDxIconOrtfillElement extends Components.DxIconOrtfill, HTMLStencilElement {
    }
    var HTMLDxIconOrtfillElement: {
        prototype: HTMLDxIconOrtfillElement;
        new (): HTMLDxIconOrtfillElement;
    };
    interface HTMLDxIconPassfilledElement extends Components.DxIconPassfilled, HTMLStencilElement {
    }
    var HTMLDxIconPassfilledElement: {
        prototype: HTMLDxIconPassfilledElement;
        new (): HTMLDxIconPassfilledElement;
    };
    interface HTMLDxIconPassoutlinedElement extends Components.DxIconPassoutlined, HTMLStencilElement {
    }
    var HTMLDxIconPassoutlinedElement: {
        prototype: HTMLDxIconPassoutlinedElement;
        new (): HTMLDxIconPassoutlinedElement;
    };
    interface HTMLDxIconPauseElement extends Components.DxIconPause, HTMLStencilElement {
    }
    var HTMLDxIconPauseElement: {
        prototype: HTMLDxIconPauseElement;
        new (): HTMLDxIconPauseElement;
    };
    interface HTMLDxIconPausekreisfillElement extends Components.DxIconPausekreisfill, HTMLStencilElement {
    }
    var HTMLDxIconPausekreisfillElement: {
        prototype: HTMLDxIconPausekreisfillElement;
        new (): HTMLDxIconPausekreisfillElement;
    };
    interface HTMLDxIconPausekreisoutlineElement extends Components.DxIconPausekreisoutline, HTMLStencilElement {
    }
    var HTMLDxIconPausekreisoutlineElement: {
        prototype: HTMLDxIconPausekreisoutlineElement;
        new (): HTMLDxIconPausekreisoutlineElement;
    };
    interface HTMLDxIconPfeilhochElement extends Components.DxIconPfeilhoch, HTMLStencilElement {
    }
    var HTMLDxIconPfeilhochElement: {
        prototype: HTMLDxIconPfeilhochElement;
        new (): HTMLDxIconPfeilhochElement;
    };
    interface HTMLDxIconPfeillinksElement extends Components.DxIconPfeillinks, HTMLStencilElement {
    }
    var HTMLDxIconPfeillinksElement: {
        prototype: HTMLDxIconPfeillinksElement;
        new (): HTMLDxIconPfeillinksElement;
    };
    interface HTMLDxIconPfeilrechtsElement extends Components.DxIconPfeilrechts, HTMLStencilElement {
    }
    var HTMLDxIconPfeilrechtsElement: {
        prototype: HTMLDxIconPfeilrechtsElement;
        new (): HTMLDxIconPfeilrechtsElement;
    };
    interface HTMLDxIconPfeilrunterElement extends Components.DxIconPfeilrunter, HTMLStencilElement {
    }
    var HTMLDxIconPfeilrunterElement: {
        prototype: HTMLDxIconPfeilrunterElement;
        new (): HTMLDxIconPfeilrunterElement;
    };
    interface HTMLDxIconPhonelinkElement extends Components.DxIconPhonelink, HTMLStencilElement {
    }
    var HTMLDxIconPhonelinkElement: {
        prototype: HTMLDxIconPhonelinkElement;
        new (): HTMLDxIconPhonelinkElement;
    };
    interface HTMLDxIconPhotovoltaikboldElement extends Components.DxIconPhotovoltaikbold, HTMLStencilElement {
    }
    var HTMLDxIconPhotovoltaikboldElement: {
        prototype: HTMLDxIconPhotovoltaikboldElement;
        new (): HTMLDxIconPhotovoltaikboldElement;
    };
    interface HTMLDxIconPhotovoltaikthinElement extends Components.DxIconPhotovoltaikthin, HTMLStencilElement {
    }
    var HTMLDxIconPhotovoltaikthinElement: {
        prototype: HTMLDxIconPhotovoltaikthinElement;
        new (): HTMLDxIconPhotovoltaikthinElement;
    };
    interface HTMLDxIconPlaceholderElement extends Components.DxIconPlaceholder, HTMLStencilElement {
    }
    var HTMLDxIconPlaceholderElement: {
        prototype: HTMLDxIconPlaceholderElement;
        new (): HTMLDxIconPlaceholderElement;
    };
    interface HTMLDxIconPlayElement extends Components.DxIconPlay, HTMLStencilElement {
    }
    var HTMLDxIconPlayElement: {
        prototype: HTMLDxIconPlayElement;
        new (): HTMLDxIconPlayElement;
    };
    interface HTMLDxIconPlaykreisElement extends Components.DxIconPlaykreis, HTMLStencilElement {
    }
    var HTMLDxIconPlaykreisElement: {
        prototype: HTMLDxIconPlaykreisElement;
        new (): HTMLDxIconPlaykreisElement;
    };
    interface HTMLDxIconPlaykreisfillElement extends Components.DxIconPlaykreisfill, HTMLStencilElement {
    }
    var HTMLDxIconPlaykreisfillElement: {
        prototype: HTMLDxIconPlaykreisfillElement;
        new (): HTMLDxIconPlaykreisfillElement;
    };
    interface HTMLDxIconPlaykreisoutlineElement extends Components.DxIconPlaykreisoutline, HTMLStencilElement {
    }
    var HTMLDxIconPlaykreisoutlineElement: {
        prototype: HTMLDxIconPlaykreisoutlineElement;
        new (): HTMLDxIconPlaykreisoutlineElement;
    };
    interface HTMLDxIconPluskreisElement extends Components.DxIconPluskreis, HTMLStencilElement {
    }
    var HTMLDxIconPluskreisElement: {
        prototype: HTMLDxIconPluskreisElement;
        new (): HTMLDxIconPluskreisElement;
    };
    interface HTMLDxIconPrivathaftpflichtboldElement extends Components.DxIconPrivathaftpflichtbold, HTMLStencilElement {
    }
    var HTMLDxIconPrivathaftpflichtboldElement: {
        prototype: HTMLDxIconPrivathaftpflichtboldElement;
        new (): HTMLDxIconPrivathaftpflichtboldElement;
    };
    interface HTMLDxIconPrivathaftpflichtthinElement extends Components.DxIconPrivathaftpflichtthin, HTMLStencilElement {
    }
    var HTMLDxIconPrivathaftpflichtthinElement: {
        prototype: HTMLDxIconPrivathaftpflichtthinElement;
        new (): HTMLDxIconPrivathaftpflichtthinElement;
    };
    interface HTMLDxIconPrivatkreditboldElement extends Components.DxIconPrivatkreditbold, HTMLStencilElement {
    }
    var HTMLDxIconPrivatkreditboldElement: {
        prototype: HTMLDxIconPrivatkreditboldElement;
        new (): HTMLDxIconPrivatkreditboldElement;
    };
    interface HTMLDxIconPrivatkreditthinElement extends Components.DxIconPrivatkreditthin, HTMLStencilElement {
    }
    var HTMLDxIconPrivatkreditthinElement: {
        prototype: HTMLDxIconPrivatkreditthinElement;
        new (): HTMLDxIconPrivatkreditthinElement;
    };
    interface HTMLDxIconProjezierenElement extends Components.DxIconProjezieren, HTMLStencilElement {
    }
    var HTMLDxIconProjezierenElement: {
        prototype: HTMLDxIconProjezierenElement;
        new (): HTMLDxIconProjezierenElement;
    };
    interface HTMLDxIconRechtsschutzboldElement extends Components.DxIconRechtsschutzbold, HTMLStencilElement {
    }
    var HTMLDxIconRechtsschutzboldElement: {
        prototype: HTMLDxIconRechtsschutzboldElement;
        new (): HTMLDxIconRechtsschutzboldElement;
    };
    interface HTMLDxIconRechtsschutzthinElement extends Components.DxIconRechtsschutzthin, HTMLStencilElement {
    }
    var HTMLDxIconRechtsschutzthinElement: {
        prototype: HTMLDxIconRechtsschutzthinElement;
        new (): HTMLDxIconRechtsschutzthinElement;
    };
    interface HTMLDxIconReisenboldElement extends Components.DxIconReisenbold, HTMLStencilElement {
    }
    var HTMLDxIconReisenboldElement: {
        prototype: HTMLDxIconReisenboldElement;
        new (): HTMLDxIconReisenboldElement;
    };
    interface HTMLDxIconReisenthinElement extends Components.DxIconReisenthin, HTMLStencilElement {
    }
    var HTMLDxIconReisenthinElement: {
        prototype: HTMLDxIconReisenthinElement;
        new (): HTMLDxIconReisenthinElement;
    };
    interface HTMLDxIconReloadElement extends Components.DxIconReload, HTMLStencilElement {
    }
    var HTMLDxIconReloadElement: {
        prototype: HTMLDxIconReloadElement;
        new (): HTMLDxIconReloadElement;
    };
    interface HTMLDxIconRepeatElement extends Components.DxIconRepeat, HTMLStencilElement {
    }
    var HTMLDxIconRepeatElement: {
        prototype: HTMLDxIconRepeatElement;
        new (): HTMLDxIconRepeatElement;
    };
    interface HTMLDxIconRepeat1Element extends Components.DxIconRepeat1, HTMLStencilElement {
    }
    var HTMLDxIconRepeat1Element: {
        prototype: HTMLDxIconRepeat1Element;
        new (): HTMLDxIconRepeat1Element;
    };
    interface HTMLDxIconRepeatfillElement extends Components.DxIconRepeatfill, HTMLStencilElement {
    }
    var HTMLDxIconRepeatfillElement: {
        prototype: HTMLDxIconRepeatfillElement;
        new (): HTMLDxIconRepeatfillElement;
    };
    interface HTMLDxIconReplayElement extends Components.DxIconReplay, HTMLStencilElement {
    }
    var HTMLDxIconReplayElement: {
        prototype: HTMLDxIconReplayElement;
        new (): HTMLDxIconReplayElement;
    };
    interface HTMLDxIconReplay10Element extends Components.DxIconReplay10, HTMLStencilElement {
    }
    var HTMLDxIconReplay10Element: {
        prototype: HTMLDxIconReplay10Element;
        new (): HTMLDxIconReplay10Element;
    };
    interface HTMLDxIconReplay30Element extends Components.DxIconReplay30, HTMLStencilElement {
    }
    var HTMLDxIconReplay30Element: {
        prototype: HTMLDxIconReplay30Element;
        new (): HTMLDxIconReplay30Element;
    };
    interface HTMLDxIconReplaykreisfillElement extends Components.DxIconReplaykreisfill, HTMLStencilElement {
    }
    var HTMLDxIconReplaykreisfillElement: {
        prototype: HTMLDxIconReplaykreisfillElement;
        new (): HTMLDxIconReplaykreisfillElement;
    };
    interface HTMLDxIconRequiredboldElement extends Components.DxIconRequiredbold, HTMLStencilElement {
    }
    var HTMLDxIconRequiredboldElement: {
        prototype: HTMLDxIconRequiredboldElement;
        new (): HTMLDxIconRequiredboldElement;
    };
    interface HTMLDxIconRequiredthinElement extends Components.DxIconRequiredthin, HTMLStencilElement {
    }
    var HTMLDxIconRequiredthinElement: {
        prototype: HTMLDxIconRequiredthinElement;
        new (): HTMLDxIconRequiredthinElement;
    };
    interface HTMLDxIconRewindElement extends Components.DxIconRewind, HTMLStencilElement {
    }
    var HTMLDxIconRewindElement: {
        prototype: HTMLDxIconRewindElement;
        new (): HTMLDxIconRewindElement;
    };
    interface HTMLDxIconRewind10Element extends Components.DxIconRewind10, HTMLStencilElement {
    }
    var HTMLDxIconRewind10Element: {
        prototype: HTMLDxIconRewind10Element;
        new (): HTMLDxIconRewind10Element;
    };
    interface HTMLDxIconSchliessenElement extends Components.DxIconSchliessen, HTMLStencilElement {
    }
    var HTMLDxIconSchliessenElement: {
        prototype: HTMLDxIconSchliessenElement;
        new (): HTMLDxIconSchliessenElement;
    };
    interface HTMLDxIconSchlossaufElement extends Components.DxIconSchlossauf, HTMLStencilElement {
    }
    var HTMLDxIconSchlossaufElement: {
        prototype: HTMLDxIconSchlossaufElement;
        new (): HTMLDxIconSchlossaufElement;
    };
    interface HTMLDxIconSchlossoffenthinoutlinedElement extends Components.DxIconSchlossoffenthinoutlined, HTMLStencilElement {
    }
    var HTMLDxIconSchlossoffenthinoutlinedElement: {
        prototype: HTMLDxIconSchlossoffenthinoutlinedElement;
        new (): HTMLDxIconSchlossoffenthinoutlinedElement;
    };
    interface HTMLDxIconSchlosszuElement extends Components.DxIconSchlosszu, HTMLStencilElement {
    }
    var HTMLDxIconSchlosszuElement: {
        prototype: HTMLDxIconSchlosszuElement;
        new (): HTMLDxIconSchlosszuElement;
    };
    interface HTMLDxIconSchlosszuthinoutlinedElement extends Components.DxIconSchlosszuthinoutlined, HTMLStencilElement {
    }
    var HTMLDxIconSchlosszuthinoutlinedElement: {
        prototype: HTMLDxIconSchlosszuthinoutlinedElement;
        new (): HTMLDxIconSchlosszuthinoutlinedElement;
    };
    interface HTMLDxIconSchulungsreisenfilledElement extends Components.DxIconSchulungsreisenfilled, HTMLStencilElement {
    }
    var HTMLDxIconSchulungsreisenfilledElement: {
        prototype: HTMLDxIconSchulungsreisenfilledElement;
        new (): HTMLDxIconSchulungsreisenfilledElement;
    };
    interface HTMLDxIconSchulungsreisenoutlinedElement extends Components.DxIconSchulungsreisenoutlined, HTMLStencilElement {
    }
    var HTMLDxIconSchulungsreisenoutlinedElement: {
        prototype: HTMLDxIconSchulungsreisenoutlinedElement;
        new (): HTMLDxIconSchulungsreisenoutlinedElement;
    };
    interface HTMLDxIconSchutzengelboldElement extends Components.DxIconSchutzengelbold, HTMLStencilElement {
    }
    var HTMLDxIconSchutzengelboldElement: {
        prototype: HTMLDxIconSchutzengelboldElement;
        new (): HTMLDxIconSchutzengelboldElement;
    };
    interface HTMLDxIconSchutzengelthinElement extends Components.DxIconSchutzengelthin, HTMLStencilElement {
    }
    var HTMLDxIconSchutzengelthinElement: {
        prototype: HTMLDxIconSchutzengelthinElement;
        new (): HTMLDxIconSchutzengelthinElement;
    };
    interface HTMLDxIconSchutzschildElement extends Components.DxIconSchutzschild, HTMLStencilElement {
    }
    var HTMLDxIconSchutzschildElement: {
        prototype: HTMLDxIconSchutzschildElement;
        new (): HTMLDxIconSchutzschildElement;
    };
    interface HTMLDxIconSeitenanfangElement extends Components.DxIconSeitenanfang, HTMLStencilElement {
    }
    var HTMLDxIconSeitenanfangElement: {
        prototype: HTMLDxIconSeitenanfangElement;
        new (): HTMLDxIconSeitenanfangElement;
    };
    interface HTMLDxIconSendenElement extends Components.DxIconSenden, HTMLStencilElement {
    }
    var HTMLDxIconSendenElement: {
        prototype: HTMLDxIconSendenElement;
        new (): HTMLDxIconSendenElement;
    };
    interface HTMLDxIconSendenerrorElement extends Components.DxIconSendenerror, HTMLStencilElement {
    }
    var HTMLDxIconSendenerrorElement: {
        prototype: HTMLDxIconSendenerrorElement;
        new (): HTMLDxIconSendenerrorElement;
    };
    interface HTMLDxIconShuffleElement extends Components.DxIconShuffle, HTMLStencilElement {
    }
    var HTMLDxIconShuffleElement: {
        prototype: HTMLDxIconShuffleElement;
        new (): HTMLDxIconShuffleElement;
    };
    interface HTMLDxIconShufflefillElement extends Components.DxIconShufflefill, HTMLStencilElement {
    }
    var HTMLDxIconShufflefillElement: {
        prototype: HTMLDxIconShufflefillElement;
        new (): HTMLDxIconShufflefillElement;
    };
    interface HTMLDxIconSidebaraufElement extends Components.DxIconSidebarauf, HTMLStencilElement {
    }
    var HTMLDxIconSidebaraufElement: {
        prototype: HTMLDxIconSidebaraufElement;
        new (): HTMLDxIconSidebaraufElement;
    };
    interface HTMLDxIconSidebarerrorElement extends Components.DxIconSidebarerror, HTMLStencilElement {
    }
    var HTMLDxIconSidebarerrorElement: {
        prototype: HTMLDxIconSidebarerrorElement;
        new (): HTMLDxIconSidebarerrorElement;
    };
    interface HTMLDxIconSidebarzuElement extends Components.DxIconSidebarzu, HTMLStencilElement {
    }
    var HTMLDxIconSidebarzuElement: {
        prototype: HTMLDxIconSidebarzuElement;
        new (): HTMLDxIconSidebarzuElement;
    };
    interface HTMLDxIconSkiptonextElement extends Components.DxIconSkiptonext, HTMLStencilElement {
    }
    var HTMLDxIconSkiptonextElement: {
        prototype: HTMLDxIconSkiptonextElement;
        new (): HTMLDxIconSkiptonextElement;
    };
    interface HTMLDxIconSkiptopreviousElement extends Components.DxIconSkiptoprevious, HTMLStencilElement {
    }
    var HTMLDxIconSkiptopreviousElement: {
        prototype: HTMLDxIconSkiptopreviousElement;
        new (): HTMLDxIconSkiptopreviousElement;
    };
    interface HTMLDxIconSkypeElement extends Components.DxIconSkype, HTMLStencilElement {
    }
    var HTMLDxIconSkypeElement: {
        prototype: HTMLDxIconSkypeElement;
        new (): HTMLDxIconSkypeElement;
    };
    interface HTMLDxIconSlideshowElement extends Components.DxIconSlideshow, HTMLStencilElement {
    }
    var HTMLDxIconSlideshowElement: {
        prototype: HTMLDxIconSlideshowElement;
        new (): HTMLDxIconSlideshowElement;
    };
    interface HTMLDxIconSparenboldElement extends Components.DxIconSparenbold, HTMLStencilElement {
    }
    var HTMLDxIconSparenboldElement: {
        prototype: HTMLDxIconSparenboldElement;
        new (): HTMLDxIconSparenboldElement;
    };
    interface HTMLDxIconSparenthinElement extends Components.DxIconSparenthin, HTMLStencilElement {
    }
    var HTMLDxIconSparenthinElement: {
        prototype: HTMLDxIconSparenthinElement;
        new (): HTMLDxIconSparenthinElement;
    };
    interface HTMLDxIconSparkontenboldElement extends Components.DxIconSparkontenbold, HTMLStencilElement {
    }
    var HTMLDxIconSparkontenboldElement: {
        prototype: HTMLDxIconSparkontenboldElement;
        new (): HTMLDxIconSparkontenboldElement;
    };
    interface HTMLDxIconSparkontenthinElement extends Components.DxIconSparkontenthin, HTMLStencilElement {
    }
    var HTMLDxIconSparkontenthinElement: {
        prototype: HTMLDxIconSparkontenthinElement;
        new (): HTMLDxIconSparkontenthinElement;
    };
    interface HTMLDxIconSpatenElement extends Components.DxIconSpaten, HTMLStencilElement {
    }
    var HTMLDxIconSpatenElement: {
        prototype: HTMLDxIconSpatenElement;
        new (): HTMLDxIconSpatenElement;
    };
    interface HTMLDxIconSpeakersfillElement extends Components.DxIconSpeakersfill, HTMLStencilElement {
    }
    var HTMLDxIconSpeakersfillElement: {
        prototype: HTMLDxIconSpeakersfillElement;
        new (): HTMLDxIconSpeakersfillElement;
    };
    interface HTMLDxIconSpeakersoutlineElement extends Components.DxIconSpeakersoutline, HTMLStencilElement {
    }
    var HTMLDxIconSpeakersoutlineElement: {
        prototype: HTMLDxIconSpeakersoutlineElement;
        new (): HTMLDxIconSpeakersoutlineElement;
    };
    interface HTMLDxIconSprechblaseElement extends Components.DxIconSprechblase, HTMLStencilElement {
    }
    var HTMLDxIconSprechblaseElement: {
        prototype: HTMLDxIconSprechblaseElement;
        new (): HTMLDxIconSprechblaseElement;
    };
    interface HTMLDxIconSprechblasenElement extends Components.DxIconSprechblasen, HTMLStencilElement {
    }
    var HTMLDxIconSprechblasenElement: {
        prototype: HTMLDxIconSprechblasenElement;
        new (): HTMLDxIconSprechblasenElement;
    };
    interface HTMLDxIconStartupappfilledElement extends Components.DxIconStartupappfilled, HTMLStencilElement {
    }
    var HTMLDxIconStartupappfilledElement: {
        prototype: HTMLDxIconStartupappfilledElement;
        new (): HTMLDxIconStartupappfilledElement;
    };
    interface HTMLDxIconStartupappoutlinedElement extends Components.DxIconStartupappoutlined, HTMLStencilElement {
    }
    var HTMLDxIconStartupappoutlinedElement: {
        prototype: HTMLDxIconStartupappoutlinedElement;
        new (): HTMLDxIconStartupappoutlinedElement;
    };
    interface HTMLDxIconStateerrorElement extends Components.DxIconStateerror, HTMLStencilElement {
    }
    var HTMLDxIconStateerrorElement: {
        prototype: HTMLDxIconStateerrorElement;
        new (): HTMLDxIconStateerrorElement;
    };
    interface HTMLDxIconStaterequiredElement extends Components.DxIconStaterequired, HTMLStencilElement {
    }
    var HTMLDxIconStaterequiredElement: {
        prototype: HTMLDxIconStaterequiredElement;
        new (): HTMLDxIconStaterequiredElement;
    };
    interface HTMLDxIconStatesuccessElement extends Components.DxIconStatesuccess, HTMLStencilElement {
    }
    var HTMLDxIconStatesuccessElement: {
        prototype: HTMLDxIconStatesuccessElement;
        new (): HTMLDxIconStatesuccessElement;
    };
    interface HTMLDxIconSternhalbElement extends Components.DxIconSternhalb, HTMLStencilElement {
    }
    var HTMLDxIconSternhalbElement: {
        prototype: HTMLDxIconSternhalbElement;
        new (): HTMLDxIconSternhalbElement;
    };
    interface HTMLDxIconSternleerElement extends Components.DxIconSternleer, HTMLStencilElement {
    }
    var HTMLDxIconSternleerElement: {
        prototype: HTMLDxIconSternleerElement;
        new (): HTMLDxIconSternleerElement;
    };
    interface HTMLDxIconSternvollElement extends Components.DxIconSternvoll, HTMLStencilElement {
    }
    var HTMLDxIconSternvollElement: {
        prototype: HTMLDxIconSternvollElement;
        new (): HTMLDxIconSternvollElement;
    };
    interface HTMLDxIconStopElement extends Components.DxIconStop, HTMLStencilElement {
    }
    var HTMLDxIconStopElement: {
        prototype: HTMLDxIconStopElement;
        new (): HTMLDxIconStopElement;
    };
    interface HTMLDxIconSystemstatusfilledElement extends Components.DxIconSystemstatusfilled, HTMLStencilElement {
    }
    var HTMLDxIconSystemstatusfilledElement: {
        prototype: HTMLDxIconSystemstatusfilledElement;
        new (): HTMLDxIconSystemstatusfilledElement;
    };
    interface HTMLDxIconSystemstatusoutlinedElement extends Components.DxIconSystemstatusoutlined, HTMLStencilElement {
    }
    var HTMLDxIconSystemstatusoutlinedElement: {
        prototype: HTMLDxIconSystemstatusoutlinedElement;
        new (): HTMLDxIconSystemstatusoutlinedElement;
    };
    interface HTMLDxIconTabletElement extends Components.DxIconTablet, HTMLStencilElement {
    }
    var HTMLDxIconTabletElement: {
        prototype: HTMLDxIconTabletElement;
        new (): HTMLDxIconTabletElement;
    };
    interface HTMLDxIconTastaturElement extends Components.DxIconTastatur, HTMLStencilElement {
    }
    var HTMLDxIconTastaturElement: {
        prototype: HTMLDxIconTastaturElement;
        new (): HTMLDxIconTastaturElement;
    };
    interface HTMLDxIconTeilenElement extends Components.DxIconTeilen, HTMLStencilElement {
    }
    var HTMLDxIconTeilenElement: {
        prototype: HTMLDxIconTeilenElement;
        new (): HTMLDxIconTeilenElement;
    };
    interface HTMLDxIconTelefonElement extends Components.DxIconTelefon, HTMLStencilElement {
    }
    var HTMLDxIconTelefonElement: {
        prototype: HTMLDxIconTelefonElement;
        new (): HTMLDxIconTelefonElement;
    };
    interface HTMLDxIconThumbsupfillElement extends Components.DxIconThumbsupfill, HTMLStencilElement {
    }
    var HTMLDxIconThumbsupfillElement: {
        prototype: HTMLDxIconThumbsupfillElement;
        new (): HTMLDxIconThumbsupfillElement;
    };
    interface HTMLDxIconThumbsupoutlineElement extends Components.DxIconThumbsupoutline, HTMLStencilElement {
    }
    var HTMLDxIconThumbsupoutlineElement: {
        prototype: HTMLDxIconThumbsupoutlineElement;
        new (): HTMLDxIconThumbsupoutlineElement;
    };
    interface HTMLDxIconTvElement extends Components.DxIconTv, HTMLStencilElement {
    }
    var HTMLDxIconTvElement: {
        prototype: HTMLDxIconTvElement;
        new (): HTMLDxIconTvElement;
    };
    interface HTMLDxIconTvconnectedElement extends Components.DxIconTvconnected, HTMLStencilElement {
    }
    var HTMLDxIconTvconnectedElement: {
        prototype: HTMLDxIconTvconnectedElement;
        new (): HTMLDxIconTvconnectedElement;
    };
    interface HTMLDxIconTwitterElement extends Components.DxIconTwitter, HTMLStencilElement {
    }
    var HTMLDxIconTwitterElement: {
        prototype: HTMLDxIconTwitterElement;
        new (): HTMLDxIconTwitterElement;
    };
    interface HTMLDxIconUeberlaufmenueElement extends Components.DxIconUeberlaufmenue, HTMLStencilElement {
    }
    var HTMLDxIconUeberlaufmenueElement: {
        prototype: HTMLDxIconUeberlaufmenueElement;
        new (): HTMLDxIconUeberlaufmenueElement;
    };
    interface HTMLDxIconUhrElement extends Components.DxIconUhr, HTMLStencilElement {
    }
    var HTMLDxIconUhrElement: {
        prototype: HTMLDxIconUhrElement;
        new (): HTMLDxIconUhrElement;
    };
    interface HTMLDxIconUnfallboldElement extends Components.DxIconUnfallbold, HTMLStencilElement {
    }
    var HTMLDxIconUnfallboldElement: {
        prototype: HTMLDxIconUnfallboldElement;
        new (): HTMLDxIconUnfallboldElement;
    };
    interface HTMLDxIconUnfallthinElement extends Components.DxIconUnfallthin, HTMLStencilElement {
    }
    var HTMLDxIconUnfallthinElement: {
        prototype: HTMLDxIconUnfallthinElement;
        new (): HTMLDxIconUnfallthinElement;
    };
    interface HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement extends Components.DxIconUnternehmenspraesentationfuerfirmenkundenfilled, HTMLStencilElement {
    }
    var HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement: {
        prototype: HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement;
        new (): HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement;
    };
    interface HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement extends Components.DxIconUnternehmenspraesentationfuerfirmenkundenoutlined, HTMLStencilElement {
    }
    var HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement: {
        prototype: HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement;
        new (): HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement;
    };
    interface HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement extends Components.DxIconUnternehmenspraesentationprivatkundenfilled, HTMLStencilElement {
    }
    var HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement: {
        prototype: HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement;
        new (): HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement;
    };
    interface HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement extends Components.DxIconUnternehmenspraesentationprivatkundenoutlined, HTMLStencilElement {
    }
    var HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement: {
        prototype: HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement;
        new (): HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement;
    };
    interface HTMLDxIconUploadElement extends Components.DxIconUpload, HTMLStencilElement {
    }
    var HTMLDxIconUploadElement: {
        prototype: HTMLDxIconUploadElement;
        new (): HTMLDxIconUploadElement;
    };
    interface HTMLDxIconVbnewsappfilledElement extends Components.DxIconVbnewsappfilled, HTMLStencilElement {
    }
    var HTMLDxIconVbnewsappfilledElement: {
        prototype: HTMLDxIconVbnewsappfilledElement;
        new (): HTMLDxIconVbnewsappfilledElement;
    };
    interface HTMLDxIconVbnewsappoutlinedElement extends Components.DxIconVbnewsappoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVbnewsappoutlinedElement: {
        prototype: HTMLDxIconVbnewsappoutlinedElement;
        new (): HTMLDxIconVbnewsappoutlinedElement;
    };
    interface HTMLDxIconVbpostservicefilledElement extends Components.DxIconVbpostservicefilled, HTMLStencilElement {
    }
    var HTMLDxIconVbpostservicefilledElement: {
        prototype: HTMLDxIconVbpostservicefilledElement;
        new (): HTMLDxIconVbpostservicefilledElement;
    };
    interface HTMLDxIconVbpostserviceoutlinedElement extends Components.DxIconVbpostserviceoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVbpostserviceoutlinedElement: {
        prototype: HTMLDxIconVbpostserviceoutlinedElement;
        new (): HTMLDxIconVbpostserviceoutlinedElement;
    };
    interface HTMLDxIconVbshopfilledElement extends Components.DxIconVbshopfilled, HTMLStencilElement {
    }
    var HTMLDxIconVbshopfilledElement: {
        prototype: HTMLDxIconVbshopfilledElement;
        new (): HTMLDxIconVbshopfilledElement;
    };
    interface HTMLDxIconVbshopoutlinedElement extends Components.DxIconVbshopoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVbshopoutlinedElement: {
        prototype: HTMLDxIconVbshopoutlinedElement;
        new (): HTMLDxIconVbshopoutlinedElement;
    };
    interface HTMLDxIconVbweltfilledElement extends Components.DxIconVbweltfilled, HTMLStencilElement {
    }
    var HTMLDxIconVbweltfilledElement: {
        prototype: HTMLDxIconVbweltfilledElement;
        new (): HTMLDxIconVbweltfilledElement;
    };
    interface HTMLDxIconVbweltoutlinedElement extends Components.DxIconVbweltoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVbweltoutlinedElement: {
        prototype: HTMLDxIconVbweltoutlinedElement;
        new (): HTMLDxIconVbweltoutlinedElement;
    };
    interface HTMLDxIconVeranstaltungsverwaltungfilledElement extends Components.DxIconVeranstaltungsverwaltungfilled, HTMLStencilElement {
    }
    var HTMLDxIconVeranstaltungsverwaltungfilledElement: {
        prototype: HTMLDxIconVeranstaltungsverwaltungfilledElement;
        new (): HTMLDxIconVeranstaltungsverwaltungfilledElement;
    };
    interface HTMLDxIconVeranstaltungsverwaltungoutlinedElement extends Components.DxIconVeranstaltungsverwaltungoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVeranstaltungsverwaltungoutlinedElement: {
        prototype: HTMLDxIconVeranstaltungsverwaltungoutlinedElement;
        new (): HTMLDxIconVeranstaltungsverwaltungoutlinedElement;
    };
    interface HTMLDxIconVerguetungsrechnerfilledElement extends Components.DxIconVerguetungsrechnerfilled, HTMLStencilElement {
    }
    var HTMLDxIconVerguetungsrechnerfilledElement: {
        prototype: HTMLDxIconVerguetungsrechnerfilledElement;
        new (): HTMLDxIconVerguetungsrechnerfilledElement;
    };
    interface HTMLDxIconVerguetungsrechneroutlinedElement extends Components.DxIconVerguetungsrechneroutlined, HTMLStencilElement {
    }
    var HTMLDxIconVerguetungsrechneroutlinedElement: {
        prototype: HTMLDxIconVerguetungsrechneroutlinedElement;
        new (): HTMLDxIconVerguetungsrechneroutlinedElement;
    };
    interface HTMLDxIconVerteilenhorizElement extends Components.DxIconVerteilenhoriz, HTMLStencilElement {
    }
    var HTMLDxIconVerteilenhorizElement: {
        prototype: HTMLDxIconVerteilenhorizElement;
        new (): HTMLDxIconVerteilenhorizElement;
    };
    interface HTMLDxIconVerteilenvertikElement extends Components.DxIconVerteilenvertik, HTMLStencilElement {
    }
    var HTMLDxIconVerteilenvertikElement: {
        prototype: HTMLDxIconVerteilenvertikElement;
        new (): HTMLDxIconVerteilenvertikElement;
    };
    interface HTMLDxIconVideoaddElement extends Components.DxIconVideoadd, HTMLStencilElement {
    }
    var HTMLDxIconVideoaddElement: {
        prototype: HTMLDxIconVideoaddElement;
        new (): HTMLDxIconVideoaddElement;
    };
    interface HTMLDxIconVideoaddcheckElement extends Components.DxIconVideoaddcheck, HTMLStencilElement {
    }
    var HTMLDxIconVideoaddcheckElement: {
        prototype: HTMLDxIconVideoaddcheckElement;
        new (): HTMLDxIconVideoaddcheckElement;
    };
    interface HTMLDxIconVideocallElement extends Components.DxIconVideocall, HTMLStencilElement {
    }
    var HTMLDxIconVideocallElement: {
        prototype: HTMLDxIconVideocallElement;
        new (): HTMLDxIconVideocallElement;
    };
    interface HTMLDxIconVideocallmissedElement extends Components.DxIconVideocallmissed, HTMLStencilElement {
    }
    var HTMLDxIconVideocallmissedElement: {
        prototype: HTMLDxIconVideocallmissedElement;
        new (): HTMLDxIconVideocallmissedElement;
    };
    interface HTMLDxIconVideocameraElement extends Components.DxIconVideocamera, HTMLStencilElement {
    }
    var HTMLDxIconVideocameraElement: {
        prototype: HTMLDxIconVideocameraElement;
        new (): HTMLDxIconVideocameraElement;
    };
    interface HTMLDxIconVideocamoffElement extends Components.DxIconVideocamoff, HTMLStencilElement {
    }
    var HTMLDxIconVideocamoffElement: {
        prototype: HTMLDxIconVideocamoffElement;
        new (): HTMLDxIconVideocamoffElement;
    };
    interface HTMLDxIconVideochatfillElement extends Components.DxIconVideochatfill, HTMLStencilElement {
    }
    var HTMLDxIconVideochatfillElement: {
        prototype: HTMLDxIconVideochatfillElement;
        new (): HTMLDxIconVideochatfillElement;
    };
    interface HTMLDxIconVideochatoutlineElement extends Components.DxIconVideochatoutline, HTMLStencilElement {
    }
    var HTMLDxIconVideochatoutlineElement: {
        prototype: HTMLDxIconVideochatoutlineElement;
        new (): HTMLDxIconVideochatoutlineElement;
    };
    interface HTMLDxIconVideosettingsElement extends Components.DxIconVideosettings, HTMLStencilElement {
    }
    var HTMLDxIconVideosettingsElement: {
        prototype: HTMLDxIconVideosettingsElement;
        new (): HTMLDxIconVideosettingsElement;
    };
    interface HTMLDxIconVideothekElement extends Components.DxIconVideothek, HTMLStencilElement {
    }
    var HTMLDxIconVideothekElement: {
        prototype: HTMLDxIconVideothekElement;
        new (): HTMLDxIconVideothekElement;
    };
    interface HTMLDxIconVollebreiteElement extends Components.DxIconVollebreite, HTMLStencilElement {
    }
    var HTMLDxIconVollebreiteElement: {
        prototype: HTMLDxIconVollebreiteElement;
        new (): HTMLDxIconVollebreiteElement;
    };
    interface HTMLDxIconVorteilsrechnergeneralivitalityfilledElement extends Components.DxIconVorteilsrechnergeneralivitalityfilled, HTMLStencilElement {
    }
    var HTMLDxIconVorteilsrechnergeneralivitalityfilledElement: {
        prototype: HTMLDxIconVorteilsrechnergeneralivitalityfilledElement;
        new (): HTMLDxIconVorteilsrechnergeneralivitalityfilledElement;
    };
    interface HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement extends Components.DxIconVorteilsrechnergeneralivitalityoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement: {
        prototype: HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement;
        new (): HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement;
    };
    interface HTMLDxIconVpdigitalfilledElement extends Components.DxIconVpdigitalfilled, HTMLStencilElement {
    }
    var HTMLDxIconVpdigitalfilledElement: {
        prototype: HTMLDxIconVpdigitalfilledElement;
        new (): HTMLDxIconVpdigitalfilledElement;
    };
    interface HTMLDxIconVpdigitaloutlinedElement extends Components.DxIconVpdigitaloutlined, HTMLStencilElement {
    }
    var HTMLDxIconVpdigitaloutlinedElement: {
        prototype: HTMLDxIconVpdigitaloutlinedElement;
        new (): HTMLDxIconVpdigitaloutlinedElement;
    };
    interface HTMLDxIconVspvertragsmanagementplusfilledElement extends Components.DxIconVspvertragsmanagementplusfilled, HTMLStencilElement {
    }
    var HTMLDxIconVspvertragsmanagementplusfilledElement: {
        prototype: HTMLDxIconVspvertragsmanagementplusfilledElement;
        new (): HTMLDxIconVspvertragsmanagementplusfilledElement;
    };
    interface HTMLDxIconVspvertragsmanagementplusoutlinedElement extends Components.DxIconVspvertragsmanagementplusoutlined, HTMLStencilElement {
    }
    var HTMLDxIconVspvertragsmanagementplusoutlinedElement: {
        prototype: HTMLDxIconVspvertragsmanagementplusoutlinedElement;
        new (): HTMLDxIconVspvertragsmanagementplusoutlinedElement;
    };
    interface HTMLDxIconVuvboldElement extends Components.DxIconVuvbold, HTMLStencilElement {
    }
    var HTMLDxIconVuvboldElement: {
        prototype: HTMLDxIconVuvboldElement;
        new (): HTMLDxIconVuvboldElement;
    };
    interface HTMLDxIconVuvthinElement extends Components.DxIconVuvthin, HTMLStencilElement {
    }
    var HTMLDxIconVuvthinElement: {
        prototype: HTMLDxIconVuvthinElement;
        new (): HTMLDxIconVuvthinElement;
    };
    interface HTMLDxIconWegElement extends Components.DxIconWeg, HTMLStencilElement {
    }
    var HTMLDxIconWegElement: {
        prototype: HTMLDxIconWegElement;
        new (): HTMLDxIconWegElement;
    };
    interface HTMLDxIconWhatsappElement extends Components.DxIconWhatsapp, HTMLStencilElement {
    }
    var HTMLDxIconWhatsappElement: {
        prototype: HTMLDxIconWhatsappElement;
        new (): HTMLDxIconWhatsappElement;
    };
    interface HTMLDxIconWohngebaeudeboldElement extends Components.DxIconWohngebaeudebold, HTMLStencilElement {
    }
    var HTMLDxIconWohngebaeudeboldElement: {
        prototype: HTMLDxIconWohngebaeudeboldElement;
        new (): HTMLDxIconWohngebaeudeboldElement;
    };
    interface HTMLDxIconWohngebaeudethinElement extends Components.DxIconWohngebaeudethin, HTMLStencilElement {
    }
    var HTMLDxIconWohngebaeudethinElement: {
        prototype: HTMLDxIconWohngebaeudethinElement;
        new (): HTMLDxIconWohngebaeudethinElement;
    };
    interface HTMLDxIconXingElement extends Components.DxIconXing, HTMLStencilElement {
    }
    var HTMLDxIconXingElement: {
        prototype: HTMLDxIconXingElement;
        new (): HTMLDxIconXingElement;
    };
    interface HTMLDxIconYoutubeElement extends Components.DxIconYoutube, HTMLStencilElement {
    }
    var HTMLDxIconYoutubeElement: {
        prototype: HTMLDxIconYoutubeElement;
        new (): HTMLDxIconYoutubeElement;
    };
    interface HTMLDxIconZeitrafferElement extends Components.DxIconZeitraffer, HTMLStencilElement {
    }
    var HTMLDxIconZeitrafferElement: {
        prototype: HTMLDxIconZeitrafferElement;
        new (): HTMLDxIconZeitrafferElement;
    };
    interface HTMLDxIconZurueckElement extends Components.DxIconZurueck, HTMLStencilElement {
    }
    var HTMLDxIconZurueckElement: {
        prototype: HTMLDxIconZurueckElement;
        new (): HTMLDxIconZurueckElement;
    };
    interface HTMLDxInfoElement extends Components.DxInfo, HTMLStencilElement {
    }
    var HTMLDxInfoElement: {
        prototype: HTMLDxInfoElement;
        new (): HTMLDxInfoElement;
    };
    interface HTMLDxInputLabelElement extends Components.DxInputLabel, HTMLStencilElement {
    }
    var HTMLDxInputLabelElement: {
        prototype: HTMLDxInputLabelElement;
        new (): HTMLDxInputLabelElement;
    };
    interface HTMLDxInternalWizardStepElement extends Components.DxInternalWizardStep, HTMLStencilElement {
    }
    var HTMLDxInternalWizardStepElement: {
        prototype: HTMLDxInternalWizardStepElement;
        new (): HTMLDxInternalWizardStepElement;
    };
    interface HTMLDxLegendElement extends Components.DxLegend, HTMLStencilElement {
    }
    var HTMLDxLegendElement: {
        prototype: HTMLDxLegendElement;
        new (): HTMLDxLegendElement;
    };
    interface HTMLDxLinkElement extends Components.DxLink, HTMLStencilElement {
    }
    var HTMLDxLinkElement: {
        prototype: HTMLDxLinkElement;
        new (): HTMLDxLinkElement;
    };
    interface HTMLDxListElement extends Components.DxList, HTMLStencilElement {
    }
    var HTMLDxListElement: {
        prototype: HTMLDxListElement;
        new (): HTMLDxListElement;
    };
    interface HTMLDxListFlyoutElement extends Components.DxListFlyout, HTMLStencilElement {
    }
    var HTMLDxListFlyoutElement: {
        prototype: HTMLDxListFlyoutElement;
        new (): HTMLDxListFlyoutElement;
    };
    interface HTMLDxListItemElement extends Components.DxListItem, HTMLStencilElement {
    }
    var HTMLDxListItemElement: {
        prototype: HTMLDxListItemElement;
        new (): HTMLDxListItemElement;
    };
    interface HTMLDxLogoElement extends Components.DxLogo, HTMLStencilElement {
    }
    var HTMLDxLogoElement: {
        prototype: HTMLDxLogoElement;
        new (): HTMLDxLogoElement;
    };
    interface HTMLDxLogoBildmarkeElement extends Components.DxLogoBildmarke, HTMLStencilElement {
    }
    var HTMLDxLogoBildmarkeElement: {
        prototype: HTMLDxLogoBildmarkeElement;
        new (): HTMLDxLogoBildmarkeElement;
    };
    interface HTMLDxLogoWortmarkeElement extends Components.DxLogoWortmarke, HTMLStencilElement {
    }
    var HTMLDxLogoWortmarkeElement: {
        prototype: HTMLDxLogoWortmarkeElement;
        new (): HTMLDxLogoWortmarkeElement;
    };
    interface HTMLDxMediaQueryValueElement extends Components.DxMediaQueryValue, HTMLStencilElement {
    }
    var HTMLDxMediaQueryValueElement: {
        prototype: HTMLDxMediaQueryValueElement;
        new (): HTMLDxMediaQueryValueElement;
    };
    interface HTMLDxModalElement extends Components.DxModal, HTMLStencilElement {
    }
    var HTMLDxModalElement: {
        prototype: HTMLDxModalElement;
        new (): HTMLDxModalElement;
    };
    interface HTMLDxMultiDropdownElement extends Components.DxMultiDropdown, HTMLStencilElement {
    }
    var HTMLDxMultiDropdownElement: {
        prototype: HTMLDxMultiDropdownElement;
        new (): HTMLDxMultiDropdownElement;
    };
    interface HTMLDxNotificationBarElement extends Components.DxNotificationBar, HTMLStencilElement {
    }
    var HTMLDxNotificationBarElement: {
        prototype: HTMLDxNotificationBarElement;
        new (): HTMLDxNotificationBarElement;
    };
    interface HTMLDxNotificationIndicatorElement extends Components.DxNotificationIndicator, HTMLStencilElement {
    }
    var HTMLDxNotificationIndicatorElement: {
        prototype: HTMLDxNotificationIndicatorElement;
        new (): HTMLDxNotificationIndicatorElement;
    };
    interface HTMLDxNotificationToastElement extends Components.DxNotificationToast, HTMLStencilElement {
    }
    var HTMLDxNotificationToastElement: {
        prototype: HTMLDxNotificationToastElement;
        new (): HTMLDxNotificationToastElement;
    };
    interface HTMLDxNumberInputElement extends Components.DxNumberInput, HTMLStencilElement {
    }
    var HTMLDxNumberInputElement: {
        prototype: HTMLDxNumberInputElement;
        new (): HTMLDxNumberInputElement;
    };
    interface HTMLDxNumberPaginatorElement extends Components.DxNumberPaginator, HTMLStencilElement {
    }
    var HTMLDxNumberPaginatorElement: {
        prototype: HTMLDxNumberPaginatorElement;
        new (): HTMLDxNumberPaginatorElement;
    };
    interface HTMLDxNumberPaginatorPageButtonElement extends Components.DxNumberPaginatorPageButton, HTMLStencilElement {
    }
    var HTMLDxNumberPaginatorPageButtonElement: {
        prototype: HTMLDxNumberPaginatorPageButtonElement;
        new (): HTMLDxNumberPaginatorPageButtonElement;
    };
    interface HTMLDxNumberPickerElement extends Components.DxNumberPicker, HTMLStencilElement {
    }
    var HTMLDxNumberPickerElement: {
        prototype: HTMLDxNumberPickerElement;
        new (): HTMLDxNumberPickerElement;
    };
    interface HTMLDxOverflowMenuElement extends Components.DxOverflowMenu, HTMLStencilElement {
    }
    var HTMLDxOverflowMenuElement: {
        prototype: HTMLDxOverflowMenuElement;
        new (): HTMLDxOverflowMenuElement;
    };
    interface HTMLDxOverflowMenuItemElement extends Components.DxOverflowMenuItem, HTMLStencilElement {
    }
    var HTMLDxOverflowMenuItemElement: {
        prototype: HTMLDxOverflowMenuItemElement;
        new (): HTMLDxOverflowMenuItemElement;
    };
    interface HTMLDxOverlayElement extends Components.DxOverlay, HTMLStencilElement {
    }
    var HTMLDxOverlayElement: {
        prototype: HTMLDxOverlayElement;
        new (): HTMLDxOverlayElement;
    };
    interface HTMLDxPaginatorElement extends Components.DxPaginator, HTMLStencilElement {
    }
    var HTMLDxPaginatorElement: {
        prototype: HTMLDxPaginatorElement;
        new (): HTMLDxPaginatorElement;
    };
    interface HTMLDxPlaceholderElement extends Components.DxPlaceholder, HTMLStencilElement {
    }
    var HTMLDxPlaceholderElement: {
        prototype: HTMLDxPlaceholderElement;
        new (): HTMLDxPlaceholderElement;
    };
    interface HTMLDxPopupElement extends Components.DxPopup, HTMLStencilElement {
    }
    var HTMLDxPopupElement: {
        prototype: HTMLDxPopupElement;
        new (): HTMLDxPopupElement;
    };
    interface HTMLDxProcessHeaderElement extends Components.DxProcessHeader, HTMLStencilElement {
    }
    var HTMLDxProcessHeaderElement: {
        prototype: HTMLDxProcessHeaderElement;
        new (): HTMLDxProcessHeaderElement;
    };
    interface HTMLDxPulseIconElement extends Components.DxPulseIcon, HTMLStencilElement {
    }
    var HTMLDxPulseIconElement: {
        prototype: HTMLDxPulseIconElement;
        new (): HTMLDxPulseIconElement;
    };
    interface HTMLDxRadioButtonElement extends Components.DxRadioButton, HTMLStencilElement {
    }
    var HTMLDxRadioButtonElement: {
        prototype: HTMLDxRadioButtonElement;
        new (): HTMLDxRadioButtonElement;
    };
    interface HTMLDxRadioButtonGroupElement extends Components.DxRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLDxRadioButtonGroupElement: {
        prototype: HTMLDxRadioButtonGroupElement;
        new (): HTMLDxRadioButtonGroupElement;
    };
    interface HTMLDxRepresentativeInfoElement extends Components.DxRepresentativeInfo, HTMLStencilElement {
    }
    var HTMLDxRepresentativeInfoElement: {
        prototype: HTMLDxRepresentativeInfoElement;
        new (): HTMLDxRepresentativeInfoElement;
    };
    interface HTMLDxScrollableShadowElement extends Components.DxScrollableShadow, HTMLStencilElement {
    }
    var HTMLDxScrollableShadowElement: {
        prototype: HTMLDxScrollableShadowElement;
        new (): HTMLDxScrollableShadowElement;
    };
    interface HTMLDxSidebarElement extends Components.DxSidebar, HTMLStencilElement {
    }
    var HTMLDxSidebarElement: {
        prototype: HTMLDxSidebarElement;
        new (): HTMLDxSidebarElement;
    };
    interface HTMLDxSidebarContentElement extends Components.DxSidebarContent, HTMLStencilElement {
    }
    var HTMLDxSidebarContentElement: {
        prototype: HTMLDxSidebarContentElement;
        new (): HTMLDxSidebarContentElement;
    };
    interface HTMLDxSimpleGrowBoxElement extends Components.DxSimpleGrowBox, HTMLStencilElement {
    }
    var HTMLDxSimpleGrowBoxElement: {
        prototype: HTMLDxSimpleGrowBoxElement;
        new (): HTMLDxSimpleGrowBoxElement;
    };
    interface HTMLDxSiteNavigationElement extends Components.DxSiteNavigation, HTMLStencilElement {
    }
    var HTMLDxSiteNavigationElement: {
        prototype: HTMLDxSiteNavigationElement;
        new (): HTMLDxSiteNavigationElement;
    };
    interface HTMLDxSiteNavigationMenuElement extends Components.DxSiteNavigationMenu, HTMLStencilElement {
    }
    var HTMLDxSiteNavigationMenuElement: {
        prototype: HTMLDxSiteNavigationMenuElement;
        new (): HTMLDxSiteNavigationMenuElement;
    };
    interface HTMLDxSiteNavigationMenuItemElement extends Components.DxSiteNavigationMenuItem, HTMLStencilElement {
    }
    var HTMLDxSiteNavigationMenuItemElement: {
        prototype: HTMLDxSiteNavigationMenuItemElement;
        new (): HTMLDxSiteNavigationMenuItemElement;
    };
    interface HTMLDxSiteNavigationScopeElement extends Components.DxSiteNavigationScope, HTMLStencilElement {
    }
    var HTMLDxSiteNavigationScopeElement: {
        prototype: HTMLDxSiteNavigationScopeElement;
        new (): HTMLDxSiteNavigationScopeElement;
    };
    interface HTMLDxSlideShowElement extends Components.DxSlideShow, HTMLStencilElement {
    }
    var HTMLDxSlideShowElement: {
        prototype: HTMLDxSlideShowElement;
        new (): HTMLDxSlideShowElement;
    };
    interface HTMLDxSliderElement extends Components.DxSlider, HTMLStencilElement {
    }
    var HTMLDxSliderElement: {
        prototype: HTMLDxSliderElement;
        new (): HTMLDxSliderElement;
    };
    interface HTMLDxSlideshowSliderElement extends Components.DxSlideshowSlider, HTMLStencilElement {
    }
    var HTMLDxSlideshowSliderElement: {
        prototype: HTMLDxSlideshowSliderElement;
        new (): HTMLDxSlideshowSliderElement;
    };
    interface HTMLDxSortElement extends Components.DxSort, HTMLStencilElement {
    }
    var HTMLDxSortElement: {
        prototype: HTMLDxSortElement;
        new (): HTMLDxSortElement;
    };
    interface HTMLDxSortHandleElement extends Components.DxSortHandle, HTMLStencilElement {
    }
    var HTMLDxSortHandleElement: {
        prototype: HTMLDxSortHandleElement;
        new (): HTMLDxSortHandleElement;
    };
    interface HTMLDxSortItemElement extends Components.DxSortItem, HTMLStencilElement {
    }
    var HTMLDxSortItemElement: {
        prototype: HTMLDxSortItemElement;
        new (): HTMLDxSortItemElement;
    };
    interface HTMLDxSpacerElement extends Components.DxSpacer, HTMLStencilElement {
    }
    var HTMLDxSpacerElement: {
        prototype: HTMLDxSpacerElement;
        new (): HTMLDxSpacerElement;
    };
    interface HTMLDxSpinnerElement extends Components.DxSpinner, HTMLStencilElement {
    }
    var HTMLDxSpinnerElement: {
        prototype: HTMLDxSpinnerElement;
        new (): HTMLDxSpinnerElement;
    };
    interface HTMLDxTabBarElement extends Components.DxTabBar, HTMLStencilElement {
    }
    var HTMLDxTabBarElement: {
        prototype: HTMLDxTabBarElement;
        new (): HTMLDxTabBarElement;
    };
    interface HTMLDxTabDropdownElement extends Components.DxTabDropdown, HTMLStencilElement {
    }
    var HTMLDxTabDropdownElement: {
        prototype: HTMLDxTabDropdownElement;
        new (): HTMLDxTabDropdownElement;
    };
    interface HTMLDxTabPageElement extends Components.DxTabPage, HTMLStencilElement {
    }
    var HTMLDxTabPageElement: {
        prototype: HTMLDxTabPageElement;
        new (): HTMLDxTabPageElement;
    };
    interface HTMLDxTableElement extends Components.DxTable, HTMLStencilElement {
    }
    var HTMLDxTableElement: {
        prototype: HTMLDxTableElement;
        new (): HTMLDxTableElement;
    };
    interface HTMLDxTableCellElement extends Components.DxTableCell, HTMLStencilElement {
    }
    var HTMLDxTableCellElement: {
        prototype: HTMLDxTableCellElement;
        new (): HTMLDxTableCellElement;
    };
    interface HTMLDxTableFooterElement extends Components.DxTableFooter, HTMLStencilElement {
    }
    var HTMLDxTableFooterElement: {
        prototype: HTMLDxTableFooterElement;
        new (): HTMLDxTableFooterElement;
    };
    interface HTMLDxTableHeaderElement extends Components.DxTableHeader, HTMLStencilElement {
    }
    var HTMLDxTableHeaderElement: {
        prototype: HTMLDxTableHeaderElement;
        new (): HTMLDxTableHeaderElement;
    };
    interface HTMLDxTableHeaderItemElement extends Components.DxTableHeaderItem, HTMLStencilElement {
    }
    var HTMLDxTableHeaderItemElement: {
        prototype: HTMLDxTableHeaderItemElement;
        new (): HTMLDxTableHeaderItemElement;
    };
    interface HTMLDxTableRowElement extends Components.DxTableRow, HTMLStencilElement {
    }
    var HTMLDxTableRowElement: {
        prototype: HTMLDxTableRowElement;
        new (): HTMLDxTableRowElement;
    };
    interface HTMLDxTagElement extends Components.DxTag, HTMLStencilElement {
    }
    var HTMLDxTagElement: {
        prototype: HTMLDxTagElement;
        new (): HTMLDxTagElement;
    };
    interface HTMLDxTextElement extends Components.DxText, HTMLStencilElement {
    }
    var HTMLDxTextElement: {
        prototype: HTMLDxTextElement;
        new (): HTMLDxTextElement;
    };
    interface HTMLDxTextAreaElement extends Components.DxTextArea, HTMLStencilElement {
    }
    var HTMLDxTextAreaElement: {
        prototype: HTMLDxTextAreaElement;
        new (): HTMLDxTextAreaElement;
    };
    interface HTMLDxTextInputElement extends Components.DxTextInput, HTMLStencilElement {
    }
    var HTMLDxTextInputElement: {
        prototype: HTMLDxTextInputElement;
        new (): HTMLDxTextInputElement;
    };
    interface HTMLDxTextListElement extends Components.DxTextList, HTMLStencilElement {
    }
    var HTMLDxTextListElement: {
        prototype: HTMLDxTextListElement;
        new (): HTMLDxTextListElement;
    };
    interface HTMLDxToggleElement extends Components.DxToggle, HTMLStencilElement {
    }
    var HTMLDxToggleElement: {
        prototype: HTMLDxToggleElement;
        new (): HTMLDxToggleElement;
    };
    interface HTMLDxUserAvatarElement extends Components.DxUserAvatar, HTMLStencilElement {
    }
    var HTMLDxUserAvatarElement: {
        prototype: HTMLDxUserAvatarElement;
        new (): HTMLDxUserAvatarElement;
    };
    interface HTMLDxWizardElement extends Components.DxWizard, HTMLStencilElement {
    }
    var HTMLDxWizardElement: {
        prototype: HTMLDxWizardElement;
        new (): HTMLDxWizardElement;
    };
    interface HTMLDxWizardStepElement extends Components.DxWizardStep, HTMLStencilElement {
    }
    var HTMLDxWizardStepElement: {
        prototype: HTMLDxWizardStepElement;
        new (): HTMLDxWizardStepElement;
    };
    interface HTMLDxYesNoElement extends Components.DxYesNo, HTMLStencilElement {
    }
    var HTMLDxYesNoElement: {
        prototype: HTMLDxYesNoElement;
        new (): HTMLDxYesNoElement;
    };
    interface HTMLElementTagNameMap {
        "ds-action-list": HTMLDsActionListElement;
        "ds-action-list-item": HTMLDsActionListItemElement;
        "ds-alert": HTMLDsAlertElement;
        "ds-alert-button": HTMLDsAlertButtonElement;
        "ds-announcement-bar": HTMLDsAnnouncementBarElement;
        "ds-app": HTMLDsAppElement;
        "ds-blink": HTMLDsBlinkElement;
        "ds-bordered-form-group": HTMLDsBorderedFormGroupElement;
        "ds-bordered-form-item": HTMLDsBorderedFormItemElement;
        "ds-button": HTMLDsButtonElement;
        "ds-button-bar": HTMLDsButtonBarElement;
        "ds-calendar": HTMLDsCalendarElement;
        "ds-card": HTMLDsCardElement;
        "ds-card-collapsable": HTMLDsCardCollapsableElement;
        "ds-card-content": HTMLDsCardContentElement;
        "ds-card-header": HTMLDsCardHeaderElement;
        "ds-card-image-header": HTMLDsCardImageHeaderElement;
        "ds-card-tab-bar": HTMLDsCardTabBarElement;
        "ds-card-tab-page": HTMLDsCardTabPageElement;
        "ds-centered-board": HTMLDsCenteredBoardElement;
        "ds-centered-board-item": HTMLDsCenteredBoardItemElement;
        "ds-chart-sample": HTMLDsChartSampleElement;
        "ds-checkbox": HTMLDsCheckboxElement;
        "ds-column": HTMLDsColumnElement;
        "ds-date-input": HTMLDsDateInputElement;
        "ds-date-range": HTMLDsDateRangeElement;
        "ds-donut-chart": HTMLDsDonutChartElement;
        "ds-dropdown": HTMLDsDropdownElement;
        "ds-dropdown-option": HTMLDsDropdownOptionElement;
        "ds-fm-ergebnisuebersicht": HTMLDsFmErgebnisuebersichtElement;
        "ds-fm-ergebnisuebersicht-item": HTMLDsFmErgebnisuebersichtItemElement;
        "ds-fm-ergebnisuebersicht-table": HTMLDsFmErgebnisuebersichtTableElement;
        "ds-footer": HTMLDsFooterElement;
        "ds-form-layout": HTMLDsFormLayoutElement;
        "ds-fullscreen-spinner": HTMLDsFullscreenSpinnerElement;
        "ds-function-icon-button": HTMLDsFunctionIconButtonElement;
        "ds-grid": HTMLDsGridElement;
        "ds-grouped-text-input": HTMLDsGroupedTextInputElement;
        "ds-grow-box": HTMLDsGrowBoxElement;
        "ds-header": HTMLDsHeaderElement;
        "ds-header-action": HTMLDsHeaderActionElement;
        "ds-header-action-list": HTMLDsHeaderActionListElement;
        "ds-header-customer": HTMLDsHeaderCustomerElement;
        "ds-header-user": HTMLDsHeaderUserElement;
        "ds-hero-image": HTMLDsHeroImageElement;
        "ds-hr": HTMLDsHrElement;
        "ds-icon": HTMLDsIconElement;
        "ds-icon-achtung": HTMLDsIconAchtungElement;
        "ds-icon-achtungcircle": HTMLDsIconAchtungcircleElement;
        "ds-icon-addonclearbutton": HTMLDsIconAddonclearbuttonElement;
        "ds-icon-aktivitaeten": HTMLDsIconAktivitaetenElement;
        "ds-icon-aktualisieren": HTMLDsIconAktualisierenElement;
        "ds-icon-anleger": HTMLDsIconAnlegerElement;
        "ds-icon-arbeitsplatz": HTMLDsIconArbeitsplatzElement;
        "ds-icon-arbeitsweg": HTMLDsIconArbeitswegElement;
        "ds-icon-auge": HTMLDsIconAugeElement;
        "ds-icon-augedurchgestrichen": HTMLDsIconAugedurchgestrichenElement;
        "ds-icon-ausgehen": HTMLDsIconAusgehenElement;
        "ds-icon-ausweis": HTMLDsIconAusweisElement;
        "ds-icon-ausweischeck": HTMLDsIconAusweischeckElement;
        "ds-icon-bank": HTMLDsIconBankElement;
        "ds-icon-bearbeiten": HTMLDsIconBearbeitenElement;
        "ds-icon-beratungbeenden": HTMLDsIconBeratungbeendenElement;
        "ds-icon-bueroklammer": HTMLDsIconBueroklammerElement;
        "ds-icon-button": HTMLDsIconButtonElement;
        "ds-icon-check": HTMLDsIconCheckElement;
        "ds-icon-collapseclose": HTMLDsIconCollapsecloseElement;
        "ds-icon-collapseopen": HTMLDsIconCollapseopenElement;
        "ds-icon-dislike": HTMLDsIconDislikeElement;
        "ds-icon-dokumenteupload": HTMLDsIconDokumenteuploadElement;
        "ds-icon-download": HTMLDsIconDownloadElement;
        "ds-icon-dropdown": HTMLDsIconDropdownElement;
        "ds-icon-einkaufen": HTMLDsIconEinkaufenElement;
        "ds-icon-einstellungen": HTMLDsIconEinstellungenElement;
        "ds-icon-eurozeichen": HTMLDsIconEurozeichenElement;
        "ds-icon-faq": HTMLDsIconFaqElement;
        "ds-icon-favoritfilled": HTMLDsIconFavoritfilledElement;
        "ds-icon-favoritoutline": HTMLDsIconFavoritoutlineElement;
        "ds-icon-filter": HTMLDsIconFilterElement;
        "ds-icon-formulare": HTMLDsIconFormulareElement;
        "ds-icon-formulareinitial": HTMLDsIconFormulareinitialElement;
        "ds-icon-fotogalerie": HTMLDsIconFotogalerieElement;
        "ds-icon-fotogalerierahmen": HTMLDsIconFotogalerierahmenElement;
        "ds-icon-gartenarbeit": HTMLDsIconGartenarbeitElement;
        "ds-icon-geld": HTMLDsIconGeldElement;
        "ds-icon-gesundheit": HTMLDsIconGesundheitElement;
        "ds-icon-gesundheit2": HTMLDsIconGesundheit2Element;
        "ds-icon-glas": HTMLDsIconGlasElement;
        "ds-icon-glas2": HTMLDsIconGlas2Element;
        "ds-icon-glocke": HTMLDsIconGlockeElement;
        "ds-icon-hamburgermenue": HTMLDsIconHamburgermenueElement;
        "ds-icon-hauptdokument": HTMLDsIconHauptdokumentElement;
        "ds-icon-hausarbeit": HTMLDsIconHausarbeitElement;
        "ds-icon-hausrat": HTMLDsIconHausratElement;
        "ds-icon-hausratreise": HTMLDsIconHausratreiseElement;
        "ds-icon-home": HTMLDsIconHomeElement;
        "ds-icon-info": HTMLDsIconInfoElement;
        "ds-icon-investment": HTMLDsIconInvestmentElement;
        "ds-icon-jubilaeumicon10": HTMLDsIconJubilaeumicon10Element;
        "ds-icon-jubilaeumicon100": HTMLDsIconJubilaeumicon100Element;
        "ds-icon-jubilaeumicon105": HTMLDsIconJubilaeumicon105Element;
        "ds-icon-jubilaeumicon110": HTMLDsIconJubilaeumicon110Element;
        "ds-icon-jubilaeumicon115": HTMLDsIconJubilaeumicon115Element;
        "ds-icon-jubilaeumicon120": HTMLDsIconJubilaeumicon120Element;
        "ds-icon-jubilaeumicon125": HTMLDsIconJubilaeumicon125Element;
        "ds-icon-jubilaeumicon15": HTMLDsIconJubilaeumicon15Element;
        "ds-icon-jubilaeumicon20": HTMLDsIconJubilaeumicon20Element;
        "ds-icon-jubilaeumicon25": HTMLDsIconJubilaeumicon25Element;
        "ds-icon-jubilaeumicon30": HTMLDsIconJubilaeumicon30Element;
        "ds-icon-jubilaeumicon35": HTMLDsIconJubilaeumicon35Element;
        "ds-icon-jubilaeumicon40": HTMLDsIconJubilaeumicon40Element;
        "ds-icon-jubilaeumicon45": HTMLDsIconJubilaeumicon45Element;
        "ds-icon-jubilaeumicon5": HTMLDsIconJubilaeumicon5Element;
        "ds-icon-jubilaeumicon50": HTMLDsIconJubilaeumicon50Element;
        "ds-icon-jubilaeumicon55": HTMLDsIconJubilaeumicon55Element;
        "ds-icon-jubilaeumicon60": HTMLDsIconJubilaeumicon60Element;
        "ds-icon-jubilaeumicon65": HTMLDsIconJubilaeumicon65Element;
        "ds-icon-jubilaeumicon70": HTMLDsIconJubilaeumicon70Element;
        "ds-icon-jubilaeumicon75": HTMLDsIconJubilaeumicon75Element;
        "ds-icon-jubilaeumicon80": HTMLDsIconJubilaeumicon80Element;
        "ds-icon-jubilaeumicon85": HTMLDsIconJubilaeumicon85Element;
        "ds-icon-jubilaeumicon90": HTMLDsIconJubilaeumicon90Element;
        "ds-icon-jubilaeumicon95": HTMLDsIconJubilaeumicon95Element;
        "ds-icon-kalender": HTMLDsIconKalenderElement;
        "ds-icon-kamera": HTMLDsIconKameraElement;
        "ds-icon-kameravideo": HTMLDsIconKameravideoElement;
        "ds-icon-kfz": HTMLDsIconKfzElement;
        "ds-icon-like": HTMLDsIconLikeElement;
        "ds-icon-liquiditaet": HTMLDsIconLiquiditaetElement;
        "ds-icon-listenpfeil": HTMLDsIconListenpfeilElement;
        "ds-icon-loeschen": HTMLDsIconLoeschenElement;
        "ds-icon-lupevergroessern": HTMLDsIconLupevergroessernElement;
        "ds-icon-lupeverkleinern": HTMLDsIconLupeverkleinernElement;
        "ds-icon-mail": HTMLDsIconMailElement;
        "ds-icon-mensch": HTMLDsIconMenschElement;
        "ds-icon-minus": HTMLDsIconMinusElement;
        "ds-icon-moremenue": HTMLDsIconMoremenueElement;
        "ds-icon-neu": HTMLDsIconNeuElement;
        "ds-icon-neukreis": HTMLDsIconNeukreisElement;
        "ds-icon-ordner": HTMLDsIconOrdnerElement;
        "ds-icon-pfeilnaechsteseingabefeld": HTMLDsIconPfeilnaechsteseingabefeldElement;
        "ds-icon-pfeilnaechstespflichtfeld": HTMLDsIconPfeilnaechstespflichtfeldElement;
        "ds-icon-pfeilvorherigeseingabefeld": HTMLDsIconPfeilvorherigeseingabefeldElement;
        "ds-icon-pfeilvorherigespflichtfeld": HTMLDsIconPfeilvorherigespflichtfeldElement;
        "ds-icon-privathaftpflicht": HTMLDsIconPrivathaftpflichtElement;
        "ds-icon-privathaftpflicht2": HTMLDsIconPrivathaftpflicht2Element;
        "ds-icon-prozent": HTMLDsIconProzentElement;
        "ds-icon-rechtschutz": HTMLDsIconRechtschutzElement;
        "ds-icon-rechtschutz2": HTMLDsIconRechtschutz2Element;
        "ds-icon-reisen": HTMLDsIconReisenElement;
        "ds-icon-reparatur": HTMLDsIconReparaturElement;
        "ds-icon-scheine": HTMLDsIconScheineElement;
        "ds-icon-schliessendialog": HTMLDsIconSchliessendialogElement;
        "ds-icon-schliesseninput": HTMLDsIconSchliesseninputElement;
        "ds-icon-schliessenkreis": HTMLDsIconSchliessenkreisElement;
        "ds-icon-schlossgesperrt": HTMLDsIconSchlossgesperrtElement;
        "ds-icon-schlossoffen": HTMLDsIconSchlossoffenElement;
        "ds-icon-seitenanzeigeganzeseite": HTMLDsIconSeitenanzeigeganzeseiteElement;
        "ds-icon-seitenanzeigevollebreite": HTMLDsIconSeitenanzeigevollebreiteElement;
        "ds-icon-seitenleisteoffen": HTMLDsIconSeitenleisteoffenElement;
        "ds-icon-seitenleisteoffenfehlermeldung": HTMLDsIconSeitenleisteoffenfehlermeldungElement;
        "ds-icon-seitenleistezu": HTMLDsIconSeitenleistezuElement;
        "ds-icon-seitenleistezufehlermeldung": HTMLDsIconSeitenleistezufehlermeldungElement;
        "ds-icon-services": HTMLDsIconServicesElement;
        "ds-icon-sortieren": HTMLDsIconSortierenElement;
        "ds-icon-sortieren2": HTMLDsIconSortieren2Element;
        "ds-icon-sortierenabsteigend": HTMLDsIconSortierenabsteigendElement;
        "ds-icon-sortierenaufsteigend": HTMLDsIconSortierenaufsteigendElement;
        "ds-icon-sparen": HTMLDsIconSparenElement;
        "ds-icon-sport": HTMLDsIconSportElement;
        "ds-icon-strassenverkehr": HTMLDsIconStrassenverkehrElement;
        "ds-icon-success": HTMLDsIconSuccessElement;
        "ds-icon-suchen": HTMLDsIconSuchenElement;
        "ds-icon-telefon": HTMLDsIconTelefonElement;
        "ds-icon-uebermitteln": HTMLDsIconUebermittelnElement;
        "ds-icon-uebermittelnfehlgeschlagen": HTMLDsIconUebermittelnfehlgeschlagenElement;
        "ds-icon-undo": HTMLDsIconUndoElement;
        "ds-icon-unfall": HTMLDsIconUnfallElement;
        "ds-icon-unfall2": HTMLDsIconUnfall2Element;
        "ds-icon-unterschreiben": HTMLDsIconUnterschreibenElement;
        "ds-icon-upload": HTMLDsIconUploadElement;
        "ds-icon-versicherung": HTMLDsIconVersicherungElement;
        "ds-icon-wohngebaeude": HTMLDsIconWohngebaeudeElement;
        "ds-icon-zusatzdokument": HTMLDsIconZusatzdokumentElement;
        "ds-icon-zusatzfotodokument": HTMLDsIconZusatzfotodokumentElement;
        "ds-info": HTMLDsInfoElement;
        "ds-input-label": HTMLDsInputLabelElement;
        "ds-link": HTMLDsLinkElement;
        "ds-logo": HTMLDsLogoElement;
        "ds-logo-bildmarke": HTMLDsLogoBildmarkeElement;
        "ds-logo-wortmarke": HTMLDsLogoWortmarkeElement;
        "ds-logo-wortmarke-allfinanz": HTMLDsLogoWortmarkeAllfinanzElement;
        "ds-modal": HTMLDsModalElement;
        "ds-navigated-content": HTMLDsNavigatedContentElement;
        "ds-navigated-content-menu": HTMLDsNavigatedContentMenuElement;
        "ds-navigated-content-menu-item": HTMLDsNavigatedContentMenuItemElement;
        "ds-notification-toast": HTMLDsNotificationToastElement;
        "ds-number-input": HTMLDsNumberInputElement;
        "ds-page": HTMLDsPageElement;
        "ds-paginator": HTMLDsPaginatorElement;
        "ds-placeholder": HTMLDsPlaceholderElement;
        "ds-radio-button": HTMLDsRadioButtonElement;
        "ds-radio-button-group": HTMLDsRadioButtonGroupElement;
        "ds-required-hint": HTMLDsRequiredHintElement;
        "ds-scroll-container": HTMLDsScrollContainerElement;
        "ds-search": HTMLDsSearchElement;
        "ds-slider": HTMLDsSliderElement;
        "ds-spinner": HTMLDsSpinnerElement;
        "ds-table": HTMLDsTableElement;
        "ds-table-cell": HTMLDsTableCellElement;
        "ds-table-footer": HTMLDsTableFooterElement;
        "ds-table-header": HTMLDsTableHeaderElement;
        "ds-table-header-item": HTMLDsTableHeaderItemElement;
        "ds-table-page-size-picker": HTMLDsTablePageSizePickerElement;
        "ds-table-row": HTMLDsTableRowElement;
        "ds-text": HTMLDsTextElement;
        "ds-text-area": HTMLDsTextAreaElement;
        "ds-text-button": HTMLDsTextButtonElement;
        "ds-text-input": HTMLDsTextInputElement;
        "ds-text-list": HTMLDsTextListElement;
        "ds-user-avatar": HTMLDsUserAvatarElement;
        "ds-workflow-progress": HTMLDsWorkflowProgressElement;
        "ds-wrapped-layout": HTMLDsWrappedLayoutElement;
        "ds-yes-no": HTMLDsYesNoElement;
        "dx-accordion": HTMLDxAccordionElement;
        "dx-accordion-group": HTMLDxAccordionGroupElement;
        "dx-alert": HTMLDxAlertElement;
        "dx-announcement-bar": HTMLDxAnnouncementBarElement;
        "dx-app": HTMLDxAppElement;
        "dx-breadcrumb": HTMLDxBreadcrumbElement;
        "dx-breadcrumb-item": HTMLDxBreadcrumbItemElement;
        "dx-button": HTMLDxButtonElement;
        "dx-calendar": HTMLDxCalendarElement;
        "dx-card": HTMLDxCardElement;
        "dx-card-collapsable": HTMLDxCardCollapsableElement;
        "dx-card-content": HTMLDxCardContentElement;
        "dx-card-header": HTMLDxCardHeaderElement;
        "dx-card-image": HTMLDxCardImageElement;
        "dx-chart-sample": HTMLDxChartSampleElement;
        "dx-checkbox": HTMLDxCheckboxElement;
        "dx-chevron": HTMLDxChevronElement;
        "dx-clear-button": HTMLDxClearButtonElement;
        "dx-combobox": HTMLDxComboboxElement;
        "dx-container": HTMLDxContainerElement;
        "dx-content-switcher": HTMLDxContentSwitcherElement;
        "dx-content-switcher-item": HTMLDxContentSwitcherItemElement;
        "dx-date-input": HTMLDxDateInputElement;
        "dx-date-range": HTMLDxDateRangeElement;
        "dx-donut-chart": HTMLDxDonutChartElement;
        "dx-dropdown": HTMLDxDropdownElement;
        "dx-dropdown-option": HTMLDxDropdownOptionElement;
        "dx-element-swapper": HTMLDxElementSwapperElement;
        "dx-error-message": HTMLDxErrorMessageElement;
        "dx-error-page": HTMLDxErrorPageElement;
        "dx-expanded": HTMLDxExpandedElement;
        "dx-fd-outline-box": HTMLDxFdOutlineBoxElement;
        "dx-fd-separator": HTMLDxFdSeparatorElement;
        "dx-flyout": HTMLDxFlyoutElement;
        "dx-footer": HTMLDxFooterElement;
        "dx-form-wrapper": HTMLDxFormWrapperElement;
        "dx-golden-stage": HTMLDxGoldenStageElement;
        "dx-grid": HTMLDxGridElement;
        "dx-header": HTMLDxHeaderElement;
        "dx-header-app-favorites": HTMLDxHeaderAppFavoritesElement;
        "dx-header-app-favorites-app": HTMLDxHeaderAppFavoritesAppElement;
        "dx-header-app-favorites-sidebar-content": HTMLDxHeaderAppFavoritesSidebarContentElement;
        "dx-header-application-name": HTMLDxHeaderApplicationNameElement;
        "dx-header-menu-bar": HTMLDxHeaderMenuBarElement;
        "dx-header-menu-button": HTMLDxHeaderMenuButtonElement;
        "dx-header-menu-custom": HTMLDxHeaderMenuCustomElement;
        "dx-header-menu-group": HTMLDxHeaderMenuGroupElement;
        "dx-header-menu-item": HTMLDxHeaderMenuItemElement;
        "dx-header-menu-link": HTMLDxHeaderMenuLinkElement;
        "dx-header-navigation": HTMLDxHeaderNavigationElement;
        "dx-header-navigation-item": HTMLDxHeaderNavigationItemElement;
        "dx-header-navigation-sidebar-content": HTMLDxHeaderNavigationSidebarContentElement;
        "dx-header-user": HTMLDxHeaderUserElement;
        "dx-header-user-sidebar-content": HTMLDxHeaderUserSidebarContentElement;
        "dx-hero-image": HTMLDxHeroImageElement;
        "dx-horizontal-grow-box": HTMLDxHorizontalGrowBoxElement;
        "dx-icon": HTMLDxIconElement;
        "dx-icon-allfinanzberatungwebportaloutlined": HTMLDxIconAllfinanzberatungwebportaloutlinedElement;
        "dx-icon-anfuehrungszeichen": HTMLDxIconAnfuehrungszeichenElement;
        "dx-icon-antragdvagoutlined": HTMLDxIconAntragdvagoutlinedElement;
        "dx-icon-antragfilled": HTMLDxIconAntragfilledElement;
        "dx-icon-appportal01filled": HTMLDxIconAppportal01filledElement;
        "dx-icon-appportal01outlined": HTMLDxIconAppportal01outlinedElement;
        "dx-icon-appportal02filled": HTMLDxIconAppportal02filledElement;
        "dx-icon-appportal02outlined": HTMLDxIconAppportal02outlinedElement;
        "dx-icon-appstoregfilled": HTMLDxIconAppstoregfilledElement;
        "dx-icon-appstorewoutlined": HTMLDxIconAppstorewoutlinedElement;
        "dx-icon-auftragsportalfilled": HTMLDxIconAuftragsportalfilledElement;
        "dx-icon-auftragsportaloutlined": HTMLDxIconAuftragsportaloutlinedElement;
        "dx-icon-auge": HTMLDxIconAugeElement;
        "dx-icon-augegestrichen": HTMLDxIconAugegestrichenElement;
        "dx-icon-ausfuellen": HTMLDxIconAusfuellenElement;
        "dx-icon-ausweis": HTMLDxIconAusweisElement;
        "dx-icon-ausweischeck": HTMLDxIconAusweischeckElement;
        "dx-icon-autorisierungvertragsabschluss": HTMLDxIconAutorisierungvertragsabschlussElement;
        "dx-icon-bausparenbold": HTMLDxIconBausparenboldElement;
        "dx-icon-bausparenthin": HTMLDxIconBausparenthinElement;
        "dx-icon-bentobox": HTMLDxIconBentoboxElement;
        "dx-icon-beratugsweltfilled": HTMLDxIconBeratugsweltfilledElement;
        "dx-icon-beratugsweltoutlined": HTMLDxIconBeratugsweltoutlinedElement;
        "dx-icon-blinkitfilled": HTMLDxIconBlinkitfilledElement;
        "dx-icon-blinkitoutlined": HTMLDxIconBlinkitoutlinedElement;
        "dx-icon-check": HTMLDxIconCheckElement;
        "dx-icon-checkkreis": HTMLDxIconCheckkreisElement;
        "dx-icon-checkkreisthinoutlined": HTMLDxIconCheckkreisthinoutlinedElement;
        "dx-icon-checkthin": HTMLDxIconCheckthinElement;
        "dx-icon-chevronhoch": HTMLDxIconChevronhochElement;
        "dx-icon-chevronlinks": HTMLDxIconChevronlinksElement;
        "dx-icon-chevronlinkskreis": HTMLDxIconChevronlinkskreisElement;
        "dx-icon-chevronlinkskreisfill": HTMLDxIconChevronlinkskreisfillElement;
        "dx-icon-chevronrechts": HTMLDxIconChevronrechtsElement;
        "dx-icon-chevronrechtskreis": HTMLDxIconChevronrechtskreisElement;
        "dx-icon-chevronrechtskreisfill": HTMLDxIconChevronrechtskreisfillElement;
        "dx-icon-chevronrunter": HTMLDxIconChevronrunterElement;
        "dx-icon-chip": HTMLDxIconChipElement;
        "dx-icon-cookie": HTMLDxIconCookieElement;
        "dx-icon-datensavefilled": HTMLDxIconDatensavefilledElement;
        "dx-icon-datensaveoutlined": HTMLDxIconDatensaveoutlinedElement;
        "dx-icon-datenturbofilled": HTMLDxIconDatenturbofilledElement;
        "dx-icon-datenturbooutlined": HTMLDxIconDatenturbooutlinedElement;
        "dx-icon-dauer": HTMLDxIconDauerElement;
        "dx-icon-dauer3min": HTMLDxIconDauer3minElement;
        "dx-icon-dbnetfilled": HTMLDxIconDbnetfilledElement;
        "dx-icon-dbnetoutlined": HTMLDxIconDbnetoutlinedElement;
        "dx-icon-depotsbold": HTMLDxIconDepotsboldElement;
        "dx-icon-depotsthin": HTMLDxIconDepotsthinElement;
        "dx-icon-desktoppc": HTMLDxIconDesktoppcElement;
        "dx-icon-devicesandere": HTMLDxIconDevicesandereElement;
        "dx-icon-diedvagfilled": HTMLDxIconDiedvagfilledElement;
        "dx-icon-diedvagoutlined": HTMLDxIconDiedvagoutlinedElement;
        "dx-icon-dnetfilled": HTMLDxIconDnetfilledElement;
        "dx-icon-dnetoutlined": HTMLDxIconDnetoutlinedElement;
        "dx-icon-dokument": HTMLDxIconDokumentElement;
        "dx-icon-doppelchevronlinkskreis": HTMLDxIconDoppelchevronlinkskreisElement;
        "dx-icon-doppelchevronrechtskreis": HTMLDxIconDoppelchevronrechtskreisElement;
        "dx-icon-download": HTMLDxIconDownloadElement;
        "dx-icon-drucker": HTMLDxIconDruckerElement;
        "dx-icon-dvabrechrungsplusportalfilled": HTMLDxIconDvabrechrungsplusportalfilledElement;
        "dx-icon-dvabrechrungsplusportaloutlined": HTMLDxIconDvabrechrungsplusportaloutlinedElement;
        "dx-icon-dvagcloudfilled": HTMLDxIconDvagcloudfilledElement;
        "dx-icon-dvagcloudoutlined": HTMLDxIconDvagcloudoutlinedElement;
        "dx-icon-dvaghypfilled": HTMLDxIconDvaghypfilledElement;
        "dx-icon-dvaghypoutlined": HTMLDxIconDvaghypoutlinedElement;
        "dx-icon-dvagloginfilled": HTMLDxIconDvagloginfilledElement;
        "dx-icon-dvagloginoutlined": HTMLDxIconDvagloginoutlinedElement;
        "dx-icon-dvagonlinesystemkifilled": HTMLDxIconDvagonlinesystemkifilledElement;
        "dx-icon-dvagonlinesystempimfilled": HTMLDxIconDvagonlinesystempimfilledElement;
        "dx-icon-dvagonlinesystemvbifilled": HTMLDxIconDvagonlinesystemvbifilledElement;
        "dx-icon-dvagonlinesytstemkioutlined": HTMLDxIconDvagonlinesytstemkioutlinedElement;
        "dx-icon-dvagonlinesytstempimoutlined": HTMLDxIconDvagonlinesytstempimoutlinedElement;
        "dx-icon-dvagonlinesytstemvbioutlined": HTMLDxIconDvagonlinesytstemvbioutlinedElement;
        "dx-icon-dvagunternehmenspraesentationfilled": HTMLDxIconDvagunternehmenspraesentationfilledElement;
        "dx-icon-dvagunternehmenspraesentationoutlined": HTMLDxIconDvagunternehmenspraesentationoutlinedElement;
        "dx-icon-dvfactoringplusportalfilled": HTMLDxIconDvfactoringplusportalfilledElement;
        "dx-icon-dvfactoringplusportaloutlined": HTMLDxIconDvfactoringplusportaloutlinedElement;
        "dx-icon-easyvbfilled": HTMLDxIconEasyvbfilledElement;
        "dx-icon-easyvboutlined": HTMLDxIconEasyvboutlinedElement;
        "dx-icon-edit": HTMLDxIconEditElement;
        "dx-icon-editthin": HTMLDxIconEditthinElement;
        "dx-icon-eingabe": HTMLDxIconEingabeElement;
        "dx-icon-einkaufenbold": HTMLDxIconEinkaufenboldElement;
        "dx-icon-einkaufenthin": HTMLDxIconEinkaufenthinElement;
        "dx-icon-einstellungen": HTMLDxIconEinstellungenElement;
        "dx-icon-energieportalfilled": HTMLDxIconEnergieportalfilledElement;
        "dx-icon-energieportaloutlined": HTMLDxIconEnergieportaloutlinedElement;
        "dx-icon-error": HTMLDxIconErrorElement;
        "dx-icon-errorthinoutlined": HTMLDxIconErrorthinoutlinedElement;
        "dx-icon-euro": HTMLDxIconEuroElement;
        "dx-icon-eventfilled": HTMLDxIconEventfilledElement;
        "dx-icon-eventoutlined": HTMLDxIconEventoutlinedElement;
        "dx-icon-facebook": HTMLDxIconFacebookElement;
        "dx-icon-facebookbaukastenfilled": HTMLDxIconFacebookbaukastenfilledElement;
        "dx-icon-facebookbaukastenoutlined": HTMLDxIconFacebookbaukastenoutlinedElement;
        "dx-icon-fastforward": HTMLDxIconFastforwardElement;
        "dx-icon-fastrewind": HTMLDxIconFastrewindElement;
        "dx-icon-file": HTMLDxIconFileElement;
        "dx-icon-fileaudio": HTMLDxIconFileaudioElement;
        "dx-icon-fileaudiothin": HTMLDxIconFileaudiothinElement;
        "dx-icon-filedoc": HTMLDxIconFiledocElement;
        "dx-icon-filedocthin": HTMLDxIconFiledocthinElement;
        "dx-icon-filejpg": HTMLDxIconFilejpgElement;
        "dx-icon-filepdf": HTMLDxIconFilepdfElement;
        "dx-icon-filepdfthin": HTMLDxIconFilepdfthinElement;
        "dx-icon-filepng": HTMLDxIconFilepngElement;
        "dx-icon-fileppt": HTMLDxIconFilepptElement;
        "dx-icon-filepptthin": HTMLDxIconFilepptthinElement;
        "dx-icon-filevideo": HTMLDxIconFilevideoElement;
        "dx-icon-filevideothin": HTMLDxIconFilevideothinElement;
        "dx-icon-filexls": HTMLDxIconFilexlsElement;
        "dx-icon-filter": HTMLDxIconFilterElement;
        "dx-icon-forward30": HTMLDxIconForward30Element;
        "dx-icon-fotokamera": HTMLDxIconFotokameraElement;
        "dx-icon-fragekreis": HTMLDxIconFragekreisElement;
        "dx-icon-fragekreisfill": HTMLDxIconFragekreisfillElement;
        "dx-icon-frontcam": HTMLDxIconFrontcamElement;
        "dx-icon-fullscreenstart": HTMLDxIconFullscreenstartElement;
        "dx-icon-fullscreenstop": HTMLDxIconFullscreenstopElement;
        "dx-icon-geldschein": HTMLDxIconGeldscheinElement;
        "dx-icon-gesundheitbold": HTMLDxIconGesundheitboldElement;
        "dx-icon-gesundheitthin": HTMLDxIconGesundheitthinElement;
        "dx-icon-glasbold": HTMLDxIconGlasboldElement;
        "dx-icon-glasthin": HTMLDxIconGlasthinElement;
        "dx-icon-goldbarrenbold": HTMLDxIconGoldbarrenboldElement;
        "dx-icon-goldbarrenthin": HTMLDxIconGoldbarrenthinElement;
        "dx-icon-googleplus": HTMLDxIconGoogleplusElement;
        "dx-icon-hamburgermenue": HTMLDxIconHamburgermenueElement;
        "dx-icon-handy": HTMLDxIconHandyElement;
        "dx-icon-hausratbold": HTMLDxIconHausratboldElement;
        "dx-icon-hausratthin": HTMLDxIconHausratthinElement;
        "dx-icon-hd": HTMLDxIconHdElement;
        "dx-icon-headphones": HTMLDxIconHeadphonesElement;
        "dx-icon-headset": HTMLDxIconHeadsetElement;
        "dx-icon-herzfill": HTMLDxIconHerzfillElement;
        "dx-icon-herzoutline": HTMLDxIconHerzoutlineElement;
        "dx-icon-herzplus": HTMLDxIconHerzplusElement;
        "dx-icon-home": HTMLDxIconHomeElement;
        "dx-icon-homepagekonfiguratorfilled": HTMLDxIconHomepagekonfiguratorfilledElement;
        "dx-icon-homepagekonfiguratoroutlined": HTMLDxIconHomepagekonfiguratoroutlinedElement;
        "dx-icon-homethin": HTMLDxIconHomethinElement;
        "dx-icon-iddonlinewbthekgfilled": HTMLDxIconIddonlinewbthekgfilledElement;
        "dx-icon-iddonlinewbthekwoutlined": HTMLDxIconIddonlinewbthekwoutlinedElement;
        "dx-icon-ihrefragenunsereantwortenmeineappfilled": HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement;
        "dx-icon-ihrefragenunsereantwortenmeineappoutlined": HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement;
        "dx-icon-ihrefragenunsereantwortenzuritfilled": HTMLDxIconIhrefragenunsereantwortenzuritfilledElement;
        "dx-icon-ihrefragenunsereantwortenzuritoutlined": HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement;
        "dx-icon-immobilienbold": HTMLDxIconImmobilienboldElement;
        "dx-icon-immobilienfinanzierungbold": HTMLDxIconImmobilienfinanzierungboldElement;
        "dx-icon-immobilienfinanzierungthin": HTMLDxIconImmobilienfinanzierungthinElement;
        "dx-icon-immobilienthin": HTMLDxIconImmobilienthinElement;
        "dx-icon-information": HTMLDxIconInformationElement;
        "dx-icon-instagram": HTMLDxIconInstagramElement;
        "dx-icon-investmentdialogfilled": HTMLDxIconInvestmentdialogfilledElement;
        "dx-icon-investmentdialogoutlined": HTMLDxIconInvestmentdialogoutlinedElement;
        "dx-icon-itweltfilled": HTMLDxIconItweltfilledElement;
        "dx-icon-itweltoutlined": HTMLDxIconItweltoutlinedElement;
        "dx-icon-kalender": HTMLDxIconKalenderElement;
        "dx-icon-karriereplanungfilled": HTMLDxIconKarriereplanungfilledElement;
        "dx-icon-karriereplanungoutlined": HTMLDxIconKarriereplanungoutlinedElement;
        "dx-icon-karriereseitefilled": HTMLDxIconKarriereseitefilledElement;
        "dx-icon-karriereseiteoutlined": HTMLDxIconKarriereseiteoutlinedElement;
        "dx-icon-kfztarif02filled": HTMLDxIconKfztarif02filledElement;
        "dx-icon-kfztarif02outlined": HTMLDxIconKfztarif02outlinedElement;
        "dx-icon-klemmbrett": HTMLDxIconKlemmbrettElement;
        "dx-icon-koffer": HTMLDxIconKofferElement;
        "dx-icon-kompass": HTMLDxIconKompassElement;
        "dx-icon-kontosaldobold": HTMLDxIconKontosaldoboldElement;
        "dx-icon-kontosaldothin": HTMLDxIconKontosaldothinElement;
        "dx-icon-laptop": HTMLDxIconLaptopElement;
        "dx-icon-lesezeichenfill": HTMLDxIconLesezeichenfillElement;
        "dx-icon-lesezeichenoutline": HTMLDxIconLesezeichenoutlineElement;
        "dx-icon-linkedin": HTMLDxIconLinkedinElement;
        "dx-icon-linkextern": HTMLDxIconLinkexternElement;
        "dx-icon-linksoderrechts": HTMLDxIconLinksoderrechtsElement;
        "dx-icon-logo": HTMLDxIconLogoElement;
        "dx-icon-lupe": HTMLDxIconLupeElement;
        "dx-icon-lupeminus": HTMLDxIconLupeminusElement;
        "dx-icon-lupeplus": HTMLDxIconLupeplusElement;
        "dx-icon-mail": HTMLDxIconMailElement;
        "dx-icon-maus": HTMLDxIconMausElement;
        "dx-icon-meineantraegefilled": HTMLDxIconMeineantraegefilledElement;
        "dx-icon-meineantraegeoutlined": HTMLDxIconMeineantraegeoutlinedElement;
        "dx-icon-meinedvagfilled": HTMLDxIconMeinedvagfilledElement;
        "dx-icon-meinedvagoutlined": HTMLDxIconMeinedvagoutlinedElement;
        "dx-icon-meinekundenfilled": HTMLDxIconMeinekundenfilledElement;
        "dx-icon-meinekundenoutlined": HTMLDxIconMeinekundenoutlinedElement;
        "dx-icon-meinenachrichten01filled": HTMLDxIconMeinenachrichten01filledElement;
        "dx-icon-meinenachrichteniconoutlined": HTMLDxIconMeinenachrichteniconoutlinedElement;
        "dx-icon-mensch": HTMLDxIconMenschElement;
        "dx-icon-mikrofon": HTMLDxIconMikrofonElement;
        "dx-icon-minuskreis": HTMLDxIconMinuskreisElement;
        "dx-icon-monitor": HTMLDxIconMonitorElement;
        "dx-icon-move": HTMLDxIconMoveElement;
        "dx-icon-movethin": HTMLDxIconMovethinElement;
        "dx-icon-movie": HTMLDxIconMovieElement;
        "dx-icon-muell": HTMLDxIconMuellElement;
        "dx-icon-myimmoplanetfilled": HTMLDxIconMyimmoplanetfilledElement;
        "dx-icon-myimmoplanetoutlined": HTMLDxIconMyimmoplanetoutlinedElement;
        "dx-icon-notstarted": HTMLDxIconNotstartedElement;
        "dx-icon-ordner": HTMLDxIconOrdnerElement;
        "dx-icon-ort": HTMLDxIconOrtElement;
        "dx-icon-ortfill": HTMLDxIconOrtfillElement;
        "dx-icon-passfilled": HTMLDxIconPassfilledElement;
        "dx-icon-passoutlined": HTMLDxIconPassoutlinedElement;
        "dx-icon-pause": HTMLDxIconPauseElement;
        "dx-icon-pausekreisfill": HTMLDxIconPausekreisfillElement;
        "dx-icon-pausekreisoutline": HTMLDxIconPausekreisoutlineElement;
        "dx-icon-pfeilhoch": HTMLDxIconPfeilhochElement;
        "dx-icon-pfeillinks": HTMLDxIconPfeillinksElement;
        "dx-icon-pfeilrechts": HTMLDxIconPfeilrechtsElement;
        "dx-icon-pfeilrunter": HTMLDxIconPfeilrunterElement;
        "dx-icon-phonelink": HTMLDxIconPhonelinkElement;
        "dx-icon-photovoltaikbold": HTMLDxIconPhotovoltaikboldElement;
        "dx-icon-photovoltaikthin": HTMLDxIconPhotovoltaikthinElement;
        "dx-icon-placeholder": HTMLDxIconPlaceholderElement;
        "dx-icon-play": HTMLDxIconPlayElement;
        "dx-icon-playkreis": HTMLDxIconPlaykreisElement;
        "dx-icon-playkreisfill": HTMLDxIconPlaykreisfillElement;
        "dx-icon-playkreisoutline": HTMLDxIconPlaykreisoutlineElement;
        "dx-icon-pluskreis": HTMLDxIconPluskreisElement;
        "dx-icon-privathaftpflichtbold": HTMLDxIconPrivathaftpflichtboldElement;
        "dx-icon-privathaftpflichtthin": HTMLDxIconPrivathaftpflichtthinElement;
        "dx-icon-privatkreditbold": HTMLDxIconPrivatkreditboldElement;
        "dx-icon-privatkreditthin": HTMLDxIconPrivatkreditthinElement;
        "dx-icon-projezieren": HTMLDxIconProjezierenElement;
        "dx-icon-rechtsschutzbold": HTMLDxIconRechtsschutzboldElement;
        "dx-icon-rechtsschutzthin": HTMLDxIconRechtsschutzthinElement;
        "dx-icon-reisenbold": HTMLDxIconReisenboldElement;
        "dx-icon-reisenthin": HTMLDxIconReisenthinElement;
        "dx-icon-reload": HTMLDxIconReloadElement;
        "dx-icon-repeat": HTMLDxIconRepeatElement;
        "dx-icon-repeat1": HTMLDxIconRepeat1Element;
        "dx-icon-repeatfill": HTMLDxIconRepeatfillElement;
        "dx-icon-replay": HTMLDxIconReplayElement;
        "dx-icon-replay10": HTMLDxIconReplay10Element;
        "dx-icon-replay30": HTMLDxIconReplay30Element;
        "dx-icon-replaykreisfill": HTMLDxIconReplaykreisfillElement;
        "dx-icon-requiredbold": HTMLDxIconRequiredboldElement;
        "dx-icon-requiredthin": HTMLDxIconRequiredthinElement;
        "dx-icon-rewind": HTMLDxIconRewindElement;
        "dx-icon-rewind10": HTMLDxIconRewind10Element;
        "dx-icon-schliessen": HTMLDxIconSchliessenElement;
        "dx-icon-schlossauf": HTMLDxIconSchlossaufElement;
        "dx-icon-schlossoffenthinoutlined": HTMLDxIconSchlossoffenthinoutlinedElement;
        "dx-icon-schlosszu": HTMLDxIconSchlosszuElement;
        "dx-icon-schlosszuthinoutlined": HTMLDxIconSchlosszuthinoutlinedElement;
        "dx-icon-schulungsreisenfilled": HTMLDxIconSchulungsreisenfilledElement;
        "dx-icon-schulungsreisenoutlined": HTMLDxIconSchulungsreisenoutlinedElement;
        "dx-icon-schutzengelbold": HTMLDxIconSchutzengelboldElement;
        "dx-icon-schutzengelthin": HTMLDxIconSchutzengelthinElement;
        "dx-icon-schutzschild": HTMLDxIconSchutzschildElement;
        "dx-icon-seitenanfang": HTMLDxIconSeitenanfangElement;
        "dx-icon-senden": HTMLDxIconSendenElement;
        "dx-icon-sendenerror": HTMLDxIconSendenerrorElement;
        "dx-icon-shuffle": HTMLDxIconShuffleElement;
        "dx-icon-shufflefill": HTMLDxIconShufflefillElement;
        "dx-icon-sidebarauf": HTMLDxIconSidebaraufElement;
        "dx-icon-sidebarerror": HTMLDxIconSidebarerrorElement;
        "dx-icon-sidebarzu": HTMLDxIconSidebarzuElement;
        "dx-icon-skiptonext": HTMLDxIconSkiptonextElement;
        "dx-icon-skiptoprevious": HTMLDxIconSkiptopreviousElement;
        "dx-icon-skype": HTMLDxIconSkypeElement;
        "dx-icon-slideshow": HTMLDxIconSlideshowElement;
        "dx-icon-sparenbold": HTMLDxIconSparenboldElement;
        "dx-icon-sparenthin": HTMLDxIconSparenthinElement;
        "dx-icon-sparkontenbold": HTMLDxIconSparkontenboldElement;
        "dx-icon-sparkontenthin": HTMLDxIconSparkontenthinElement;
        "dx-icon-spaten": HTMLDxIconSpatenElement;
        "dx-icon-speakersfill": HTMLDxIconSpeakersfillElement;
        "dx-icon-speakersoutline": HTMLDxIconSpeakersoutlineElement;
        "dx-icon-sprechblase": HTMLDxIconSprechblaseElement;
        "dx-icon-sprechblasen": HTMLDxIconSprechblasenElement;
        "dx-icon-startupappfilled": HTMLDxIconStartupappfilledElement;
        "dx-icon-startupappoutlined": HTMLDxIconStartupappoutlinedElement;
        "dx-icon-stateerror": HTMLDxIconStateerrorElement;
        "dx-icon-staterequired": HTMLDxIconStaterequiredElement;
        "dx-icon-statesuccess": HTMLDxIconStatesuccessElement;
        "dx-icon-sternhalb": HTMLDxIconSternhalbElement;
        "dx-icon-sternleer": HTMLDxIconSternleerElement;
        "dx-icon-sternvoll": HTMLDxIconSternvollElement;
        "dx-icon-stop": HTMLDxIconStopElement;
        "dx-icon-systemstatusfilled": HTMLDxIconSystemstatusfilledElement;
        "dx-icon-systemstatusoutlined": HTMLDxIconSystemstatusoutlinedElement;
        "dx-icon-tablet": HTMLDxIconTabletElement;
        "dx-icon-tastatur": HTMLDxIconTastaturElement;
        "dx-icon-teilen": HTMLDxIconTeilenElement;
        "dx-icon-telefon": HTMLDxIconTelefonElement;
        "dx-icon-thumbsupfill": HTMLDxIconThumbsupfillElement;
        "dx-icon-thumbsupoutline": HTMLDxIconThumbsupoutlineElement;
        "dx-icon-tv": HTMLDxIconTvElement;
        "dx-icon-tvconnected": HTMLDxIconTvconnectedElement;
        "dx-icon-twitter": HTMLDxIconTwitterElement;
        "dx-icon-ueberlaufmenue": HTMLDxIconUeberlaufmenueElement;
        "dx-icon-uhr": HTMLDxIconUhrElement;
        "dx-icon-unfallbold": HTMLDxIconUnfallboldElement;
        "dx-icon-unfallthin": HTMLDxIconUnfallthinElement;
        "dx-icon-unternehmenspraesentationfuerfirmenkundenfilled": HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement;
        "dx-icon-unternehmenspraesentationfuerfirmenkundenoutlined": HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement;
        "dx-icon-unternehmenspraesentationprivatkundenfilled": HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement;
        "dx-icon-unternehmenspraesentationprivatkundenoutlined": HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement;
        "dx-icon-upload": HTMLDxIconUploadElement;
        "dx-icon-vbnewsappfilled": HTMLDxIconVbnewsappfilledElement;
        "dx-icon-vbnewsappoutlined": HTMLDxIconVbnewsappoutlinedElement;
        "dx-icon-vbpostservicefilled": HTMLDxIconVbpostservicefilledElement;
        "dx-icon-vbpostserviceoutlined": HTMLDxIconVbpostserviceoutlinedElement;
        "dx-icon-vbshopfilled": HTMLDxIconVbshopfilledElement;
        "dx-icon-vbshopoutlined": HTMLDxIconVbshopoutlinedElement;
        "dx-icon-vbweltfilled": HTMLDxIconVbweltfilledElement;
        "dx-icon-vbweltoutlined": HTMLDxIconVbweltoutlinedElement;
        "dx-icon-veranstaltungsverwaltungfilled": HTMLDxIconVeranstaltungsverwaltungfilledElement;
        "dx-icon-veranstaltungsverwaltungoutlined": HTMLDxIconVeranstaltungsverwaltungoutlinedElement;
        "dx-icon-verguetungsrechnerfilled": HTMLDxIconVerguetungsrechnerfilledElement;
        "dx-icon-verguetungsrechneroutlined": HTMLDxIconVerguetungsrechneroutlinedElement;
        "dx-icon-verteilenhoriz": HTMLDxIconVerteilenhorizElement;
        "dx-icon-verteilenvertik": HTMLDxIconVerteilenvertikElement;
        "dx-icon-videoadd": HTMLDxIconVideoaddElement;
        "dx-icon-videoaddcheck": HTMLDxIconVideoaddcheckElement;
        "dx-icon-videocall": HTMLDxIconVideocallElement;
        "dx-icon-videocallmissed": HTMLDxIconVideocallmissedElement;
        "dx-icon-videocamera": HTMLDxIconVideocameraElement;
        "dx-icon-videocamoff": HTMLDxIconVideocamoffElement;
        "dx-icon-videochatfill": HTMLDxIconVideochatfillElement;
        "dx-icon-videochatoutline": HTMLDxIconVideochatoutlineElement;
        "dx-icon-videosettings": HTMLDxIconVideosettingsElement;
        "dx-icon-videothek": HTMLDxIconVideothekElement;
        "dx-icon-vollebreite": HTMLDxIconVollebreiteElement;
        "dx-icon-vorteilsrechnergeneralivitalityfilled": HTMLDxIconVorteilsrechnergeneralivitalityfilledElement;
        "dx-icon-vorteilsrechnergeneralivitalityoutlined": HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement;
        "dx-icon-vpdigitalfilled": HTMLDxIconVpdigitalfilledElement;
        "dx-icon-vpdigitaloutlined": HTMLDxIconVpdigitaloutlinedElement;
        "dx-icon-vspvertragsmanagementplusfilled": HTMLDxIconVspvertragsmanagementplusfilledElement;
        "dx-icon-vspvertragsmanagementplusoutlined": HTMLDxIconVspvertragsmanagementplusoutlinedElement;
        "dx-icon-vuvbold": HTMLDxIconVuvboldElement;
        "dx-icon-vuvthin": HTMLDxIconVuvthinElement;
        "dx-icon-weg": HTMLDxIconWegElement;
        "dx-icon-whatsapp": HTMLDxIconWhatsappElement;
        "dx-icon-wohngebaeudebold": HTMLDxIconWohngebaeudeboldElement;
        "dx-icon-wohngebaeudethin": HTMLDxIconWohngebaeudethinElement;
        "dx-icon-xing": HTMLDxIconXingElement;
        "dx-icon-youtube": HTMLDxIconYoutubeElement;
        "dx-icon-zeitraffer": HTMLDxIconZeitrafferElement;
        "dx-icon-zurueck": HTMLDxIconZurueckElement;
        "dx-info": HTMLDxInfoElement;
        "dx-input-label": HTMLDxInputLabelElement;
        "dx-internal-wizard-step": HTMLDxInternalWizardStepElement;
        "dx-legend": HTMLDxLegendElement;
        "dx-link": HTMLDxLinkElement;
        "dx-list": HTMLDxListElement;
        "dx-list-flyout": HTMLDxListFlyoutElement;
        "dx-list-item": HTMLDxListItemElement;
        "dx-logo": HTMLDxLogoElement;
        "dx-logo-bildmarke": HTMLDxLogoBildmarkeElement;
        "dx-logo-wortmarke": HTMLDxLogoWortmarkeElement;
        "dx-media-query-value": HTMLDxMediaQueryValueElement;
        "dx-modal": HTMLDxModalElement;
        "dx-multi-dropdown": HTMLDxMultiDropdownElement;
        "dx-notification-bar": HTMLDxNotificationBarElement;
        "dx-notification-indicator": HTMLDxNotificationIndicatorElement;
        "dx-notification-toast": HTMLDxNotificationToastElement;
        "dx-number-input": HTMLDxNumberInputElement;
        "dx-number-paginator": HTMLDxNumberPaginatorElement;
        "dx-number-paginator-page-button": HTMLDxNumberPaginatorPageButtonElement;
        "dx-number-picker": HTMLDxNumberPickerElement;
        "dx-overflow-menu": HTMLDxOverflowMenuElement;
        "dx-overflow-menu-item": HTMLDxOverflowMenuItemElement;
        "dx-overlay": HTMLDxOverlayElement;
        "dx-paginator": HTMLDxPaginatorElement;
        "dx-placeholder": HTMLDxPlaceholderElement;
        "dx-popup": HTMLDxPopupElement;
        "dx-process-header": HTMLDxProcessHeaderElement;
        "dx-pulse-icon": HTMLDxPulseIconElement;
        "dx-radio-button": HTMLDxRadioButtonElement;
        "dx-radio-button-group": HTMLDxRadioButtonGroupElement;
        "dx-representative-info": HTMLDxRepresentativeInfoElement;
        "dx-scrollable-shadow": HTMLDxScrollableShadowElement;
        "dx-sidebar": HTMLDxSidebarElement;
        "dx-sidebar-content": HTMLDxSidebarContentElement;
        "dx-simple-grow-box": HTMLDxSimpleGrowBoxElement;
        "dx-site-navigation": HTMLDxSiteNavigationElement;
        "dx-site-navigation-menu": HTMLDxSiteNavigationMenuElement;
        "dx-site-navigation-menu-item": HTMLDxSiteNavigationMenuItemElement;
        "dx-site-navigation-scope": HTMLDxSiteNavigationScopeElement;
        "dx-slide-show": HTMLDxSlideShowElement;
        "dx-slider": HTMLDxSliderElement;
        "dx-slideshow-slider": HTMLDxSlideshowSliderElement;
        "dx-sort": HTMLDxSortElement;
        "dx-sort-handle": HTMLDxSortHandleElement;
        "dx-sort-item": HTMLDxSortItemElement;
        "dx-spacer": HTMLDxSpacerElement;
        "dx-spinner": HTMLDxSpinnerElement;
        "dx-tab-bar": HTMLDxTabBarElement;
        "dx-tab-dropdown": HTMLDxTabDropdownElement;
        "dx-tab-page": HTMLDxTabPageElement;
        "dx-table": HTMLDxTableElement;
        "dx-table-cell": HTMLDxTableCellElement;
        "dx-table-footer": HTMLDxTableFooterElement;
        "dx-table-header": HTMLDxTableHeaderElement;
        "dx-table-header-item": HTMLDxTableHeaderItemElement;
        "dx-table-row": HTMLDxTableRowElement;
        "dx-tag": HTMLDxTagElement;
        "dx-text": HTMLDxTextElement;
        "dx-text-area": HTMLDxTextAreaElement;
        "dx-text-input": HTMLDxTextInputElement;
        "dx-text-list": HTMLDxTextListElement;
        "dx-toggle": HTMLDxToggleElement;
        "dx-user-avatar": HTMLDxUserAvatarElement;
        "dx-wizard": HTMLDxWizardElement;
        "dx-wizard-step": HTMLDxWizardStepElement;
        "dx-yes-no": HTMLDxYesNoElement;
    }
}
declare namespace LocalJSX {
    interface DsActionList {
    }
    interface DsActionListItem {
    }
    interface DsAlert {
        /**
          * Defines in which direction the buttons should be displayed.
          * @value column: The buttons will be displayed from left to right.
          * @value row: The buttons will be displayed from top to bottom.
          * @value auto: The direction is computed dependant on the label size of the buttons.
          * @example actions-direction-row
          * @example actions-direction-column
          * @example actions-direction-auto-s
          * @example actions-direction-auto-l
         */
        "actionsdirection"?: "column" | "row" | "auto";
        /**
          * Fires when the user interacts with one of the alert's buttons.
          * @exqmple button-click
         */
        "onButtonClick"?: (event: DsAlertCustomEvent<string>) => void;
        /**
          * Defines if the alert is visible or not.
          * @value true: Alert is visible.
          * @value false: Alert is not visible.
          * @example visible
         */
        "visible"?: boolean;
    }
    interface DsAlertButton {
        /**
          * Label color.
          * @value red: rot
          * @value gold: gold
         */
        "color"?: "gold" | "rot";
        /**
          * Indicates whether this button confirms the upper `<ds-alert>` element.
          * @value true: When typing 'Enter' this button is selected when no other element is in focus.
          * @value false: This button can only be interacted with by clicking or explicitly focusing the corresponding button in the upper `<ds-alert>` element.
         */
        "confirm"?: boolean;
        /**
          * Disables the interaction with the corresponding button of this element.
          * @value false: Button is interactable.
          * @value true: Button is disabled.
         */
        "disabled"?: boolean;
        /**
          * The label is displayed with a bold font.
          * @value true: Bold label font.
          * @value false: Default label font.
         */
        "highlight"?: boolean;
        /**
          * Button label.
          * @value string: Text
         */
        "label"?: string;
        /**
          * Unique identifier of this component within a `<ds-alert>` element.
          * @value string: Identifier text.
         */
        "value"?: string;
    }
    interface DsAnnouncementBar {
    }
    interface DsApp {
    }
    interface DsBlink {
        "auto"?: boolean;
        "color"?: string;
        "time"?: number;
    }
    interface DsBorderedFormGroup {
        /**
          * The direction the elements are aligned.
          * @value row: Elements are displayed in a row
          * @value column: Elements are displayed in a column
          * @example column
          * @example row
         */
        "direction"?: "row" | "column";
        /**
          * The way how the component computes the width of the child elements.
          * @value parent: Fits the width of the parent element.
          * @value max-content: The largest child element defines the width.
          * @example size-parent
         */
        "size"?: "parent" | "max-content";
    }
    interface DsBorderedFormItem {
    }
    interface DsButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
          * @example verschiedene-stile
         */
        "disabled"?: boolean;
        /**
          * Defines the size of othe button.
          * @value medium: Medium button size
          * @value small: Small button size, optimized for usage in forms
          * @example size
          * @example verschiedene-stile
         */
        "size"?: "medium" | "small";
        /**
          * Modifies the button width behavior
          * @value false: Button width is determined by the button content
          * @value true: Button width is stretched to match the width of the host element.
         */
        "stretch"?: boolean;
        /**
          * Defines the visual representation of the button.
          * @value primary: Flat colored button to indicate an important action.
          * @value secondary: Outlined transparent button for less important actions.
          * @example type
          * @example verschiedene-stile
         */
        "type"?: "primary" | "secondary";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
          * @example unfocusable
         */
        "unfocusable"?: boolean;
    }
    interface DsButtonBar {
        /**
          * Specifies the direction in which the buttons get arranged.
          * @value row: Buttons get layouted from left to right.
          * @value column: Buttons get layouted from top to bottom.
          * @value auto: Button get layouted automatically.
          * @example column
          * @example row
         */
        "direction"?: "row" | "column" | "auto";
    }
    interface DsCalendar {
        "errormessage"?: string;
        /**
          * Define the maximal allow date.
         */
        "max"?: string;
        /**
          * Define the minimal allowed date.
         */
        "min"?: string;
        /**
          * Defines how a date can be selected.
          * @value "day-month-year": The month calendar view is the main view to select a date in. You can click on days within a month to select them.
          * @value "month-year": The year calendar view is the main view to select a date in. You can click on months within a year to select them.
          * @value "day-month": The month calendar view is the main view to select a date in. You can click on days within a month to select them. The year information is irrelevant in this mode. Selected date's years are always 0.
         */
        "mode"?: DateSelectionMode;
        "onRangeSelected"?: (event: DsCalendarCustomEvent<DateRange>) => void;
        /**
          * Whether we can select a range of two dates or only one date.
          * @value true: Two separate dates can be selected. All dates between them are highlighted.
          * @value false: Only one date can be selected at a time.
         */
        "rangeenabled"?: boolean;
        "value"?: string;
    }
    interface DsCard {
        /**
          * The component throws a shadow. It is used as a contrast to light backgrounds.
          * @value false: Card without shadow
          * @value true: Card with shadow
          * @example shadow
         */
        "shadow"?: boolean;
    }
    interface DsCardCollapsable {
        /**
          * Title within the Header. Not used when the `type` property equals `custom`
          * @value string: Text
         */
        "label"?: string;
        /**
          * The current collapse state.
          * @value false: The card is collapsed.
          * @value true: The card is unfolded.
          * @example open
          * @example close
         */
        "open"?: boolean;
        /**
          * Sets the theme of the `<ds-card-header>` element within this component.
          * @value arrow: Renders an arrow in the header which visualizes the current collapse state.
          * @value checkbox: Render a checkbox in the header which is checked whether the card is collapsed or not.
          * @value custom: Enables the feature to define a custom card header in the `header` slot.
          * @example arrow
          * @example checkbox
          * @example custom
         */
        "type"?: "checkbox" | "arrow" | "custom";
    }
    interface DsCardContent {
    }
    interface DsCardHeader {
    }
    interface DsCardImageHeader {
        /**
          * Specifies a path to the image file.
          * @value string: The path to the image file.
         */
        "url"?: string;
    }
    interface DsCardTabBar {
        /**
          * This event will be delegated when the tab switches. It contains the `name` of the current `<ds-card-tab-page>`.
          * @example show-change
         */
        "onShowChange"?: (event: DsCardTabBarCustomEvent<string>) => void;
        /**
          * Displays the tab page which `name` property value corresponds to this property.
          * @value string: `name` of the `<ds-card-tabe-page>` to display.
          * @example complex
         */
        "show"?: string;
    }
    interface DsCardTabPage {
        /**
          * The text which is displayed in the tab.
          * @value string: The label
         */
        "label"?: string;
        /**
          * Unique identifier of this component within a `<ds-card-tab-bar>` element. The content will be visible when the corresponding `<ds-card-tab-bar>` element's `show` property value equals the `name`.  If no value is specified a random id will be generated.
          * @value string: Identifier
          * @example ohne-name
         */
        "name"?: string;
    }
    interface DsCenteredBoard {
        /**
          * Die maximale Anzahl an Spalten in die die einzelnen Reihen aufgespalten werden sollen.
          * @value number: Eine Zahl, die größer 0 sein muss.
         */
        "columns"?: number;
    }
    interface DsCenteredBoardItem {
    }
    interface DsChartSample {
        /**
          * The color of the corresponding chart segment.
          * @value string: The color code.
          * @important
         */
        "color"?: string;
        /**
          * Formatted representation of the value.
          * @value string: Formatted value.
         */
        "formattedValue"?: string;
        /**
          * Label of the data.
         */
        "label"?: string;
        /**
          * Triggers when value of the sample changes.
          * @value number: Delegates the new value.
         */
        "onValueChange"?: (event: DsChartSampleCustomEvent<number>) => void;
        /**
          * Numeric representation of the data value.
          * @value number: The numeric representation.
         */
        "value"?: number;
    }
    interface DsCheckbox {
        /**
          * State of the Checkbox.
          * @value false: Checkbox is not checked.
          * @value true: Checkbox is checked.
          * @example checked
         */
        "checked"?: boolean;
        /**
          * Disables the interaction with the checkbox.
          * @value false: Checkbox is interactable.
          * @value true: Checkbox is disabled.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Färbt den Rahmen der Checkbox rot ein.
          * @value true: roter Rahmen
          * @value false: goldener Rahmen
          * @example error
         */
        "error"?: boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the checkbox.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Text, Label which is displayed next to the checkbox. If there is no `label` set, only the checkbox is displayed.
          * @important 
          * @value string: name of the option e.g. `Ausdruck gewünscht`
          * @example label
         */
        "label"?: string;
        /**
          * Indicates that an error exist within the checkbox. Colors the border in red.
          * @example check-event
         */
        "onCheckedChange"?: (event: DsCheckboxCustomEvent<boolean>) => void;
        /**
          * The checkbox will be in read-only state. Depending on the `checked`-state an icon icon is rendered.
          * @value false: Default visualization of the checkbox
          * @value true: Icon-representation of the `checked`-state
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this checkbox as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required"?: boolean;
    }
    interface DsColumn {
        /**
          * Gibt an, welche Ausrichtung die Elemente haben sollen.
          * @value string: left
          * @value string: center
          * @value string: right
          * @value string: stretch
          * @example example
         */
        "align"?: "left" | "center" | "right" | "stretch";
    }
    interface DsDateInput {
        /**
          * Whether the input is interactable or not. The label and border are grey to indicate the disabled state.
          * @value false: Input is not disabled.
          * @value true: Input is disabled.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Displays the border of the input with a red color.
          * @value true: red border
          * @value false: default border
          * @example error
         */
        "error"?: boolean;
        /**
          * Text, which is displayed in a red popup at the bottom of the input field.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Text, which is displayed on the top of the input field.
          * @important 
          * @value string: label text
          * @example label
         */
        "label"?: string;
        /**
          * Define the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "max"?: string;
        /**
          * Define the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "min"?: string;
        /**
          * Defines how a date can be selected or edited.
          * @value "day-month-year": The user can edit three input fields: day (TT), month (MM) and year (JJJJ). The calendar shows all three views (month, year and decade) for selecting a date.
          * @value "month-year": The user can edit two input fields: month (MM) and year (JJJJ). The calendar shows two views (year and decade) for selecting a month.
          * @value "day-month": The user can edit two input fields: day(TT) and month (MM). The calendar shows two views (month and year) for selecting a date.
          * @example mode
         */
        "mode"?: DateSelectionMode;
        /**
          * Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component.
          * @example change-events
         */
        "onErrorFound"?: (event: DsDateInputCustomEvent<DateError>) => void;
        /**
          * Delegates the current value while the user is editing the input.
          * @example change-events
         */
        "onValueChange"?: (event: DsDateInputCustomEvent<string>) => void;
        /**
          * Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component.
          * @example change-events
         */
        "onValueComplete"?: (event: DsDateInputCustomEvent<string>) => void;
        /**
          * Whether the input is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this input as required.
          * @value false: Input is not required
          * @value true: Input is required
          * @example required
         */
        "required"?: boolean;
        /**
          * The current displayed date.
          * @important 
          * @value string: A date in following format: YYYY-MM-dd
          * @example value
         */
        "value"?: string;
    }
    interface DsDateRange {
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "min"?: string;
        /**
          * Defines how a date range can be selected or edited.
          * @value "day-month-year": The user can select a specific date range. The calendar shows all three views (month, year and decade) for selecting a date range.
          * @value "month-year": The user can select a month range. The calendar shows two views (year and decade) for selecting a month range.
          * @value "day-month": The user can select two possible dates within a year. The calendar shows two views (month and year) for selecting a date range.
         */
        "mode"?: DateSelectionMode;
        /**
          * The current displayed date range.
          * @important 
          * @value string: Two comma seperated dates in following format: YYYY-MM-dd (e.g.: 2021-01-01,2021-12-31)
          * @example value
         */
        "value"?: string;
    }
    interface DsDonutChart {
        /**
          * The distance between all segments.
          * @value number: The distance in pixels.
         */
        "offset"?: number;
        /**
          * Triggers when a segment is clicked. It delegates the index of the selected segment.
          * @value number: The index of the selected segment.
         */
        "onSegmentSelect"?: (event: DsDonutChartCustomEvent<number>) => void;
        /**
          * The radius of the donut.
          * @value Number:
         */
        "radius"?: number;
        /**
          * Specifies the scale factor of selected segments.
          * @value number: The scaling factor of the selected segment.
         */
        "scale"?: number;
        /**
          * Specifies the width of the donut's segments.
          * @value number: The width of a segment.
         */
        "segmentwidth"?: number;
        /**
          * The starting angle of the first segment.
          * @value number: An angle between 0 and 360. e.g.: First segment starts... - 0: from the top (12 o'clock) - 90: from the right (3 o'clock) - 180: from the bottom (6 o'clock) - 270: from the left (9 o'clock)
         */
        "startangle"?: number;
    }
    interface DsDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Whether it is possible to select an option which is not present in the current option list.
          * @value false: The user can only select an option in the list.
          * @value true: The user is able to set a value which is not present in the option list by editing a text field under the selection input field.
          * @example elseoption
         */
        "elseoption"?: boolean;
        /**
          * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
          * @value string: Button label
          * @example elseoption
         */
        "elseoptionbuttonlabel"?: string;
        /**
          * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
          * @value string: Text input label.
          * @example elseoption
         */
        "elseoptioninputlabel"?: string;
        /**
          * Determines if the else-option input field is visible to the user. This property automatically changes on user interaction or providing a value that doesn't match any dropdown options.
          * @value false: Else-option input field is not displayed.
          * @value true: Else-option input field is displayed.
          * @example elseoption-selected
         */
        "elseoptionselected"?: boolean;
        /**
          * Indicates that an error exist within the input field. Colors the border in red.
          * @value true: An error exists.
          * @value false: There is no error.
          * @example error
         */
        "error"?: boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example value
         */
        "label"?: string;
        /**
          * Delegates the current selection or text input (`elseoption`) while the user is still editing.
          * @example complex
         */
        "onValueChange"?: (event: DsDropdownCustomEvent<StringOrObject>) => void;
        /**
          * Delegates the final selection or text input (`elseoption`). The event is fired when the dropdown loses focus or pushing the 'Enter' key.
          * @example complex
         */
        "onValueComplete"?: (event: DsDropdownCustomEvent<StringOrObject>) => void;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder"?: string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition"?: "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required"?: boolean;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign"?: string;
        /**
          * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null. Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
          * @important 
          * @value string: The string value of the selected option.
          * @value object: The value of the selected option in case it's a complex type.
          * @value null: No option selected.
          * @example value
         */
        "value"?: StringOrObject;
    }
    interface DsDropdownOption {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
         */
        "icon"?: string;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
         */
        "label"?: string;
        /**
          * Text which is displayed below the label.
          * @value string: Text (e.g. description, information)
         */
        "secondarylabel"?: string;
        /**
          * Text which is displayed below the sublabel.
          * @value string: Text (e.g. description, information)
         */
        "tertiarylabel"?: string;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example value
         */
        "value"?: StringOrObject1;
    }
    interface DsFmErgebnisuebersicht {
        /**
          * Dislpayed in the center of the chart.
          * @value number: e.g: contribution rate
          * @example example
         */
        "donutcenterlabel"?: string;
        /**
          * This label is located above the main contribution rate.
          * @value string: e.g: Jährlich
          * @example example
         */
        "donutlabel"?: string;
        /**
          * This label is located below the center label.
          * @value string: e.g: Jährlich
          * @example example
         */
        "donutsublabel"?: string;
        /**
          * Indicates whether the donut chart will be displayed or not.
          * @value true: The donut chart is displayed at the top of the component
          * @value false: The donut chart is not displayed.
          * @example donut-visible
         */
        "donutvisible"?: boolean;
        /**
          * Displays the name of the first column.
          * @value string: e.g: Aktuell
          * @example example
         */
        "firstcolumn"?: string;
        /**
          * Contains the information text for the first column. Automatically adds an `<ds-info>` to the column to display the information text.
          * @value string: A short description
          * @example example
         */
        "firstcolumninfo"?: string;
        /**
          * Headline for the first contribution rate. Located below the chart.
          * @value string: e.g:  Gesamtbeitrag Ø Monat
          * @example example
         */
        "firstcontributionlabel"?: string;
        /**
          * Displays the first contribution rate summary. Located below the chart.
          * @value string: 770€
          * @example example
         */
        "firstcontributionsublabel"?: string;
        /**
          * Displays the name of the second column.
          * @value string: e.g: Vollschutz
          * @example example
         */
        "secondcolumn"?: string;
        /**
          * Contains the information text for the second column. Automatically adds an `<ds-info>` to the column to display the information text.
          * @value string: A short description
          * @example example
         */
        "secondcolumninfo"?: string;
        /**
          * Headline for the second contribution rate. Located below the chart. This label is optional.
          * @value string: e.g: Gesamtbeitrag / Jahr
          * @example example
         */
        "secondcontributionlabel"?: string;
        /**
          * Displays the second contribution rate summary. Located below the chart.
          * @value string: e.g 9.240€
          * @example example
         */
        "secondcontributionsublabel"?: string;
    }
    interface DsFmErgebnisuebersichtItem {
        /**
          * Information text describing the first column. If set an info-button will be displayed next to the column label.
          * @value string: A short text describing this column.
         */
        "firstcolumninfo"?: string;
        /**
          * The value visible within the first column.
          * @value number: an amount.
         */
        "firstcolumnvalue"?: number;
        /**
          * Displays the label within the chart and the table.
          * @value string: e.g: Hausrat
         */
        "label"?: string;
        /**
          * Information text describing the second column. If set an info-button will be displayed next to the column label.
          * @value string:  A short text describing this column.
         */
        "secondcolumninfo"?: string;
        /**
          * The value shown in the second column. This value is optional. If no value is entered "unbekannt" will be displayed.
          * @value number: an amount.
         */
        "secondcolumnvalue"?: number;
        /**
          * Additional information below the label. Not visible within the chart.
          * @value string: e.g Anwartschaft.
         */
        "sublabel"?: string;
    }
    interface DsFmErgebnisuebersichtTable {
        /**
          * Label, displayed within the chart and the table.
          * @value string: e.g a product name
         */
        "label"?: string;
    }
    interface DsFooter {
        /**
          * Company informations (e.g: © 2019 Deutsche Vermögensberatung)
          * @value string: the information
          * @example company-info
         */
        "companyinfo"?: string;
        /**
          * This event is fired when the user clicks on an information button. The event holds the information about which button is clicked.
          * @example info-button-event
         */
        "onInfoButtonClicked"?: (event: DsFooterCustomEvent<string>) => void;
        /**
          * Defines the visibility of "Impressum".
          * @value true: shows "Impressum".
          * @value false: hides "Impressum".
          * @example show-imprint
         */
        "showimprint"?: boolean;
        /**
          * Defines the visibility of "Nutzungsbedingungen".
          * @value true: shows "Nutzungsbedinungen".
          * @value false: hides "Nutzungsbedinungen".
          * @example show-terms-of-use
         */
        "showtermsofuse"?: boolean;
    }
    interface DsFormLayout {
        /**
          * Defines the size layout of the shown elements.
          * @value s: Small elements in a three column layout.
          * @value l: Medium-sized elements in a two column layout.
          * @value xl: A large element in a single column layout.
          * @example size-s
          * @example size-l
          * @example size-xl
         */
        "size"?: GridSize;
    }
    interface DsFullscreenSpinner {
    }
    interface DsFunctionIconButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable"?: boolean;
    }
    interface DsGrid {
        /**
          * Art des Grids (Grad-Basis) die für dieses Grid verwendet wird.
          * @value page: Standard-Seiten-Grid
          * @example page-1
          * @example page-2
         */
        "base"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Laptop-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "l"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Tablet-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "m"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Smartphone-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "s"?: string;
        /**
          * Grid-Layout im Grid-Syntax (siehe oben) für Desktop-Auflösungen.  Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
          * @value string: Layout im Grid-Syntax
          * @important
         */
        "xl"?: string;
    }
    interface DsGroupedTextInput {
        /**
          * Input is no longer operable. Label and frame are gray.
          * @value true: Input is disabled
          * @value false: Input ist not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Colors the frame of the input field red.
          * @value true: Red outline
          * @value false: Gray outline
          * @example error
         */
        "error"?: boolean;
        /**
          * Text displayed below the input field in a red dialog.
          * @value string: Errormessage
          * @example error
         */
        "errormessage"?: string;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Define your mask using :  § Defines a character like a-zA-Z  \# Defines a number like 0-9  a-zA-Z0-9 in your pattern will render these characters as placeholders.  any non-word character will be used as 'delemiter'.  Example: `DE## #### #### #### #### ####` (German IBAN)
          * @value string: Pattern
          * @example german-iban
          * @example common-iban
         */
        "mask"?: string;
        /**
          * Change of the entered value during the user's input.
          * @example change-events
         */
        "onValueChange"?: (event: DsGroupedTextInputCustomEvent<string>) => void;
        /**
          * Confirmation of the entered value by the user. Event is triggered by Pressing the Enter key or by leaving the input field.
          * @example change-events
         */
        "onValueComplete"?: (event: DsGroupedTextInputCustomEvent<string>) => void;
        /**
          * Input field is in readonly mode. The value of this input is displaey in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
         */
        "readonly"?: boolean;
        /**
          * Marks this form field as mandatory
          * @value false: Required form field (default)
          * @value true: Reguired form field
          * @example required
         */
        "required"?: boolean;
        /**
          * @important 
          * @value string: value of this input.
          * @example value
         */
        "value"?: string;
    }
    interface DsGrowBox {
        /**
          * Gibt an, ob nach dem Initialisieren der Box bereits animiert werden soll.
          * @value true: Sofern das `open`-Attribute den Wert `true` hat, animiert die Box auf seine berechnete Höhe.
          * @value false: Beim Initialisieren der Box wird keine Animation stattfinden.
          * @example animate-on-init
         */
        "animateoninit"?: boolean;
        /**
          * Wirft Ergeignis, wenn sich die Sichtbarkeit des Contents ändert. Die Event-Payload (`event.detail`) enthält einen boolean, ob der Content sichtbar ist.
         */
        "onContentVisibilityChange"?: (event: DsGrowBoxCustomEvent<boolean>) => void;
        /**
          * Event kennzeichnet den Abschluss einer Transition. Die Event-Payload (`event.detail`) enthält Status-Informationen zur Growbox.
         */
        "onGrowStart"?: (event: DsGrowBoxCustomEvent<GrowStartEvent>) => void;
        /**
          * Gibt an, ob die Box offen oder geschlossen sein soll. Wenn dieser Wert geändert wird, animiert die Box automatisch auf die entsprechende Höhe.
          * @value true: Die Box animiert seine Höhe auf die Höhe seiner Kind-Elemente.
          * @value false: Die Box animiert seine Höhe auf den Wert 0.
          * @example open
         */
        "open"?: boolean;
        /**
          * Gibt an, ob die Kind-Elemente mitgeschoben werden, wenn sich die Box öffnet oder schließt.
          * @value true: Die Kind-Elemente werden nach oben bzw. unten geschoben, wenn sich der `open`-State der Box verändert.
          * @value false: Die Kind-Elemente bleiben immer an Ort und Stelle.
          * @example slide-content
         */
        "slidecontent"?: boolean;
    }
    interface DsHeader {
        /**
          * Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo).
          * @value default: Deutsche Vermögensberatung (Standardwert)
          * @value allfinanz: Deutsche Vermögensberatung Allfinanz
          * @example header-allfinanz
         */
        "brand"?: "default" | "allfinanz";
        /**
          * Whether the header is used within a fullscreen application or not.
          * @value true: The header content takes the full application width into consideration.
          * @value false: The header content has a defined maximal width of 1200 pixels.
          * @example fullscreen
         */
        "fullscreen"?: boolean;
    }
    interface DsHeaderAction {
        /**
          * Highlights this entry
          * @value true: Entry highlighted
          * @value false: Entry not highlighted
         */
        "highlight"?: boolean;
        /**
          * The label for this entry.
          * @value string: E.g: settings
         */
        "label"?: string;
        /**
          * Fired when user interacts with this item.  Event contains the label attribute of the action.
         */
        "onInteraction"?: (event: DsHeaderActionCustomEvent<string>) => void;
    }
    interface DsHeaderActionList {
        /**
          * Label for the menu.
          * @value string: E.g: Settings
         */
        "label"?: string;
        /**
          * Opens and closes the menu.
          * @value true: Menu is open
          * @value false: Menu is closed
         */
        "open"?: boolean;
    }
    interface DsHeaderCustomer {
        /**
          * Customer name
          * @value string: first name and last name
         */
        "name"?: string;
        /**
          * The type of the customer e.g: Kunde
          * @value string: The type of the customer
         */
        "typelabel"?: string;
    }
    interface DsHeaderUser {
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
         */
        "imageurl"?: string;
        /**
          * Name des Benutzers.
          * @value string: Vor- und Nachname
         */
        "name"?: string;
        /**
          * Event wird gefeuert, wenn der Nutzer sich abmelden möchte.
         */
        "onSignOut"?: (event: DsHeaderUserCustomEvent<void>) => void;
        /**
          * Fired when the user interacts with the Name of the current user, within the avatar-menu.
         */
        "onUsernameInteraction"?: (event: DsHeaderUserCustomEvent<void>) => void;
        /**
          * Determines whether the user name within the user menu is interactable.
          * @value true: The user name is interactable. The `usernameInteraction` event is thrown on interaction.
          * @value false: The user name is not interactable.
         */
        "usernameinteractable"?: boolean;
    }
    interface DsHeroImage {
        /**
          * Url for the picture that should be displayed.
          * @value string: Image-url
          * @example example
         */
        "url"?: string;
    }
    interface DsHr {
    }
    interface DsIcon {
        /**
          * Overrides the color of an icon. By default the `gold` color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example alle-icons
         */
        "icon"?: string;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<ds-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example groessen
          * @example icon-in-kombination-mit-button
         */
        "size"?: number;
    }
    interface DsIconAchtung {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAchtungcircle {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAddonclearbutton {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAktivitaeten {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAktualisieren {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAnleger {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconArbeitsplatz {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconArbeitsweg {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAuge {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAugedurchgestrichen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAusgehen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAusweis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconAusweischeck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconBank {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconBearbeiten {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconBeratungbeenden {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconBueroklammer {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconButton {
        /**
          * Defines the alignment of elements within the button.
          * @value row: Content elements are layouted from left to right.
          * @value column: Content elments are layouted from top to bottom.
          * @example align
         */
        "align"?: "row" | "column";
        /**
          * Sets the background color.
          * @value hellgrau-4: Button uses a light grey background (default value).
          * @value weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background.
          * @example backgroundcolor
         */
        "backgroundcolor"?: "weiss" | "hellgrau-4";
        /**
          * Sets the color of the button.
          * @value gold: Gold color (default value)
          * @value rot: Special case for destructive actions
          * @example color
         */
        "color"?: "gold" | "rot";
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Defines the size of othe button.
          * @value medium: Medium button size
          * @value small: Small button size, optimized for usage in forms
          * @example size
         */
        "size"?: "medium" | "small";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable"?: boolean;
    }
    interface DsIconCheck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconCollapseclose {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconCollapseopen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconDislike {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconDokumenteupload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconDownload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconDropdown {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconEinkaufen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconEinstellungen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconEurozeichen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFaq {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFavoritfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFavoritoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFilter {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFormulare {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFormulareinitial {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFotogalerie {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconFotogalerierahmen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGartenarbeit {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGeld {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGesundheit {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGesundheit2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGlas {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGlas2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconGlocke {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHamburgermenue {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHauptdokument {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHausarbeit {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHausrat {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHausratreise {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconHome {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconInfo {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconInvestment {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon10 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon100 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon105 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon110 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon115 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon120 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon125 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon15 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon20 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon25 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon30 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon35 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon40 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon45 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon5 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon50 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon55 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon60 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon65 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon70 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon75 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon80 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon85 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon90 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconJubilaeumicon95 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconKalender {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconKamera {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconKameravideo {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconKfz {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconLike {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconLiquiditaet {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconListenpfeil {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconLoeschen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconLupevergroessern {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconLupeverkleinern {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconMail {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconMensch {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconMinus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconMoremenue {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconNeu {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconNeukreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconOrdner {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPfeilnaechsteseingabefeld {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPfeilnaechstespflichtfeld {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPfeilvorherigeseingabefeld {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPfeilvorherigespflichtfeld {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPrivathaftpflicht {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconPrivathaftpflicht2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconProzent {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconRechtschutz {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconRechtschutz2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconReisen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconReparatur {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconScheine {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSchliessendialog {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSchliesseninput {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSchliessenkreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSchlossgesperrt {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSchlossoffen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenanzeigeganzeseite {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenanzeigevollebreite {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenleisteoffen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenleisteoffenfehlermeldung {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenleistezu {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSeitenleistezufehlermeldung {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconServices {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSortieren {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSortieren2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSortierenabsteigend {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSortierenaufsteigend {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSparen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSport {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconStrassenverkehr {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSuccess {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconSuchen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconTelefon {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUebermitteln {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUebermittelnfehlgeschlagen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUndo {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUnfall {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUnfall2 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUnterschreiben {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconUpload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconVersicherung {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconWohngebaeude {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconZusatzdokument {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsIconZusatzfotodokument {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DsInfo {
        /**
          * Hide the Infobutton
          * @value true: Infobutton hidden
          * @value false: Infobutton visible
          * @example hidebutton
         */
        "hidebutton"?: boolean;
        /**
          * Manually controls the visiblity of the popup that contains the explaination text.
          * @value false: Popup is not visible.
          * @value true: Popup is visible.
          * @example popupvisible
         */
        "popupvisible"?: boolean;
        /**
          * Defines which width the info element takes
          * @value string: max-width
          * @value string: content
          * @important
         */
        "size"?: "max-width" | "content";
    }
    interface DsInputLabel {
        /**
          * Aligns the label to the right. USed for ds-date-input
         */
        "alignRight"?: boolean;
        /**
          * If the label should be in an disabled state.
         */
        "disabled"?: boolean;
        /**
          * Defines if the sync icon should be displayed.
         */
        "kisynced"?: boolean;
        /**
          * The text that will be showed on top of a input.
         */
        "label"?: string;
    }
    interface DsLink {
        /**
          * Specifies where to open the linked document. This is delegated to the underlying `<a>` element. For more information: https://www.w3schools.com/tags/att_a_target.asp
          * @value string: value delegated to target element
         */
        "target"?: "_blank" | "_self" | "_parent" | "_top" | string;
        /**
          * The URL of the page the link goes to. If undefined the component serves as a button.
          * @value string: The URL or anchor the link refers to.
         */
        "url"?: string;
    }
    interface DsLogo {
        /**
          * Provides the logo in different styles.
          * @value bildmarke: DVAG-Logo without word mark.
          * @value wortmarke: DVAG-Logo with word-mark.
          * @value wortmarke-allfinanz: DVAG-Logo with `Allfinanz` word mark.
          * @example logo
         */
        "type"?: string;
    }
    interface DsLogoBildmarke {
    }
    interface DsLogoWortmarke {
    }
    interface DsLogoWortmarkeAllfinanz {
    }
    interface DsModal {
        /**
          * Defines whether a click outside the modal will close the modal or not.
          * @value true: A click on the background causes the modal to close.
          * @value false: A click on the background does nothing.
          * @example allow-background-close
         */
        "allowbackgroundclose"?: boolean;
        /**
          * Hintergrundfarbe für den Content-Bereich
          * @value weiss: weißer Hintergrund
          * @value grau: gräulicher Hintergrund
          * @example contentcolor
         */
        "contentcolor"?: "weiss" | "grau";
        /**
          * Titel, der oben im Modal angezeigt wird.
          * @value string: der Titel
         */
        "label"?: string;
        /**
          * Wird gefeuert, wenn der Dialog vom Nutzer geschlossen wird. (Schließen-Button/Hintergrund klicken)
         */
        "onModalClosed"?: (event: DsModalCustomEvent<void>) => void;
        /**
          * Wird gefeuert, wenn der Dialog geöffnet wird.
         */
        "onModalOpened"?: (event: DsModalCustomEvent<void>) => void;
        /**
          * Die Modale-Dialog-Komponente kann entweder im Vollbild angezeigt werden, oder der Dialog passt sich der Größe des Inhalts an.
          * @value fullscreen: Vollbild
          * @value content: Angepasst an die Größe des Inhalts
         */
        "size"?: "fullscreen" | "content";
        /**
          * Steuert die Sichtbarkeit des Modals.
          * @value true: Modal geöffnet
          * @value false: Modal geschlossen
         */
        "visible"?: boolean;
    }
    interface DsNavigatedContent {
    }
    interface DsNavigatedContentMenu {
        /**
          * Description of the path of active menus.
          * @value string: Path e.g. `"Toplevel"` or `"Toplevel/sublevel"`
         */
        "active"?: string;
        /**
          * Is triggered if an user interacts with the menu entries. The event detail contains following data structure: `{path: 'toplevel/sublevel', segments: ['toplevel', 'sublevel']}`
         */
        "onNavigate"?: (event: DsNavigatedContentMenuCustomEvent<NavigatedRoute>) => void;
    }
    interface DsNavigatedContentMenuItem {
        /**
          * Attaches an error-marker.
          * @value true: Error-marker displayed.
          * @value false: No error-marker displayed.
         */
        "error"?: boolean;
        /**
          * Visible label of this entry.
          * @value string: description.
         */
        "label"?: string;
        /**
          * Attaches a success-marker.
          * @value true: Marker displayed.
          * @value false: No Marker displayed.
         */
        "success"?: boolean;
        /**
          * Internal representation of this item which is used for the active path of this Entry.
          * @value string: Internal representation
         */
        "value"?: string;
        /**
          * Attaches an warn-marker.
          * @value true: Marker displayed.
          * @value false: No Marker displayed.
         */
        "warning"?: boolean;
    }
    interface DsNotificationToast {
        /**
          * Specifies the time in seconds the notification is visible before it's closed automatically.
          * @value number: A time in seconds. Any number below zero is considered as infinite.
          * @value undefined The notification stays visible until it's closed by clicking on the close button on the top right corner.
          * @example close-after
         */
        "closeafter"?: number;
        /**
          * The icon which is rendered at the left side of the notification.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * Fires when the notification closes automatically or by clicking on the close button.
          * @example close-notification
         */
        "onCloseNotification"?: (event: DsNotificationToastCustomEvent<void>) => void;
        /**
          * Text under the content. (e.g. for displaying error codes)
          * @value string: Displayed text under the content.
          * @example sub-content
         */
        "subcontent"?: string;
        /**
          * The title of the notification.
          * @value string: The title.
          * @example default
         */
        "titlestring"?: string;
        /**
          * Specifies the visibility. If the notification closes automatically or by clicking on the close button this attribute will be set to false.
          * @value true: Toast will be displayed under the header.
          * @value false: Toast is invisible.
          * @example default
         */
        "visible"?: boolean;
    }
    interface DsNumberInput {
        /**
          * Input is not interactable. Label and border are grey.
          * @value true: Input is disabled.
          * @value false: Input is not disabled.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Colors the border of the element red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error"?: boolean;
        /**
          * Text under the input field, that is shown in a red dialog.
          * @value string: Errormessage.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Text on top of the input field.
          * @important 
          * @value string: description e.g `Vorname`
          * @example value
         */
        "label"?: string;
        /**
          * Determines the amount of pre-decimal numbers. The element prevents all inputs higher than this value.
          * @value number: Maximum amount of pre-decimal numbers.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * Determines the maximum value. The maximum value is **within** the possible input.
          * @value number: The maximum value the input field can have.
         */
        "max"?: number;
        /**
          * Determines the minimal value. The minimal value is **within** the possible input.
          * @value number: The minimal value the input field can have.
         */
        "min"?: number;
        /**
          * Changes of the input value during the input of the user.
          * @example change-events
         */
        "onValueChange"?: (event: DsNumberInputCustomEvent<number>) => void;
        /**
          * Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field.
          * @example change-events
         */
        "onValueComplete"?: (event: DsNumberInputCustomEvent<number>) => void;
        /**
          * Placeholder that is shown, when the input is empty.
          * @value string: Placeholder.
          * @example custom
         */
        "placeholder"?: string;
        /**
          * Determines the amount of decimal numbers.
          * @value number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)
          * @example custom
         */
        "precision"?: number;
        /**
          * Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision` `placeholder` or `uniticon`
          * @value currency-euro: Euro
          * @value percent: percent value
          * @example profile
         */
        "profile"?: "currency-euro" | "percent";
        /**
          * Input is in read only mode. The content of the input is displayed in a simple way. The input is not interactable.
          * @value false: Formfield.
          * @value true: Text of the value.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks the formfield as mandatory.
          * @value false: Not mandatory (default).
          * @value true: Mandatory.
          * @example required
         */
        "required"?: boolean;
        /**
          * Controls the visualization of the pre-deciaml thousandseparator.
          * @value true: Usses thousandseparator (default).
          * @value false: No grouping.
          * @example thousandseparator
         */
        "thousandseparator"?: boolean;
        /**
          * Sets the icon for the unit.
          * @value string: Name of the icon.
          * @example custom
         */
        "uniticon"?: string;
        /**
          * Value of the input field.
          * @important 
          * @value string: Value of the input.
          * @example value
         */
        "value"?: number;
    }
    interface DsPage {
    }
    interface DsPaginator {
        /**
          * Die Anzahl an Seiten, die angezeigt werden sollen.
          * @value number: Der Wert der letzte Seite.
          * @example count
         */
        "count"?: number;
        /**
          * Die Seite, die beim Initialisieren ausgewählt sein soll.
          * @value number: Die initiale Seite. Dieser Wert ändert sich während der Laufzeit abhängig von der aktuell ausgewählten Seite.
          * @example current
         */
        "current"?: number;
        /**
          * Event wird gefeuert, wenn die Seite, durch Klicken der Pfeile oder der Seitenzahlen, geändert wird. Der delegierte Wert, reflektiert das `current`-Attribut.
         */
        "onPageChanged"?: (event: DsPaginatorCustomEvent<number>) => void;
        /**
          * Gibt an wie viele Seiten links und rechts von der aktuellen Seite angezeigt werden sollen.
          * @value number: Die Anzahl an Seiten links und rechts der aktuellen Seite.
          * @example range
         */
        "range"?: number;
    }
    interface DsPlaceholder {
        /**
          * Zeigt eine Box an.
          * @value boolean: Box anzeigen
          * @example box
         */
        "box"?: boolean;
        /**
          * Zeigt eine Card an.
          * @value boolean: Card anzeigen
          * @example card
         */
        "card"?: boolean;
    }
    interface DsRadioButton {
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example modes
         */
        "disabled"?: boolean;
        /**
          * Sets the error state on the group.
          * @value true: An error exists.
          * @value false: No error exists.
         */
        "error"?: boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @important
         */
        "errormessage"?: string;
        /**
          * Text, which is displayed next to the radio button.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Identifier of this option. When selected this value overwrites the `<ds-radio-button-group>`'s value.
          * @value string: The identifier of this option.
          * @example value
         */
        "value"?: string;
    }
    interface DsRadioButtonGroup {
        /**
          * Disables the ability to interact with this component. Every option inside will also be set to `disabled`.
          * @value false: User can select an option.
          * @value true: User cannot select an option.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Sets the error state on the group.
          * @value true: An error exists.
          * @value false: No error exists.
          * @example error
         */
        "error"?: boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Delegates the current selected `<ds-radio-button>` element's value. This event will not trigger when setting the `value` in JavaScript.
          * @example read-value
         */
        "onValueChange"?: (event: DsRadioButtonGroupCustomEvent<string>) => void;
        /**
          * Defines if the group is in a read-only state. The label of the current selected radio button will be displayed.
          * @value false: The component is displayed normally.
          * @value true: The current selected option is displayed as text. If no option is selected no text will be displayed.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Defines if the radio button group is a required form element.
          * @value false: It is not required to select an option.
          * @value true: To fulfill the requirement one option has to be selected.
          * @example required
         */
        "required"?: boolean;
        /**
          * This property mirrors the current selected option. If set, an inner radio button with the same `value` has to exist.
          * @value string: The value of an inner radio button.
          * @example value
          * @example read-value
          * @example write-value
         */
        "value"?: string;
    }
    interface DsRequiredHint {
        "fulfilled"?: boolean;
        "required"?: boolean;
    }
    interface DsScrollContainer {
        "horizontalscrollbarposition"?: "top" | "bottom";
        "minthumbsize"?: number;
        "onScrollHorizontalActive"?: (event: DsScrollContainerCustomEvent<boolean>) => void;
        "onScrollVerticalActive"?: (event: DsScrollContainerCustomEvent<boolean>) => void;
        "scrollbarborderradius"?: number;
        "scrollbarcolorfactor"?: number;
        "scrollbarmargin"?: number;
        "scrollbaroffset"?: number;
        "scrollbaropacity"?: number;
        "scrollbarspace"?: number;
        "scrollbarwidth"?: number;
        "thumbcolor"?: string;
        "thumbmargin"?: number;
        "thumbopacity"?: number;
        "thumbwidth"?: number;
        "verticalscrollbarposition"?: "left" | "right";
    }
    interface DsSearch {
        /**
          * Component will call the browsers `scrollIntoView()` method on the form component after each search request. So the user can easily see the popup to choose from.
          * @value true: Component will scroll popup list into view.
          * @value false: Component won't touch scrolling at all.
          * @example autoscrollintoview
         */
        "autoscrollintoview"?: boolean;
        /**
          * Specifies the text that will be shown when there are no search results.
          * @value string: Text which will be displayed.
          * @example no-results-text
         */
        "noresultstext"?: string;
        /**
          * While the user is typing, this event is triggered and returns a controller in the event payload (`event.detail`). This controller can be used to send input field values for autocompletion. The user entered value can be determined using `event.detail.value`.  The generated search suggestions are passed as an array to the `event.detail.provideValues()` method. A search suggestion is an object with the properties:  - `label`: Primary search suggestion text, which will be transferred to the input field when it is accepted - `prelabel`: Optional text above the label that describes the search suggestion in more detail. - `sublabel`: Optional text under the label that describes the search suggestion in more detail - `category`: Optional categorization - `data`: Optional field for any data.  A search suggestion object can contain further properties, which can be evaluated with the `searchSelect` event.
          * @example example
         */
        "onSearch"?: (event: DsSearchCustomEvent<SearchAutoCompleteHandler>) => void;
        /**
          * Fired when the user selects a search suggestion. As event payload (`event.detail`) the object is supplied, which created the search suggestion.
          * @example example
         */
        "onSelectSearch"?: (event: DsSearchCustomEvent<any>) => void;
        /**
          * Fired when the user changes the search term.
         */
        "onValueChange"?: (event: DsSearchCustomEvent<string>) => void;
        /**
          * Confirmation of the entered value by the user. Event is triggered by pressing the Enter key or by leaving the input field.
         */
        "onValueComplete"?: (event: DsSearchCustomEvent<string>) => void;
        /**
          * Specifies the placeholder text of this component.
          * @value string: Text used as the placeholder.
         */
        "placeholder"?: string;
        /**
          * Specifies the search term.
          * @value string: Search term
         */
        "value"?: string;
        /**
          * Specifies how many entries are visible when the popup is open.
          * @value number: a number like 2.5 or 4.5
          * @example example
         */
        "visibleentries"?: number;
    }
    interface DsSlider {
        /**
          * Text on top of the slider, that displays the current value. A dollarsign followed by a number represents the value of the slider. The amount of numbers determines the amount of decimal numbers.
          * @value string: Formatting of the slider value, e.g. `$1 %` or `$2 €`
          * @example formattedvalue
         */
        "formattedvalue"?: string;
        /**
          * Text under the slider.
          * @important 
          * @value string: Text, e.g. `Zinsatz`
          * @example label
         */
        "label"?: string;
        /**
          * Maximum value of the range, the slider can have.
          * @value number: Maximum value of the slider.
          * @example min-max-value
         */
        "max"?: number;
        /**
          * Minimal value of the range, the slider can have.
          * @value number: Minimal value of the slider.
          * @example min-max-value
         */
        "min"?: number;
        /**
          * User made changes. Contains the chosen value.
          * @example value-change
         */
        "onValueChange"?: (event: DsSliderCustomEvent<number>) => void;
        /**
          * Switches the input to the read-only mode. The value of the element is shown in a simple way. The element is not usable anymore.
          * @value false: Formfield
          * @value true: Value as text
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Size of the Steps, the values can be selected.
          * @value number: Minimal possible change.
          * @example step
         */
        "step"?: number;
        /**
          * Current value of the slider.
          * @value number: Current value
          * @example min-max-value
         */
        "value"?: number;
    }
    interface DsSpinner {
        /**
          * Specififes the size of the spinner.
          * @value small: Spinner has a size of 16px.
          * @value medium: Spinner has a size of 32px.
          * @value large: Spinner has a size of 72px.
          * @example size
         */
        "size"?: "small" | "medium" | "large";
        /**
          * Displays the spinner in a light or dark theme.
          * @value light: The segments have a dark tone to contrast a light background.
          * @value dark: The segments have a light tone to contrast a dark background.
          * @example theme
         */
        "theme"?: "light" | "dark";
    }
    interface DsTable {
        /**
          * Defines the column that is used for initially sorting the table.
          * @value string: The `columnId` or `label` of the column.
          * @example initial-sort
         */
        "initialsort"?: string;
        /**
          * Specifies the initial sort direction.
          * @value asc: Ascending order.
          * @value desc: Descending order.
          * @example initial-sort
         */
        "initialsortdirection"?: "asc" | "desc";
        /**
          * Specifies whether the table is self-managed or remote-controlled.
          * @value managed: The table is responsible for sorting and pagination.
          * @value remote: The table relies on an external implementation for creating rows, sorting and pagination using the `tableStateChanged` event.
          * @example remote
          * @example remote-complex
         */
        "mode"?: "managed" | "remote";
        /**
          * In case a row is selected this event will fire the key of the row.
          * @value string: If the `selectionmode` allows a single selection the event will delegate one selected row key.
          * @value string[]: If the `selectionmode` allows a multi selection the event will delegate all selected row keys. **!!!Experimental feature!!!**
         */
        "onRowsSelected"?: (event: DsTableCustomEvent<string[]>) => void;
        /**
          * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
          * @example table-state-changed
         */
        "onTableStateChanged"?: (event: DsTableCustomEvent<TableConfig>) => void;
        /**
          * The initially selected option for the page size. It only has an effect if the `view` attribute supports pagination.
          * @value number: Number of rows per page.
          * @example paginator
         */
        "pagesize"?: number;
        /**
          * Defines the options for the page size that a user can pick from. It only has an effect if the `view` attribute supports pagination.
          * @value string: Comma seperated list of numbers (e.g: [25,50,100]).
          * @example paginator
         */
        "pagesizes"?: string;
        /**
          * The data length this table should visualize. In case the table manages itself this attribute should not be set. If the table is remote-controlled this attribute has to be set because the table needs to know the exact amount of data to visualize the **paging** accordingly.
          * @example remote
          * @example remote-complex
         */
        "rowcount"?: number;
        /**
          * Specifies if the table should be scrollable. It is necessary to ensure that every `<ds-header-item>` has the width property set.
          * @value true: Table is scrollable.
          * @value false: Table is not scrollable.
          * @example scrollable
         */
        "scrollable"?: boolean;
        /**
          * **Warning: This feature is highly experimental.**  Enables the selection of rows. A `key` for every row has to be specified.
          * @value true: The selection-group will be opened.
          * @value false: The selection-group will be closed.
          * @example selection
         */
        "selectionenabled"?: boolean;
        /**
          * **Warning: This feature is highly experimental.**  Specifies if only one or multiple rows can be selected.
          * @value multi: Multiple rows can be selected.
          * @value single: One row can be selected at a time.
          * @example selection-mode
         */
        "selectionmode"?: "multi" | "single";
        /**
          * Defines the style of this table.
          * @value default: Default table
          * @value paginated-card: Table within a card with pagination.
          * @value paginated-card-shadow: Table within a shadowed card with pagination.
          * @example paginator
         */
        "view"?: "default" | "paginated-card" | "paginated-card-shadow";
    }
    interface DsTableCell {
        /**
          * The background color.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
         */
        "color"?: string;
        /**
          * The type of this cell. If not explicity set the cell inherits the type by the corresponding `<ds-table-header-item>`.
          * @value text: The `value` is a string which will be rendered as text. It is defaultly left aligned.
          * @value numeric: The `value` is a number which will be rendered as text. It is defaultly right aligned.
          * @value date:  The `value` is a string ('YYYY-mm-dd') which will be formatted as a date string. It is defaultly left aligned.
          * @value currency: The `value` is a number which will be formatted as a currency string (e.g: 1.120,00 €). The currency itself is rendered as an icon. It is defaultly right aligned.
          * @value html: The default slot will be rendered in place of the `value`.
         */
        "type"?: string;
        /**
          * The value of this cell. It will be formatted depending the cell `type`.
          * @value string: Ein beliebiger Wert
         */
        "value"?: string;
    }
    interface DsTableFooter {
    }
    interface DsTableHeader {
    }
    interface DsTableHeaderItem {
        /**
          * The alignment of the title text and the cell contents within this column. **Warning:** The default alignment which is defined by the `type` property will be overriden.
          * @value left: Child elements are left-aligned.
          * @value right: Child elements right-aligned.
          * @value center: Child elements are centered.
         */
        "align"?: "left" | "right" | "center";
        /**
          * This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property.. Otherwise the `label` property will be send.
          * @value string: An unique identifikation for this column.
         */
        "columnid"?: string;
        /**
          * Declare your own sorting function for this column. This enables you to sort your own objects.
          * @value function: The sort function.
         */
        "customSort"?: (
    firstCell: HTMLDsTableCellElement,
    secondCell: HTMLDsTableCellElement
  ) => number;
        /**
          * The title text of this column. This value represents the column identificator if there is no `columnid` specified.
          * @value string: The title text.
         */
        "label"?: string;
        /**
          * Specifies the number of rows within an column.
          * @value s: Table cells have only 1 text row
          * @value m: Table cells have up to 2 text rows.
          * @value l: Table cell have up to 3 text rows.
         */
        "linesize"?: "s" | "m" | "l";
        /**
          * Define the maximum width of the table in pixels.
          * @value number: The maximal width in pixels.
         */
        "maxwidth"?: number;
        /**
          * Define the minimal width of the table in pixels.
          * @value number: The minimal width in pixels.
         */
        "minwidth"?: number;
        /**
          * Allows the table to sort this column.
          * @value true: The column is sortable.
          * @value false: The column is not sortable.
         */
        "sortable"?: boolean;
        /**
          * Specifies the priority of this column which is considered in the table's secondary sorting.
          * @value number: Priority. The lower this number the higher the chance this column will be considered first in the secondary sorting of the table.
         */
        "sortpriority"?: number;
        /**
          * Defines a type for the whole column.
          * @value text: Renders the provided `value` property of an `<ds-table-cell>` as a left aligned text.
          * @value numeric: Renders the provided `number` value of an `<ds-table-cell>` as a right aligned text.
          * @value date: Renders the provided string ('YYYY-mm-dd') of an `<ds-table-cell>` as a left aligned text.
          * @value currency: Renders the provided `number` of an `<ds-table-cell>` as right aligned text with attached currency icon.
          * @value html: Renders the provided html elements.
         */
        "type"?: ColumnType;
    }
    interface DsTablePageSizePicker {
        "onPageSizeChanged"?: (event: DsTablePageSizePickerCustomEvent<number>) => void;
        /**
          * Einstellbare Anzahl der Einträge, die vom Benutzer gleichzeitig sichtbar gemacht werden können.
          * @value ArrayString: Komma separierte Zahlen in der Array-Schreibweise z.B: [25,50,100]
         */
        "pagesizes"?: ArrayString;
        /**
          * Der vorausgewählte Seiten-Wert. Dieser muss innerhalb, des, in `pagesizes` definierten, Arrays liegen.
          * @value : Eine Zahl, die einen Wert im `pagesizes`-Array widerspiegelt.
         */
        "value"?: number;
    }
    interface DsTableRow {
        /**
          * Fired when the selection-status of the row is changed.
          * @value boolean: Row is selected or not.
         */
        "onRowSelected"?: (event: DsTableRowCustomEvent<boolean>) => void;
        /**
          * A unique identifier for the data this row displays in a table.
          * @value string: Unique identifier
         */
        "rowid"?: string;
        /**
          * Selects this row. If true the row will be selected and the table's selection will be enabled.
          * @value true: Row is selected.
          * @value false: Row is not selected.
          * @example selection
         */
        "selected"?: boolean;
    }
    interface DsText {
        /**
          * Defines the text color.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Specifies the responsiveness strategy.
          * @value auto: Text size is automatically determined by evaluating the device screen size.
          * @value small: Use text size for small device screens.
          * @value large: Use text size for large device screens.
         */
        "screensize"?: "small" | "large" | "auto";
        /**
          * Specifies the style of the text.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
          * @value Ueberschrift-1: Shortcut for `u1`
          * @value Ueberschrift-2: Shortcut for `u2`
          * @value Ueberschrift-3: Shortcut for `u3`
          * @value Ueberschrift-4: Shortcut for `u4`
          * @value Ueberschrift-5: Shortcut for `u5`
          * @value Kapitelueberschrift: Shortcut for `ku`
          * @value Fliesstext-Standard: Shortcut for `ft`
          * @value Fliesstext-Fett: Shortcut for `ftf`
          * @value Fliesstext-Gross: Shortcut for `ftg`
          * @value Infotext-Standard: Shortcut for `it`
          * @value Infotext-Klein: Shortcut for `itk`
          * @important 
          * @example textstile
          * @example textstile-abkuerzungen
         */
        "type"?: string;
    }
    interface DsTextArea {
        /**
          * Textarea is disabled and cannot be used anymore. Label and border are grey.
          * @value true: Textarea is disabled
          * @value false: Textarea is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Colors the border of the textarea red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error"?: boolean;
        /**
          * Text that is shown under the textarea in a red dialog.
          * @value string: Errormessage
          * @example error
         */
        "errormessage"?: string;
        /**
          * Label shown above the textarea.
          * @value string: Label e.g `Notizen`
          * @important 
          * @example label
         */
        "label"?: string;
        /**
          * Number of lines shown simultaneously.
          * @value number: Number of lines.
          * @example lines
         */
        "lines"?: number;
        /**
          * Maximum number of characters.
          * @value number: Number of characters
          * @example maxlength
         */
        "maxlength"?: number;
        /**
          * Event is thrown when the user changes the content of the textarea.
          * @example change-events
         */
        "onValueChange"?: (event: DsTextAreaCustomEvent<string>) => void;
        /**
          * Event is thrown when the user checks the input. Event is triggered when the user presses Return or leaves the textarea.
          * @example change-events
         */
        "onValueComplete"?: (event: DsTextAreaCustomEvent<string>) => void;
        /**
          * Textarea is in read-only mode. Content of the textare is displayed in a simple way.
          * @value false: Formfield
          * @value true: Shows the content only as text.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks the textarea as mandatory.
          * @value false: Not mandatory (Default).
          * @value true: mandatory field.
          * @example required
          * @example required-maxlength
         */
        "required"?: boolean;
        /**
          * Text of the textarea.
          * @important 
          * @value string: Content of the textarea.
          * @example value
         */
        "value"?: string;
    }
    interface DsTextButton {
        /**
          * Sets the color of the button.
          * @value gold: Gold color (default value)
          * @value rot: Special case for destructive actions
          * @example color
         */
        "color"?: "gold" | "rot";
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the responsiveness strategy.
          * @value auto: Text size is automatically determined by evaluating the device screen size.
          * @value small: Use text size for small device screens.
          * @value large: Use text size for large device screens.
          * @example screensize
         */
        "screensize"?: "small" | "large" | "auto";
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
         */
        "unfocusable"?: boolean;
    }
    interface DsTextInput {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Input has a red outline.
          * @value true: red outlined.
          * @value false: gray outlined.
          * @example error
         */
        "error"?: boolean;
        /**
          * Text, which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limitlength
         */
        "limitlength"?: number;
        /**
          * Assists the user with a masking. The mask is defined as a pattern. The character `X` represents an alphanumeric character and `0` represents numerals. The user can only enter characters that are marked with `X` and `0`. All other delimiters will be replaced automatically by the text input. The delimiters will be removed, when the content is get programmatic.  Beispiel: `XX00 0000 0000 0000 0000 00` (Deutsche IBAN)
          * @value string: Pattern for the mask.
          * @example mask
          * @example mask-iban
          * @example mask-complex
         */
        "mask"?: string;
        /**
          * This event is fired, when the user fills out this input. The event paylod contains an controller which can be used to submit autocomplete values.
          * @example autocomplete-plz
         */
        "onAutocomplete"?: (event: DsTextInputCustomEvent<TextInputAutocompleteController>) => void;
        /**
          * This event is fired when the user selects an autocomplete value from the list. The event payload contains the `data` of the selected AutoCompleteOption.
          * @example autocomplete-plz-ort
         */
        "onSelectAutocomplete"?: (event: DsTextInputCustomEvent<any>) => void;
        /**
          * Emits this event when the user changes the value of this input.
          * @example change-events
         */
        "onValueChange"?: (event: DsTextInputCustomEvent<string>) => void;
        /**
          * This Event is emitted when the user accepts the value. The user accepts the value by pressing the Enter Key or when the user leave the input.
          * @example change-events
         */
        "onValueComplete"?: (event: DsTextInputCustomEvent<string>) => void;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
         */
        "placeholder"?: string;
        /**
          * Input field is in readonly mode. The value of this input is displaey in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Input is marked as required. And the user needs to fulfill the input's requirements.
          * @value true: Input field is required and draws a yellow outline and displays an icon beneath the input.
          * @value false: Input field is not required.
          * @example required
         */
        "required"?: boolean;
        /**
          * The value of this input.
          * @important 
          * @value string: value of this input.
          * @example value
         */
        "value"?: string;
    }
    interface DsTextList {
        /**
          * Defines the style of the text, that is propagated to the `<ds-text>` child elements, if they have `type` attribute set to `"auto"`.
          * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
          * @value Ueberschrift-1: Shortcut for `u1`
          * @value Ueberschrift-2: Shortcut for `u2`
          * @value Ueberschrift-3: Shortcut for `u3`
          * @value Ueberschrift-4: Shortcut for `u4`
          * @value Ueberschrift-5: Shortcut for `u5`
          * @value Kapitelueberschrift: Shortcut for `ku`
          * @value Fliesstext-Standard: Shortcut for `ft`
          * @value Fliesstext-Fett: Shortcut for `ftf`
          * @value Fliesstext-Gross: Shortcut for `ftg`
          * @value Infotext-Standard: Shortcut for `it`
          * @value Infotext-Klein: Shortcut for `itk`
          * @important 
          * @example type
         */
        "type"?: string;
    }
    interface DsUserAvatar {
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
          * @important 
          * @example image
         */
        "imageurl"?: string;
        /**
          * Initialen des Nutzers
          * @value string: Initialen, z.B. `"FG"`
          * @important 
          * @example initials
         */
        "initials"?: string;
        /**
          * Größe des Nutzer-Avatars
          * @value header: Für die Nutzung im Header verwendete Größe (32px)
          * @value content-s: Für die Nutzung innerhalb von Content (48px)
          * @value content-m: Für die Nutzung innerhalb von Content (64px)
          * @value content-l: Für die Nutzung innerhalb von Content (72px)
          * @value content-xl: Für die Nutzung innerhalb von Content (144px)
         */
        "size"?: UserAvatarSize;
    }
    interface DsWorkflowProgress {
        "progress"?: number;
    }
    interface DsWrappedLayout {
        /**
          * Ausrichtung von Elementen, wenn eine Reihe auf Grund der Anzahl an Elementen nicht vervollständigt werden kann.
          * @value left: Linksbündig
          * @value center: Zentriert
          * @value right: Rechtsbündig
          * @example align-left
          * @example align-center
          * @example align-right
         */
        "align"?: "left" | "center" | "right";
        /**
          * Legt die Größe der Elemente fest.  Je kleiner die Elementgröße festgelegt wird, desto mehr Elemente werden in einer Reihe angezeigt.
          * @value xs: Sehr klein
          * @value s: Klein
          * @value m: Normal
          * @value l: Groß
          * @value xl: Sehr groß
          * @example sizes
         */
        "size"?: "xs" | "s" | "m" | "l" | "xl";
    }
    interface DsYesNo {
        /**
          * Deactivates the Radio-Button.
          * @value false: The Radio-Button is interactable.
          * @value true: The Radio-Button is deactivated.
          * @example value-disabled
         */
        "disabled"?: boolean;
        /**
          * Colors the border of the element red.
          * @value true: red border.
          * @value false: grey border.
          * @example error
         */
        "error"?: boolean;
        /**
          * Text under the element showed in a red dialog.
          * @value string: Errormessage.
          * @example error
         */
        "errormessage"?: string;
        /**
          * Event contains `"yes"`, when Ja or `"no"` when Nein was selected. The user can't unselect the value.
          * @example event
         */
        "onValueChange"?: (event: DsYesNoCustomEvent<string>) => void;
        /**
          * The yes/no component is in read-only mode. A text is rendered that shown the `label`-value of the selected Radio-Button.
          * @value false: Default mode.
          * @value true: Text of the `value`-attribute is shown.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks the element as mandarory.
          * @value false: Not mandatory. (Default)
          * @value true: Mandatory field.
          * @example required
         */
        "required"?: boolean;
        /**
          * How the width of the child elements is determined.
          * @value parent: The Parent element determines the width.
          * @value max-content: The widest child element determines the width of all child elements.
          * @example size-parent
         */
        "size"?: "parent" | "max-content";
        /**
          * State of the yes/no-selection
          * @value "yes": yes is selected
          * @value "no": no is selected
          * @value "unset": nothing is selected
          * @example value
         */
        "value"?: "yes" | "no" | "unset";
    }
    interface DxAccordion {
        /**
          * The text which is displayed within the header.
          * @value string: The title text.
          * @example label
         */
        "label"?: string;
        /**
          * Defines whether the content is visible or not.
          * @value true: The content below the header is visible.
          * @value false: The content below the header is not displayed.
          * @example open
         */
        "open"?: boolean;
    }
    interface DxAccordionGroup {
    }
    interface DxAlert {
        /**
          * Defines in which direction the buttons should be displayed.
          * @value column: The buttons will be displayed from left to right.
          * @value row: The buttons will be displayed from top to bottom.
          * @example actions-direction-row
          * @example actions-direction-column
          * @default "column"
         */
        "actionsdirection"?: ActionLayoutDirection;
        /**
          * The content of the dialog.
          * @value string: The content which is displayed below the title.
          * @example content
         */
        "content"?: string;
        /**
          * Specifies the icon which will be shown above the text.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The sublabel of the dialog which can be used for e.g. error codes.
          * @value string: The sublabel.
          * @example sublabel
         */
        "sublabel"?: string;
        /**
          * The title of the dialog.
          * @value string: The title.
          * @example titlestring
         */
        "titlestring"?: string;
        /**
          * Defines the visual representation of the button.
          * @value default: Shows the titlestring and icon in a dark color.
          * @value error: Shows the titlestring and icon in a red color to imply an error.
          * @example type-error
          * @example type-default
         */
        "type"?: AlertType;
        /**
          * Defines the visibility of the alert.
          * @value true: Alert is visible.
          * @value false: Alert is not visible.
          * @example visible
         */
        "visible"?: boolean;
    }
    interface DxAnnouncementBar {
        /**
          * Specifies the color of the icon.
          * @value string: The background color of this component.
          * @example color
         */
        "color"?: string;
        /**
          * Specifies the icon which will be shown beside the text.
          * @value string: A valid icon name.
          * @important 
          * @example icon
         */
        "icon"?: string;
        /**
          * Specifies the color of the icon.
          * @value string: A color from the color palette. (e.g. white, default, error, ...);
          * @example icon
         */
        "iconcolor"?: string;
    }
    interface DxApp {
    }
    interface DxBreadcrumb {
        /**
          * Fired when the user interacts with a breadcrumb item. As event payload (`event.detail`) the value of the interacted item is supplied.
          * @example navigation
         */
        "onNavigate"?: (event: DxBreadcrumbCustomEvent<string>) => void;
        /**
          * Fired when the user interacts with this item.
          * @example navigation
         */
        "onNavigateHome"?: (event: DxBreadcrumbCustomEvent<void>) => void;
    }
    interface DxBreadcrumbItem {
        /**
          * Specifies the name of this item in the breadcrumb path which is displayed in `<dx-breadcrumb>`.
          * @value string: the name of the breadcrumb item.
         */
        "label"?: string;
        /**
          * Specifies the value of this item.
          * @value string: the value of this part.
         */
        "value"?: string;
    }
    interface DxButton {
        /**
          * Disables user interaction on the button.
          * @value false: User can interaction with the button.
          * @value true: User can not interaction with the button.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the icon which will be shown beside the text.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * Specifies whether the icon is positioned left or right of the text as long a text is defined.
          * @value left: The icon is displayed left of the text.
          * @value right: The icon is displayed right of the text.
          * @example icon
         */
        "iconposition"?: HorizontalDirection;
        /**
          * The text which is displayed within the button.
          * @value string: The text.
          * @example label
         */
        "label"?: string;
        /**
          * Shows a loading spinner within the button. The spinner location can be controlled with the `iconposition` property.
          * @value true: Loading spinner is visible.
          * @value false: Loading spinner is not visible.
          * @example loading-spinner
         */
        "loading"?: boolean;
        /**
          * Modifies the button width behavior
          * @value false: Button width is determined by the button content
          * @value true: Button width is stretched to match the width of the host element.
         */
        "stretch"?: boolean;
        /**
          * The theme of the button defines the look and feel of the button, which is dependent in which context the button is used.
          * @value default: The default button can be placed anywhere and is the main usage of a button.
          * @value on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background.
          * @value destructive: A button which implies a destructive action. (e.g deleting an item from a list)
          * @example theme
         */
        "theme"?: ButtonTheme;
        /**
          * Defines the visual representation of the button.
          * @value primary-s: Small flat colored button to indicate an important action.
          * @value primary-m: Medium sized flat colored button to indicate an important action.
          * @value primary-l: Large flat colored button to indicate an important action.
          * @value secondary-s: Small outlined transparent button for less important actions.
          * @value secondary-m: Medium sized outlined transparent button for less important actions.
          * @value secondary-l: Large outlined transparent button for less important actions.
          * @value text: Small button with no default background color.
          * @example type
         */
        "type"?: ButtonType;
        /**
          * Disables the ability to focus the button via tabulator navigation.
          * @value false: Button is reachable via tab navigation.
          * @value true: Button is ignored when using tab navigation.
          * @example unfocusable
         */
        "unfocusable"?: boolean;
    }
    interface DxCalendar {
        /**
          * Error message which is displayed above the calendar view.
          * @value string: Error message.
         */
        "errormessage"?: string;
        /**
          * Defines the maximal allow date.
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
         */
        "min"?: string;
        /**
          * Defines how a date can be selected.
          * @value "day-month-year": The month calendar view is the main view to select a date in. You can click on days within a month to select them.
          * @value "month-year": The year calendar view is the main view to select a date in. You can click on months within a year to select them.
          * @value "day-month": The month calendar view is the main view to select a date in. You can click on days within a month to select them. The year information is irrelevant in this mode. Selected date's years are always 0.
         */
        "mode"?: DateSelectionMode1;
        /**
          * Fires a date range when the user selects a new date. The payload is dependant on the `rangeenabled` property. When false the payload only consists of a `from` date and an undefined `to` date. When true the payload consists of a `from` and `to` date.
         */
        "onRangeSelected"?: (event: DxCalendarCustomEvent<DateRange1>) => void;
        /**
          * Whether we can select a range of two dates or only one date.
          * @value true: Two separate dates can be selected. All dates between them are highlighted.
          * @value false: Only one date can be selected at a time.
         */
        "rangeenabled"?: boolean;
        "value"?: string;
    }
    interface DxCard {
    }
    interface DxCardCollapsable {
        /**
          * The current collapse state.
          * @value false: The card is collapsed.
          * @value true: The card is unfolded.
          * @example open
         */
        "open"?: boolean;
    }
    interface DxCardContent {
    }
    interface DxCardHeader {
        /**
          * The icon which is displayed left of the label.
          * @value string: The icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon. This has only an effect when the `icon` property is defined.
          * @value string: Name of the color from the color palette.
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * The label which is displayed on the left side.
          * @value string: The label text.
          * @example label
         */
        "label"?: string;
    }
    interface DxCardImage {
        /**
          * Defines the height of the image for the MQ1 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or `%`.
         */
        "coverheightmq1"?: string;
        /**
          * Defines the height of the image for the MQ2 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq2"?: string;
        /**
          * Defines the height of the image for the MQ3 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or `%`.
         */
        "coverheightmq3"?: string;
        /**
          * Defines the height of the image for the MQ4 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq4"?: string;
        /**
          * Defines the height of the image for the MQ5 breakpoint in cover mode using standard css notation. Only has an effect when fit type "cover" is used.
          * @value string: a height in `px` or %.
         */
        "coverheightmq5"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq1"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq2"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq3"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq4"?: string;
        /**
          * Defines the position of the image using standard css notation: Only has an effect when fit type "cover" is used.  For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/background-position
          * @value string: a position in % or px.
         */
        "coverpositionmq5"?: string;
        /**
          * Defines the fit of the image.
          * @value proportional: The image is scaled proportional to its width.
          * @value cover: The image is displayed with a set height. The height is set via the `coverheightmq` properties. The visible part of the image can be controlled using the `coverpositionmq` properties.
         */
        "fit"?: "proportional" | "cover";
        /**
          * Specifies a path to the image file.
          * @value string: The path to the image file.
         */
        "url"?: string;
    }
    interface DxChartSample {
        /**
          * The color of the corresponding chart segment.
          * @value string: The color code.
          * @important
         */
        "color"?: string;
        /**
          * The icon which is displayed next to the label.
          * @value string: Name of the icon.
         */
        "icon"?: string;
        /**
          * Label of the data.
         */
        "label"?: string;
        /**
          * Triggers when value of the sample changes.
          * @value number: Delegates the new value.
         */
        "onValueChange"?: (event: DxChartSampleCustomEvent<number>) => void;
        /**
          * The color of the corresponding chart segment when selected.
          * @value string: The color code.
          * @important
         */
        "selectedcolor"?: string;
        /**
          * Numeric representation of the data value.
          * @value number: The numeric representation.
         */
        "value"?: number;
    }
    interface DxCheckbox {
        /**
          * Defines whether the checkbox is checked or not.
          * @value false: Checkbox is unchecked.
          * @value true: Checkbox is checked.
          * @example checked
         */
        "checked"?: boolean;
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Text, which is displayed next to the checkbox.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Delegates the current `checked` value of this component when the user interacts with it.
          * @example check-event
         */
        "onCheckedChange"?: (event: DxCheckboxCustomEvent<boolean>) => void;
        /**
          * Defines if the checkbox is in a read-only state. If the `checked` property is false, the component will not be rendered.
          * @value false: The checkbox is displayed normally.
          * @value true: A success icon and the label are displayed next to each other.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Defines if the checkbox is a required form element.
          * @value false: It is not required to set the checkbox`s `checked` state to true.
          * @value true: The checkbox's `checked` state has to be true to fulfill the requirement.
          * @example required
         */
        "required"?: boolean;
    }
    interface DxChevron {
        /**
          * If `false` the chevron will be displayed with color `default` If `true` the chevron will be displayed with color `active` or the color set via `activecolor`
         */
        "active"?: boolean;
        /**
          * Color of the chevron when active property is `true`. Use a color from the color palette.
          * @value string: The name of a color from the color palette.
         */
        "activecolor"?: string;
        /**
          * Defines the direction the arrow is pointing to.
          * @value true: the arrow is pointing up.
          * @value false: the arrow is pointing down.
         */
        "directiontop"?: boolean;
        /**
          * Color of the chevron when active property is `false`. Use a color from the color palette.
          * @value string: The name of a color from the color palette.
         */
        "inactivecolor"?: string;
        "size"?: 16 | 24;
    }
    interface DxClearButton {
        "onClearInput"?: (event: DxClearButtonCustomEvent<void>) => void;
        "size"?: 24 | 32;
        "visible"?: boolean;
    }
    interface DxCombobox {
        /**
          * Defines if the input field is disabled or not.
          * @value true: Input is disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * The text which is displayed within the flyout when no entries are found with the input provided by the user.
          * @value string: The empty search result text.
          * @example empty-search-text
         */
        "emptysearchtext"?: string;
        /**
          * Error text which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * The text which is displayed within the flyout while the search is in progress.
          * @value string: The loading text.
          * @example loading-text
         */
        "loadingtext"?: string;
        /**
          * The maximum height the list can reach when opened.
          * @value number: The height in pixels.
          * @example max-list-height
         */
        "maxlistheight"?: number;
        /**
          * Trigger when the user presses the "Enter" key while editing the input field.
          * @example enter-press
         */
        "onEnterPress"?: (event: DxComboboxCustomEvent<void>) => void;
        /**
          * This event is fired, when the user fills out this input. The event paylod contains an controller which can be used to submit autocomplete options.
          * @example search
          * @example select-search-option
          * @example option-labels
          * @example option-icons
         */
        "onSearch"?: (event: DxComboboxCustomEvent<ComboboxSearchController>) => void;
        /**
          * This event is fired when the user selects an autocomplete options from the list. The event payload contains the `data` of the selected AutoCompleteOption.
          * @example select-search-option
         */
        "onSelectSearchOption"?: (event: DxComboboxCustomEvent<any>) => void;
        /**
          * Emits this event when the user changes the value of this input.
          * @example change-events
         */
        "onValueChange"?: (event: DxComboboxCustomEvent<string>) => void;
        /**
          * This event is emitted when the user accepts the value. The user accepts the value by pressing the Enter key or when the user leave the input.
          * @example change-events
         */
        "onValueComplete"?: (event: DxComboboxCustomEvent<string>) => void;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
          * @example placeholder
         */
        "placeholder"?: string;
        /**
          * The text which is displayed when the input length is less than the `presearchlettercount`.
          * @value string: A text describing the condition to start a search.
          * @example pre-search-condition-text
         */
        "presearchconditiontext"?: string;
        /**
          * The minimum number of letters before starting the search.
          * @value number: The number of letters that allow starting the search.
          * @example pre-search-letter-count
         */
        "presearchlettercount"?: number;
        /**
          * Input field is in readonly mode. The value of this input is display in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Input is marked as required.
          * @value false: Not required.
          * @value true: Input field is required, and an icon is displayed below the input field.
          * @example required
         */
        "required"?: boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
          * @example size
         */
        "size"?: "s" | "m";
        /**
          * The value of this input.
          * @important 
          * @value string: Value of this input.
          * @example value
         */
        "value"?: string;
    }
    interface DxContainer {
        /**
          * The background color of the container.
          * @value string: The name of a color from the color palette.
          * @example color
         */
        "color"?: string;
        /**
          * The type of the container.
          * @value page: The container contains paddings and margins necessary to position the content in the middle of the screen. This type should only be used in a top level context.
          * @value div: The container behaves like a div.
         */
        "type"?: "page" | "div";
    }
    interface DxContentSwitcher {
        "onValueChange"?: (event: DxContentSwitcherCustomEvent<ContentSwitcherItemValue>) => void;
        "value"?: ContentSwitcherItemValue;
    }
    interface DxContentSwitcherItem {
        "animatable"?: boolean;
        "reverse"?: boolean;
        "value"?: ContentSwitcherItemValue;
        "visible"?: boolean;
    }
    interface DxDateInput {
        /**
          * Whether the input is interactable or not. The label and border are grey to indicate the disabled state.
          * @value false: Input is not disabled.
          * @value true: Input is disabled.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Text, which is displayed in a red popup at the bottom of the input field.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label text, which is displayed on the top of the input field.
          * @important 
          * @value string: label text
          * @example label
         */
        "label"?: string;
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example minmax
         */
        "min"?: string;
        /**
          * Defines how a date can be selected or edited.
          * @value "day-month-year": The user can edit three input fields: day (TT), month (MM) and year (JJJJ). The calendar shows all three views (month, year and decade) for selecting a date.
          * @value "month-year": The user can edit two input fields: month (MM) and year (JJJJ). The calendar shows two views (year and decade) for selecting a month.
          * @value "day-month": The user can edit two input fields: day(TT) and month (MM). The calendar shows two views (month and year) for selecting a date.
          * @example mode
         */
        "mode"?: DateSelectionMode1;
        /**
          * Delegates an error payload which consists of a message and an error type.
          * @example error-found
         */
        "onErrorFound"?: (event: DxDateInputCustomEvent<DateError1>) => void;
        /**
          * Delegates the current value while the user is editing the input.
          * @example change-events
         */
        "onValueChange"?: (event: DxDateInputCustomEvent<string>) => void;
        /**
          * Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component.
          * @example change-events
         */
        "onValueComplete"?: (event: DxDateInputCustomEvent<string>) => void;
        /**
          * Whether the input is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this input as required.
          * @value false: Input is not required
          * @value true: Input is required
          * @example required
         */
        "required"?: boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
          * @example size
         */
        "size"?: "s" | "m";
        /**
          * The current displayed date.
          * @important 
          * @value string: A date in following format: YYYY-MM-dd
          * @example value
         */
        "value"?: string;
    }
    interface DxDateRange {
        /**
          * Defines the maximal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "max"?: string;
        /**
          * Defines the minimal allowed date.
          * @value string: A date in following format: YYYY-MM-dd
          * @example min-max
         */
        "min"?: string;
        /**
          * Defines how a date range can be selected or edited.
          * @value "day-month-year": The user can select a specific date range. The calendar shows all three views (month, year and decade) for selecting a date range.
          * @value "month-year": The user can select a month range. The calendar shows two views (year and decade) for selecting a month range.
          * @value "day-month": The user can select two possible dates within a year. The calendar shows two views (month and year) for selecting a date range.
         */
        "mode"?: DateSelectionMode1;
        /**
          * The current displayed date range.
          * @important 
          * @value string: Two comma seperated dates in following format: YYYY-MM-dd (e.g.: 2021-01-01,2021-12-31)
          * @example value
         */
        "value"?: string;
    }
    interface DxDonutChart {
        /**
          * The color scheme which is used to color the segments
          * @value blue: All segments are displayed in a predefined blue color
          * @value gray: All segments are displayed in a predefined gray color
          * @value signal: The segments can be displayed in the three different signal colors (success, warning, error).
          * @value custom: The color of segments can be set to any color in the color palette.
          * @example color-scheme
          * @example signal
         */
        "colorscheme"?: DonutChartColorScheme;
        /**
          * A label which is displayed in the center of the component.
          * @value string: The label text.
          * @example label
         */
        "label"?: string;
        /**
          * Triggers when a segment is clicked. It delegates the index of the selected segment.
          * @value number: The index of the selected segment.
          * @example segment-select
         */
        "onSegmentSelect"?: (event: DxDonutChartCustomEvent<number>) => void;
        /**
          * The index of the selected segment.
          * @value number: An index between 0 and (n - 1), whereas n = number of segments.
          * @example selected
         */
        "selected"?: number;
        /**
          * Defines whether to show the outer labels of the segments or not.
          * @value true: The label of every segment is displayed.
          * @value false: No segment labels are visible.
          * @example show-segment-labels
         */
        "showsegmentlabels"?: boolean;
        /**
          * A sub-label which is displayed below the `label` in the center of the component.
          * @value string: The sub-label text.
          * @example label
         */
        "sublabel"?: string;
    }
    interface DxDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Whether it is possible to select an option which is not present in the current option list.
          * @value false: The user can only select an option in the list.
          * @value true: The user is able to set a value which is not present in the option list by editing a text field under the selection input field.
          * @example elseoption
         */
        "elseoption"?: boolean;
        /**
          * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
          * @value string: Button label
          * @example elseoption
         */
        "elseoptionbuttonlabel"?: string;
        /**
          * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
          * @value string: Text input label.
          * @example elseoption
         */
        "elseoptioninputlabel"?: string;
        /**
          * Determines if the else-option input field is visible to the user. This property automatically changes on user interaction or providing a value that doesn't match any dropdown options.
          * @value false: Else-option input field is not displayed.
          * @value true: Else-option input field is displayed.
          * @example elseoption-selected
         */
        "elseoptionselected"?: boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example label
         */
        "label"?: string;
        /**
          * Delegates the current selection or text input (`elseoption`) while the user is still editing.
          * @example complex
         */
        "onValueChange"?: (event: DxDropdownCustomEvent<StringOrObject2>) => void;
        /**
          * Delegates the final selection or text input (`elseoption`). The event is fired when the dropdown loses focus or pushing the 'Enter' key.
          * @example complex
         */
        "onValueComplete"?: (event: DxDropdownCustomEvent<StringOrObject2>) => void;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder"?: string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition"?: "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required"?: boolean;
        /**
          * The size of the dropdown.
          * @value s: A small dropdown is displayed.
          * @value m: A medium sized dropdown is displayed.
         */
        "size"?: ContainerSize;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign"?: HorizontalDirection;
        /**
          * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null. Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
          * @important 
          * @value string: The string value of the selected option.
          * @value object: The value of the selected option in case it's a complex type.
          * @value null: No option selected.
          * @example value
         */
        "value"?: StringOrObject2;
    }
    interface DxDropdownOption {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
         */
        "icon"?: string;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
         */
        "label"?: string;
        /**
          * Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last option which selected attribute is true, will be selected.
          * @value true: This option is selected (Depending on the selection rule of the parent dropdown)
          * @value false: This option is not selected.
         */
        "selected"?: boolean;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example value
         */
        "value"?: StringOrObject2;
    }
    interface DxElementSwapper {
        /**
          * Defines whether the first or the second slot is currently visible.
          * @value first: First slot is visible.
          * @value second: Second slot is visible.
          * @value none: No slot is visible.
         */
        "active"?: "first" | "second" | "none";
    }
    interface DxErrorMessage {
        /**
          * The number of lines the error message should display.
          * @value 1, 2, 3: The number of lines the text can display simultaneously.
          * @value all: The error message will not be clipped. This mode should only be used in important cases.
          * @example lines
         */
        "lines"?: NumberOfLines;
        "onForceUpdateOnChange"?: (event: DxErrorMessageCustomEvent<(ref: any) => void>) => void;
    }
    interface DxErrorPage {
        /**
          * The description of the action button.
          * @value string: The action description text.
          * @example action
          * @important
         */
        "actiondescription"?: string;
        /**
          * The label of the action-button below the action description.
          * @value string: The action description text.
          * @example action
         */
        "actionlabel"?: string;
        /**
          * The description of the error that occurred.
          * @value string: The description text.
          * @example labels
          * @important
         */
        "description"?: string;
        /**
          * Fires when the user interacts with the button.
          * @example action
         */
        "onAction"?: (event: DxErrorPageCustomEvent<void>) => void;
        /**
          * The reason the error page is displayed.
          * @value string: The reason text.
          * @example labels
          * @important
         */
        "reason"?: string;
    }
    interface DxExpanded {
    }
    interface DxFdOutlineBox {
    }
    interface DxFdSeparator {
        /**
          * The background color of the top container which should be separated from a bottom container.
          * @value string: Name of the color from the color palette.
         */
        "fromcolor"?: string;
        /**
          * The background color of the bottom container which should be separated from a top container.
          * @value string: Name of the color from the color palette.
         */
        "tocolor"?: string;
    }
    interface DxFlyout {
        "direction"?: HorizontalDirection;
        "hideoverlay"?: boolean;
        "offsety"?: number;
        "open"?: boolean;
        "position"?: VerticalDirection;
    }
    interface DxFooter {
        /**
          * The color of the previous container to ensure a smooth transition for the separator.
          * @value string: The name of a color from the color palette.
          * @example from-color-white
          * @example from-color-gray
         */
        "fromcolor"?: string;
    }
    interface DxFormWrapper {
        /**
          * Error text which is displayed below the slotted content.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the slotted content.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * An asterisk next to the label indicates that the wrapped form element is required.
          * @value false: Not required.
          * @value true: Required.
          * @example required
         */
        "required"?: boolean;
    }
    interface DxGoldenStage {
        /**
          * The alignment of the golden container.
          * @value left: The container is left-aligned and the golden triangle is displayed below the container.
          * @value right: The container is right-aligned and the golden triangle is displayed over the container.
          * @example alignment
         */
        "alignment"?: HorizontalDirection;
        /**
          * The background color behind the hero image.
          * @value string: The name of the color from the color palette.
          * @example background-color
         */
        "backgroundcolor"?: string;
        /**
          * The y-offset of the golden container.
          * @value number: The y-offset.
          * @example content-offset-y
         */
        "contentoffsety"?: number;
        /**
          * The size of the golden container.
          * @value s: Small sized container occupying 4 grid columns.
          * @value m: Medium sized container occupying 6 grid columns.
          * @value l: Large sized container occupying 8 grid columns.
          * @example size
         */
        "size"?: "s" | "m" | "l";
    }
    interface DxGrid {
        /**
          * The grid's base. Different bases can define a custom amount of columns for every breakpoint.
          * @value page: Default page grid.
          * @example page-1
          * @example page-2
         */
        "base"?: string;
        /**
          * Grid-Layout definition for the MQ1-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq1"?: string;
        /**
          * Grid-Layout definition for the MQ2-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq2"?: string;
        /**
          * Grid-Layout definition for the MQ3-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq3"?: string;
        /**
          * Grid-Layout definition for the MQ4-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq4"?: string;
        /**
          * Grid-Layout definition for the MQ5-Breakpoint.  There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
          * @value string: Layout definition in the grid syntax.
          * @important
         */
        "mq5"?: string;
        /**
          * The gap between the rows of the grid.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The gap between the rows.
          * @example row-gap
         */
        "rowgap"?: Size;
    }
    interface DxHeader {
        /**
          * The name of the application this component runs with.
          * @value string: The name of the app.
          * @example app-name
         */
        "appname"?: string;
        /**
          * Defines the brand appearance of header internal branding elements (e.g. the logo image).
          * @value default: The default brand of the DVAG is used.
         */
        "brand"?: "default";
        /**
          * The logo which is displayed in the left corner of the header.
          * @value text: Brand Logo with the company's name. The `applicationname` will not be displayed.
          * @value image: Brand Logo without a name. The `applicationname` will be displayed next to the logo.
         */
        "logo"?: "text" | "image";
        /**
          * An event which is triggered when the user clicks the logo or the application name. This event should always be used to show the user the application's home page.
         */
        "onNavigateHome"?: (event: DxHeaderCustomEvent<void>) => void;
        /**
          * Whether to show the current announcement bar or not.
          * @value true: Shows an announcement in case the "announcement-bar" slot is defined.
          * @value false: Hides the announcement.
         */
        "showannouncement"?: boolean;
        /**
          * The theme of the header defines the color palette which is used for it's sub-elements.
          * @value white: The default theme displays the header with a white background.
          * @value gold: The golden theme which is implemented for "meine.dvag".
          * @warning This property must not be used by other projects than "meine.dvag".
         */
        "theme"?: HeaderTheme;
    }
    interface DxHeaderAppFavorites {
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
         */
        "notifications"?: NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "notificationstheme"?: NotificationIndicatorThemeType;
        /**
          * Fires when the user clicks on the "Favoriten hinzufügen" button within the sidebar content.
         */
        "onAddApp"?: (event: DxHeaderAppFavoritesCustomEvent<CloseSidebarDetail>) => void;
        /**
          * Fires when the user deletes a favorite app. The event delegates the application id of the deleted app.
         */
        "onDeleteApp"?: (event: DxHeaderAppFavoritesCustomEvent<string>) => void;
        /**
          * Fires when toggling the edit mode within the sidebar. (e.g. by clicking the "Favoriten bearbeiten" button)
          * @example edit-app-event
         */
        "onEditApps"?: (event: DxHeaderAppFavoritesCustomEvent<boolean>) => void;
        /**
          * Fires when the user clicks selects an app. The event delegates the application id of the corresponding app.
         */
        "onLaunchApp"?: (event: DxHeaderAppFavoritesCustomEvent<LaunchAppDetail>) => void;
        /**
          * Fired when the navigation's header menu item is interacted with.
          * @example menu-interaction
         */
        "onMenuInteraction"?: (event: DxHeaderAppFavoritesCustomEvent<void>) => void;
        /**
          * Fires when the user sorts his favorite apps. The event delegates the application ids dependant on the current sorting.
         */
        "onSortApps"?: (event: DxHeaderAppFavoritesCustomEvent<string[]>) => void;
        /**
          * The priority indicates the order in which the entries can be shown and hidden.
          * @value number: The priority of the user menu item.
         */
        "priority"?: number;
    }
    interface DxHeaderAppFavoritesApp {
        /**
          * An identificator of the application.
          * @value string: An unique id of the application.
         */
        "appid"?: string;
        /**
          * The name of the application.
          * @value string: The name.
         */
        "appname"?: string;
        /**
          * An icon belonging to the application.
          * @value string: An icon name.
         */
        "icon"?: string;
    }
    interface DxHeaderAppFavoritesSidebarContent {
        "apps"?: AppFavoritesApp[];
        "onInternalAddApp"?: (event: DxHeaderAppFavoritesSidebarContentCustomEvent<void>) => void;
        "onInternalDeleteApp"?: (event: DxHeaderAppFavoritesSidebarContentCustomEvent<string>) => void;
        "onInternalEditApps"?: (event: DxHeaderAppFavoritesSidebarContentCustomEvent<boolean>) => void;
        "onInternalLaunchApp"?: (event: DxHeaderAppFavoritesSidebarContentCustomEvent<string>) => void;
        "onInternalSortApps"?: (event: DxHeaderAppFavoritesSidebarContentCustomEvent<string[]>) => void;
    }
    interface DxHeaderApplicationName {
        /**
          * The name of the application.
          * @value string: Application name.
          * @important
         */
        "appname"?: string;
        /**
          * Fires when the user interacts with this element (e.g. by clicking it).
         */
        "onInteraction"?: (event: DxHeaderApplicationNameCustomEvent<void>) => void;
    }
    interface DxHeaderMenuBar {
        "onSidebarOpenChange"?: (event: DxHeaderMenuBarCustomEvent<boolean>) => void;
    }
    interface DxHeaderMenuButton {
        /**
          * Displays this menu button as active.
          * @value true: The menu button displays a line at the bottom and replaces the slotted content with a close icon.
          * @value false: The menu button item displays the slotted content.
         */
        "active"?: boolean;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
         */
        "notifications"?: NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "notificationstheme"?: NotificationIndicatorThemeType;
        /**
          * Fired when user interacts with this item.
         */
        "onInteraction"?: (event: DxHeaderMenuButtonCustomEvent<void>) => void;
        /**
          * Displays this menu button as selected.
          * @value true: The menu button displays a line under the slotted content.
          * @value false: The menu button item displays the slotted content.
         */
        "selected"?: boolean;
    }
    interface DxHeaderMenuCustom {
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority"?: number;
    }
    interface DxHeaderMenuGroup {
        /**
          * The priority indicates the order in which the entries inside a `<dx-header>` can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the group.
          * @example priority
         */
        "priority"?: number;
    }
    interface DxHeaderMenuItem {
        /**
          * The `<dx-header>` slot which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload.
          * @value string: The name of the connected slot which is displayed within the `<dx-header>` sidebar when interacted with.
          * @example connected-slot
         */
        "connectedslot"?: string;
        /**
          * The icon which is displayed in the menu item.
          * @value string: The name of the icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
          * @example notifications
         */
        "notifications"?: NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications
         */
        "notificationstheme"?: NotificationIndicatorThemeType;
        /**
          * Fired when the header menu item is interacted with.
          * @example menu-interaction
         */
        "onMenuInteraction"?: (event: DxHeaderMenuItemCustomEvent<string>) => void;
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority"?: number;
    }
    interface DxHeaderMenuLink {
        /**
          * The `<dx-header-navigation-item>` value which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload.
          * @value string: The name of the connected value which is displayed within the `<dx-header>` sidebar navigation when interacted with.
          * @example connected-value
         */
        "connectednavigationvalue"?: string;
        /**
          * The label which is displayed in the menu item.
          * @value string: The label which is displayed in the menu item.
          * @example label
         */
        "label"?: string;
        /**
          * Fired when the header menu item is interacted with.
          * @example menu-interaction
         */
        "onMenuInteraction"?: (event: DxHeaderMenuLinkCustomEvent<string>) => void;
        /**
          * The priority indicates the order in which the entries can be shown and hidden. This property does not have any effect when the component is not within a `<dx-header>` element.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority"?: number;
        /**
          * Highlights this entry.
          * @value true: Entry highlighted as selected.
          * @value false: Entry not highlighted as selected.
          * @example selected
         */
        "selected"?: boolean;
    }
    interface DxHeaderNavigation {
        /**
          * Defines whether the sidebar closes automatically on interacting with a navigation item with no children.
          * @value true: When interacting with a navigation item which has no child navigation items the sidebar closes.
          * @value false: The sidebar does not close when interacting with any navigation items.
          * @example auto-close
         */
        "autoclose"?: boolean;
        /**
          * Defines whether there is a notification within this component or not.
          * @value true: A notification indication is shown at the top right of the navigation menu item.
          * @value false: There is no notification indication on the navigation menu item.
          * @example notification
         */
        "notification"?: boolean;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications-theme
         */
        "notificationstheme"?: NotificationIndicatorThemeType;
        /**
          * Fired when the navigation's header menu item is interacted with.
          * @example menu-interaction
         */
        "onMenuInteraction"?: (event: DxHeaderNavigationCustomEvent<void>) => void;
    }
    interface DxHeaderNavigationItem {
        /**
          * The displayed label.
          * @value string: The text which is displayed inside the navigation item.
          * @example example
         */
        "label"?: string;
        /**
          * Fired when the user interacts with this item. (e.g. by clicking it) It emits a navigation item payload which consists of the corresponding navigation item's `value` and a function which, when called, closes the sidebar.
          * @example interaction
         */
        "onInteraction"?: (event: DxHeaderNavigationItemCustomEvent<NavigationItemInteractionPayload>) => void;
        /**
          * The size of the dropdown.
          * @value m: A medium sized navigation item is displayed.
          * @value l: A large sized navigation item is displayed.
         */
        "size"?: NavigationItemSize;
        /**
          * Unique identifier of this component within a `<dx-header-navigation>` element.
          * @value string: Identifier
          * @example example
         */
        "value"?: string;
    }
    interface DxHeaderNavigationSidebarContent {
        /**
          * Generated navigation page tree which is needed to construct the visual navigation tree.
         */
        "rootnavigationpage"?: NavigationPage1;
    }
    interface DxHeaderUser {
        /**
          * Defines whether the account button "Benutzerkonto" is displayed or not.
          * @value true: The account button is visible.
          * @value false: The account button is not visible.
          * @example account-available
         */
        "accountavailable"?: boolean;
        /**
          * The image URL of the user.
          * @value string: URL
          * @example image
         */
        "imageurl"?: string;
        /**
          * The full name of the user.
          * @value string: Firstname, middle names and lastname separated by spaces.
          * @example name
         */
        "name"?: string;
        /**
          * The number of notifications that are visible inside of the indicator on this item.
          * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
          * @value "no-number": Only a red circle without a number is displayed as an indicator.
          * @example notifications
         */
        "notifications"?: NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
          * @example notifications-theme
         */
        "notificationstheme"?: NotificationIndicatorThemeType;
        /**
          * Fired when the account button ("Benutzerkonto") is clicked in the user's sidebar content.
          * @example sidebar-events
         */
        "onAccountInteraction"?: (event: DxHeaderUserCustomEvent<void>) => void;
        /**
          * Fired when the user's header menu item is interacted with.
          * @example menu-interaction
         */
        "onMenuInteraction"?: (event: DxHeaderUserCustomEvent<void>) => void;
        /**
          * Fired when the sign-out button ("Abmelden") is clicked in the user's sidebar content.
          * @example sidebar-events
         */
        "onSignOut"?: (event: DxHeaderUserCustomEvent<void>) => void;
        /**
          * The priority indicates the order in which the entries can be shown and hidden.
          * @value number: The priority of the user menu item.
          * @example priority
         */
        "priority"?: number;
    }
    interface DxHeaderUserSidebarContent {
        /**
          * Defines whether the account button "Benutzerkonto" is displayed or not.
          * @value true: The account button is visible.
          * @value false: The account button is not visible.
         */
        "accountavailable"?: boolean;
        /**
          * URL zum Foto des Benutzers
          * @value string: URL
         */
        "imageurl"?: string;
        /**
          * The full name of the user.
          * @value string: Firstname, middle names and lastname separated by spaces.
          * @example name
         */
        "name"?: string;
        /**
          * Fired when the account button ("Benutzerkonto") is clicked in the user's sidebar content.
         */
        "onAccountInteraction"?: (event: DxHeaderUserSidebarContentCustomEvent<void>) => void;
        /**
          * Fired when the sign-out button ("Abmelden") is clicked in the user's sidebar content.
         */
        "onSignOut"?: (event: DxHeaderUserSidebarContentCustomEvent<void>) => void;
    }
    interface DxHeroImage {
        /**
          * Url for the picture that should be displayed at the mq1 stage.
          * @value string: Image-url
          * @example example
         */
        "mq1"?: string;
        /**
          * Url for the picture that should be displayed at the mq2 stage.
          * @value string: Image-url
          * @example example
         */
        "mq2"?: string;
        /**
          * Url for the picture that should be displayed at the mq3 stage.
          * @value string: Image-url
          * @example example
         */
        "mq3"?: string;
        /**
          * Url for the picture that should be displayed at the mq4 stage.
          * @value string: Image-url
          * @example example
         */
        "mq4"?: string;
        /**
          * Url for the picture that should be displayed at the mq5 stage.
          * @value string: Image-url
          * @example example
         */
        "mq5"?: string;
    }
    interface DxHorizontalGrowBox {
        "animationmode"?: "open-from-left" | "open-from-right";
        "forcewidth"?: number;
        /**
          * Disconnects the resizeObserver after
         */
        "limitresizes"?: number;
        /**
          * Whether the container is open or not. When changed the container transitions smoothly to the correct width.
          * @value true: The container displays it's content.
          * @value false: The container hides it's content.
         */
        "open"?: boolean;
    }
    interface DxIcon {
        /**
          * Overrides the color of an icon. By default a `grey` (`icons`) color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example all-icons
         */
        "icon"?: string;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example sizes
         */
        "size"?: number;
    }
    interface DxIconAllfinanzberatungwebportaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAnfuehrungszeichen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAntragdvagoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAntragfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppportal01filled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppportal01outlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppportal02filled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppportal02outlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppstoregfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAppstorewoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAuftragsportalfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAuftragsportaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAuge {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAugegestrichen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAusfuellen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAusweis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAusweischeck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconAutorisierungvertragsabschluss {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBausparenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBausparenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBentobox {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBeratugsweltfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBeratugsweltoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBlinkitfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconBlinkitoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconCheck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconCheckkreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconCheckkreisthinoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconCheckthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronhoch {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronlinks {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronlinkskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronlinkskreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronrechts {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronrechtskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronrechtskreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChevronrunter {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconChip {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconCookie {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDatensavefilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDatensaveoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDatenturbofilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDatenturbooutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDauer {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDauer3min {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDbnetfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDbnetoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDepotsbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDepotsthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDesktoppc {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDevicesandere {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDiedvagfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDiedvagoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDnetfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDnetoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDokument {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDoppelchevronlinkskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDoppelchevronrechtskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDownload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDrucker {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvabrechrungsplusportalfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvabrechrungsplusportaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagcloudfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagcloudoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvaghypfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvaghypoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagloginfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagloginoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesystemkifilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesystempimfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesystemvbifilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesytstemkioutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesytstempimoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagonlinesytstemvbioutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagunternehmenspraesentationfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvagunternehmenspraesentationoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvfactoringplusportalfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconDvfactoringplusportaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEasyvbfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEasyvboutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEdit {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEditthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEingabe {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEinkaufenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEinkaufenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEinstellungen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEnergieportalfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEnergieportaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconError {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconErrorthinoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEuro {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEventfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconEventoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFacebook {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFacebookbaukastenfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFacebookbaukastenoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFastforward {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFastrewind {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFile {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFileaudio {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFileaudiothin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFiledoc {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFiledocthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilejpg {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilepdf {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilepdfthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilepng {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFileppt {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilepptthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilevideo {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilevideothin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilexls {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFilter {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconForward30 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFotokamera {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFragekreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFragekreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFrontcam {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFullscreenstart {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconFullscreenstop {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGeldschein {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGesundheitbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGesundheitthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGlasbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGlasthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGoldbarrenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGoldbarrenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconGoogleplus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHamburgermenue {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHandy {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHausratbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHausratthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHd {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHeadphones {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHeadset {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHerzfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHerzoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHerzplus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHome {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHomepagekonfiguratorfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHomepagekonfiguratoroutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconHomethin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIddonlinewbthekgfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIddonlinewbthekwoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIhrefragenunsereantwortenmeineappfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIhrefragenunsereantwortenmeineappoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIhrefragenunsereantwortenzuritfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconIhrefragenunsereantwortenzuritoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconImmobilienbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconImmobilienfinanzierungbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconImmobilienfinanzierungthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconImmobilienthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconInformation {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconInstagram {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconInvestmentdialogfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconInvestmentdialogoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconItweltfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconItweltoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKalender {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKarriereplanungfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKarriereplanungoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKarriereseitefilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKarriereseiteoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKfztarif02filled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKfztarif02outlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKlemmbrett {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKoffer {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKompass {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKontosaldobold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconKontosaldothin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLaptop {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLesezeichenfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLesezeichenoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLinkedin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLinkextern {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLinksoderrechts {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLogo {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLupe {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLupeminus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconLupeplus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMail {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMaus {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeineantraegefilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeineantraegeoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinedvagfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinedvagoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinekundenfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinekundenoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinenachrichten01filled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMeinenachrichteniconoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMensch {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMikrofon {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMinuskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMonitor {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMove {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMovethin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMovie {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMuell {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMyimmoplanetfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconMyimmoplanetoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconNotstarted {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconOrdner {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconOrt {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconOrtfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPassfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPassoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPause {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPausekreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPausekreisoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPfeilhoch {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPfeillinks {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPfeilrechts {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPfeilrunter {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPhonelink {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPhotovoltaikbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPhotovoltaikthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPlaceholder {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPlay {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPlaykreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPlaykreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPlaykreisoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPluskreis {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPrivathaftpflichtbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPrivathaftpflichtthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPrivatkreditbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconPrivatkreditthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconProjezieren {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRechtsschutzbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRechtsschutzthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReisenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReisenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRepeat {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRepeat1 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRepeatfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReplay {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReplay10 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReplay30 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconReplaykreisfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRequiredbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRequiredthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRewind {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconRewind10 {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchliessen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchlossauf {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchlossoffenthinoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchlosszu {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchlosszuthinoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchulungsreisenfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchulungsreisenoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchutzengelbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchutzengelthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSchutzschild {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSeitenanfang {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSenden {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSendenerror {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconShuffle {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconShufflefill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSidebarauf {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSidebarerror {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSidebarzu {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSkiptonext {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSkiptoprevious {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSkype {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSlideshow {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSparenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSparenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSparkontenbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSparkontenthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSpaten {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSpeakersfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSpeakersoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSprechblase {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSprechblasen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStartupappfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStartupappoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStateerror {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStaterequired {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStatesuccess {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSternhalb {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSternleer {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSternvoll {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconStop {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSystemstatusfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconSystemstatusoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTablet {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTastatur {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTeilen {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTelefon {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconThumbsupfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconThumbsupoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTv {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTvconnected {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconTwitter {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUeberlaufmenue {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUhr {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnfallbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnfallthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnternehmenspraesentationfuerfirmenkundenfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnternehmenspraesentationfuerfirmenkundenoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnternehmenspraesentationprivatkundenfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUnternehmenspraesentationprivatkundenoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconUpload {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbnewsappfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbnewsappoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbpostservicefilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbpostserviceoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbshopfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbshopoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbweltfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVbweltoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVeranstaltungsverwaltungfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVeranstaltungsverwaltungoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVerguetungsrechnerfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVerguetungsrechneroutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVerteilenhoriz {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVerteilenvertik {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideoadd {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideoaddcheck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideocall {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideocallmissed {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideocamera {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideocamoff {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideochatfill {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideochatoutline {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideosettings {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVideothek {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVollebreite {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVorteilsrechnergeneralivitalityfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVorteilsrechnergeneralivitalityoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVpdigitalfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVpdigitaloutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVspvertragsmanagementplusfilled {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVspvertragsmanagementplusoutlined {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVuvbold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconVuvthin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconWeg {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconWhatsapp {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconWohngebaeudebold {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconWohngebaeudethin {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconXing {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconYoutube {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconZeitraffer {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxIconZurueck {
        /**
          * Size
         */
        "size"?: number;
    }
    interface DxInfo {
        /**
          * Defines whether the info button is visible or hidden.
          * @value true: The info button is not visible.
          * @value false: The info button is visible.
          * @example hidebutton
         */
        "hidebutton"?: boolean;
        /**
          * Defines the width the info element gets.
          * @value max-width: The info element takes the available space independant of the width of it's inner element.
          * @value content: The info button is displayed right next to the content.
          * @important 
          * @example example
         */
        "size"?: "max-width" | "content";
    }
    interface DxInputLabel {
        /**
          * Aligns the icons in a compressed manner.
         */
        "condensedlayout"?: boolean;
        /**
          * If the label should be in an disabled state.
         */
        "disabled"?: boolean;
        /**
          * Indicates when the data is synced to ki.
         */
        "kisynced"?: boolean;
        /**
          * The text that will be showed on top of a input.
         */
        "label"?: string;
        /**
          * Indicates whether an asterisk is displayed next to the label or not.
         */
        "required"?: boolean;
        /**
          * The font type.
         */
        "type"?: string;
    }
    interface DxInternalWizardStep {
        "finished"?: boolean;
        "isExtendedView"?: boolean;
        "isFirstStep"?: boolean;
        "isLastStep"?: boolean;
        "label"?: string;
        "neighborIsInteractive"?: boolean;
        "onInteraction"?: (event: DxInternalWizardStepCustomEvent<void>) => void;
        "onStateChanged"?: (event: DxInternalWizardStepCustomEvent<WizardStepState>) => void;
        "orientation"?: Orientation;
        "state"?: WizardStepState;
        "value"?: string;
    }
    interface DxLegend {
        /**
          * Indicates if the KI-Sync hint is shown.
          * @value true: KI-Sync hint is shown.
          * @value false: KI-Sync hint is not shown.
         */
        "kisynchint"?: boolean;
        /**
          * Indicates if the required hint is shown.
          * @value false: Required hint is not shown.
          * @value true: Required hint is shown.
         */
        "requiredhint"?: boolean;
    }
    interface DxLink {
        /**
          * Specifies where to open the linked document. This is delegated to the underlying `<a>` element. For more information: https://www.w3schools.com/tags/att_a_target.asp
          * @value string: value delegated to target element
         */
        "target"?: "_blank" | "_self" | "_parent" | "_top" | string;
        /**
          * The URL of the page the link goes to. If undefined the component serves as a button.
          * @value string: The URL or anchor the link refers to.
         */
        "url"?: string;
    }
    interface DxList {
        /**
          * Defines whether the content of the child `<dx-list-item>` elements display their content next to or below the label.
          * @value true: The content of the child `<dx-list-item>` elements is displayed below their label.
          * @value false: The content of the child `<dx-list-item>` elements is displayed next to their label.
         */
        "contentbelow"?: boolean;
        /**
          * The default size of the underlying `dx-list-item` elements.
          * @value m: default sized list
          * @value l: large sized list
          * @example size
         */
        "size"?: "m" | "l";
        /**
          * Indicates whether the list is keeping its width according to the biggest child or keeping the parent's width and wrap the inner labels of the `dx-list-item` elements.
          * @value parent: The list does not overflow the parent width. The labels of the underlying `dx-list-item` elements wrap themselves.
          * @value content: The biggest `dx-list-item` element purports the width of the list.
         */
        "width"?: "parent" | "content";
    }
    interface DxListFlyout {
        /**
          * Automatically clears the current selected item when the list closes.
         */
        "clearselectiononclose"?: boolean;
        "defaulthighlightfirst"?: boolean;
        "direction"?: HorizontalDirection;
        "focusable"?: boolean;
        "itemsvisible"?: number;
        "maxheight"?: number;
        /**
          * Defines the maximal number of menu items the user is able to select. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
          * @value undefined: The user is able to select all menu items.
         */
        "maxselections"?: number;
        /**
          * Fires when the selection within the list changes. It contains the values of the currently selected items.
         */
        "onItemSelectionChange"?: (event: DxListFlyoutCustomEvent<ItemSelectionPayload>) => void;
        /**
          * Fires when the position of the flyout changes when specific conditions are met (not enough space in viewport etc.). It contains the new position.
         */
        "onPositionChange"?: (event: DxListFlyoutCustomEvent<VerticalDirection>) => void;
        "open"?: boolean;
        "position"?: VerticalDirection;
        "preventArrowSelection"?: boolean;
        "preventSpaceSelection"?: boolean;
        "selectionmode"?: ListFlyoutSelectionMode;
        /**
          * Whether a list item should be selected when focused with the keyboard or not.
         */
        "selectonhighlight"?: boolean;
        "size"?: "m" | "l";
        "stopclickpropagationonpopup"?: boolean;
    }
    interface DxListItem {
        /**
          * Implies the action which is triggered when this list item is interacted with.
          * @value navigate: The list item implies that another view is shown after clicking it.
          * @example action-indicator
         */
        "actionindicator"?: ActionIndicatorType;
        /**
          * Defines whether the item is disabled or not.
          * @value true: The item is displayed in a gray tone and can't be interacted with
          * @value false: The item is displayed normally.
          * @exmaple disabled
         */
        "disabled"?: boolean;
        /**
          * The icon which is displayed next to the label.
          * @value string: The icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The text which is displayed within the item.
          * @value string: A text
          * @example label
         */
        "label"?: string;
        /**
          * The current selection state of this item.
          * @value true: The item is selected. This state will be visualized according to the `type`.
          * @value false: The item is not selected.
          * @example selected
         */
        "selected"?: boolean;
        /**
          * The text which is displayed below the label.
          * @value string: A text
          * @example sub-label
         */
        "sublabel"?: string;
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign"?: HorizontalDirection;
        /**
          * The type of the item.
          * @value default: The item will be displayed with an optional icon and a label.
          * @value selectable: The item is displayed like the default and can be selected.
          * @value checkbox: The item displays a checkbox instead of an icon. The selection can be toggled by clicking the item.
          * @example type
         */
        "type"?: ListItemType;
        /**
          * The internal value of this item, which is either a string or an object. It will be delegated by the `itemSelectionChange` event of the upper `dx-list-flyout` element when the selection changes. Currently only important for dx-dropdown and dx-multi-dropdown.
          * @value string: e.g. `Hausrat-1`
          * @value object: e.g. `{id: "hausrat", index: 1}`
          * @example radio-group
         */
        "value"?: StringOrObject2;
    }
    interface DxLogo {
        /**
          * Provides the logo in different styles.
          * @value bildmarke: DVAG-Logo banner image.
          * @value wortmarke: DVAG-Logo with word mark.
          * @example logo
         */
        "type"?: "bildmarke" | "wortmarke";
    }
    interface DxLogoBildmarke {
    }
    interface DxLogoWortmarke {
    }
    interface DxMediaQueryValue {
        /**
          * The value of the property when the current breakpoint is MQ1.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq1"?: any;
        /**
          * The value of the property when the current breakpoint is MQ2.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq2"?: any;
        /**
          * The value of the property when the current breakpoint is MQ3.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq3"?: any;
        /**
          * The value of the property when the current breakpoint is MQ4.
          * @value any: Any value the property can be overriden with.
          * @example example
         */
        "mq4"?: any;
        /**
          * The value of the property when the current breakpoint is MQ5.
          * @value any: Any value the property can be overriden with.
         */
        "mq5"?: any;
        /**
          * The name of the property which should be changed.
          * @value string: Name of the parent property.
          * @example example
         */
        "property"?: string;
    }
    interface DxModal {
        /**
          * The modal dialog component can either be displayed in fullscreen, or the dialog adjusts to the size of the content.
          * @value fullscreen: The dialog is displayed in fullscreen mode.
          * @value content: The dialog adjusts to the content.
          * @value number: A custom defined max-height in pixels.
          * @example content-small
          * @example content-large
          * @example fullscreen-small
          * @example fullscreen-large
          * @example defined-small
          * @example defined-large
         */
        "height"?: ModalHeight;
        /**
          * The label of the dialog.
          * @value string: the title.
         */
        "label"?: string;
        /**
          * The Event triggers, as soon the user closes the dialog via the close button or through clicking on the background behind the modal. It emits an object with meta-data containing the reason the modal was closed and a function to prevent the modal from closing.
          * @example prevent-background-close
          * @example modal-closed
         */
        "onModalClosed"?: (event: DxModalCustomEvent<ModalClosedPayload>) => void;
        /**
          * The Event triggers as soon the dialog opens.
         */
        "onModalOpened"?: (event: DxModalCustomEvent<void>) => void;
        /**
          * Defines if the dialog is visible or not.
          * @value true: Dialog is visible.
          * @value false: Dialog is not visible.
         */
        "visible"?: boolean;
        /**
          * Defines the modal's width dependent on the current breakpoint.
          * @value s: The modal takes up to 444 pixels width.
          * @value m: The modal takes up to 678 pixels width.
          * @value l: The modal takes up to 912 pixels width.
          * @value xl: The modal takes up to 1146 pixels width.
          * @value xxl: The modal takes up to 1380 pixels width.
          * @example width
         */
        "width"?: | "s"
    | "m"
    | "l"
    | "xl"
    | "xxl"
    | "internal-site-navigation-menu";
    }
    interface DxMultiDropdown {
        /**
          * Defines whether the dropdown is enabled or not.
          * @value true: Dropdown is not editable.
          * @value false: Dropdown is editable.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Text, which is displayed in a red error popup at the bottom of the input field.
          * @value string: Error text.
          * @example error
         */
        "errormessage"?: string;
        /**
          * An icon which is displayed next to the placeholder text.
          * @value string: The name of an icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the selection input field.
          * @important 
          * @value string: Label text e.g. `First name`
          * @example label
         */
        "label"?: string;
        /**
          * Delegates the current selection while the user is still editing.
          * @example complex
         */
        "onValueChange"?: (event: DxMultiDropdownCustomEvent<HTMLDxDropdownOptionElement[]>) => void;
        /**
          * Delegates the final selection. The event is fired when the dropdown loses focus or pushing the 'Enter' key.
          * @example complex
         */
        "onValueComplete"?: (event: DxMultiDropdownCustomEvent<HTMLDxDropdownOptionElement[]>) => void;
        /**
          * Placeholder text which is displayed when no option is currently selected.
          * @value string: Placeholder text
          * @example placeholder
         */
        "placeholder"?: string;
        /**
          * Defines the position of the dropdown list.
          * @value top: The list is displayed at the top of the input field.
          * @value bottom: The list is displayed at the bottom of the input field.
          * @example popup-position
         */
        "popupposition"?: "top" | "bottom";
        /**
          * Whether the selection is readonly or editable. If true the value of this component will be visualized as a normal text.
          * @value false: Input is editable.
          * @value true: Input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks this input field as a required form element.
          * @value false: Not required
          * @value true: It is necessary to select an option to fulfill the requirement.
          * @example required
         */
        "required"?: boolean;
        /**
          * The selection label will be displayed when at least one option is selected.
          * @value string: The text which is displayed next to the amount of selected options.
         */
        "selectionlabel"?: string;
        /**
          * The size of the dropdown.
          * @value s: A small dropdown is displayed.
          * @value m: A medium sized dropdown is displayed.
         */
        "size"?: "s" | "m";
        /**
          * Defines the text alignment.
          * @value left: Text is left aligned.
          * @value right: Text is right aligned.
          * @example text-align
         */
        "textalign"?: HorizontalDirection;
    }
    interface DxNotificationBar {
        /**
          * This event is fired, when the user closes the notification via the close button.
          * @example close-notification
         */
        "onCloseNotification"?: (event: DxNotificationBarCustomEvent<void>) => void;
        /**
          * Shows or hides the notification.
          * @value true: Notification is displayed.
          * @value false: Notification is hidden.
          * @example header-integration
         */
        "visible"?: boolean;
    }
    interface DxNotificationIndicator {
        "notifications"?: NotificationIndicatorType;
        /**
          * Specifies the theme for the displayed notifications. The "system" theme is used when a notification emerges from the system like a notification bell. The "user" theme is used as a result of an user action, like adding something to the shopping cart.
          * @value system: Red badge with white border and white text.
          * @value user: Gray badge with white border and black text.
         */
        "theme"?: NotificationIndicatorThemeType;
    }
    interface DxNotificationToast {
        /**
          * Specifies the time in seconds the notification is visible before it's closed automatically. The specified time has to be greater than 0.
          * @value number: A time in seconds.
          * @example close-after
         */
        "closeafter"?: number;
        /**
          * The icon which is rendered at the left side of the notification.
          * @value string: A valid icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The color of the icon.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
          * @example icon
         */
        "iconcolor"?: string;
        /**
          * Fires when the notification closes automatically or by clicking on the close button.
          * @example close-notification
         */
        "onCloseNotification"?: (event: DxNotificationToastCustomEvent<void>) => void;
        /**
          * Text under the content. (e.g. for displaying error codes)
          * @value string: Displayed text under the content.
          * @example sub-content
         */
        "subcontent"?: string;
        /**
          * The title of the notification.
          * @value string: The title.
          * @example default
         */
        "titlestring"?: string;
        /**
          * Specifies the visibility. If the notification closes automatically, by swiping the toast away (mobile only) or by clicking on the close button. this attribute will be set to false.
          * @value true: Toast will be displayed under the header.
          * @value false: Toast is invisible.
          * @example default
         */
        "visible"?: boolean;
    }
    interface DxNumberInput {
        /**
          * Input is not interactable. Label and border are grey.
          * @value true: Input is disabled.
          * @value false: Input is not disabled.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Text under the input field, that is shown in a red dialog.
          * @value string: Errormessage.
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Text on top of the input field.
          * @important 
          * @value string: description e.g `Vorname`
          * @example value
         */
        "label"?: string;
        /**
          * Determines the amount of pre-decimal numbers. The element prevents all inputs higher than this value.
          * @value number: Maximum amount of pre-decimal numbers.
          * @example limit-length
         */
        "limitlength"?: number;
        /**
          * Determines the maximum value. The maximum value is **within** the possible input.
          * @value number: The maximum value the input field can have.
         */
        "max"?: number;
        /**
          * Determines the minimal value. The minimal value is **within** the possible input.
          * @value number: The minimal value the input field can have.
         */
        "min"?: number;
        /**
          * Changes of the input value during the input of the user.
          * @example change-events
         */
        "onValueChange"?: (event: DxNumberInputCustomEvent<number>) => void;
        /**
          * Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field.
          * @example change-events
         */
        "onValueComplete"?: (event: DxNumberInputCustomEvent<number>) => void;
        /**
          * Placeholder that is shown, when the input is empty.
          * @value string: Placeholder.
          * @example custom
         */
        "placeholder"?: string;
        /**
          * Determines the amount of decimal numbers.
          * @value number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)
          * @example custom
         */
        "precision"?: number;
        /**
          * Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision` `placeholder` or `unit`
          * @value currency-euro: Euro
          * @value percent: percent value
          * @example profile
         */
        "profile"?: "currency-euro" | "percent";
        /**
          * Input is in read only mode. The content of the input is displayed in a simple way. The input is not interactable.
          * @value false: Formfield.
          * @value true: Text of the value.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks the formfield as mandatory.
          * @value false: Not mandatory (default).
          * @value true: Mandatory.
          * @example required
         */
        "required"?: boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
         */
        "size"?: "s" | "m";
        /**
          * The step size defines the steps you can access when pressing the arrow up or arrow down key. The possible numbers are dependent on the `step` and the `min` value of this component.  Example: if step=3 and min=undefined, possible numbers are [..., -6, -3, 0, 3, 6, 9, ...]. Example: if step=3 and min=2 the possible numbers shift by 2: [..., -4, -1, 2, 5, 8, 11, ...].
          * @value number: The step size.
          * @example step
         */
        "step"?: number;
        /**
          * Controls the visualization of the pre-deciaml thousandseparator.
          * @value true: Usses thousandseparator (default).
          * @value false: No grouping.
          * @example thousandseparator
         */
        "thousandseparator"?: boolean;
        /**
          * Displays a unit next to the input.
          * @value string: A unit text (e.g: "€", "$", "qm").
          * @example custom
         */
        "unit"?: string;
        /**
          * Value of the input field.
          * @important 
          * @value string: Value of the input.
          * @example value
         */
        "value"?: number;
    }
    interface DxNumberPaginator {
        /**
          * The number of pages which can be selected.
          * @value number: The number of pages.
          * @example count
         */
        "count"?: number;
        /**
          * The current selected page.
          * @value number: The current selected page from 1 to `count`.
          * @example current
         */
        "current"?: number;
        /**
          * Triggers when the page changes by interacting with the arrows, the page numbers or the dropdown (MQ1).
          * @example pagechange
         */
        "onPageChanged"?: (event: DxNumberPaginatorCustomEvent<number>) => void;
    }
    interface DxNumberPaginatorPageButton {
        "onPageChange"?: (event: DxNumberPaginatorPageButtonCustomEvent<number>) => void;
        "onPageSelect"?: (event: DxNumberPaginatorPageButtonCustomEvent<number>) => void;
        "state"?: PageButtonPayload;
    }
    interface DxNumberPicker {
        /**
          * Defines whether the numbers are displayed from left to right, right to left or centered.
          * @value left: The numbers will be displayed from left to right.
          * @value right: The numbers will be displayed from right to left.
          * @value center: The numbers will are centered.
         */
        "align"?: "left" | "right" | "center";
        "onValueChange"?: (event: DxNumberPickerCustomEvent<number>) => void;
        /**
          * The current selected value. It has to be within the provided `values` array.
          * @value : One of the numbers provided in the `values` array.
         */
        "value"?: number;
        /**
          * The possible values to pick from.
          * @value ArrayString: Comma separated List of values in JSON-format e.g.: "[5,10,25]"
          * @value number[]: Array of numbers.
         */
        "values"?: ArrayStringOrArray;
    }
    interface DxOverflowMenu {
        /**
          * The alignment defines in which direction the menu button aligns.
          * @value left: The menu button is displayed on the left and the list anchors on the left of the button.
          * @value right: The menu button is displayed on the right and the list anchors on the right of the button.
          * @example align
         */
        "align"?: HorizontalDirection;
        /**
          * The text which is displayed instead of the menu icon.
          * @value string: The text.
          * @example label
         */
        "label"?: string;
        /**
          * Defines the maximum number of selected menu-item labels the menu displays. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of labels being displayed in the menu.
          * @value undefined: All selected labels are displayed in the menu.
          * @example max-labels
         */
        "maxlabels"?: number;
        /**
          * Defines the maximum number of menu items the user is able to select. This property only has an effect if the `selectionmode` is `multi`.
          * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
          * @value undefined: The user is able to select all menu items.
          * @example max-selections
         */
        "maxselections"?: number;
        /**
          * Fires when the list opens. The event payload consists of an `OpenChangePayload` object which contains an `isOpen` property.
          * @example list-open-change
         */
        "onListOpenChange"?: (event: DxOverflowMenuCustomEvent<OpenChangePayload>) => void;
        /**
          * Fires when the user selects a menu item. The event payload consists of a `SelectionPayload` object which contains a `value` property, being either a string, an object. When the `selectionmode` equals `multi` the omitted `value` within the `SelectionPayload` is an array of strings and objects.
          * @example selection
          * @example selection-complex
         */
        "onSelection"?: (event: DxOverflowMenuCustomEvent<SelectionPayload>) => void;
        /**
          * Defines whether the user is able to select only one or multiple menu items.
          * @value single: The user can select only one menu-item which immediately closes the flyout.
          * @value multi: The user is able to select multiple menu items.
          * @example selection-mode
         */
        "selectionmode"?: ListFlyoutSelectionMode1;
    }
    interface DxOverflowMenuItem {
        /**
          * An icon which is displayed next to the label text.
          * @value string: The icon name.
          * @example icon
         */
        "icon"?: string;
        /**
          * The label which is displayed in the option list. In case `value` is undefined, this `label` represents the internal value.
          * @value string: Displayed text e.g. `Apple`
          * @example label
         */
        "label"?: string;
        /**
          * Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last option which selected attribute is true, will be selected.
          * @value true: This option is selected (Depending on the selection rule of the parent dropdown)
          * @value false: This option is not selected.
         */
        "selected"?: boolean;
        /**
          * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
          * @value string: Internal value as string. (e.g. `"apple"`)
          * @value object: Complex type e.g. `{name: "apple", amount: 3}`
          * @example label
         */
        "value"?: StringOrObject2;
    }
    interface DxOverlay {
        /**
          * The position to anchor ("right" or "left" to the content width) the popup to.
         */
        "anchorposition"?: HorizontalDirection;
        /**
          * CSS display mode of the content area.
         */
        "contentdisplay"?: "block" | "inline-block";
        /**
          * When the overlay is disabled the width and position is not updated anymore.
         */
        "disabled"?: boolean;
        /**
          * Whether the overlay's position and bounding can be changed over time.
         */
        "fixate"?: boolean;
        /**
          * The width of the popup. This simplifies the compution of the popup position. If not fixatewidth is defined the width of the parent bounding box is used instead.
         */
        "fixatewidth"?: number;
        /**
          * Additional pixels between content and popup when using horizontal placement.
         */
        "offsetx"?: number;
        /**
          * Additional pixels between content and popup when using vertical placement.
         */
        "offsety"?: number;
        "onFixedAlignmentChange"?: (event: DxOverlayCustomEvent<"left" | "right">) => void;
        /**
          * Pointer events are delegated to the popup element if true.
         */
        "popupinteractable"?: boolean;
        /**
          * Position, where to place the popup
         */
        "position"?: PopupPosition;
    }
    interface DxPaginator {
        /**
          * The number of pages.
          * @value number: Number of pages.
          * @example count
         */
        "count"?: number;
        /**
          * The first page which should be displayed.
          * @value number: A number from 1 to `count`. This property is mutable and will be delegated by the `pageChanged` event.
          * @example current
         */
        "current"?: number;
        /**
          * Fires when the `current` property changes.
         */
        "onPageChanged"?: (event: DxPaginatorCustomEvent<number>) => void;
    }
    interface DxPlaceholder {
        /**
          * Displays a box.
          * @value boolean: Display box.
          * @example box
         */
        "box"?: boolean;
        /**
          * Displays a Card.
          * @value boolean: Display card.
          * @example card
         */
        "card"?: boolean;
    }
    interface DxPopup {
        /**
          * Specifies the position of the arrow.
         */
        "arrowposition"?: HorizontalDirection;
        /**
          * Specifies the width behavior of the popup bubble.
          * @value parent: width will increases until it matches the parent size
          * @value unconstrained: width will increase unconstrained
         */
        "contentwidth"?: "unconstrained" | "parent";
        /**
          * Uses old theme from <ds-popup>
         */
        "dstheme"?: boolean;
        /**
          * Is popup displayed?
         */
        "show"?: boolean;
        /**
          * Show info or error popup
         */
        "type"?: "info" | "error";
    }
    interface DxProcessHeader {
        /**
          * A headline text representing the name of the current page or context.
          * @string : A string which must not be undefined or empty.
          * @example headline
         */
        "headline"?: string;
    }
    interface DxPulseIcon {
        /**
          * Overrides the color of an icon. By default a `grey` (`icons`) color is used.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Icon subject
          * @value string: Name of the icon.
          * @example all-icons
         */
        "icon"?: string;
        /**
          * Defines the size of the icon. Most icons are available in different sizes and with different line widths.  If a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases.
          * @value 16: Icon optimized for 16x16
          * @value 24: Icon optimized for 24x24
          * @value 32: Icon optimized for 32x32
          * @value 48: Icon optimized for 48x48
          * @value 64: Icon optimized for 64x64
          * @value 72: Icon optimized for 72x72
          * @example sizes
         */
        "size"?: number;
    }
    interface DxRadioButton {
        /**
          * Disables the ability to interact with this component.
          * @value false: User can interact with this component.
          * @value true: User cannot interact with this component.
          * @example modes
         */
        "disabled"?: boolean;
        /**
          * Text, which is displayed next to the radio button.
          * @important 
          * @value string: Label text.
          * @example label
         */
        "label"?: string;
        /**
          * Identifier of this option. When selected this value overwrites the `<dx-radio-button-group>`'s value.
          * @value string: The identifier of this option.
          * @example value
         */
        "value"?: string;
    }
    interface DxRadioButtonGroup {
        /**
          * Disables the ability to interact with this component. Every option inside will also be set to `disabled`.
          * @value false: User can select an option.
          * @value true: User cannot select an option.
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * A text which is displayed in an error popup below the component.
          * @value string: Error text
          * @example error
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the radio group.
          * @important 
          * @value string: Label e.g `Choose an option`
          * @example label
         */
        "label"?: string;
        /**
          * Delegates the current selected `<dx-radio-button>` element's value. This event will not trigger when setting the `value` in JavaScript.
          * @example read-value
         */
        "onValueChange"?: (event: DxRadioButtonGroupCustomEvent<string>) => void;
        /**
          * Defines if the group is in a read-only state. The label of the current selected radio button will be displayed.
          * @value false: The component is displayed normally.
          * @value true: The current selected option is displayed as text. If no option is selected no text will be displayed.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Defines if the radio button group is a required form element.
          * @value false: It is not required to select an option.
          * @value true: To fulfill the requirement one option has to be selected.
          * @example required
         */
        "required"?: boolean;
        /**
          * This property mirrors the current selected option. If set, an inner radio button with the same `value` has to exist.
          * @value string: The value of an inner radio button.
          * @example value
          * @example read-value
          * @example write-value
         */
        "value"?: string;
    }
    interface DxRepresentativeInfo {
        /**
          * Specifies the name of the representative.
          * @value string: the name of the representative.
          * @example example
          * @example type
          * @important
         */
        "name"?: string;
        /**
          * Specifies the text before mentioning the name of the representative.
          * @value assistant: Shows "Assistent von: " as name prefix.
          * @value representative: Shows "Vertreter von: " as name prefix.
          * @example type
         */
        "type"?: "assistant" | "representative";
    }
    interface DxScrollableShadow {
        "showborders"?: boolean;
    }
    interface DxSidebar {
        "onOpenChange"?: (event: DxSidebarCustomEvent<boolean>) => void;
        "open"?: boolean;
    }
    interface DxSidebarContent {
    }
    interface DxSimpleGrowBox {
        "animationmode"?: "top-to-bottom" | "bottom-to-top";
        "onGrowBoxStateChange"?: (event: DxSimpleGrowBoxCustomEvent<GrowBoxState>) => void;
        /**
          * Defines whether the content is visible or not.
          * @value true: The content under the header is visible.
          * @value false: The content under the header is not displayed.
         */
        "open"?: boolean;
        /**
          * Reserves space before opening the grow-box. The reserved space equals the final height of the animated content.
         */
        "reservespaceonopen"?: boolean;
        "slidecontent"?: boolean;
    }
    interface DxSiteNavigation {
        /**
          * Defines from which breakpoint the expanded large screen layout of the component is displayed.
          * @value mq3: The expanded layout starts at mq3 or bigger.
          * @value mq4: The expanded layout starts at mq4 or bigger.
          * @example expanded-layout-at
         */
        "expandedlayoutat"?: SiteNavigationExpansionBreakpoint;
    }
    interface DxSiteNavigationMenu {
        /**
          * If activated, the menu looks out for dx-site-navigation-section elements with the same value as the menu items, to automatically scroll into view.
          * @value true: Automatic navigation is enabled (default)
          * @value false: No automatic navigation
         */
        "autonavigation"?: boolean;
        /**
          * Event is fired when the user interacts with a menu item. The event details object contains the following properties: - `value`: (string) value of the menu item the user clicked - `complete`: (function) needs to be called if not using autonavigation feature. While not completed the menu will not connect to scopes in order to select items by scrolling into the area.
         */
        "onNavigate"?: (event: DxSiteNavigationMenuCustomEvent<NavigateEventDetail>) => void;
        /**
          * The value of the selected menu item.
         */
        "selectedvalue"?: string;
        /**
          * Title of the page. The text is display in the modal view on the small screen modals.
          * @value string: Page title.
         */
        "titlestring"?: string;
    }
    interface DxSiteNavigationMenuItem {
        /**
          * Label of the menu item that is displayed to the user.
          * @value String: label of the item.
         */
        "label"?: string;
        /**
          * State of the content section represented by this menu item.
          * @value error: There is an error within content.
          * @value required: There is an essential information needed in order to continue.
          * @value success: Everything is okay within that section.
          * @value none: No state. (default value)
         */
        "state"?: SiteNavigationMenuItemState;
        /**
          * Unique value to identify this menu item. Use for interaction event handling or when using site navigation scopes.
          * @value String: unique identifier.
         */
        "value"?: string;
    }
    interface DxSiteNavigationScope {
        /**
          * Unique value to identify this section scope.
          * @value string: identifier matching the associated menu item
         */
        "value"?: string;
    }
    interface DxSlideShow {
        /**
          * The initial page which is displayed when loading the component.
          * @value number: The first page to show.
         */
        "initialpage"?: number;
        /**
          * Defines the amount of items visible for the MQ1 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq1amount"?: number;
        /**
          * Defines the amount of items visible for the MQ2 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq2amount"?: number;
        /**
          * Defines the amount of items visible for the MQ3 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq3amount"?: number;
        /**
          * Defines the amount of items visible for the MQ4 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq4amount"?: number;
        /**
          * Defines the amount of items visible for the MQ5 breakpoint.
          * @value number: Amount of visible items.
         */
        "mq5amount"?: number;
        /**
          * Delegates the current page when it changes.
         */
        "onPageChange"?: (event: DxSlideShowCustomEvent<number>) => void;
        /**
          * The space between the slotted elements.
          * @value number: Pixel value of the space between the slotted elements.
         */
        "spacebetween"?: number;
        /**
          * Specifies which navigation element should be displayed.
          * @value paginator: A paginator is displayed under the slide-show.
          * @value slider: A slider is displayed under the slide-show.
          * @example slider
         */
        "viewmode"?: "paginator" | "slider";
    }
    interface DxSlider {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Pattern used to format the current value. A '$' followed by a digit represents the value of the slider. The value of digits determines the amount of decimal numbers.
          * @value string: formatting of the slider value, e.g. `$1 %` or `$2 €`
          * @example formattingpattern
         */
        "formattingpattern"?: string;
        /**
          * Label text below the slider.
          * @important 
          * @value string: Text, e.g. `Amount`
          * @example label
         */
        "label"?: string;
        /**
          * Upper bounds of the slider range.
          * @value number: maximum value of the slider.
          * @example min-max-value
         */
        "max"?: number;
        /**
          * Lower bounds of the slider range.
          * @value number: minimal value of the slider.
          * @example min-max-value
         */
        "min"?: number;
        /**
          * User made changes. Contains the chosen value.
          * @example value-change
         */
        "onValueChange"?: (event: DxSliderCustomEvent<number>) => void;
        /**
          * Turns the input into the read-only mode.
          * @value false: value can be modified by the user (default)
          * @value true: value can not be modified by the user
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * If enabled, it displays labels for the minimum and maximum values.
          * @value false: labels are hidden (default)
          * @value true: labels are shown
          * @example show-min-max-label
         */
        "showminmaxlabel"?: boolean;
        /**
          * If enabled, it displays a label with the current value above the knob.
          * @value true: label is shown (default)
          * @value false: label is hidden
          * @example show-value-label
         */
        "showvaluelabel"?: boolean;
        /**
          * Step size of the slider values. Possible values are always multiples of the step size. Values are automatically rounded to match the step size.
          * @value number: step size.
          * @example step
         */
        "step"?: number;
        /**
          * Current value of the slider.
          * @value number: current value
          * @example min-max-value
         */
        "value"?: number;
    }
    interface DxSlideshowSlider {
        /**
          * Maximum value of the range, the slider can have.
          * @value number: Maximum value of the slider.
          * @example min-max-value
         */
        "max"?: number;
        "onDragging"?: (event: DxSlideshowSliderCustomEvent<boolean>) => void;
        /**
          * User made changes. Contains the chosen value.
          * @example value-change
         */
        "onValueChange"?: (event: DxSlideshowSliderCustomEvent<number>) => void;
        /**
          * Size of the Steps, the values can be selected.
          * @value number: Minimal possible change.
          * @example step
         */
        "step"?: number;
        /**
          * Current value of the slider.
          * @value number: Current value
          * @example min-max-value
         */
        "value"?: number;
    }
    interface DxSort {
        /**
          * Fires when the children are sorted by the user. By reading the event's detail property you can access the `originalArray` and the `sortedArray`. Both arrays consist of the `value` properties provided by the `<dx-sort-item>` elements.
          * @example sort
         */
        "onSort"?: (event: DxSortCustomEvent<SortDetail>) => void;
        /**
          * Whether the sorting is enabled or not.
          * @example sortable
         */
        "sortable"?: boolean;
    }
    interface DxSortHandle {
    }
    interface DxSortItem {
        /**
          * Internal representation of the sort item.
          * @value string: Identificator
         */
        "value"?: string;
    }
    interface DxSpacer {
        /**
          * Defines the size of the spacer for the MQ1 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq1"?: Size;
        /**
          * Defines the size of the spacer for the MQ2 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq2"?: Size;
        /**
          * Defines the size of the spacer for the MQ3 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq3"?: Size;
        /**
          * Defines the size of the spacer for the MQ4 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq4"?: Size;
        /**
          * Defines the size of the spacer for the MQ5 breakpoint.
          * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The predefined width and height of this component
          * @value postfix 'v' (e.g '4v', '64v'): The defined size will only be applied to the height of the component.
          * @value postfix 'h' (e.g '4h', '64h'): The defined size will only be applied to the height of the component.
          * @value no postfix (e.g 4, 64): The defined size will be applied to the width and height of the component.
         */
        "mq5"?: Size;
    }
    interface DxSpinner {
        /**
          * Specififes the size of the spinner.
          * @value small: Spinner has a size of 16px.
          * @value medium: Spinner has a size of 24px.
          * @value large: Spinner has a size of 32px.
          * @value xlarge: Spinner has a size of 72px.
          * @example size
         */
        "size"?: "small" | "medium" | "large" | "xlarge";
        /**
          * Displays the spinner in a light or dark theme.
          * @value light: The segments have a dark tone to contrast a light background.
          * @value dark: The segments have a light tone to contrast a dark background.
          * @example theme
         */
        "theme"?: "light" | "dark";
    }
    interface DxTabBar {
        /**
          * This event fires when the user selects a new tab. It contains the `value` of the corresponding `<dx-tab-page>`.
          * @example tab-change
         */
        "onTabChange"?: (event: DxTabBarCustomEvent<string>) => void;
        /**
          * Displays the tab page which `value` property corresponds to this property.
          * @important 
          * @value string: `value` of the `<dx-tab-page>` to display.
          * @example selected
         */
        "selected"?: string;
    }
    interface DxTabDropdown {
        "label"?: string;
        "onValueComplete"?: (event: DxTabDropdownCustomEvent<StringOrObject2>) => void;
    }
    interface DxTabPage {
        /**
          * The text which is displayed in the tab.
          * @value string: The label
         */
        "label"?: string;
        /**
          * Unique identifier of this component within a `<dx-tab-bar>` element. The content will be visible when the corresponding `<dx-tab-bar>` element's `show` property value equals the `name`.  If no value is specified the parent `dx-tab-bar` elements falls back on the `label` property to differentiate this page.
          * @value string: Identifier
          * @example value
         */
        "value"?: string;
    }
    interface DxTable {
        /**
          * Defines the column that is used for initially sorting the table.
          * @value string: The `columnId` or `label` of the column.
          * @example initial-sort
         */
        "initialsort"?: string;
        /**
          * Specifies the initial sort direction.
          * @value asc: Ascending order.
          * @value desc: Descending order.
          * @example initial-sort
         */
        "initialsortdirection"?: "asc" | "desc";
        /**
          * Specifies whether the table is self-managed or remote-controlled.
          * @value managed: The table is responsible for sorting and pagination.
          * @value remote: The table relies on an external implementation for creating rows, sorting and pagination using the `tableStateChanged` event.
          * @example remote
          * @example remote-complex
         */
        "mode"?: "managed" | "remote";
        /**
          * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
          * @example table-state-changed
         */
        "onExpansionChanged"?: (event: DxTableCustomEvent<boolean>) => void;
        /**
          * In case a row is selected this event will fire the key of the row.
          * @value string: If the `selectionmode` allows a single selection the event will delegate one selected row key.
          * @value string[]: If the `selectionmode` allows a multi selection the event will delegate all selected row keys.
          * @deprecated Please use the `rowSelected` event of the `<dx-table-row>` components to get notified when a new row was selected.
         */
        "onRowsSelected"?: (event: DxTableCustomEvent<string[]>) => void;
        /**
          * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
          * @example table-state-changed
         */
        "onSelectionStateChanged"?: (event: DxTableCustomEvent<TableSelection>) => void;
        /**
          * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
          * @example table-state-changed
         */
        "onTableStateChanged"?: (event: DxTableCustomEvent<TableConfig>) => void;
        /**
          * The initially selected option for the page size. It only has an effect if the `pagesizes` property is defined.
          * @value number: Number of rows per page.
          * @example paginator
         */
        "pagesize"?: number;
        /**
          * When defined it enables the pagination for this table. It defines the available page sizes a user is able to select.
          * @value ArrayString: Comma separated List of values in JSON-format e.g.: "[5,10,25]"
          * @value number[]: Array of numbers.
          * @example paginator
         */
        "pagesizes"?: ArrayStringOrArray1;
        /**
          * The data length this table should visualize. In case the table manages itself this attribute should not be set. If the table is remote-controlled this attribute has to be set because the table needs to know the exact amount of data to visualize the **paging** accordingly.
          * @example remote
          * @example remote-complex
         */
        "rowcount"?: number;
        /**
          * Specifies if the table should be scrollable. It is necessary to ensure that every `<dx-header-item>` has the width property set.
          * @value true: Table is scrollable.
          * @value false: Table is not scrollable.
          * @example scrollable
         */
        "scrollable"?: boolean;
        /**
          * Enables the selection of rows. A `key` for every row has to be specified.
          * @value true: The selection-group will be opened.
          * @value false: The selection-group will be closed.
          * @example selection
         */
        "selectionenabled"?: boolean;
        /**
          * Specifies if only one or multiple rows can be selected.
          * @value multi: Multiple rows can be selected.
          * @value single: One row can be selected at a time.
          * @example selection-mode
         */
        "selectionmode"?: SelectionMode;
    }
    interface DxTableCell {
        /**
          * The alignment of this cell. If not explicity set the cell derives the alignment
         */
        "align"?: ColumnAlignment;
        /**
          * The background color.
          * @value string: A color which has to be defined within the color palette of the design system. (e.g.: blue-100, error, etc.)
         */
        "color"?: string;
        /**
          * The type of this cell. If not explicity set the cell inherits the type by the corresponding `<dx-table-header-item>`.
          * @value text: The `value` is a string which will be rendered as text. It is left-aligned by default.
          * @value numeric: The `value` is a number which will be rendered as text. It is right-aligned by default.
          * @value date:  The `value` is a string ('YYYY-mm-dd') which will be formatted as a date string. It is left-aligned by default.
          * @value currency: The `value` is a number which will be formatted as a currency string (e.g: 1.120,00 €). The currency itself is rendered as an icon. It is right-aligned by default.
          * @value html: The default slot will be rendered in place of the `value`.
         */
        "type"?: string;
        /**
          * The value of this cell. It will be formatted depending on the cell's `type`.
          * @value string: The value which is formatted within the cell.
         */
        "value"?: string;
    }
    interface DxTableFooter {
    }
    interface DxTableHeader {
    }
    interface DxTableHeaderItem {
        /**
          * The alignment of the title text and the cell contents within this column. **Warning:** The default alignment which is defined by the `type` property will be overriden.
          * @value left: Child elements are left-aligned.
          * @value right: Child elements right-aligned.
          * @value center: Child elements are centered.
         */
        "align"?: "left" | "right" | "center";
        /**
          * This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property. Otherwise the `label` property will be send.
          * @value string: An unique identifikation for this column.
         */
        "columnid"?: string;
        /**
          * Declare your own sorting function for this column. This enables you to sort your own objects.
          * @value function: The sort function.
         */
        "customSort"?: (
    firstCell: HTMLDxTableCellElement,
    secondCell: HTMLDxTableCellElement
  ) => number;
        /**
          * The title text of this column. This value represents the column identificator if there is no `columnid` specified.
          * @value string: The title text.
         */
        "label"?: string;
        /**
          * Specifies the number of rows within an column.
          * @value s: Table cells have only 1 text row
          * @value m: Table cells have up to 2 text rows.
          * @value l: Table cell have up to 3 text rows.
         */
        "linesize"?: "s" | "m" | "l";
        /**
          * Define the maximum width of the table in pixels.
          * @value number: The maximal width in pixels.
         */
        "maxwidth"?: number;
        /**
          * Define the minimal width of the table in pixels.
          * @value number: The minimal width in pixels.
         */
        "minwidth"?: number;
        /**
          * Allows the table to sort this column.
          * @value true: The column is sortable.
          * @value false: The column is not sortable.
         */
        "sortable"?: boolean;
        /**
          * Specifies the priority of this column which is considered in the table's secondary sorting.
          * @value number: Priority. The lower this number the higher the chance this column will be considered first in the secondary sorting of the table.
         */
        "sortpriority"?: number;
        /**
          * Whether this column is sticky or not.
          * @value true: The column and the corresponding cells are sticky and cannot be scrolled
          * @value false: The column can be scrolled away.
         */
        "sticky"?: boolean;
        /**
          * Defines a type for the whole column.
          * @value text: Renders the provided `value` property of an `<dx-table-cell>` as a left aligned text.
          * @value numeric: Renders the provided `number` value of an `<dx-table-cell>` as a right aligned text.
          * @value date: Renders the provided string ('YYYY-mm-dd') of an `<dx-table-cell>` as a left aligned text.
          * @value currency: Renders the provided `number` of an `<dx-table-cell>` as right aligned text with attached currency icon.
          * @value html: Renders the provided html elements.
         */
        "type"?: ColumnType1;
    }
    interface DxTableRow {
        /**
          * Fired when the selection-status of the row is changed.
          * @value boolean: Row is selected or not.
         */
        "onRowSelected"?: (event: DxTableRowCustomEvent<boolean>) => void;
        /**
          * A unique identifier for the data this row displays in a table.
          * @value string: Unique identifier
         */
        "rowid"?: string;
        /**
          * Selects this row. If true the row will be selected and the table's selection will be enabled.
          * @value true: Row is selected.
          * @value false: Row is not selected.
          * @example selection
         */
        "selected"?: boolean;
    }
    interface DxTag {
        /**
          * Colors the background in the given color from the color palette. Only works for the `static` tag type.
          * @value string: A color from the color palette
          * @example custom-colors
         */
        "color"?: string;
        /**
          * Displays the given value
          * @value string: A text to display.
         */
        "label"?: string;
        /**
          * Is fired when the user interacts with the remove button.
          * @example remove-event
         */
        "onRemove"?: (event: DxTagCustomEvent<void>) => void;
        /**
          * Is fired when the user interacts with a selectable tag.
          * @example select-event
         */
        "onSelectChange"?: (event: DxTagCustomEvent<boolean>) => void;
        /**
          * Defines if the interactive tag displays a remove button. Only works in comination with the `type` property set to `interactive` and the tag is not `selectable`.
          * @value true: tag shows button.
          * @value false: tag does not show button.
          * @example remove-event
         */
        "removeable"?: boolean;
        /**
          * Defines whether the tag is selectable or not.
          * @value true: tag is selectable .
          * @value false: tag is not selectable.
          * @example select-event
         */
        "selectable"?: boolean;
        /**
          * Defines if the tag is selected. When the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired.
          * @value true: tag is selected.
          * @value false: tag is not selected.
         */
        "selected"?: boolean;
        /**
          * Colors the tag text in the given color from the color palette. Only works for the `static` tag type.
          * @value string: A color from the color palette
          * @example custom-colors
         */
        "textcolor"?: string;
        /**
          * Defines the theme for this tag. The theme tag only works in combination with `static` tag type.
          * @value gray: Gray theme
          * @value gold: Gold theme
          * @value green: Green theme
          * @value red: Red theme
          * @value orange: Orange theme
          * @value purple: Purple theme
          * @value turquoise: Turquoise theme
          * @example themes
          * @important
         */
        "theme"?: TagThemeChoices;
        /**
          * Defines the type of tag.
          * @value static: Tag is not interactable by the user. The tag only shows its given label.
          * @value interactive: Tag is interactable by the user.
         */
        "type"?: "static" | "interactive";
    }
    interface DxText {
        /**
          * Defines the text color.
          * @value string: Name of the color (see example for references)
          * @example colors
         */
        "color"?: string;
        /**
          * Specifies the style of the text.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value auto: The style is determined automatically based on the position the `<dx-text>` in the element tree.
          * @value Headline-1: Shortcut is `h1`
          * @value Headline-2: Shortcut is `h2`
          * @value Headline-3: Shortcut is `h3`
          * @value Headline-4: Shortcut is `h4`
          * @value Headline-5: Shortcut is `h5`
          * @value Paragraph-Big: Shortcut is `pb`
          * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
          * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
          * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
          * @value Paragraph-Standard: Shortcut is `ps`
          * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
          * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
          * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
          * @value Infotext-Standard: Shortcut is `it`
          * @value Infotext-Standard-Italic: Shortcut is `it-italic`
          * @value Infotext-Standard-Bold: Shortcut is `it-bold`
          * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
          * @value Infotext-Small: Shortcut is `its`
          * @value Infotext-Small-Italic: Shortcut is `its-italic`
          * @value Infotext-Small-Bold: Shortcut is `its-bold`
          * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
          * @important 
          * @example text-styles
          * @example text-styles-shortcuts
         */
        "type"?: string;
    }
    interface DxTextArea {
        /**
          * Textarea is disabled and cannot be used anymore. Label and border are grey.
          * @value true: Textarea is disabled
          * @value false: Textarea is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Text that is shown under the textarea in a red dialog.
          * @value string: Errormessage
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label shown above the textarea.
          * @value string: Label e.g `Notizen`
          * @important 
          * @example label
         */
        "label"?: string;
        /**
          * Number of lines shown simultaneously.
          * @value number: Number of lines.
          * @example lines
         */
        "lines"?: number;
        /**
          * Maximum number of characters.
          * @value number: Number of characters
          * @example maxlength
         */
        "maxlength"?: number;
        /**
          * Event is thrown when the user changes the content of the textarea.
          * @example change-events
         */
        "onValueChange"?: (event: DxTextAreaCustomEvent<string>) => void;
        /**
          * Event is thrown when the user checks the input. Event is triggered when the user presses Return or leaves the textarea.
          * @example change-events
         */
        "onValueComplete"?: (event: DxTextAreaCustomEvent<string>) => void;
        /**
          * Placeholder for this text area.
          * @value string: The placeholder text.
          * @example placeholder
         */
        "placeholder"?: string;
        /**
          * Textarea is in read-only mode. Content of the textare is displayed in a simple way.
          * @value false: Formfield
          * @value true: Shows the content only as text.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Marks the textarea as mandatory.
          * @value false: Not mandatory (Default).
          * @value true: mandatory field.
          * @example required
          * @example required-maxlength
         */
        "required"?: boolean;
        /**
          * Text of the textarea.
          * @important 
          * @value string: Content of the textarea.
          * @example value
         */
        "value"?: string;
    }
    interface DxTextInput {
        /**
          * Defines if the input field is enabled or not.
          * @value true: Input ist disabled
          * @value false: Input is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Error text which is displayed within a red dialog beneath the input.
          * @value string: error message
          * @example error
         */
        "errormessage"?: string;
        /**
          * Displays an icon when the input is not active or empty.
          * @value string: the name of the icon.
          * @example icon
         */
        "icon"?: string;
        /**
          * Indicates that the form is synced with the KI.
          * @value true: Synchronized.
          * @value false: Not synchronized.
          * @example kisynced
         */
        "kisynced"?: boolean;
        /**
          * Label which is displayed above the input field.
          * @important 
          * @value string: Label e.g `first name`
          * @example label
         */
        "label"?: string;
        /**
          * Limits the amount of characters a user can enter.
          * @value number: Amount of possible characters.
          * @example limitlength
         */
        "limitlength"?: number;
        /**
          * This event is fired, when the user fills out this input. The event paylod contains an controller which can be used to submit autocomplete options.
          * @example autocomplete-plz
         */
        "onAutocomplete"?: (event: DxTextInputCustomEvent<TextInputAutocompleteController>) => void;
        /**
          * Trigger when the user presses the "Enter" key while editing the input field.
          * @example enter-press
         */
        "onEnterPress"?: (event: DxTextInputCustomEvent<void>) => void;
        /**
          * This event is fired when the user selects an autocomplete options from the list. The event payload contains the `data` of the selected AutoCompleteOption.
          * @example autocomplete-plz-ort
         */
        "onSelectAutocomplete"?: (event: DxTextInputCustomEvent<any>) => void;
        /**
          * Emits this event when the user changes the value of this input.
          * @example change-events
         */
        "onValueChange"?: (event: DxTextInputCustomEvent<string>) => void;
        /**
          * This event is emitted when the user accepts the value. The user accepts the value by pressing the Enter key or when the user leave the input.
          * @example change-events
         */
        "onValueComplete"?: (event: DxTextInputCustomEvent<string>) => void;
        /**
          * Placeholder for this input field.
          * @value string: The placeholder.
         */
        "placeholder"?: string;
        /**
          * Input field is in readonly mode. The value of this input is display in an simplified manner. The input field is not interactable.
          * @value false: input is not editable.
          * @value true: input is read-only.
          * @example readonly
         */
        "readonly"?: boolean;
        /**
          * Input is marked as required.
          * @value false: Not required.
          * @value true: Input field is required, and an icon is displayed below the input field.
          * @example required
         */
        "required"?: boolean;
        /**
          * Defines the size of this input.
          * @value m: medium size text-input
          * @value s: small sized input. Should only be used in special cases.
         */
        "size"?: "s" | "m";
        /**
          * The value of this input.
          * @important 
          * @value string: Value of this input.
          * @example value
         */
        "value"?: string;
    }
    interface DxTextList {
        /**
          * Specifies the style all text within this text list.  If the `type` attribute isn't set, a default style will be set, that is based on the parent components.
          * @value Headline-1: Shortcut is `h1`
          * @value Headline-2: Shortcut is `h2`
          * @value Headline-3: Shortcut is `h3`
          * @value Headline-4: Shortcut is `h4`
          * @value Headline-5: Shortcut is `h5`
          * @value Paragraph-Big: Shortcut is `pb`
          * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
          * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
          * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
          * @value Paragraph-Standard: Shortcut is `ps`
          * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
          * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
          * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
          * @value Infotext-Standard: Shortcut is `it`
          * @value Infotext-Standard-Italic: Shortcut is `it-italic`
          * @value Infotext-Standard-Bold: Shortcut is `it-bold`
          * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
          * @value Infotext-Small: Shortcut is `its`
          * @value Infotext-Small-Italic: Shortcut is `its-italic`
          * @value Infotext-Small-Bold: Shortcut is `its-bold`
          * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
          * @example type
         */
        "type"?: string;
    }
    interface DxToggle {
        /**
          * Defines if the toggle is checked or not.
          * @value true: Toggle is checked
          * @value false: Toggle is not checked
          * @example checked
         */
        "checked"?: boolean;
        /**
          * Defines if the toggle is disabled or not.
          * @value true: Toggle is disabled
          * @value false: Toggle is not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Emits this event when the user changes the value of this input.
          * @example checked-change
         */
        "onCheckedChange"?: (event: DxToggleCustomEvent<boolean>) => void;
    }
    interface DxUserAvatar {
        /**
          * The image URL of the user.
          * @value string: URL
          * @example image
         */
        "imageurl"?: string;
        /**
          * The initials of the user's name.
          * @value string: Initials, e.g. `"FG"`
          * @important 
          * @example initials
         */
        "initials"?: string;
        /**
          * The size of the user avatar.
          * @value xs: Extra-small sized user avatar (40px)
          * @value s: Small sized user avatar (56px)
          * @value m: Medium sized user avatar (72px)
          * @value l: Large sized user avatar (96px)
          * @value xl: Extra-large sized user avatar (120px)
          * @value xxl: Extra-extra-large sized user avatar (160px)
         */
        "size"?: DxUserAvatarSize;
    }
    interface DxWizard {
        /**
          * The current visible step.
          * @value string: The `value` value of an inner `<dx-wizard-step>` element.
          * @example current-step
         */
        "currentstep"?: string;
        /**
          * Defines from which breakpoint the expanded large screen layout of the component is displayed.
          * @value auto: The expanded layout starts at mq2 for the `horizontal` layout and mq3 for the `vertical` layout.
          * @value mq3: The expanded layout starts at mq3 or bigger.
          * @value mq4: The expanded layout starts at mq4 or bigger.
          * @example expanded-layout-at
         */
        "expandedlayoutat"?: "auto" | "mq3" | "mq4";
        /**
          * This text will be displayed within the mobile-view's modal and should reflect the headline of the current page the user is in.
          * @value string: The headline of the current site.
          * @example headline
          * @important
         */
        "headline"?: string;
        /**
          * Fires when the `currentstep` property value changes.
          * @example current-step
         */
        "onCurrentStepChange"?: (event: DxWizardCustomEvent<string>) => void;
        /**
          * Defines the orientation of the wizard's expanded view. The default orientation of the mobile view (dependent on `expandedlayoutat` property) is always `horizontal`.
          * @value horizontal: All wizards will be displayed from left to right as long as there are six steps at most. If there are more than six steps the `vertical` view will be displayed instead.
          * @value vertical: All steps are displayed from top to bottom. Only the mobile view displays a horizontal setup.
          * @example orientation
          * @example orientation-invalid
         */
        "orientation"?: Orientation;
    }
    interface DxWizardStep {
        /**
          * Whether this step is already finished or not.
          * @value true: The step is finished. If all previous steps are finished as well the wizard automatically switches to the next page.
          * @value false: The step is not finished yet.
          * @example finished
         */
        "finished"?: boolean;
        /**
          * The displayed name of this step.
          * @value string: The displayed name.
          * @example label
         */
        "label"?: string;
        /**
          * Fires when the user interacts with this step.
          * @example interaction
         */
        "onInteraction"?: (event: DxWizardStepCustomEvent<void>) => void;
        /**
          * A unique identifier within a `<dx-wizard>` element.
          * @value string: A non-displayed text representing this component. It also serves the purpose of identifying which slot to show when this step is currently edited.
          * @example value
         */
        "value"?: string;
    }
    interface DxYesNo {
        /**
          * Defines if the buttons are disabled or not.
          * @value true: Buttons are disabled
          * @value false: Buttons are not disabled
          * @example disabled
         */
        "disabled"?: boolean;
        /**
          * Error text which is displayed within a red dialog below the input.
          * @value string: error message
          * @example error-message
         */
        "errormessage"?: string;
        /**
          * Emits this event when the user changes the value of this input.
          * @example value-change
         */
        "onValueChange"?: (event: DxYesNoCustomEvent<string>) => void;
        /**
          * Defines the height of the buttons.
          * @value s: Buttons are small.
          * @value m: Buttons are a bit bigger.
          * @example size
         */
        "size"?: ButtonSize;
        /**
          * The value of this component.
          * @important 
          * @value yes: yes button is selected
          * @value no: no button is selected.
          * @value unset: Nothing is selected.
          * @example value
         */
        "value"?: ButtonValue;
    }
    interface IntrinsicElements {
        "ds-action-list": DsActionList;
        "ds-action-list-item": DsActionListItem;
        "ds-alert": DsAlert;
        "ds-alert-button": DsAlertButton;
        "ds-announcement-bar": DsAnnouncementBar;
        "ds-app": DsApp;
        "ds-blink": DsBlink;
        "ds-bordered-form-group": DsBorderedFormGroup;
        "ds-bordered-form-item": DsBorderedFormItem;
        "ds-button": DsButton;
        "ds-button-bar": DsButtonBar;
        "ds-calendar": DsCalendar;
        "ds-card": DsCard;
        "ds-card-collapsable": DsCardCollapsable;
        "ds-card-content": DsCardContent;
        "ds-card-header": DsCardHeader;
        "ds-card-image-header": DsCardImageHeader;
        "ds-card-tab-bar": DsCardTabBar;
        "ds-card-tab-page": DsCardTabPage;
        "ds-centered-board": DsCenteredBoard;
        "ds-centered-board-item": DsCenteredBoardItem;
        "ds-chart-sample": DsChartSample;
        "ds-checkbox": DsCheckbox;
        "ds-column": DsColumn;
        "ds-date-input": DsDateInput;
        "ds-date-range": DsDateRange;
        "ds-donut-chart": DsDonutChart;
        "ds-dropdown": DsDropdown;
        "ds-dropdown-option": DsDropdownOption;
        "ds-fm-ergebnisuebersicht": DsFmErgebnisuebersicht;
        "ds-fm-ergebnisuebersicht-item": DsFmErgebnisuebersichtItem;
        "ds-fm-ergebnisuebersicht-table": DsFmErgebnisuebersichtTable;
        "ds-footer": DsFooter;
        "ds-form-layout": DsFormLayout;
        "ds-fullscreen-spinner": DsFullscreenSpinner;
        "ds-function-icon-button": DsFunctionIconButton;
        "ds-grid": DsGrid;
        "ds-grouped-text-input": DsGroupedTextInput;
        "ds-grow-box": DsGrowBox;
        "ds-header": DsHeader;
        "ds-header-action": DsHeaderAction;
        "ds-header-action-list": DsHeaderActionList;
        "ds-header-customer": DsHeaderCustomer;
        "ds-header-user": DsHeaderUser;
        "ds-hero-image": DsHeroImage;
        "ds-hr": DsHr;
        "ds-icon": DsIcon;
        "ds-icon-achtung": DsIconAchtung;
        "ds-icon-achtungcircle": DsIconAchtungcircle;
        "ds-icon-addonclearbutton": DsIconAddonclearbutton;
        "ds-icon-aktivitaeten": DsIconAktivitaeten;
        "ds-icon-aktualisieren": DsIconAktualisieren;
        "ds-icon-anleger": DsIconAnleger;
        "ds-icon-arbeitsplatz": DsIconArbeitsplatz;
        "ds-icon-arbeitsweg": DsIconArbeitsweg;
        "ds-icon-auge": DsIconAuge;
        "ds-icon-augedurchgestrichen": DsIconAugedurchgestrichen;
        "ds-icon-ausgehen": DsIconAusgehen;
        "ds-icon-ausweis": DsIconAusweis;
        "ds-icon-ausweischeck": DsIconAusweischeck;
        "ds-icon-bank": DsIconBank;
        "ds-icon-bearbeiten": DsIconBearbeiten;
        "ds-icon-beratungbeenden": DsIconBeratungbeenden;
        "ds-icon-bueroklammer": DsIconBueroklammer;
        "ds-icon-button": DsIconButton;
        "ds-icon-check": DsIconCheck;
        "ds-icon-collapseclose": DsIconCollapseclose;
        "ds-icon-collapseopen": DsIconCollapseopen;
        "ds-icon-dislike": DsIconDislike;
        "ds-icon-dokumenteupload": DsIconDokumenteupload;
        "ds-icon-download": DsIconDownload;
        "ds-icon-dropdown": DsIconDropdown;
        "ds-icon-einkaufen": DsIconEinkaufen;
        "ds-icon-einstellungen": DsIconEinstellungen;
        "ds-icon-eurozeichen": DsIconEurozeichen;
        "ds-icon-faq": DsIconFaq;
        "ds-icon-favoritfilled": DsIconFavoritfilled;
        "ds-icon-favoritoutline": DsIconFavoritoutline;
        "ds-icon-filter": DsIconFilter;
        "ds-icon-formulare": DsIconFormulare;
        "ds-icon-formulareinitial": DsIconFormulareinitial;
        "ds-icon-fotogalerie": DsIconFotogalerie;
        "ds-icon-fotogalerierahmen": DsIconFotogalerierahmen;
        "ds-icon-gartenarbeit": DsIconGartenarbeit;
        "ds-icon-geld": DsIconGeld;
        "ds-icon-gesundheit": DsIconGesundheit;
        "ds-icon-gesundheit2": DsIconGesundheit2;
        "ds-icon-glas": DsIconGlas;
        "ds-icon-glas2": DsIconGlas2;
        "ds-icon-glocke": DsIconGlocke;
        "ds-icon-hamburgermenue": DsIconHamburgermenue;
        "ds-icon-hauptdokument": DsIconHauptdokument;
        "ds-icon-hausarbeit": DsIconHausarbeit;
        "ds-icon-hausrat": DsIconHausrat;
        "ds-icon-hausratreise": DsIconHausratreise;
        "ds-icon-home": DsIconHome;
        "ds-icon-info": DsIconInfo;
        "ds-icon-investment": DsIconInvestment;
        "ds-icon-jubilaeumicon10": DsIconJubilaeumicon10;
        "ds-icon-jubilaeumicon100": DsIconJubilaeumicon100;
        "ds-icon-jubilaeumicon105": DsIconJubilaeumicon105;
        "ds-icon-jubilaeumicon110": DsIconJubilaeumicon110;
        "ds-icon-jubilaeumicon115": DsIconJubilaeumicon115;
        "ds-icon-jubilaeumicon120": DsIconJubilaeumicon120;
        "ds-icon-jubilaeumicon125": DsIconJubilaeumicon125;
        "ds-icon-jubilaeumicon15": DsIconJubilaeumicon15;
        "ds-icon-jubilaeumicon20": DsIconJubilaeumicon20;
        "ds-icon-jubilaeumicon25": DsIconJubilaeumicon25;
        "ds-icon-jubilaeumicon30": DsIconJubilaeumicon30;
        "ds-icon-jubilaeumicon35": DsIconJubilaeumicon35;
        "ds-icon-jubilaeumicon40": DsIconJubilaeumicon40;
        "ds-icon-jubilaeumicon45": DsIconJubilaeumicon45;
        "ds-icon-jubilaeumicon5": DsIconJubilaeumicon5;
        "ds-icon-jubilaeumicon50": DsIconJubilaeumicon50;
        "ds-icon-jubilaeumicon55": DsIconJubilaeumicon55;
        "ds-icon-jubilaeumicon60": DsIconJubilaeumicon60;
        "ds-icon-jubilaeumicon65": DsIconJubilaeumicon65;
        "ds-icon-jubilaeumicon70": DsIconJubilaeumicon70;
        "ds-icon-jubilaeumicon75": DsIconJubilaeumicon75;
        "ds-icon-jubilaeumicon80": DsIconJubilaeumicon80;
        "ds-icon-jubilaeumicon85": DsIconJubilaeumicon85;
        "ds-icon-jubilaeumicon90": DsIconJubilaeumicon90;
        "ds-icon-jubilaeumicon95": DsIconJubilaeumicon95;
        "ds-icon-kalender": DsIconKalender;
        "ds-icon-kamera": DsIconKamera;
        "ds-icon-kameravideo": DsIconKameravideo;
        "ds-icon-kfz": DsIconKfz;
        "ds-icon-like": DsIconLike;
        "ds-icon-liquiditaet": DsIconLiquiditaet;
        "ds-icon-listenpfeil": DsIconListenpfeil;
        "ds-icon-loeschen": DsIconLoeschen;
        "ds-icon-lupevergroessern": DsIconLupevergroessern;
        "ds-icon-lupeverkleinern": DsIconLupeverkleinern;
        "ds-icon-mail": DsIconMail;
        "ds-icon-mensch": DsIconMensch;
        "ds-icon-minus": DsIconMinus;
        "ds-icon-moremenue": DsIconMoremenue;
        "ds-icon-neu": DsIconNeu;
        "ds-icon-neukreis": DsIconNeukreis;
        "ds-icon-ordner": DsIconOrdner;
        "ds-icon-pfeilnaechsteseingabefeld": DsIconPfeilnaechsteseingabefeld;
        "ds-icon-pfeilnaechstespflichtfeld": DsIconPfeilnaechstespflichtfeld;
        "ds-icon-pfeilvorherigeseingabefeld": DsIconPfeilvorherigeseingabefeld;
        "ds-icon-pfeilvorherigespflichtfeld": DsIconPfeilvorherigespflichtfeld;
        "ds-icon-privathaftpflicht": DsIconPrivathaftpflicht;
        "ds-icon-privathaftpflicht2": DsIconPrivathaftpflicht2;
        "ds-icon-prozent": DsIconProzent;
        "ds-icon-rechtschutz": DsIconRechtschutz;
        "ds-icon-rechtschutz2": DsIconRechtschutz2;
        "ds-icon-reisen": DsIconReisen;
        "ds-icon-reparatur": DsIconReparatur;
        "ds-icon-scheine": DsIconScheine;
        "ds-icon-schliessendialog": DsIconSchliessendialog;
        "ds-icon-schliesseninput": DsIconSchliesseninput;
        "ds-icon-schliessenkreis": DsIconSchliessenkreis;
        "ds-icon-schlossgesperrt": DsIconSchlossgesperrt;
        "ds-icon-schlossoffen": DsIconSchlossoffen;
        "ds-icon-seitenanzeigeganzeseite": DsIconSeitenanzeigeganzeseite;
        "ds-icon-seitenanzeigevollebreite": DsIconSeitenanzeigevollebreite;
        "ds-icon-seitenleisteoffen": DsIconSeitenleisteoffen;
        "ds-icon-seitenleisteoffenfehlermeldung": DsIconSeitenleisteoffenfehlermeldung;
        "ds-icon-seitenleistezu": DsIconSeitenleistezu;
        "ds-icon-seitenleistezufehlermeldung": DsIconSeitenleistezufehlermeldung;
        "ds-icon-services": DsIconServices;
        "ds-icon-sortieren": DsIconSortieren;
        "ds-icon-sortieren2": DsIconSortieren2;
        "ds-icon-sortierenabsteigend": DsIconSortierenabsteigend;
        "ds-icon-sortierenaufsteigend": DsIconSortierenaufsteigend;
        "ds-icon-sparen": DsIconSparen;
        "ds-icon-sport": DsIconSport;
        "ds-icon-strassenverkehr": DsIconStrassenverkehr;
        "ds-icon-success": DsIconSuccess;
        "ds-icon-suchen": DsIconSuchen;
        "ds-icon-telefon": DsIconTelefon;
        "ds-icon-uebermitteln": DsIconUebermitteln;
        "ds-icon-uebermittelnfehlgeschlagen": DsIconUebermittelnfehlgeschlagen;
        "ds-icon-undo": DsIconUndo;
        "ds-icon-unfall": DsIconUnfall;
        "ds-icon-unfall2": DsIconUnfall2;
        "ds-icon-unterschreiben": DsIconUnterschreiben;
        "ds-icon-upload": DsIconUpload;
        "ds-icon-versicherung": DsIconVersicherung;
        "ds-icon-wohngebaeude": DsIconWohngebaeude;
        "ds-icon-zusatzdokument": DsIconZusatzdokument;
        "ds-icon-zusatzfotodokument": DsIconZusatzfotodokument;
        "ds-info": DsInfo;
        "ds-input-label": DsInputLabel;
        "ds-link": DsLink;
        "ds-logo": DsLogo;
        "ds-logo-bildmarke": DsLogoBildmarke;
        "ds-logo-wortmarke": DsLogoWortmarke;
        "ds-logo-wortmarke-allfinanz": DsLogoWortmarkeAllfinanz;
        "ds-modal": DsModal;
        "ds-navigated-content": DsNavigatedContent;
        "ds-navigated-content-menu": DsNavigatedContentMenu;
        "ds-navigated-content-menu-item": DsNavigatedContentMenuItem;
        "ds-notification-toast": DsNotificationToast;
        "ds-number-input": DsNumberInput;
        "ds-page": DsPage;
        "ds-paginator": DsPaginator;
        "ds-placeholder": DsPlaceholder;
        "ds-radio-button": DsRadioButton;
        "ds-radio-button-group": DsRadioButtonGroup;
        "ds-required-hint": DsRequiredHint;
        "ds-scroll-container": DsScrollContainer;
        "ds-search": DsSearch;
        "ds-slider": DsSlider;
        "ds-spinner": DsSpinner;
        "ds-table": DsTable;
        "ds-table-cell": DsTableCell;
        "ds-table-footer": DsTableFooter;
        "ds-table-header": DsTableHeader;
        "ds-table-header-item": DsTableHeaderItem;
        "ds-table-page-size-picker": DsTablePageSizePicker;
        "ds-table-row": DsTableRow;
        "ds-text": DsText;
        "ds-text-area": DsTextArea;
        "ds-text-button": DsTextButton;
        "ds-text-input": DsTextInput;
        "ds-text-list": DsTextList;
        "ds-user-avatar": DsUserAvatar;
        "ds-workflow-progress": DsWorkflowProgress;
        "ds-wrapped-layout": DsWrappedLayout;
        "ds-yes-no": DsYesNo;
        "dx-accordion": DxAccordion;
        "dx-accordion-group": DxAccordionGroup;
        "dx-alert": DxAlert;
        "dx-announcement-bar": DxAnnouncementBar;
        "dx-app": DxApp;
        "dx-breadcrumb": DxBreadcrumb;
        "dx-breadcrumb-item": DxBreadcrumbItem;
        "dx-button": DxButton;
        "dx-calendar": DxCalendar;
        "dx-card": DxCard;
        "dx-card-collapsable": DxCardCollapsable;
        "dx-card-content": DxCardContent;
        "dx-card-header": DxCardHeader;
        "dx-card-image": DxCardImage;
        "dx-chart-sample": DxChartSample;
        "dx-checkbox": DxCheckbox;
        "dx-chevron": DxChevron;
        "dx-clear-button": DxClearButton;
        "dx-combobox": DxCombobox;
        "dx-container": DxContainer;
        "dx-content-switcher": DxContentSwitcher;
        "dx-content-switcher-item": DxContentSwitcherItem;
        "dx-date-input": DxDateInput;
        "dx-date-range": DxDateRange;
        "dx-donut-chart": DxDonutChart;
        "dx-dropdown": DxDropdown;
        "dx-dropdown-option": DxDropdownOption;
        "dx-element-swapper": DxElementSwapper;
        "dx-error-message": DxErrorMessage;
        "dx-error-page": DxErrorPage;
        "dx-expanded": DxExpanded;
        "dx-fd-outline-box": DxFdOutlineBox;
        "dx-fd-separator": DxFdSeparator;
        "dx-flyout": DxFlyout;
        "dx-footer": DxFooter;
        "dx-form-wrapper": DxFormWrapper;
        "dx-golden-stage": DxGoldenStage;
        "dx-grid": DxGrid;
        "dx-header": DxHeader;
        "dx-header-app-favorites": DxHeaderAppFavorites;
        "dx-header-app-favorites-app": DxHeaderAppFavoritesApp;
        "dx-header-app-favorites-sidebar-content": DxHeaderAppFavoritesSidebarContent;
        "dx-header-application-name": DxHeaderApplicationName;
        "dx-header-menu-bar": DxHeaderMenuBar;
        "dx-header-menu-button": DxHeaderMenuButton;
        "dx-header-menu-custom": DxHeaderMenuCustom;
        "dx-header-menu-group": DxHeaderMenuGroup;
        "dx-header-menu-item": DxHeaderMenuItem;
        "dx-header-menu-link": DxHeaderMenuLink;
        "dx-header-navigation": DxHeaderNavigation;
        "dx-header-navigation-item": DxHeaderNavigationItem;
        "dx-header-navigation-sidebar-content": DxHeaderNavigationSidebarContent;
        "dx-header-user": DxHeaderUser;
        "dx-header-user-sidebar-content": DxHeaderUserSidebarContent;
        "dx-hero-image": DxHeroImage;
        "dx-horizontal-grow-box": DxHorizontalGrowBox;
        "dx-icon": DxIcon;
        "dx-icon-allfinanzberatungwebportaloutlined": DxIconAllfinanzberatungwebportaloutlined;
        "dx-icon-anfuehrungszeichen": DxIconAnfuehrungszeichen;
        "dx-icon-antragdvagoutlined": DxIconAntragdvagoutlined;
        "dx-icon-antragfilled": DxIconAntragfilled;
        "dx-icon-appportal01filled": DxIconAppportal01filled;
        "dx-icon-appportal01outlined": DxIconAppportal01outlined;
        "dx-icon-appportal02filled": DxIconAppportal02filled;
        "dx-icon-appportal02outlined": DxIconAppportal02outlined;
        "dx-icon-appstoregfilled": DxIconAppstoregfilled;
        "dx-icon-appstorewoutlined": DxIconAppstorewoutlined;
        "dx-icon-auftragsportalfilled": DxIconAuftragsportalfilled;
        "dx-icon-auftragsportaloutlined": DxIconAuftragsportaloutlined;
        "dx-icon-auge": DxIconAuge;
        "dx-icon-augegestrichen": DxIconAugegestrichen;
        "dx-icon-ausfuellen": DxIconAusfuellen;
        "dx-icon-ausweis": DxIconAusweis;
        "dx-icon-ausweischeck": DxIconAusweischeck;
        "dx-icon-autorisierungvertragsabschluss": DxIconAutorisierungvertragsabschluss;
        "dx-icon-bausparenbold": DxIconBausparenbold;
        "dx-icon-bausparenthin": DxIconBausparenthin;
        "dx-icon-bentobox": DxIconBentobox;
        "dx-icon-beratugsweltfilled": DxIconBeratugsweltfilled;
        "dx-icon-beratugsweltoutlined": DxIconBeratugsweltoutlined;
        "dx-icon-blinkitfilled": DxIconBlinkitfilled;
        "dx-icon-blinkitoutlined": DxIconBlinkitoutlined;
        "dx-icon-check": DxIconCheck;
        "dx-icon-checkkreis": DxIconCheckkreis;
        "dx-icon-checkkreisthinoutlined": DxIconCheckkreisthinoutlined;
        "dx-icon-checkthin": DxIconCheckthin;
        "dx-icon-chevronhoch": DxIconChevronhoch;
        "dx-icon-chevronlinks": DxIconChevronlinks;
        "dx-icon-chevronlinkskreis": DxIconChevronlinkskreis;
        "dx-icon-chevronlinkskreisfill": DxIconChevronlinkskreisfill;
        "dx-icon-chevronrechts": DxIconChevronrechts;
        "dx-icon-chevronrechtskreis": DxIconChevronrechtskreis;
        "dx-icon-chevronrechtskreisfill": DxIconChevronrechtskreisfill;
        "dx-icon-chevronrunter": DxIconChevronrunter;
        "dx-icon-chip": DxIconChip;
        "dx-icon-cookie": DxIconCookie;
        "dx-icon-datensavefilled": DxIconDatensavefilled;
        "dx-icon-datensaveoutlined": DxIconDatensaveoutlined;
        "dx-icon-datenturbofilled": DxIconDatenturbofilled;
        "dx-icon-datenturbooutlined": DxIconDatenturbooutlined;
        "dx-icon-dauer": DxIconDauer;
        "dx-icon-dauer3min": DxIconDauer3min;
        "dx-icon-dbnetfilled": DxIconDbnetfilled;
        "dx-icon-dbnetoutlined": DxIconDbnetoutlined;
        "dx-icon-depotsbold": DxIconDepotsbold;
        "dx-icon-depotsthin": DxIconDepotsthin;
        "dx-icon-desktoppc": DxIconDesktoppc;
        "dx-icon-devicesandere": DxIconDevicesandere;
        "dx-icon-diedvagfilled": DxIconDiedvagfilled;
        "dx-icon-diedvagoutlined": DxIconDiedvagoutlined;
        "dx-icon-dnetfilled": DxIconDnetfilled;
        "dx-icon-dnetoutlined": DxIconDnetoutlined;
        "dx-icon-dokument": DxIconDokument;
        "dx-icon-doppelchevronlinkskreis": DxIconDoppelchevronlinkskreis;
        "dx-icon-doppelchevronrechtskreis": DxIconDoppelchevronrechtskreis;
        "dx-icon-download": DxIconDownload;
        "dx-icon-drucker": DxIconDrucker;
        "dx-icon-dvabrechrungsplusportalfilled": DxIconDvabrechrungsplusportalfilled;
        "dx-icon-dvabrechrungsplusportaloutlined": DxIconDvabrechrungsplusportaloutlined;
        "dx-icon-dvagcloudfilled": DxIconDvagcloudfilled;
        "dx-icon-dvagcloudoutlined": DxIconDvagcloudoutlined;
        "dx-icon-dvaghypfilled": DxIconDvaghypfilled;
        "dx-icon-dvaghypoutlined": DxIconDvaghypoutlined;
        "dx-icon-dvagloginfilled": DxIconDvagloginfilled;
        "dx-icon-dvagloginoutlined": DxIconDvagloginoutlined;
        "dx-icon-dvagonlinesystemkifilled": DxIconDvagonlinesystemkifilled;
        "dx-icon-dvagonlinesystempimfilled": DxIconDvagonlinesystempimfilled;
        "dx-icon-dvagonlinesystemvbifilled": DxIconDvagonlinesystemvbifilled;
        "dx-icon-dvagonlinesytstemkioutlined": DxIconDvagonlinesytstemkioutlined;
        "dx-icon-dvagonlinesytstempimoutlined": DxIconDvagonlinesytstempimoutlined;
        "dx-icon-dvagonlinesytstemvbioutlined": DxIconDvagonlinesytstemvbioutlined;
        "dx-icon-dvagunternehmenspraesentationfilled": DxIconDvagunternehmenspraesentationfilled;
        "dx-icon-dvagunternehmenspraesentationoutlined": DxIconDvagunternehmenspraesentationoutlined;
        "dx-icon-dvfactoringplusportalfilled": DxIconDvfactoringplusportalfilled;
        "dx-icon-dvfactoringplusportaloutlined": DxIconDvfactoringplusportaloutlined;
        "dx-icon-easyvbfilled": DxIconEasyvbfilled;
        "dx-icon-easyvboutlined": DxIconEasyvboutlined;
        "dx-icon-edit": DxIconEdit;
        "dx-icon-editthin": DxIconEditthin;
        "dx-icon-eingabe": DxIconEingabe;
        "dx-icon-einkaufenbold": DxIconEinkaufenbold;
        "dx-icon-einkaufenthin": DxIconEinkaufenthin;
        "dx-icon-einstellungen": DxIconEinstellungen;
        "dx-icon-energieportalfilled": DxIconEnergieportalfilled;
        "dx-icon-energieportaloutlined": DxIconEnergieportaloutlined;
        "dx-icon-error": DxIconError;
        "dx-icon-errorthinoutlined": DxIconErrorthinoutlined;
        "dx-icon-euro": DxIconEuro;
        "dx-icon-eventfilled": DxIconEventfilled;
        "dx-icon-eventoutlined": DxIconEventoutlined;
        "dx-icon-facebook": DxIconFacebook;
        "dx-icon-facebookbaukastenfilled": DxIconFacebookbaukastenfilled;
        "dx-icon-facebookbaukastenoutlined": DxIconFacebookbaukastenoutlined;
        "dx-icon-fastforward": DxIconFastforward;
        "dx-icon-fastrewind": DxIconFastrewind;
        "dx-icon-file": DxIconFile;
        "dx-icon-fileaudio": DxIconFileaudio;
        "dx-icon-fileaudiothin": DxIconFileaudiothin;
        "dx-icon-filedoc": DxIconFiledoc;
        "dx-icon-filedocthin": DxIconFiledocthin;
        "dx-icon-filejpg": DxIconFilejpg;
        "dx-icon-filepdf": DxIconFilepdf;
        "dx-icon-filepdfthin": DxIconFilepdfthin;
        "dx-icon-filepng": DxIconFilepng;
        "dx-icon-fileppt": DxIconFileppt;
        "dx-icon-filepptthin": DxIconFilepptthin;
        "dx-icon-filevideo": DxIconFilevideo;
        "dx-icon-filevideothin": DxIconFilevideothin;
        "dx-icon-filexls": DxIconFilexls;
        "dx-icon-filter": DxIconFilter;
        "dx-icon-forward30": DxIconForward30;
        "dx-icon-fotokamera": DxIconFotokamera;
        "dx-icon-fragekreis": DxIconFragekreis;
        "dx-icon-fragekreisfill": DxIconFragekreisfill;
        "dx-icon-frontcam": DxIconFrontcam;
        "dx-icon-fullscreenstart": DxIconFullscreenstart;
        "dx-icon-fullscreenstop": DxIconFullscreenstop;
        "dx-icon-geldschein": DxIconGeldschein;
        "dx-icon-gesundheitbold": DxIconGesundheitbold;
        "dx-icon-gesundheitthin": DxIconGesundheitthin;
        "dx-icon-glasbold": DxIconGlasbold;
        "dx-icon-glasthin": DxIconGlasthin;
        "dx-icon-goldbarrenbold": DxIconGoldbarrenbold;
        "dx-icon-goldbarrenthin": DxIconGoldbarrenthin;
        "dx-icon-googleplus": DxIconGoogleplus;
        "dx-icon-hamburgermenue": DxIconHamburgermenue;
        "dx-icon-handy": DxIconHandy;
        "dx-icon-hausratbold": DxIconHausratbold;
        "dx-icon-hausratthin": DxIconHausratthin;
        "dx-icon-hd": DxIconHd;
        "dx-icon-headphones": DxIconHeadphones;
        "dx-icon-headset": DxIconHeadset;
        "dx-icon-herzfill": DxIconHerzfill;
        "dx-icon-herzoutline": DxIconHerzoutline;
        "dx-icon-herzplus": DxIconHerzplus;
        "dx-icon-home": DxIconHome;
        "dx-icon-homepagekonfiguratorfilled": DxIconHomepagekonfiguratorfilled;
        "dx-icon-homepagekonfiguratoroutlined": DxIconHomepagekonfiguratoroutlined;
        "dx-icon-homethin": DxIconHomethin;
        "dx-icon-iddonlinewbthekgfilled": DxIconIddonlinewbthekgfilled;
        "dx-icon-iddonlinewbthekwoutlined": DxIconIddonlinewbthekwoutlined;
        "dx-icon-ihrefragenunsereantwortenmeineappfilled": DxIconIhrefragenunsereantwortenmeineappfilled;
        "dx-icon-ihrefragenunsereantwortenmeineappoutlined": DxIconIhrefragenunsereantwortenmeineappoutlined;
        "dx-icon-ihrefragenunsereantwortenzuritfilled": DxIconIhrefragenunsereantwortenzuritfilled;
        "dx-icon-ihrefragenunsereantwortenzuritoutlined": DxIconIhrefragenunsereantwortenzuritoutlined;
        "dx-icon-immobilienbold": DxIconImmobilienbold;
        "dx-icon-immobilienfinanzierungbold": DxIconImmobilienfinanzierungbold;
        "dx-icon-immobilienfinanzierungthin": DxIconImmobilienfinanzierungthin;
        "dx-icon-immobilienthin": DxIconImmobilienthin;
        "dx-icon-information": DxIconInformation;
        "dx-icon-instagram": DxIconInstagram;
        "dx-icon-investmentdialogfilled": DxIconInvestmentdialogfilled;
        "dx-icon-investmentdialogoutlined": DxIconInvestmentdialogoutlined;
        "dx-icon-itweltfilled": DxIconItweltfilled;
        "dx-icon-itweltoutlined": DxIconItweltoutlined;
        "dx-icon-kalender": DxIconKalender;
        "dx-icon-karriereplanungfilled": DxIconKarriereplanungfilled;
        "dx-icon-karriereplanungoutlined": DxIconKarriereplanungoutlined;
        "dx-icon-karriereseitefilled": DxIconKarriereseitefilled;
        "dx-icon-karriereseiteoutlined": DxIconKarriereseiteoutlined;
        "dx-icon-kfztarif02filled": DxIconKfztarif02filled;
        "dx-icon-kfztarif02outlined": DxIconKfztarif02outlined;
        "dx-icon-klemmbrett": DxIconKlemmbrett;
        "dx-icon-koffer": DxIconKoffer;
        "dx-icon-kompass": DxIconKompass;
        "dx-icon-kontosaldobold": DxIconKontosaldobold;
        "dx-icon-kontosaldothin": DxIconKontosaldothin;
        "dx-icon-laptop": DxIconLaptop;
        "dx-icon-lesezeichenfill": DxIconLesezeichenfill;
        "dx-icon-lesezeichenoutline": DxIconLesezeichenoutline;
        "dx-icon-linkedin": DxIconLinkedin;
        "dx-icon-linkextern": DxIconLinkextern;
        "dx-icon-linksoderrechts": DxIconLinksoderrechts;
        "dx-icon-logo": DxIconLogo;
        "dx-icon-lupe": DxIconLupe;
        "dx-icon-lupeminus": DxIconLupeminus;
        "dx-icon-lupeplus": DxIconLupeplus;
        "dx-icon-mail": DxIconMail;
        "dx-icon-maus": DxIconMaus;
        "dx-icon-meineantraegefilled": DxIconMeineantraegefilled;
        "dx-icon-meineantraegeoutlined": DxIconMeineantraegeoutlined;
        "dx-icon-meinedvagfilled": DxIconMeinedvagfilled;
        "dx-icon-meinedvagoutlined": DxIconMeinedvagoutlined;
        "dx-icon-meinekundenfilled": DxIconMeinekundenfilled;
        "dx-icon-meinekundenoutlined": DxIconMeinekundenoutlined;
        "dx-icon-meinenachrichten01filled": DxIconMeinenachrichten01filled;
        "dx-icon-meinenachrichteniconoutlined": DxIconMeinenachrichteniconoutlined;
        "dx-icon-mensch": DxIconMensch;
        "dx-icon-mikrofon": DxIconMikrofon;
        "dx-icon-minuskreis": DxIconMinuskreis;
        "dx-icon-monitor": DxIconMonitor;
        "dx-icon-move": DxIconMove;
        "dx-icon-movethin": DxIconMovethin;
        "dx-icon-movie": DxIconMovie;
        "dx-icon-muell": DxIconMuell;
        "dx-icon-myimmoplanetfilled": DxIconMyimmoplanetfilled;
        "dx-icon-myimmoplanetoutlined": DxIconMyimmoplanetoutlined;
        "dx-icon-notstarted": DxIconNotstarted;
        "dx-icon-ordner": DxIconOrdner;
        "dx-icon-ort": DxIconOrt;
        "dx-icon-ortfill": DxIconOrtfill;
        "dx-icon-passfilled": DxIconPassfilled;
        "dx-icon-passoutlined": DxIconPassoutlined;
        "dx-icon-pause": DxIconPause;
        "dx-icon-pausekreisfill": DxIconPausekreisfill;
        "dx-icon-pausekreisoutline": DxIconPausekreisoutline;
        "dx-icon-pfeilhoch": DxIconPfeilhoch;
        "dx-icon-pfeillinks": DxIconPfeillinks;
        "dx-icon-pfeilrechts": DxIconPfeilrechts;
        "dx-icon-pfeilrunter": DxIconPfeilrunter;
        "dx-icon-phonelink": DxIconPhonelink;
        "dx-icon-photovoltaikbold": DxIconPhotovoltaikbold;
        "dx-icon-photovoltaikthin": DxIconPhotovoltaikthin;
        "dx-icon-placeholder": DxIconPlaceholder;
        "dx-icon-play": DxIconPlay;
        "dx-icon-playkreis": DxIconPlaykreis;
        "dx-icon-playkreisfill": DxIconPlaykreisfill;
        "dx-icon-playkreisoutline": DxIconPlaykreisoutline;
        "dx-icon-pluskreis": DxIconPluskreis;
        "dx-icon-privathaftpflichtbold": DxIconPrivathaftpflichtbold;
        "dx-icon-privathaftpflichtthin": DxIconPrivathaftpflichtthin;
        "dx-icon-privatkreditbold": DxIconPrivatkreditbold;
        "dx-icon-privatkreditthin": DxIconPrivatkreditthin;
        "dx-icon-projezieren": DxIconProjezieren;
        "dx-icon-rechtsschutzbold": DxIconRechtsschutzbold;
        "dx-icon-rechtsschutzthin": DxIconRechtsschutzthin;
        "dx-icon-reisenbold": DxIconReisenbold;
        "dx-icon-reisenthin": DxIconReisenthin;
        "dx-icon-reload": DxIconReload;
        "dx-icon-repeat": DxIconRepeat;
        "dx-icon-repeat1": DxIconRepeat1;
        "dx-icon-repeatfill": DxIconRepeatfill;
        "dx-icon-replay": DxIconReplay;
        "dx-icon-replay10": DxIconReplay10;
        "dx-icon-replay30": DxIconReplay30;
        "dx-icon-replaykreisfill": DxIconReplaykreisfill;
        "dx-icon-requiredbold": DxIconRequiredbold;
        "dx-icon-requiredthin": DxIconRequiredthin;
        "dx-icon-rewind": DxIconRewind;
        "dx-icon-rewind10": DxIconRewind10;
        "dx-icon-schliessen": DxIconSchliessen;
        "dx-icon-schlossauf": DxIconSchlossauf;
        "dx-icon-schlossoffenthinoutlined": DxIconSchlossoffenthinoutlined;
        "dx-icon-schlosszu": DxIconSchlosszu;
        "dx-icon-schlosszuthinoutlined": DxIconSchlosszuthinoutlined;
        "dx-icon-schulungsreisenfilled": DxIconSchulungsreisenfilled;
        "dx-icon-schulungsreisenoutlined": DxIconSchulungsreisenoutlined;
        "dx-icon-schutzengelbold": DxIconSchutzengelbold;
        "dx-icon-schutzengelthin": DxIconSchutzengelthin;
        "dx-icon-schutzschild": DxIconSchutzschild;
        "dx-icon-seitenanfang": DxIconSeitenanfang;
        "dx-icon-senden": DxIconSenden;
        "dx-icon-sendenerror": DxIconSendenerror;
        "dx-icon-shuffle": DxIconShuffle;
        "dx-icon-shufflefill": DxIconShufflefill;
        "dx-icon-sidebarauf": DxIconSidebarauf;
        "dx-icon-sidebarerror": DxIconSidebarerror;
        "dx-icon-sidebarzu": DxIconSidebarzu;
        "dx-icon-skiptonext": DxIconSkiptonext;
        "dx-icon-skiptoprevious": DxIconSkiptoprevious;
        "dx-icon-skype": DxIconSkype;
        "dx-icon-slideshow": DxIconSlideshow;
        "dx-icon-sparenbold": DxIconSparenbold;
        "dx-icon-sparenthin": DxIconSparenthin;
        "dx-icon-sparkontenbold": DxIconSparkontenbold;
        "dx-icon-sparkontenthin": DxIconSparkontenthin;
        "dx-icon-spaten": DxIconSpaten;
        "dx-icon-speakersfill": DxIconSpeakersfill;
        "dx-icon-speakersoutline": DxIconSpeakersoutline;
        "dx-icon-sprechblase": DxIconSprechblase;
        "dx-icon-sprechblasen": DxIconSprechblasen;
        "dx-icon-startupappfilled": DxIconStartupappfilled;
        "dx-icon-startupappoutlined": DxIconStartupappoutlined;
        "dx-icon-stateerror": DxIconStateerror;
        "dx-icon-staterequired": DxIconStaterequired;
        "dx-icon-statesuccess": DxIconStatesuccess;
        "dx-icon-sternhalb": DxIconSternhalb;
        "dx-icon-sternleer": DxIconSternleer;
        "dx-icon-sternvoll": DxIconSternvoll;
        "dx-icon-stop": DxIconStop;
        "dx-icon-systemstatusfilled": DxIconSystemstatusfilled;
        "dx-icon-systemstatusoutlined": DxIconSystemstatusoutlined;
        "dx-icon-tablet": DxIconTablet;
        "dx-icon-tastatur": DxIconTastatur;
        "dx-icon-teilen": DxIconTeilen;
        "dx-icon-telefon": DxIconTelefon;
        "dx-icon-thumbsupfill": DxIconThumbsupfill;
        "dx-icon-thumbsupoutline": DxIconThumbsupoutline;
        "dx-icon-tv": DxIconTv;
        "dx-icon-tvconnected": DxIconTvconnected;
        "dx-icon-twitter": DxIconTwitter;
        "dx-icon-ueberlaufmenue": DxIconUeberlaufmenue;
        "dx-icon-uhr": DxIconUhr;
        "dx-icon-unfallbold": DxIconUnfallbold;
        "dx-icon-unfallthin": DxIconUnfallthin;
        "dx-icon-unternehmenspraesentationfuerfirmenkundenfilled": DxIconUnternehmenspraesentationfuerfirmenkundenfilled;
        "dx-icon-unternehmenspraesentationfuerfirmenkundenoutlined": DxIconUnternehmenspraesentationfuerfirmenkundenoutlined;
        "dx-icon-unternehmenspraesentationprivatkundenfilled": DxIconUnternehmenspraesentationprivatkundenfilled;
        "dx-icon-unternehmenspraesentationprivatkundenoutlined": DxIconUnternehmenspraesentationprivatkundenoutlined;
        "dx-icon-upload": DxIconUpload;
        "dx-icon-vbnewsappfilled": DxIconVbnewsappfilled;
        "dx-icon-vbnewsappoutlined": DxIconVbnewsappoutlined;
        "dx-icon-vbpostservicefilled": DxIconVbpostservicefilled;
        "dx-icon-vbpostserviceoutlined": DxIconVbpostserviceoutlined;
        "dx-icon-vbshopfilled": DxIconVbshopfilled;
        "dx-icon-vbshopoutlined": DxIconVbshopoutlined;
        "dx-icon-vbweltfilled": DxIconVbweltfilled;
        "dx-icon-vbweltoutlined": DxIconVbweltoutlined;
        "dx-icon-veranstaltungsverwaltungfilled": DxIconVeranstaltungsverwaltungfilled;
        "dx-icon-veranstaltungsverwaltungoutlined": DxIconVeranstaltungsverwaltungoutlined;
        "dx-icon-verguetungsrechnerfilled": DxIconVerguetungsrechnerfilled;
        "dx-icon-verguetungsrechneroutlined": DxIconVerguetungsrechneroutlined;
        "dx-icon-verteilenhoriz": DxIconVerteilenhoriz;
        "dx-icon-verteilenvertik": DxIconVerteilenvertik;
        "dx-icon-videoadd": DxIconVideoadd;
        "dx-icon-videoaddcheck": DxIconVideoaddcheck;
        "dx-icon-videocall": DxIconVideocall;
        "dx-icon-videocallmissed": DxIconVideocallmissed;
        "dx-icon-videocamera": DxIconVideocamera;
        "dx-icon-videocamoff": DxIconVideocamoff;
        "dx-icon-videochatfill": DxIconVideochatfill;
        "dx-icon-videochatoutline": DxIconVideochatoutline;
        "dx-icon-videosettings": DxIconVideosettings;
        "dx-icon-videothek": DxIconVideothek;
        "dx-icon-vollebreite": DxIconVollebreite;
        "dx-icon-vorteilsrechnergeneralivitalityfilled": DxIconVorteilsrechnergeneralivitalityfilled;
        "dx-icon-vorteilsrechnergeneralivitalityoutlined": DxIconVorteilsrechnergeneralivitalityoutlined;
        "dx-icon-vpdigitalfilled": DxIconVpdigitalfilled;
        "dx-icon-vpdigitaloutlined": DxIconVpdigitaloutlined;
        "dx-icon-vspvertragsmanagementplusfilled": DxIconVspvertragsmanagementplusfilled;
        "dx-icon-vspvertragsmanagementplusoutlined": DxIconVspvertragsmanagementplusoutlined;
        "dx-icon-vuvbold": DxIconVuvbold;
        "dx-icon-vuvthin": DxIconVuvthin;
        "dx-icon-weg": DxIconWeg;
        "dx-icon-whatsapp": DxIconWhatsapp;
        "dx-icon-wohngebaeudebold": DxIconWohngebaeudebold;
        "dx-icon-wohngebaeudethin": DxIconWohngebaeudethin;
        "dx-icon-xing": DxIconXing;
        "dx-icon-youtube": DxIconYoutube;
        "dx-icon-zeitraffer": DxIconZeitraffer;
        "dx-icon-zurueck": DxIconZurueck;
        "dx-info": DxInfo;
        "dx-input-label": DxInputLabel;
        "dx-internal-wizard-step": DxInternalWizardStep;
        "dx-legend": DxLegend;
        "dx-link": DxLink;
        "dx-list": DxList;
        "dx-list-flyout": DxListFlyout;
        "dx-list-item": DxListItem;
        "dx-logo": DxLogo;
        "dx-logo-bildmarke": DxLogoBildmarke;
        "dx-logo-wortmarke": DxLogoWortmarke;
        "dx-media-query-value": DxMediaQueryValue;
        "dx-modal": DxModal;
        "dx-multi-dropdown": DxMultiDropdown;
        "dx-notification-bar": DxNotificationBar;
        "dx-notification-indicator": DxNotificationIndicator;
        "dx-notification-toast": DxNotificationToast;
        "dx-number-input": DxNumberInput;
        "dx-number-paginator": DxNumberPaginator;
        "dx-number-paginator-page-button": DxNumberPaginatorPageButton;
        "dx-number-picker": DxNumberPicker;
        "dx-overflow-menu": DxOverflowMenu;
        "dx-overflow-menu-item": DxOverflowMenuItem;
        "dx-overlay": DxOverlay;
        "dx-paginator": DxPaginator;
        "dx-placeholder": DxPlaceholder;
        "dx-popup": DxPopup;
        "dx-process-header": DxProcessHeader;
        "dx-pulse-icon": DxPulseIcon;
        "dx-radio-button": DxRadioButton;
        "dx-radio-button-group": DxRadioButtonGroup;
        "dx-representative-info": DxRepresentativeInfo;
        "dx-scrollable-shadow": DxScrollableShadow;
        "dx-sidebar": DxSidebar;
        "dx-sidebar-content": DxSidebarContent;
        "dx-simple-grow-box": DxSimpleGrowBox;
        "dx-site-navigation": DxSiteNavigation;
        "dx-site-navigation-menu": DxSiteNavigationMenu;
        "dx-site-navigation-menu-item": DxSiteNavigationMenuItem;
        "dx-site-navigation-scope": DxSiteNavigationScope;
        "dx-slide-show": DxSlideShow;
        "dx-slider": DxSlider;
        "dx-slideshow-slider": DxSlideshowSlider;
        "dx-sort": DxSort;
        "dx-sort-handle": DxSortHandle;
        "dx-sort-item": DxSortItem;
        "dx-spacer": DxSpacer;
        "dx-spinner": DxSpinner;
        "dx-tab-bar": DxTabBar;
        "dx-tab-dropdown": DxTabDropdown;
        "dx-tab-page": DxTabPage;
        "dx-table": DxTable;
        "dx-table-cell": DxTableCell;
        "dx-table-footer": DxTableFooter;
        "dx-table-header": DxTableHeader;
        "dx-table-header-item": DxTableHeaderItem;
        "dx-table-row": DxTableRow;
        "dx-tag": DxTag;
        "dx-text": DxText;
        "dx-text-area": DxTextArea;
        "dx-text-input": DxTextInput;
        "dx-text-list": DxTextList;
        "dx-toggle": DxToggle;
        "dx-user-avatar": DxUserAvatar;
        "dx-wizard": DxWizard;
        "dx-wizard-step": DxWizardStep;
        "dx-yes-no": DxYesNo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ds-action-list": LocalJSX.DsActionList & JSXBase.HTMLAttributes<HTMLDsActionListElement>;
            "ds-action-list-item": LocalJSX.DsActionListItem & JSXBase.HTMLAttributes<HTMLDsActionListItemElement>;
            "ds-alert": LocalJSX.DsAlert & JSXBase.HTMLAttributes<HTMLDsAlertElement>;
            "ds-alert-button": LocalJSX.DsAlertButton & JSXBase.HTMLAttributes<HTMLDsAlertButtonElement>;
            "ds-announcement-bar": LocalJSX.DsAnnouncementBar & JSXBase.HTMLAttributes<HTMLDsAnnouncementBarElement>;
            "ds-app": LocalJSX.DsApp & JSXBase.HTMLAttributes<HTMLDsAppElement>;
            "ds-blink": LocalJSX.DsBlink & JSXBase.HTMLAttributes<HTMLDsBlinkElement>;
            "ds-bordered-form-group": LocalJSX.DsBorderedFormGroup & JSXBase.HTMLAttributes<HTMLDsBorderedFormGroupElement>;
            "ds-bordered-form-item": LocalJSX.DsBorderedFormItem & JSXBase.HTMLAttributes<HTMLDsBorderedFormItemElement>;
            "ds-button": LocalJSX.DsButton & JSXBase.HTMLAttributes<HTMLDsButtonElement>;
            "ds-button-bar": LocalJSX.DsButtonBar & JSXBase.HTMLAttributes<HTMLDsButtonBarElement>;
            "ds-calendar": LocalJSX.DsCalendar & JSXBase.HTMLAttributes<HTMLDsCalendarElement>;
            "ds-card": LocalJSX.DsCard & JSXBase.HTMLAttributes<HTMLDsCardElement>;
            "ds-card-collapsable": LocalJSX.DsCardCollapsable & JSXBase.HTMLAttributes<HTMLDsCardCollapsableElement>;
            "ds-card-content": LocalJSX.DsCardContent & JSXBase.HTMLAttributes<HTMLDsCardContentElement>;
            "ds-card-header": LocalJSX.DsCardHeader & JSXBase.HTMLAttributes<HTMLDsCardHeaderElement>;
            "ds-card-image-header": LocalJSX.DsCardImageHeader & JSXBase.HTMLAttributes<HTMLDsCardImageHeaderElement>;
            "ds-card-tab-bar": LocalJSX.DsCardTabBar & JSXBase.HTMLAttributes<HTMLDsCardTabBarElement>;
            "ds-card-tab-page": LocalJSX.DsCardTabPage & JSXBase.HTMLAttributes<HTMLDsCardTabPageElement>;
            "ds-centered-board": LocalJSX.DsCenteredBoard & JSXBase.HTMLAttributes<HTMLDsCenteredBoardElement>;
            "ds-centered-board-item": LocalJSX.DsCenteredBoardItem & JSXBase.HTMLAttributes<HTMLDsCenteredBoardItemElement>;
            "ds-chart-sample": LocalJSX.DsChartSample & JSXBase.HTMLAttributes<HTMLDsChartSampleElement>;
            "ds-checkbox": LocalJSX.DsCheckbox & JSXBase.HTMLAttributes<HTMLDsCheckboxElement>;
            "ds-column": LocalJSX.DsColumn & JSXBase.HTMLAttributes<HTMLDsColumnElement>;
            "ds-date-input": LocalJSX.DsDateInput & JSXBase.HTMLAttributes<HTMLDsDateInputElement>;
            "ds-date-range": LocalJSX.DsDateRange & JSXBase.HTMLAttributes<HTMLDsDateRangeElement>;
            "ds-donut-chart": LocalJSX.DsDonutChart & JSXBase.HTMLAttributes<HTMLDsDonutChartElement>;
            "ds-dropdown": LocalJSX.DsDropdown & JSXBase.HTMLAttributes<HTMLDsDropdownElement>;
            "ds-dropdown-option": LocalJSX.DsDropdownOption & JSXBase.HTMLAttributes<HTMLDsDropdownOptionElement>;
            "ds-fm-ergebnisuebersicht": LocalJSX.DsFmErgebnisuebersicht & JSXBase.HTMLAttributes<HTMLDsFmErgebnisuebersichtElement>;
            "ds-fm-ergebnisuebersicht-item": LocalJSX.DsFmErgebnisuebersichtItem & JSXBase.HTMLAttributes<HTMLDsFmErgebnisuebersichtItemElement>;
            "ds-fm-ergebnisuebersicht-table": LocalJSX.DsFmErgebnisuebersichtTable & JSXBase.HTMLAttributes<HTMLDsFmErgebnisuebersichtTableElement>;
            "ds-footer": LocalJSX.DsFooter & JSXBase.HTMLAttributes<HTMLDsFooterElement>;
            "ds-form-layout": LocalJSX.DsFormLayout & JSXBase.HTMLAttributes<HTMLDsFormLayoutElement>;
            "ds-fullscreen-spinner": LocalJSX.DsFullscreenSpinner & JSXBase.HTMLAttributes<HTMLDsFullscreenSpinnerElement>;
            "ds-function-icon-button": LocalJSX.DsFunctionIconButton & JSXBase.HTMLAttributes<HTMLDsFunctionIconButtonElement>;
            "ds-grid": LocalJSX.DsGrid & JSXBase.HTMLAttributes<HTMLDsGridElement>;
            "ds-grouped-text-input": LocalJSX.DsGroupedTextInput & JSXBase.HTMLAttributes<HTMLDsGroupedTextInputElement>;
            "ds-grow-box": LocalJSX.DsGrowBox & JSXBase.HTMLAttributes<HTMLDsGrowBoxElement>;
            "ds-header": LocalJSX.DsHeader & JSXBase.HTMLAttributes<HTMLDsHeaderElement>;
            "ds-header-action": LocalJSX.DsHeaderAction & JSXBase.HTMLAttributes<HTMLDsHeaderActionElement>;
            "ds-header-action-list": LocalJSX.DsHeaderActionList & JSXBase.HTMLAttributes<HTMLDsHeaderActionListElement>;
            "ds-header-customer": LocalJSX.DsHeaderCustomer & JSXBase.HTMLAttributes<HTMLDsHeaderCustomerElement>;
            "ds-header-user": LocalJSX.DsHeaderUser & JSXBase.HTMLAttributes<HTMLDsHeaderUserElement>;
            "ds-hero-image": LocalJSX.DsHeroImage & JSXBase.HTMLAttributes<HTMLDsHeroImageElement>;
            "ds-hr": LocalJSX.DsHr & JSXBase.HTMLAttributes<HTMLDsHrElement>;
            "ds-icon": LocalJSX.DsIcon & JSXBase.HTMLAttributes<HTMLDsIconElement>;
            "ds-icon-achtung": LocalJSX.DsIconAchtung & JSXBase.HTMLAttributes<HTMLDsIconAchtungElement>;
            "ds-icon-achtungcircle": LocalJSX.DsIconAchtungcircle & JSXBase.HTMLAttributes<HTMLDsIconAchtungcircleElement>;
            "ds-icon-addonclearbutton": LocalJSX.DsIconAddonclearbutton & JSXBase.HTMLAttributes<HTMLDsIconAddonclearbuttonElement>;
            "ds-icon-aktivitaeten": LocalJSX.DsIconAktivitaeten & JSXBase.HTMLAttributes<HTMLDsIconAktivitaetenElement>;
            "ds-icon-aktualisieren": LocalJSX.DsIconAktualisieren & JSXBase.HTMLAttributes<HTMLDsIconAktualisierenElement>;
            "ds-icon-anleger": LocalJSX.DsIconAnleger & JSXBase.HTMLAttributes<HTMLDsIconAnlegerElement>;
            "ds-icon-arbeitsplatz": LocalJSX.DsIconArbeitsplatz & JSXBase.HTMLAttributes<HTMLDsIconArbeitsplatzElement>;
            "ds-icon-arbeitsweg": LocalJSX.DsIconArbeitsweg & JSXBase.HTMLAttributes<HTMLDsIconArbeitswegElement>;
            "ds-icon-auge": LocalJSX.DsIconAuge & JSXBase.HTMLAttributes<HTMLDsIconAugeElement>;
            "ds-icon-augedurchgestrichen": LocalJSX.DsIconAugedurchgestrichen & JSXBase.HTMLAttributes<HTMLDsIconAugedurchgestrichenElement>;
            "ds-icon-ausgehen": LocalJSX.DsIconAusgehen & JSXBase.HTMLAttributes<HTMLDsIconAusgehenElement>;
            "ds-icon-ausweis": LocalJSX.DsIconAusweis & JSXBase.HTMLAttributes<HTMLDsIconAusweisElement>;
            "ds-icon-ausweischeck": LocalJSX.DsIconAusweischeck & JSXBase.HTMLAttributes<HTMLDsIconAusweischeckElement>;
            "ds-icon-bank": LocalJSX.DsIconBank & JSXBase.HTMLAttributes<HTMLDsIconBankElement>;
            "ds-icon-bearbeiten": LocalJSX.DsIconBearbeiten & JSXBase.HTMLAttributes<HTMLDsIconBearbeitenElement>;
            "ds-icon-beratungbeenden": LocalJSX.DsIconBeratungbeenden & JSXBase.HTMLAttributes<HTMLDsIconBeratungbeendenElement>;
            "ds-icon-bueroklammer": LocalJSX.DsIconBueroklammer & JSXBase.HTMLAttributes<HTMLDsIconBueroklammerElement>;
            "ds-icon-button": LocalJSX.DsIconButton & JSXBase.HTMLAttributes<HTMLDsIconButtonElement>;
            "ds-icon-check": LocalJSX.DsIconCheck & JSXBase.HTMLAttributes<HTMLDsIconCheckElement>;
            "ds-icon-collapseclose": LocalJSX.DsIconCollapseclose & JSXBase.HTMLAttributes<HTMLDsIconCollapsecloseElement>;
            "ds-icon-collapseopen": LocalJSX.DsIconCollapseopen & JSXBase.HTMLAttributes<HTMLDsIconCollapseopenElement>;
            "ds-icon-dislike": LocalJSX.DsIconDislike & JSXBase.HTMLAttributes<HTMLDsIconDislikeElement>;
            "ds-icon-dokumenteupload": LocalJSX.DsIconDokumenteupload & JSXBase.HTMLAttributes<HTMLDsIconDokumenteuploadElement>;
            "ds-icon-download": LocalJSX.DsIconDownload & JSXBase.HTMLAttributes<HTMLDsIconDownloadElement>;
            "ds-icon-dropdown": LocalJSX.DsIconDropdown & JSXBase.HTMLAttributes<HTMLDsIconDropdownElement>;
            "ds-icon-einkaufen": LocalJSX.DsIconEinkaufen & JSXBase.HTMLAttributes<HTMLDsIconEinkaufenElement>;
            "ds-icon-einstellungen": LocalJSX.DsIconEinstellungen & JSXBase.HTMLAttributes<HTMLDsIconEinstellungenElement>;
            "ds-icon-eurozeichen": LocalJSX.DsIconEurozeichen & JSXBase.HTMLAttributes<HTMLDsIconEurozeichenElement>;
            "ds-icon-faq": LocalJSX.DsIconFaq & JSXBase.HTMLAttributes<HTMLDsIconFaqElement>;
            "ds-icon-favoritfilled": LocalJSX.DsIconFavoritfilled & JSXBase.HTMLAttributes<HTMLDsIconFavoritfilledElement>;
            "ds-icon-favoritoutline": LocalJSX.DsIconFavoritoutline & JSXBase.HTMLAttributes<HTMLDsIconFavoritoutlineElement>;
            "ds-icon-filter": LocalJSX.DsIconFilter & JSXBase.HTMLAttributes<HTMLDsIconFilterElement>;
            "ds-icon-formulare": LocalJSX.DsIconFormulare & JSXBase.HTMLAttributes<HTMLDsIconFormulareElement>;
            "ds-icon-formulareinitial": LocalJSX.DsIconFormulareinitial & JSXBase.HTMLAttributes<HTMLDsIconFormulareinitialElement>;
            "ds-icon-fotogalerie": LocalJSX.DsIconFotogalerie & JSXBase.HTMLAttributes<HTMLDsIconFotogalerieElement>;
            "ds-icon-fotogalerierahmen": LocalJSX.DsIconFotogalerierahmen & JSXBase.HTMLAttributes<HTMLDsIconFotogalerierahmenElement>;
            "ds-icon-gartenarbeit": LocalJSX.DsIconGartenarbeit & JSXBase.HTMLAttributes<HTMLDsIconGartenarbeitElement>;
            "ds-icon-geld": LocalJSX.DsIconGeld & JSXBase.HTMLAttributes<HTMLDsIconGeldElement>;
            "ds-icon-gesundheit": LocalJSX.DsIconGesundheit & JSXBase.HTMLAttributes<HTMLDsIconGesundheitElement>;
            "ds-icon-gesundheit2": LocalJSX.DsIconGesundheit2 & JSXBase.HTMLAttributes<HTMLDsIconGesundheit2Element>;
            "ds-icon-glas": LocalJSX.DsIconGlas & JSXBase.HTMLAttributes<HTMLDsIconGlasElement>;
            "ds-icon-glas2": LocalJSX.DsIconGlas2 & JSXBase.HTMLAttributes<HTMLDsIconGlas2Element>;
            "ds-icon-glocke": LocalJSX.DsIconGlocke & JSXBase.HTMLAttributes<HTMLDsIconGlockeElement>;
            "ds-icon-hamburgermenue": LocalJSX.DsIconHamburgermenue & JSXBase.HTMLAttributes<HTMLDsIconHamburgermenueElement>;
            "ds-icon-hauptdokument": LocalJSX.DsIconHauptdokument & JSXBase.HTMLAttributes<HTMLDsIconHauptdokumentElement>;
            "ds-icon-hausarbeit": LocalJSX.DsIconHausarbeit & JSXBase.HTMLAttributes<HTMLDsIconHausarbeitElement>;
            "ds-icon-hausrat": LocalJSX.DsIconHausrat & JSXBase.HTMLAttributes<HTMLDsIconHausratElement>;
            "ds-icon-hausratreise": LocalJSX.DsIconHausratreise & JSXBase.HTMLAttributes<HTMLDsIconHausratreiseElement>;
            "ds-icon-home": LocalJSX.DsIconHome & JSXBase.HTMLAttributes<HTMLDsIconHomeElement>;
            "ds-icon-info": LocalJSX.DsIconInfo & JSXBase.HTMLAttributes<HTMLDsIconInfoElement>;
            "ds-icon-investment": LocalJSX.DsIconInvestment & JSXBase.HTMLAttributes<HTMLDsIconInvestmentElement>;
            "ds-icon-jubilaeumicon10": LocalJSX.DsIconJubilaeumicon10 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon10Element>;
            "ds-icon-jubilaeumicon100": LocalJSX.DsIconJubilaeumicon100 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon100Element>;
            "ds-icon-jubilaeumicon105": LocalJSX.DsIconJubilaeumicon105 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon105Element>;
            "ds-icon-jubilaeumicon110": LocalJSX.DsIconJubilaeumicon110 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon110Element>;
            "ds-icon-jubilaeumicon115": LocalJSX.DsIconJubilaeumicon115 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon115Element>;
            "ds-icon-jubilaeumicon120": LocalJSX.DsIconJubilaeumicon120 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon120Element>;
            "ds-icon-jubilaeumicon125": LocalJSX.DsIconJubilaeumicon125 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon125Element>;
            "ds-icon-jubilaeumicon15": LocalJSX.DsIconJubilaeumicon15 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon15Element>;
            "ds-icon-jubilaeumicon20": LocalJSX.DsIconJubilaeumicon20 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon20Element>;
            "ds-icon-jubilaeumicon25": LocalJSX.DsIconJubilaeumicon25 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon25Element>;
            "ds-icon-jubilaeumicon30": LocalJSX.DsIconJubilaeumicon30 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon30Element>;
            "ds-icon-jubilaeumicon35": LocalJSX.DsIconJubilaeumicon35 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon35Element>;
            "ds-icon-jubilaeumicon40": LocalJSX.DsIconJubilaeumicon40 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon40Element>;
            "ds-icon-jubilaeumicon45": LocalJSX.DsIconJubilaeumicon45 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon45Element>;
            "ds-icon-jubilaeumicon5": LocalJSX.DsIconJubilaeumicon5 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon5Element>;
            "ds-icon-jubilaeumicon50": LocalJSX.DsIconJubilaeumicon50 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon50Element>;
            "ds-icon-jubilaeumicon55": LocalJSX.DsIconJubilaeumicon55 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon55Element>;
            "ds-icon-jubilaeumicon60": LocalJSX.DsIconJubilaeumicon60 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon60Element>;
            "ds-icon-jubilaeumicon65": LocalJSX.DsIconJubilaeumicon65 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon65Element>;
            "ds-icon-jubilaeumicon70": LocalJSX.DsIconJubilaeumicon70 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon70Element>;
            "ds-icon-jubilaeumicon75": LocalJSX.DsIconJubilaeumicon75 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon75Element>;
            "ds-icon-jubilaeumicon80": LocalJSX.DsIconJubilaeumicon80 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon80Element>;
            "ds-icon-jubilaeumicon85": LocalJSX.DsIconJubilaeumicon85 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon85Element>;
            "ds-icon-jubilaeumicon90": LocalJSX.DsIconJubilaeumicon90 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon90Element>;
            "ds-icon-jubilaeumicon95": LocalJSX.DsIconJubilaeumicon95 & JSXBase.HTMLAttributes<HTMLDsIconJubilaeumicon95Element>;
            "ds-icon-kalender": LocalJSX.DsIconKalender & JSXBase.HTMLAttributes<HTMLDsIconKalenderElement>;
            "ds-icon-kamera": LocalJSX.DsIconKamera & JSXBase.HTMLAttributes<HTMLDsIconKameraElement>;
            "ds-icon-kameravideo": LocalJSX.DsIconKameravideo & JSXBase.HTMLAttributes<HTMLDsIconKameravideoElement>;
            "ds-icon-kfz": LocalJSX.DsIconKfz & JSXBase.HTMLAttributes<HTMLDsIconKfzElement>;
            "ds-icon-like": LocalJSX.DsIconLike & JSXBase.HTMLAttributes<HTMLDsIconLikeElement>;
            "ds-icon-liquiditaet": LocalJSX.DsIconLiquiditaet & JSXBase.HTMLAttributes<HTMLDsIconLiquiditaetElement>;
            "ds-icon-listenpfeil": LocalJSX.DsIconListenpfeil & JSXBase.HTMLAttributes<HTMLDsIconListenpfeilElement>;
            "ds-icon-loeschen": LocalJSX.DsIconLoeschen & JSXBase.HTMLAttributes<HTMLDsIconLoeschenElement>;
            "ds-icon-lupevergroessern": LocalJSX.DsIconLupevergroessern & JSXBase.HTMLAttributes<HTMLDsIconLupevergroessernElement>;
            "ds-icon-lupeverkleinern": LocalJSX.DsIconLupeverkleinern & JSXBase.HTMLAttributes<HTMLDsIconLupeverkleinernElement>;
            "ds-icon-mail": LocalJSX.DsIconMail & JSXBase.HTMLAttributes<HTMLDsIconMailElement>;
            "ds-icon-mensch": LocalJSX.DsIconMensch & JSXBase.HTMLAttributes<HTMLDsIconMenschElement>;
            "ds-icon-minus": LocalJSX.DsIconMinus & JSXBase.HTMLAttributes<HTMLDsIconMinusElement>;
            "ds-icon-moremenue": LocalJSX.DsIconMoremenue & JSXBase.HTMLAttributes<HTMLDsIconMoremenueElement>;
            "ds-icon-neu": LocalJSX.DsIconNeu & JSXBase.HTMLAttributes<HTMLDsIconNeuElement>;
            "ds-icon-neukreis": LocalJSX.DsIconNeukreis & JSXBase.HTMLAttributes<HTMLDsIconNeukreisElement>;
            "ds-icon-ordner": LocalJSX.DsIconOrdner & JSXBase.HTMLAttributes<HTMLDsIconOrdnerElement>;
            "ds-icon-pfeilnaechsteseingabefeld": LocalJSX.DsIconPfeilnaechsteseingabefeld & JSXBase.HTMLAttributes<HTMLDsIconPfeilnaechsteseingabefeldElement>;
            "ds-icon-pfeilnaechstespflichtfeld": LocalJSX.DsIconPfeilnaechstespflichtfeld & JSXBase.HTMLAttributes<HTMLDsIconPfeilnaechstespflichtfeldElement>;
            "ds-icon-pfeilvorherigeseingabefeld": LocalJSX.DsIconPfeilvorherigeseingabefeld & JSXBase.HTMLAttributes<HTMLDsIconPfeilvorherigeseingabefeldElement>;
            "ds-icon-pfeilvorherigespflichtfeld": LocalJSX.DsIconPfeilvorherigespflichtfeld & JSXBase.HTMLAttributes<HTMLDsIconPfeilvorherigespflichtfeldElement>;
            "ds-icon-privathaftpflicht": LocalJSX.DsIconPrivathaftpflicht & JSXBase.HTMLAttributes<HTMLDsIconPrivathaftpflichtElement>;
            "ds-icon-privathaftpflicht2": LocalJSX.DsIconPrivathaftpflicht2 & JSXBase.HTMLAttributes<HTMLDsIconPrivathaftpflicht2Element>;
            "ds-icon-prozent": LocalJSX.DsIconProzent & JSXBase.HTMLAttributes<HTMLDsIconProzentElement>;
            "ds-icon-rechtschutz": LocalJSX.DsIconRechtschutz & JSXBase.HTMLAttributes<HTMLDsIconRechtschutzElement>;
            "ds-icon-rechtschutz2": LocalJSX.DsIconRechtschutz2 & JSXBase.HTMLAttributes<HTMLDsIconRechtschutz2Element>;
            "ds-icon-reisen": LocalJSX.DsIconReisen & JSXBase.HTMLAttributes<HTMLDsIconReisenElement>;
            "ds-icon-reparatur": LocalJSX.DsIconReparatur & JSXBase.HTMLAttributes<HTMLDsIconReparaturElement>;
            "ds-icon-scheine": LocalJSX.DsIconScheine & JSXBase.HTMLAttributes<HTMLDsIconScheineElement>;
            "ds-icon-schliessendialog": LocalJSX.DsIconSchliessendialog & JSXBase.HTMLAttributes<HTMLDsIconSchliessendialogElement>;
            "ds-icon-schliesseninput": LocalJSX.DsIconSchliesseninput & JSXBase.HTMLAttributes<HTMLDsIconSchliesseninputElement>;
            "ds-icon-schliessenkreis": LocalJSX.DsIconSchliessenkreis & JSXBase.HTMLAttributes<HTMLDsIconSchliessenkreisElement>;
            "ds-icon-schlossgesperrt": LocalJSX.DsIconSchlossgesperrt & JSXBase.HTMLAttributes<HTMLDsIconSchlossgesperrtElement>;
            "ds-icon-schlossoffen": LocalJSX.DsIconSchlossoffen & JSXBase.HTMLAttributes<HTMLDsIconSchlossoffenElement>;
            "ds-icon-seitenanzeigeganzeseite": LocalJSX.DsIconSeitenanzeigeganzeseite & JSXBase.HTMLAttributes<HTMLDsIconSeitenanzeigeganzeseiteElement>;
            "ds-icon-seitenanzeigevollebreite": LocalJSX.DsIconSeitenanzeigevollebreite & JSXBase.HTMLAttributes<HTMLDsIconSeitenanzeigevollebreiteElement>;
            "ds-icon-seitenleisteoffen": LocalJSX.DsIconSeitenleisteoffen & JSXBase.HTMLAttributes<HTMLDsIconSeitenleisteoffenElement>;
            "ds-icon-seitenleisteoffenfehlermeldung": LocalJSX.DsIconSeitenleisteoffenfehlermeldung & JSXBase.HTMLAttributes<HTMLDsIconSeitenleisteoffenfehlermeldungElement>;
            "ds-icon-seitenleistezu": LocalJSX.DsIconSeitenleistezu & JSXBase.HTMLAttributes<HTMLDsIconSeitenleistezuElement>;
            "ds-icon-seitenleistezufehlermeldung": LocalJSX.DsIconSeitenleistezufehlermeldung & JSXBase.HTMLAttributes<HTMLDsIconSeitenleistezufehlermeldungElement>;
            "ds-icon-services": LocalJSX.DsIconServices & JSXBase.HTMLAttributes<HTMLDsIconServicesElement>;
            "ds-icon-sortieren": LocalJSX.DsIconSortieren & JSXBase.HTMLAttributes<HTMLDsIconSortierenElement>;
            "ds-icon-sortieren2": LocalJSX.DsIconSortieren2 & JSXBase.HTMLAttributes<HTMLDsIconSortieren2Element>;
            "ds-icon-sortierenabsteigend": LocalJSX.DsIconSortierenabsteigend & JSXBase.HTMLAttributes<HTMLDsIconSortierenabsteigendElement>;
            "ds-icon-sortierenaufsteigend": LocalJSX.DsIconSortierenaufsteigend & JSXBase.HTMLAttributes<HTMLDsIconSortierenaufsteigendElement>;
            "ds-icon-sparen": LocalJSX.DsIconSparen & JSXBase.HTMLAttributes<HTMLDsIconSparenElement>;
            "ds-icon-sport": LocalJSX.DsIconSport & JSXBase.HTMLAttributes<HTMLDsIconSportElement>;
            "ds-icon-strassenverkehr": LocalJSX.DsIconStrassenverkehr & JSXBase.HTMLAttributes<HTMLDsIconStrassenverkehrElement>;
            "ds-icon-success": LocalJSX.DsIconSuccess & JSXBase.HTMLAttributes<HTMLDsIconSuccessElement>;
            "ds-icon-suchen": LocalJSX.DsIconSuchen & JSXBase.HTMLAttributes<HTMLDsIconSuchenElement>;
            "ds-icon-telefon": LocalJSX.DsIconTelefon & JSXBase.HTMLAttributes<HTMLDsIconTelefonElement>;
            "ds-icon-uebermitteln": LocalJSX.DsIconUebermitteln & JSXBase.HTMLAttributes<HTMLDsIconUebermittelnElement>;
            "ds-icon-uebermittelnfehlgeschlagen": LocalJSX.DsIconUebermittelnfehlgeschlagen & JSXBase.HTMLAttributes<HTMLDsIconUebermittelnfehlgeschlagenElement>;
            "ds-icon-undo": LocalJSX.DsIconUndo & JSXBase.HTMLAttributes<HTMLDsIconUndoElement>;
            "ds-icon-unfall": LocalJSX.DsIconUnfall & JSXBase.HTMLAttributes<HTMLDsIconUnfallElement>;
            "ds-icon-unfall2": LocalJSX.DsIconUnfall2 & JSXBase.HTMLAttributes<HTMLDsIconUnfall2Element>;
            "ds-icon-unterschreiben": LocalJSX.DsIconUnterschreiben & JSXBase.HTMLAttributes<HTMLDsIconUnterschreibenElement>;
            "ds-icon-upload": LocalJSX.DsIconUpload & JSXBase.HTMLAttributes<HTMLDsIconUploadElement>;
            "ds-icon-versicherung": LocalJSX.DsIconVersicherung & JSXBase.HTMLAttributes<HTMLDsIconVersicherungElement>;
            "ds-icon-wohngebaeude": LocalJSX.DsIconWohngebaeude & JSXBase.HTMLAttributes<HTMLDsIconWohngebaeudeElement>;
            "ds-icon-zusatzdokument": LocalJSX.DsIconZusatzdokument & JSXBase.HTMLAttributes<HTMLDsIconZusatzdokumentElement>;
            "ds-icon-zusatzfotodokument": LocalJSX.DsIconZusatzfotodokument & JSXBase.HTMLAttributes<HTMLDsIconZusatzfotodokumentElement>;
            "ds-info": LocalJSX.DsInfo & JSXBase.HTMLAttributes<HTMLDsInfoElement>;
            "ds-input-label": LocalJSX.DsInputLabel & JSXBase.HTMLAttributes<HTMLDsInputLabelElement>;
            "ds-link": LocalJSX.DsLink & JSXBase.HTMLAttributes<HTMLDsLinkElement>;
            "ds-logo": LocalJSX.DsLogo & JSXBase.HTMLAttributes<HTMLDsLogoElement>;
            "ds-logo-bildmarke": LocalJSX.DsLogoBildmarke & JSXBase.HTMLAttributes<HTMLDsLogoBildmarkeElement>;
            "ds-logo-wortmarke": LocalJSX.DsLogoWortmarke & JSXBase.HTMLAttributes<HTMLDsLogoWortmarkeElement>;
            "ds-logo-wortmarke-allfinanz": LocalJSX.DsLogoWortmarkeAllfinanz & JSXBase.HTMLAttributes<HTMLDsLogoWortmarkeAllfinanzElement>;
            "ds-modal": LocalJSX.DsModal & JSXBase.HTMLAttributes<HTMLDsModalElement>;
            "ds-navigated-content": LocalJSX.DsNavigatedContent & JSXBase.HTMLAttributes<HTMLDsNavigatedContentElement>;
            "ds-navigated-content-menu": LocalJSX.DsNavigatedContentMenu & JSXBase.HTMLAttributes<HTMLDsNavigatedContentMenuElement>;
            "ds-navigated-content-menu-item": LocalJSX.DsNavigatedContentMenuItem & JSXBase.HTMLAttributes<HTMLDsNavigatedContentMenuItemElement>;
            "ds-notification-toast": LocalJSX.DsNotificationToast & JSXBase.HTMLAttributes<HTMLDsNotificationToastElement>;
            "ds-number-input": LocalJSX.DsNumberInput & JSXBase.HTMLAttributes<HTMLDsNumberInputElement>;
            "ds-page": LocalJSX.DsPage & JSXBase.HTMLAttributes<HTMLDsPageElement>;
            "ds-paginator": LocalJSX.DsPaginator & JSXBase.HTMLAttributes<HTMLDsPaginatorElement>;
            "ds-placeholder": LocalJSX.DsPlaceholder & JSXBase.HTMLAttributes<HTMLDsPlaceholderElement>;
            "ds-radio-button": LocalJSX.DsRadioButton & JSXBase.HTMLAttributes<HTMLDsRadioButtonElement>;
            "ds-radio-button-group": LocalJSX.DsRadioButtonGroup & JSXBase.HTMLAttributes<HTMLDsRadioButtonGroupElement>;
            "ds-required-hint": LocalJSX.DsRequiredHint & JSXBase.HTMLAttributes<HTMLDsRequiredHintElement>;
            "ds-scroll-container": LocalJSX.DsScrollContainer & JSXBase.HTMLAttributes<HTMLDsScrollContainerElement>;
            "ds-search": LocalJSX.DsSearch & JSXBase.HTMLAttributes<HTMLDsSearchElement>;
            "ds-slider": LocalJSX.DsSlider & JSXBase.HTMLAttributes<HTMLDsSliderElement>;
            "ds-spinner": LocalJSX.DsSpinner & JSXBase.HTMLAttributes<HTMLDsSpinnerElement>;
            "ds-table": LocalJSX.DsTable & JSXBase.HTMLAttributes<HTMLDsTableElement>;
            "ds-table-cell": LocalJSX.DsTableCell & JSXBase.HTMLAttributes<HTMLDsTableCellElement>;
            "ds-table-footer": LocalJSX.DsTableFooter & JSXBase.HTMLAttributes<HTMLDsTableFooterElement>;
            "ds-table-header": LocalJSX.DsTableHeader & JSXBase.HTMLAttributes<HTMLDsTableHeaderElement>;
            "ds-table-header-item": LocalJSX.DsTableHeaderItem & JSXBase.HTMLAttributes<HTMLDsTableHeaderItemElement>;
            "ds-table-page-size-picker": LocalJSX.DsTablePageSizePicker & JSXBase.HTMLAttributes<HTMLDsTablePageSizePickerElement>;
            "ds-table-row": LocalJSX.DsTableRow & JSXBase.HTMLAttributes<HTMLDsTableRowElement>;
            "ds-text": LocalJSX.DsText & JSXBase.HTMLAttributes<HTMLDsTextElement>;
            "ds-text-area": LocalJSX.DsTextArea & JSXBase.HTMLAttributes<HTMLDsTextAreaElement>;
            "ds-text-button": LocalJSX.DsTextButton & JSXBase.HTMLAttributes<HTMLDsTextButtonElement>;
            "ds-text-input": LocalJSX.DsTextInput & JSXBase.HTMLAttributes<HTMLDsTextInputElement>;
            "ds-text-list": LocalJSX.DsTextList & JSXBase.HTMLAttributes<HTMLDsTextListElement>;
            "ds-user-avatar": LocalJSX.DsUserAvatar & JSXBase.HTMLAttributes<HTMLDsUserAvatarElement>;
            "ds-workflow-progress": LocalJSX.DsWorkflowProgress & JSXBase.HTMLAttributes<HTMLDsWorkflowProgressElement>;
            "ds-wrapped-layout": LocalJSX.DsWrappedLayout & JSXBase.HTMLAttributes<HTMLDsWrappedLayoutElement>;
            "ds-yes-no": LocalJSX.DsYesNo & JSXBase.HTMLAttributes<HTMLDsYesNoElement>;
            "dx-accordion": LocalJSX.DxAccordion & JSXBase.HTMLAttributes<HTMLDxAccordionElement>;
            "dx-accordion-group": LocalJSX.DxAccordionGroup & JSXBase.HTMLAttributes<HTMLDxAccordionGroupElement>;
            "dx-alert": LocalJSX.DxAlert & JSXBase.HTMLAttributes<HTMLDxAlertElement>;
            "dx-announcement-bar": LocalJSX.DxAnnouncementBar & JSXBase.HTMLAttributes<HTMLDxAnnouncementBarElement>;
            "dx-app": LocalJSX.DxApp & JSXBase.HTMLAttributes<HTMLDxAppElement>;
            "dx-breadcrumb": LocalJSX.DxBreadcrumb & JSXBase.HTMLAttributes<HTMLDxBreadcrumbElement>;
            "dx-breadcrumb-item": LocalJSX.DxBreadcrumbItem & JSXBase.HTMLAttributes<HTMLDxBreadcrumbItemElement>;
            "dx-button": LocalJSX.DxButton & JSXBase.HTMLAttributes<HTMLDxButtonElement>;
            "dx-calendar": LocalJSX.DxCalendar & JSXBase.HTMLAttributes<HTMLDxCalendarElement>;
            "dx-card": LocalJSX.DxCard & JSXBase.HTMLAttributes<HTMLDxCardElement>;
            "dx-card-collapsable": LocalJSX.DxCardCollapsable & JSXBase.HTMLAttributes<HTMLDxCardCollapsableElement>;
            "dx-card-content": LocalJSX.DxCardContent & JSXBase.HTMLAttributes<HTMLDxCardContentElement>;
            "dx-card-header": LocalJSX.DxCardHeader & JSXBase.HTMLAttributes<HTMLDxCardHeaderElement>;
            "dx-card-image": LocalJSX.DxCardImage & JSXBase.HTMLAttributes<HTMLDxCardImageElement>;
            "dx-chart-sample": LocalJSX.DxChartSample & JSXBase.HTMLAttributes<HTMLDxChartSampleElement>;
            "dx-checkbox": LocalJSX.DxCheckbox & JSXBase.HTMLAttributes<HTMLDxCheckboxElement>;
            "dx-chevron": LocalJSX.DxChevron & JSXBase.HTMLAttributes<HTMLDxChevronElement>;
            "dx-clear-button": LocalJSX.DxClearButton & JSXBase.HTMLAttributes<HTMLDxClearButtonElement>;
            "dx-combobox": LocalJSX.DxCombobox & JSXBase.HTMLAttributes<HTMLDxComboboxElement>;
            "dx-container": LocalJSX.DxContainer & JSXBase.HTMLAttributes<HTMLDxContainerElement>;
            "dx-content-switcher": LocalJSX.DxContentSwitcher & JSXBase.HTMLAttributes<HTMLDxContentSwitcherElement>;
            "dx-content-switcher-item": LocalJSX.DxContentSwitcherItem & JSXBase.HTMLAttributes<HTMLDxContentSwitcherItemElement>;
            "dx-date-input": LocalJSX.DxDateInput & JSXBase.HTMLAttributes<HTMLDxDateInputElement>;
            "dx-date-range": LocalJSX.DxDateRange & JSXBase.HTMLAttributes<HTMLDxDateRangeElement>;
            "dx-donut-chart": LocalJSX.DxDonutChart & JSXBase.HTMLAttributes<HTMLDxDonutChartElement>;
            "dx-dropdown": LocalJSX.DxDropdown & JSXBase.HTMLAttributes<HTMLDxDropdownElement>;
            "dx-dropdown-option": LocalJSX.DxDropdownOption & JSXBase.HTMLAttributes<HTMLDxDropdownOptionElement>;
            "dx-element-swapper": LocalJSX.DxElementSwapper & JSXBase.HTMLAttributes<HTMLDxElementSwapperElement>;
            "dx-error-message": LocalJSX.DxErrorMessage & JSXBase.HTMLAttributes<HTMLDxErrorMessageElement>;
            "dx-error-page": LocalJSX.DxErrorPage & JSXBase.HTMLAttributes<HTMLDxErrorPageElement>;
            "dx-expanded": LocalJSX.DxExpanded & JSXBase.HTMLAttributes<HTMLDxExpandedElement>;
            "dx-fd-outline-box": LocalJSX.DxFdOutlineBox & JSXBase.HTMLAttributes<HTMLDxFdOutlineBoxElement>;
            "dx-fd-separator": LocalJSX.DxFdSeparator & JSXBase.HTMLAttributes<HTMLDxFdSeparatorElement>;
            "dx-flyout": LocalJSX.DxFlyout & JSXBase.HTMLAttributes<HTMLDxFlyoutElement>;
            "dx-footer": LocalJSX.DxFooter & JSXBase.HTMLAttributes<HTMLDxFooterElement>;
            "dx-form-wrapper": LocalJSX.DxFormWrapper & JSXBase.HTMLAttributes<HTMLDxFormWrapperElement>;
            "dx-golden-stage": LocalJSX.DxGoldenStage & JSXBase.HTMLAttributes<HTMLDxGoldenStageElement>;
            "dx-grid": LocalJSX.DxGrid & JSXBase.HTMLAttributes<HTMLDxGridElement>;
            "dx-header": LocalJSX.DxHeader & JSXBase.HTMLAttributes<HTMLDxHeaderElement>;
            "dx-header-app-favorites": LocalJSX.DxHeaderAppFavorites & JSXBase.HTMLAttributes<HTMLDxHeaderAppFavoritesElement>;
            "dx-header-app-favorites-app": LocalJSX.DxHeaderAppFavoritesApp & JSXBase.HTMLAttributes<HTMLDxHeaderAppFavoritesAppElement>;
            "dx-header-app-favorites-sidebar-content": LocalJSX.DxHeaderAppFavoritesSidebarContent & JSXBase.HTMLAttributes<HTMLDxHeaderAppFavoritesSidebarContentElement>;
            "dx-header-application-name": LocalJSX.DxHeaderApplicationName & JSXBase.HTMLAttributes<HTMLDxHeaderApplicationNameElement>;
            "dx-header-menu-bar": LocalJSX.DxHeaderMenuBar & JSXBase.HTMLAttributes<HTMLDxHeaderMenuBarElement>;
            "dx-header-menu-button": LocalJSX.DxHeaderMenuButton & JSXBase.HTMLAttributes<HTMLDxHeaderMenuButtonElement>;
            "dx-header-menu-custom": LocalJSX.DxHeaderMenuCustom & JSXBase.HTMLAttributes<HTMLDxHeaderMenuCustomElement>;
            "dx-header-menu-group": LocalJSX.DxHeaderMenuGroup & JSXBase.HTMLAttributes<HTMLDxHeaderMenuGroupElement>;
            "dx-header-menu-item": LocalJSX.DxHeaderMenuItem & JSXBase.HTMLAttributes<HTMLDxHeaderMenuItemElement>;
            "dx-header-menu-link": LocalJSX.DxHeaderMenuLink & JSXBase.HTMLAttributes<HTMLDxHeaderMenuLinkElement>;
            "dx-header-navigation": LocalJSX.DxHeaderNavigation & JSXBase.HTMLAttributes<HTMLDxHeaderNavigationElement>;
            "dx-header-navigation-item": LocalJSX.DxHeaderNavigationItem & JSXBase.HTMLAttributes<HTMLDxHeaderNavigationItemElement>;
            "dx-header-navigation-sidebar-content": LocalJSX.DxHeaderNavigationSidebarContent & JSXBase.HTMLAttributes<HTMLDxHeaderNavigationSidebarContentElement>;
            "dx-header-user": LocalJSX.DxHeaderUser & JSXBase.HTMLAttributes<HTMLDxHeaderUserElement>;
            "dx-header-user-sidebar-content": LocalJSX.DxHeaderUserSidebarContent & JSXBase.HTMLAttributes<HTMLDxHeaderUserSidebarContentElement>;
            "dx-hero-image": LocalJSX.DxHeroImage & JSXBase.HTMLAttributes<HTMLDxHeroImageElement>;
            "dx-horizontal-grow-box": LocalJSX.DxHorizontalGrowBox & JSXBase.HTMLAttributes<HTMLDxHorizontalGrowBoxElement>;
            "dx-icon": LocalJSX.DxIcon & JSXBase.HTMLAttributes<HTMLDxIconElement>;
            "dx-icon-allfinanzberatungwebportaloutlined": LocalJSX.DxIconAllfinanzberatungwebportaloutlined & JSXBase.HTMLAttributes<HTMLDxIconAllfinanzberatungwebportaloutlinedElement>;
            "dx-icon-anfuehrungszeichen": LocalJSX.DxIconAnfuehrungszeichen & JSXBase.HTMLAttributes<HTMLDxIconAnfuehrungszeichenElement>;
            "dx-icon-antragdvagoutlined": LocalJSX.DxIconAntragdvagoutlined & JSXBase.HTMLAttributes<HTMLDxIconAntragdvagoutlinedElement>;
            "dx-icon-antragfilled": LocalJSX.DxIconAntragfilled & JSXBase.HTMLAttributes<HTMLDxIconAntragfilledElement>;
            "dx-icon-appportal01filled": LocalJSX.DxIconAppportal01filled & JSXBase.HTMLAttributes<HTMLDxIconAppportal01filledElement>;
            "dx-icon-appportal01outlined": LocalJSX.DxIconAppportal01outlined & JSXBase.HTMLAttributes<HTMLDxIconAppportal01outlinedElement>;
            "dx-icon-appportal02filled": LocalJSX.DxIconAppportal02filled & JSXBase.HTMLAttributes<HTMLDxIconAppportal02filledElement>;
            "dx-icon-appportal02outlined": LocalJSX.DxIconAppportal02outlined & JSXBase.HTMLAttributes<HTMLDxIconAppportal02outlinedElement>;
            "dx-icon-appstoregfilled": LocalJSX.DxIconAppstoregfilled & JSXBase.HTMLAttributes<HTMLDxIconAppstoregfilledElement>;
            "dx-icon-appstorewoutlined": LocalJSX.DxIconAppstorewoutlined & JSXBase.HTMLAttributes<HTMLDxIconAppstorewoutlinedElement>;
            "dx-icon-auftragsportalfilled": LocalJSX.DxIconAuftragsportalfilled & JSXBase.HTMLAttributes<HTMLDxIconAuftragsportalfilledElement>;
            "dx-icon-auftragsportaloutlined": LocalJSX.DxIconAuftragsportaloutlined & JSXBase.HTMLAttributes<HTMLDxIconAuftragsportaloutlinedElement>;
            "dx-icon-auge": LocalJSX.DxIconAuge & JSXBase.HTMLAttributes<HTMLDxIconAugeElement>;
            "dx-icon-augegestrichen": LocalJSX.DxIconAugegestrichen & JSXBase.HTMLAttributes<HTMLDxIconAugegestrichenElement>;
            "dx-icon-ausfuellen": LocalJSX.DxIconAusfuellen & JSXBase.HTMLAttributes<HTMLDxIconAusfuellenElement>;
            "dx-icon-ausweis": LocalJSX.DxIconAusweis & JSXBase.HTMLAttributes<HTMLDxIconAusweisElement>;
            "dx-icon-ausweischeck": LocalJSX.DxIconAusweischeck & JSXBase.HTMLAttributes<HTMLDxIconAusweischeckElement>;
            "dx-icon-autorisierungvertragsabschluss": LocalJSX.DxIconAutorisierungvertragsabschluss & JSXBase.HTMLAttributes<HTMLDxIconAutorisierungvertragsabschlussElement>;
            "dx-icon-bausparenbold": LocalJSX.DxIconBausparenbold & JSXBase.HTMLAttributes<HTMLDxIconBausparenboldElement>;
            "dx-icon-bausparenthin": LocalJSX.DxIconBausparenthin & JSXBase.HTMLAttributes<HTMLDxIconBausparenthinElement>;
            "dx-icon-bentobox": LocalJSX.DxIconBentobox & JSXBase.HTMLAttributes<HTMLDxIconBentoboxElement>;
            "dx-icon-beratugsweltfilled": LocalJSX.DxIconBeratugsweltfilled & JSXBase.HTMLAttributes<HTMLDxIconBeratugsweltfilledElement>;
            "dx-icon-beratugsweltoutlined": LocalJSX.DxIconBeratugsweltoutlined & JSXBase.HTMLAttributes<HTMLDxIconBeratugsweltoutlinedElement>;
            "dx-icon-blinkitfilled": LocalJSX.DxIconBlinkitfilled & JSXBase.HTMLAttributes<HTMLDxIconBlinkitfilledElement>;
            "dx-icon-blinkitoutlined": LocalJSX.DxIconBlinkitoutlined & JSXBase.HTMLAttributes<HTMLDxIconBlinkitoutlinedElement>;
            "dx-icon-check": LocalJSX.DxIconCheck & JSXBase.HTMLAttributes<HTMLDxIconCheckElement>;
            "dx-icon-checkkreis": LocalJSX.DxIconCheckkreis & JSXBase.HTMLAttributes<HTMLDxIconCheckkreisElement>;
            "dx-icon-checkkreisthinoutlined": LocalJSX.DxIconCheckkreisthinoutlined & JSXBase.HTMLAttributes<HTMLDxIconCheckkreisthinoutlinedElement>;
            "dx-icon-checkthin": LocalJSX.DxIconCheckthin & JSXBase.HTMLAttributes<HTMLDxIconCheckthinElement>;
            "dx-icon-chevronhoch": LocalJSX.DxIconChevronhoch & JSXBase.HTMLAttributes<HTMLDxIconChevronhochElement>;
            "dx-icon-chevronlinks": LocalJSX.DxIconChevronlinks & JSXBase.HTMLAttributes<HTMLDxIconChevronlinksElement>;
            "dx-icon-chevronlinkskreis": LocalJSX.DxIconChevronlinkskreis & JSXBase.HTMLAttributes<HTMLDxIconChevronlinkskreisElement>;
            "dx-icon-chevronlinkskreisfill": LocalJSX.DxIconChevronlinkskreisfill & JSXBase.HTMLAttributes<HTMLDxIconChevronlinkskreisfillElement>;
            "dx-icon-chevronrechts": LocalJSX.DxIconChevronrechts & JSXBase.HTMLAttributes<HTMLDxIconChevronrechtsElement>;
            "dx-icon-chevronrechtskreis": LocalJSX.DxIconChevronrechtskreis & JSXBase.HTMLAttributes<HTMLDxIconChevronrechtskreisElement>;
            "dx-icon-chevronrechtskreisfill": LocalJSX.DxIconChevronrechtskreisfill & JSXBase.HTMLAttributes<HTMLDxIconChevronrechtskreisfillElement>;
            "dx-icon-chevronrunter": LocalJSX.DxIconChevronrunter & JSXBase.HTMLAttributes<HTMLDxIconChevronrunterElement>;
            "dx-icon-chip": LocalJSX.DxIconChip & JSXBase.HTMLAttributes<HTMLDxIconChipElement>;
            "dx-icon-cookie": LocalJSX.DxIconCookie & JSXBase.HTMLAttributes<HTMLDxIconCookieElement>;
            "dx-icon-datensavefilled": LocalJSX.DxIconDatensavefilled & JSXBase.HTMLAttributes<HTMLDxIconDatensavefilledElement>;
            "dx-icon-datensaveoutlined": LocalJSX.DxIconDatensaveoutlined & JSXBase.HTMLAttributes<HTMLDxIconDatensaveoutlinedElement>;
            "dx-icon-datenturbofilled": LocalJSX.DxIconDatenturbofilled & JSXBase.HTMLAttributes<HTMLDxIconDatenturbofilledElement>;
            "dx-icon-datenturbooutlined": LocalJSX.DxIconDatenturbooutlined & JSXBase.HTMLAttributes<HTMLDxIconDatenturbooutlinedElement>;
            "dx-icon-dauer": LocalJSX.DxIconDauer & JSXBase.HTMLAttributes<HTMLDxIconDauerElement>;
            "dx-icon-dauer3min": LocalJSX.DxIconDauer3min & JSXBase.HTMLAttributes<HTMLDxIconDauer3minElement>;
            "dx-icon-dbnetfilled": LocalJSX.DxIconDbnetfilled & JSXBase.HTMLAttributes<HTMLDxIconDbnetfilledElement>;
            "dx-icon-dbnetoutlined": LocalJSX.DxIconDbnetoutlined & JSXBase.HTMLAttributes<HTMLDxIconDbnetoutlinedElement>;
            "dx-icon-depotsbold": LocalJSX.DxIconDepotsbold & JSXBase.HTMLAttributes<HTMLDxIconDepotsboldElement>;
            "dx-icon-depotsthin": LocalJSX.DxIconDepotsthin & JSXBase.HTMLAttributes<HTMLDxIconDepotsthinElement>;
            "dx-icon-desktoppc": LocalJSX.DxIconDesktoppc & JSXBase.HTMLAttributes<HTMLDxIconDesktoppcElement>;
            "dx-icon-devicesandere": LocalJSX.DxIconDevicesandere & JSXBase.HTMLAttributes<HTMLDxIconDevicesandereElement>;
            "dx-icon-diedvagfilled": LocalJSX.DxIconDiedvagfilled & JSXBase.HTMLAttributes<HTMLDxIconDiedvagfilledElement>;
            "dx-icon-diedvagoutlined": LocalJSX.DxIconDiedvagoutlined & JSXBase.HTMLAttributes<HTMLDxIconDiedvagoutlinedElement>;
            "dx-icon-dnetfilled": LocalJSX.DxIconDnetfilled & JSXBase.HTMLAttributes<HTMLDxIconDnetfilledElement>;
            "dx-icon-dnetoutlined": LocalJSX.DxIconDnetoutlined & JSXBase.HTMLAttributes<HTMLDxIconDnetoutlinedElement>;
            "dx-icon-dokument": LocalJSX.DxIconDokument & JSXBase.HTMLAttributes<HTMLDxIconDokumentElement>;
            "dx-icon-doppelchevronlinkskreis": LocalJSX.DxIconDoppelchevronlinkskreis & JSXBase.HTMLAttributes<HTMLDxIconDoppelchevronlinkskreisElement>;
            "dx-icon-doppelchevronrechtskreis": LocalJSX.DxIconDoppelchevronrechtskreis & JSXBase.HTMLAttributes<HTMLDxIconDoppelchevronrechtskreisElement>;
            "dx-icon-download": LocalJSX.DxIconDownload & JSXBase.HTMLAttributes<HTMLDxIconDownloadElement>;
            "dx-icon-drucker": LocalJSX.DxIconDrucker & JSXBase.HTMLAttributes<HTMLDxIconDruckerElement>;
            "dx-icon-dvabrechrungsplusportalfilled": LocalJSX.DxIconDvabrechrungsplusportalfilled & JSXBase.HTMLAttributes<HTMLDxIconDvabrechrungsplusportalfilledElement>;
            "dx-icon-dvabrechrungsplusportaloutlined": LocalJSX.DxIconDvabrechrungsplusportaloutlined & JSXBase.HTMLAttributes<HTMLDxIconDvabrechrungsplusportaloutlinedElement>;
            "dx-icon-dvagcloudfilled": LocalJSX.DxIconDvagcloudfilled & JSXBase.HTMLAttributes<HTMLDxIconDvagcloudfilledElement>;
            "dx-icon-dvagcloudoutlined": LocalJSX.DxIconDvagcloudoutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagcloudoutlinedElement>;
            "dx-icon-dvaghypfilled": LocalJSX.DxIconDvaghypfilled & JSXBase.HTMLAttributes<HTMLDxIconDvaghypfilledElement>;
            "dx-icon-dvaghypoutlined": LocalJSX.DxIconDvaghypoutlined & JSXBase.HTMLAttributes<HTMLDxIconDvaghypoutlinedElement>;
            "dx-icon-dvagloginfilled": LocalJSX.DxIconDvagloginfilled & JSXBase.HTMLAttributes<HTMLDxIconDvagloginfilledElement>;
            "dx-icon-dvagloginoutlined": LocalJSX.DxIconDvagloginoutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagloginoutlinedElement>;
            "dx-icon-dvagonlinesystemkifilled": LocalJSX.DxIconDvagonlinesystemkifilled & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesystemkifilledElement>;
            "dx-icon-dvagonlinesystempimfilled": LocalJSX.DxIconDvagonlinesystempimfilled & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesystempimfilledElement>;
            "dx-icon-dvagonlinesystemvbifilled": LocalJSX.DxIconDvagonlinesystemvbifilled & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesystemvbifilledElement>;
            "dx-icon-dvagonlinesytstemkioutlined": LocalJSX.DxIconDvagonlinesytstemkioutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesytstemkioutlinedElement>;
            "dx-icon-dvagonlinesytstempimoutlined": LocalJSX.DxIconDvagonlinesytstempimoutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesytstempimoutlinedElement>;
            "dx-icon-dvagonlinesytstemvbioutlined": LocalJSX.DxIconDvagonlinesytstemvbioutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagonlinesytstemvbioutlinedElement>;
            "dx-icon-dvagunternehmenspraesentationfilled": LocalJSX.DxIconDvagunternehmenspraesentationfilled & JSXBase.HTMLAttributes<HTMLDxIconDvagunternehmenspraesentationfilledElement>;
            "dx-icon-dvagunternehmenspraesentationoutlined": LocalJSX.DxIconDvagunternehmenspraesentationoutlined & JSXBase.HTMLAttributes<HTMLDxIconDvagunternehmenspraesentationoutlinedElement>;
            "dx-icon-dvfactoringplusportalfilled": LocalJSX.DxIconDvfactoringplusportalfilled & JSXBase.HTMLAttributes<HTMLDxIconDvfactoringplusportalfilledElement>;
            "dx-icon-dvfactoringplusportaloutlined": LocalJSX.DxIconDvfactoringplusportaloutlined & JSXBase.HTMLAttributes<HTMLDxIconDvfactoringplusportaloutlinedElement>;
            "dx-icon-easyvbfilled": LocalJSX.DxIconEasyvbfilled & JSXBase.HTMLAttributes<HTMLDxIconEasyvbfilledElement>;
            "dx-icon-easyvboutlined": LocalJSX.DxIconEasyvboutlined & JSXBase.HTMLAttributes<HTMLDxIconEasyvboutlinedElement>;
            "dx-icon-edit": LocalJSX.DxIconEdit & JSXBase.HTMLAttributes<HTMLDxIconEditElement>;
            "dx-icon-editthin": LocalJSX.DxIconEditthin & JSXBase.HTMLAttributes<HTMLDxIconEditthinElement>;
            "dx-icon-eingabe": LocalJSX.DxIconEingabe & JSXBase.HTMLAttributes<HTMLDxIconEingabeElement>;
            "dx-icon-einkaufenbold": LocalJSX.DxIconEinkaufenbold & JSXBase.HTMLAttributes<HTMLDxIconEinkaufenboldElement>;
            "dx-icon-einkaufenthin": LocalJSX.DxIconEinkaufenthin & JSXBase.HTMLAttributes<HTMLDxIconEinkaufenthinElement>;
            "dx-icon-einstellungen": LocalJSX.DxIconEinstellungen & JSXBase.HTMLAttributes<HTMLDxIconEinstellungenElement>;
            "dx-icon-energieportalfilled": LocalJSX.DxIconEnergieportalfilled & JSXBase.HTMLAttributes<HTMLDxIconEnergieportalfilledElement>;
            "dx-icon-energieportaloutlined": LocalJSX.DxIconEnergieportaloutlined & JSXBase.HTMLAttributes<HTMLDxIconEnergieportaloutlinedElement>;
            "dx-icon-error": LocalJSX.DxIconError & JSXBase.HTMLAttributes<HTMLDxIconErrorElement>;
            "dx-icon-errorthinoutlined": LocalJSX.DxIconErrorthinoutlined & JSXBase.HTMLAttributes<HTMLDxIconErrorthinoutlinedElement>;
            "dx-icon-euro": LocalJSX.DxIconEuro & JSXBase.HTMLAttributes<HTMLDxIconEuroElement>;
            "dx-icon-eventfilled": LocalJSX.DxIconEventfilled & JSXBase.HTMLAttributes<HTMLDxIconEventfilledElement>;
            "dx-icon-eventoutlined": LocalJSX.DxIconEventoutlined & JSXBase.HTMLAttributes<HTMLDxIconEventoutlinedElement>;
            "dx-icon-facebook": LocalJSX.DxIconFacebook & JSXBase.HTMLAttributes<HTMLDxIconFacebookElement>;
            "dx-icon-facebookbaukastenfilled": LocalJSX.DxIconFacebookbaukastenfilled & JSXBase.HTMLAttributes<HTMLDxIconFacebookbaukastenfilledElement>;
            "dx-icon-facebookbaukastenoutlined": LocalJSX.DxIconFacebookbaukastenoutlined & JSXBase.HTMLAttributes<HTMLDxIconFacebookbaukastenoutlinedElement>;
            "dx-icon-fastforward": LocalJSX.DxIconFastforward & JSXBase.HTMLAttributes<HTMLDxIconFastforwardElement>;
            "dx-icon-fastrewind": LocalJSX.DxIconFastrewind & JSXBase.HTMLAttributes<HTMLDxIconFastrewindElement>;
            "dx-icon-file": LocalJSX.DxIconFile & JSXBase.HTMLAttributes<HTMLDxIconFileElement>;
            "dx-icon-fileaudio": LocalJSX.DxIconFileaudio & JSXBase.HTMLAttributes<HTMLDxIconFileaudioElement>;
            "dx-icon-fileaudiothin": LocalJSX.DxIconFileaudiothin & JSXBase.HTMLAttributes<HTMLDxIconFileaudiothinElement>;
            "dx-icon-filedoc": LocalJSX.DxIconFiledoc & JSXBase.HTMLAttributes<HTMLDxIconFiledocElement>;
            "dx-icon-filedocthin": LocalJSX.DxIconFiledocthin & JSXBase.HTMLAttributes<HTMLDxIconFiledocthinElement>;
            "dx-icon-filejpg": LocalJSX.DxIconFilejpg & JSXBase.HTMLAttributes<HTMLDxIconFilejpgElement>;
            "dx-icon-filepdf": LocalJSX.DxIconFilepdf & JSXBase.HTMLAttributes<HTMLDxIconFilepdfElement>;
            "dx-icon-filepdfthin": LocalJSX.DxIconFilepdfthin & JSXBase.HTMLAttributes<HTMLDxIconFilepdfthinElement>;
            "dx-icon-filepng": LocalJSX.DxIconFilepng & JSXBase.HTMLAttributes<HTMLDxIconFilepngElement>;
            "dx-icon-fileppt": LocalJSX.DxIconFileppt & JSXBase.HTMLAttributes<HTMLDxIconFilepptElement>;
            "dx-icon-filepptthin": LocalJSX.DxIconFilepptthin & JSXBase.HTMLAttributes<HTMLDxIconFilepptthinElement>;
            "dx-icon-filevideo": LocalJSX.DxIconFilevideo & JSXBase.HTMLAttributes<HTMLDxIconFilevideoElement>;
            "dx-icon-filevideothin": LocalJSX.DxIconFilevideothin & JSXBase.HTMLAttributes<HTMLDxIconFilevideothinElement>;
            "dx-icon-filexls": LocalJSX.DxIconFilexls & JSXBase.HTMLAttributes<HTMLDxIconFilexlsElement>;
            "dx-icon-filter": LocalJSX.DxIconFilter & JSXBase.HTMLAttributes<HTMLDxIconFilterElement>;
            "dx-icon-forward30": LocalJSX.DxIconForward30 & JSXBase.HTMLAttributes<HTMLDxIconForward30Element>;
            "dx-icon-fotokamera": LocalJSX.DxIconFotokamera & JSXBase.HTMLAttributes<HTMLDxIconFotokameraElement>;
            "dx-icon-fragekreis": LocalJSX.DxIconFragekreis & JSXBase.HTMLAttributes<HTMLDxIconFragekreisElement>;
            "dx-icon-fragekreisfill": LocalJSX.DxIconFragekreisfill & JSXBase.HTMLAttributes<HTMLDxIconFragekreisfillElement>;
            "dx-icon-frontcam": LocalJSX.DxIconFrontcam & JSXBase.HTMLAttributes<HTMLDxIconFrontcamElement>;
            "dx-icon-fullscreenstart": LocalJSX.DxIconFullscreenstart & JSXBase.HTMLAttributes<HTMLDxIconFullscreenstartElement>;
            "dx-icon-fullscreenstop": LocalJSX.DxIconFullscreenstop & JSXBase.HTMLAttributes<HTMLDxIconFullscreenstopElement>;
            "dx-icon-geldschein": LocalJSX.DxIconGeldschein & JSXBase.HTMLAttributes<HTMLDxIconGeldscheinElement>;
            "dx-icon-gesundheitbold": LocalJSX.DxIconGesundheitbold & JSXBase.HTMLAttributes<HTMLDxIconGesundheitboldElement>;
            "dx-icon-gesundheitthin": LocalJSX.DxIconGesundheitthin & JSXBase.HTMLAttributes<HTMLDxIconGesundheitthinElement>;
            "dx-icon-glasbold": LocalJSX.DxIconGlasbold & JSXBase.HTMLAttributes<HTMLDxIconGlasboldElement>;
            "dx-icon-glasthin": LocalJSX.DxIconGlasthin & JSXBase.HTMLAttributes<HTMLDxIconGlasthinElement>;
            "dx-icon-goldbarrenbold": LocalJSX.DxIconGoldbarrenbold & JSXBase.HTMLAttributes<HTMLDxIconGoldbarrenboldElement>;
            "dx-icon-goldbarrenthin": LocalJSX.DxIconGoldbarrenthin & JSXBase.HTMLAttributes<HTMLDxIconGoldbarrenthinElement>;
            "dx-icon-googleplus": LocalJSX.DxIconGoogleplus & JSXBase.HTMLAttributes<HTMLDxIconGoogleplusElement>;
            "dx-icon-hamburgermenue": LocalJSX.DxIconHamburgermenue & JSXBase.HTMLAttributes<HTMLDxIconHamburgermenueElement>;
            "dx-icon-handy": LocalJSX.DxIconHandy & JSXBase.HTMLAttributes<HTMLDxIconHandyElement>;
            "dx-icon-hausratbold": LocalJSX.DxIconHausratbold & JSXBase.HTMLAttributes<HTMLDxIconHausratboldElement>;
            "dx-icon-hausratthin": LocalJSX.DxIconHausratthin & JSXBase.HTMLAttributes<HTMLDxIconHausratthinElement>;
            "dx-icon-hd": LocalJSX.DxIconHd & JSXBase.HTMLAttributes<HTMLDxIconHdElement>;
            "dx-icon-headphones": LocalJSX.DxIconHeadphones & JSXBase.HTMLAttributes<HTMLDxIconHeadphonesElement>;
            "dx-icon-headset": LocalJSX.DxIconHeadset & JSXBase.HTMLAttributes<HTMLDxIconHeadsetElement>;
            "dx-icon-herzfill": LocalJSX.DxIconHerzfill & JSXBase.HTMLAttributes<HTMLDxIconHerzfillElement>;
            "dx-icon-herzoutline": LocalJSX.DxIconHerzoutline & JSXBase.HTMLAttributes<HTMLDxIconHerzoutlineElement>;
            "dx-icon-herzplus": LocalJSX.DxIconHerzplus & JSXBase.HTMLAttributes<HTMLDxIconHerzplusElement>;
            "dx-icon-home": LocalJSX.DxIconHome & JSXBase.HTMLAttributes<HTMLDxIconHomeElement>;
            "dx-icon-homepagekonfiguratorfilled": LocalJSX.DxIconHomepagekonfiguratorfilled & JSXBase.HTMLAttributes<HTMLDxIconHomepagekonfiguratorfilledElement>;
            "dx-icon-homepagekonfiguratoroutlined": LocalJSX.DxIconHomepagekonfiguratoroutlined & JSXBase.HTMLAttributes<HTMLDxIconHomepagekonfiguratoroutlinedElement>;
            "dx-icon-homethin": LocalJSX.DxIconHomethin & JSXBase.HTMLAttributes<HTMLDxIconHomethinElement>;
            "dx-icon-iddonlinewbthekgfilled": LocalJSX.DxIconIddonlinewbthekgfilled & JSXBase.HTMLAttributes<HTMLDxIconIddonlinewbthekgfilledElement>;
            "dx-icon-iddonlinewbthekwoutlined": LocalJSX.DxIconIddonlinewbthekwoutlined & JSXBase.HTMLAttributes<HTMLDxIconIddonlinewbthekwoutlinedElement>;
            "dx-icon-ihrefragenunsereantwortenmeineappfilled": LocalJSX.DxIconIhrefragenunsereantwortenmeineappfilled & JSXBase.HTMLAttributes<HTMLDxIconIhrefragenunsereantwortenmeineappfilledElement>;
            "dx-icon-ihrefragenunsereantwortenmeineappoutlined": LocalJSX.DxIconIhrefragenunsereantwortenmeineappoutlined & JSXBase.HTMLAttributes<HTMLDxIconIhrefragenunsereantwortenmeineappoutlinedElement>;
            "dx-icon-ihrefragenunsereantwortenzuritfilled": LocalJSX.DxIconIhrefragenunsereantwortenzuritfilled & JSXBase.HTMLAttributes<HTMLDxIconIhrefragenunsereantwortenzuritfilledElement>;
            "dx-icon-ihrefragenunsereantwortenzuritoutlined": LocalJSX.DxIconIhrefragenunsereantwortenzuritoutlined & JSXBase.HTMLAttributes<HTMLDxIconIhrefragenunsereantwortenzuritoutlinedElement>;
            "dx-icon-immobilienbold": LocalJSX.DxIconImmobilienbold & JSXBase.HTMLAttributes<HTMLDxIconImmobilienboldElement>;
            "dx-icon-immobilienfinanzierungbold": LocalJSX.DxIconImmobilienfinanzierungbold & JSXBase.HTMLAttributes<HTMLDxIconImmobilienfinanzierungboldElement>;
            "dx-icon-immobilienfinanzierungthin": LocalJSX.DxIconImmobilienfinanzierungthin & JSXBase.HTMLAttributes<HTMLDxIconImmobilienfinanzierungthinElement>;
            "dx-icon-immobilienthin": LocalJSX.DxIconImmobilienthin & JSXBase.HTMLAttributes<HTMLDxIconImmobilienthinElement>;
            "dx-icon-information": LocalJSX.DxIconInformation & JSXBase.HTMLAttributes<HTMLDxIconInformationElement>;
            "dx-icon-instagram": LocalJSX.DxIconInstagram & JSXBase.HTMLAttributes<HTMLDxIconInstagramElement>;
            "dx-icon-investmentdialogfilled": LocalJSX.DxIconInvestmentdialogfilled & JSXBase.HTMLAttributes<HTMLDxIconInvestmentdialogfilledElement>;
            "dx-icon-investmentdialogoutlined": LocalJSX.DxIconInvestmentdialogoutlined & JSXBase.HTMLAttributes<HTMLDxIconInvestmentdialogoutlinedElement>;
            "dx-icon-itweltfilled": LocalJSX.DxIconItweltfilled & JSXBase.HTMLAttributes<HTMLDxIconItweltfilledElement>;
            "dx-icon-itweltoutlined": LocalJSX.DxIconItweltoutlined & JSXBase.HTMLAttributes<HTMLDxIconItweltoutlinedElement>;
            "dx-icon-kalender": LocalJSX.DxIconKalender & JSXBase.HTMLAttributes<HTMLDxIconKalenderElement>;
            "dx-icon-karriereplanungfilled": LocalJSX.DxIconKarriereplanungfilled & JSXBase.HTMLAttributes<HTMLDxIconKarriereplanungfilledElement>;
            "dx-icon-karriereplanungoutlined": LocalJSX.DxIconKarriereplanungoutlined & JSXBase.HTMLAttributes<HTMLDxIconKarriereplanungoutlinedElement>;
            "dx-icon-karriereseitefilled": LocalJSX.DxIconKarriereseitefilled & JSXBase.HTMLAttributes<HTMLDxIconKarriereseitefilledElement>;
            "dx-icon-karriereseiteoutlined": LocalJSX.DxIconKarriereseiteoutlined & JSXBase.HTMLAttributes<HTMLDxIconKarriereseiteoutlinedElement>;
            "dx-icon-kfztarif02filled": LocalJSX.DxIconKfztarif02filled & JSXBase.HTMLAttributes<HTMLDxIconKfztarif02filledElement>;
            "dx-icon-kfztarif02outlined": LocalJSX.DxIconKfztarif02outlined & JSXBase.HTMLAttributes<HTMLDxIconKfztarif02outlinedElement>;
            "dx-icon-klemmbrett": LocalJSX.DxIconKlemmbrett & JSXBase.HTMLAttributes<HTMLDxIconKlemmbrettElement>;
            "dx-icon-koffer": LocalJSX.DxIconKoffer & JSXBase.HTMLAttributes<HTMLDxIconKofferElement>;
            "dx-icon-kompass": LocalJSX.DxIconKompass & JSXBase.HTMLAttributes<HTMLDxIconKompassElement>;
            "dx-icon-kontosaldobold": LocalJSX.DxIconKontosaldobold & JSXBase.HTMLAttributes<HTMLDxIconKontosaldoboldElement>;
            "dx-icon-kontosaldothin": LocalJSX.DxIconKontosaldothin & JSXBase.HTMLAttributes<HTMLDxIconKontosaldothinElement>;
            "dx-icon-laptop": LocalJSX.DxIconLaptop & JSXBase.HTMLAttributes<HTMLDxIconLaptopElement>;
            "dx-icon-lesezeichenfill": LocalJSX.DxIconLesezeichenfill & JSXBase.HTMLAttributes<HTMLDxIconLesezeichenfillElement>;
            "dx-icon-lesezeichenoutline": LocalJSX.DxIconLesezeichenoutline & JSXBase.HTMLAttributes<HTMLDxIconLesezeichenoutlineElement>;
            "dx-icon-linkedin": LocalJSX.DxIconLinkedin & JSXBase.HTMLAttributes<HTMLDxIconLinkedinElement>;
            "dx-icon-linkextern": LocalJSX.DxIconLinkextern & JSXBase.HTMLAttributes<HTMLDxIconLinkexternElement>;
            "dx-icon-linksoderrechts": LocalJSX.DxIconLinksoderrechts & JSXBase.HTMLAttributes<HTMLDxIconLinksoderrechtsElement>;
            "dx-icon-logo": LocalJSX.DxIconLogo & JSXBase.HTMLAttributes<HTMLDxIconLogoElement>;
            "dx-icon-lupe": LocalJSX.DxIconLupe & JSXBase.HTMLAttributes<HTMLDxIconLupeElement>;
            "dx-icon-lupeminus": LocalJSX.DxIconLupeminus & JSXBase.HTMLAttributes<HTMLDxIconLupeminusElement>;
            "dx-icon-lupeplus": LocalJSX.DxIconLupeplus & JSXBase.HTMLAttributes<HTMLDxIconLupeplusElement>;
            "dx-icon-mail": LocalJSX.DxIconMail & JSXBase.HTMLAttributes<HTMLDxIconMailElement>;
            "dx-icon-maus": LocalJSX.DxIconMaus & JSXBase.HTMLAttributes<HTMLDxIconMausElement>;
            "dx-icon-meineantraegefilled": LocalJSX.DxIconMeineantraegefilled & JSXBase.HTMLAttributes<HTMLDxIconMeineantraegefilledElement>;
            "dx-icon-meineantraegeoutlined": LocalJSX.DxIconMeineantraegeoutlined & JSXBase.HTMLAttributes<HTMLDxIconMeineantraegeoutlinedElement>;
            "dx-icon-meinedvagfilled": LocalJSX.DxIconMeinedvagfilled & JSXBase.HTMLAttributes<HTMLDxIconMeinedvagfilledElement>;
            "dx-icon-meinedvagoutlined": LocalJSX.DxIconMeinedvagoutlined & JSXBase.HTMLAttributes<HTMLDxIconMeinedvagoutlinedElement>;
            "dx-icon-meinekundenfilled": LocalJSX.DxIconMeinekundenfilled & JSXBase.HTMLAttributes<HTMLDxIconMeinekundenfilledElement>;
            "dx-icon-meinekundenoutlined": LocalJSX.DxIconMeinekundenoutlined & JSXBase.HTMLAttributes<HTMLDxIconMeinekundenoutlinedElement>;
            "dx-icon-meinenachrichten01filled": LocalJSX.DxIconMeinenachrichten01filled & JSXBase.HTMLAttributes<HTMLDxIconMeinenachrichten01filledElement>;
            "dx-icon-meinenachrichteniconoutlined": LocalJSX.DxIconMeinenachrichteniconoutlined & JSXBase.HTMLAttributes<HTMLDxIconMeinenachrichteniconoutlinedElement>;
            "dx-icon-mensch": LocalJSX.DxIconMensch & JSXBase.HTMLAttributes<HTMLDxIconMenschElement>;
            "dx-icon-mikrofon": LocalJSX.DxIconMikrofon & JSXBase.HTMLAttributes<HTMLDxIconMikrofonElement>;
            "dx-icon-minuskreis": LocalJSX.DxIconMinuskreis & JSXBase.HTMLAttributes<HTMLDxIconMinuskreisElement>;
            "dx-icon-monitor": LocalJSX.DxIconMonitor & JSXBase.HTMLAttributes<HTMLDxIconMonitorElement>;
            "dx-icon-move": LocalJSX.DxIconMove & JSXBase.HTMLAttributes<HTMLDxIconMoveElement>;
            "dx-icon-movethin": LocalJSX.DxIconMovethin & JSXBase.HTMLAttributes<HTMLDxIconMovethinElement>;
            "dx-icon-movie": LocalJSX.DxIconMovie & JSXBase.HTMLAttributes<HTMLDxIconMovieElement>;
            "dx-icon-muell": LocalJSX.DxIconMuell & JSXBase.HTMLAttributes<HTMLDxIconMuellElement>;
            "dx-icon-myimmoplanetfilled": LocalJSX.DxIconMyimmoplanetfilled & JSXBase.HTMLAttributes<HTMLDxIconMyimmoplanetfilledElement>;
            "dx-icon-myimmoplanetoutlined": LocalJSX.DxIconMyimmoplanetoutlined & JSXBase.HTMLAttributes<HTMLDxIconMyimmoplanetoutlinedElement>;
            "dx-icon-notstarted": LocalJSX.DxIconNotstarted & JSXBase.HTMLAttributes<HTMLDxIconNotstartedElement>;
            "dx-icon-ordner": LocalJSX.DxIconOrdner & JSXBase.HTMLAttributes<HTMLDxIconOrdnerElement>;
            "dx-icon-ort": LocalJSX.DxIconOrt & JSXBase.HTMLAttributes<HTMLDxIconOrtElement>;
            "dx-icon-ortfill": LocalJSX.DxIconOrtfill & JSXBase.HTMLAttributes<HTMLDxIconOrtfillElement>;
            "dx-icon-passfilled": LocalJSX.DxIconPassfilled & JSXBase.HTMLAttributes<HTMLDxIconPassfilledElement>;
            "dx-icon-passoutlined": LocalJSX.DxIconPassoutlined & JSXBase.HTMLAttributes<HTMLDxIconPassoutlinedElement>;
            "dx-icon-pause": LocalJSX.DxIconPause & JSXBase.HTMLAttributes<HTMLDxIconPauseElement>;
            "dx-icon-pausekreisfill": LocalJSX.DxIconPausekreisfill & JSXBase.HTMLAttributes<HTMLDxIconPausekreisfillElement>;
            "dx-icon-pausekreisoutline": LocalJSX.DxIconPausekreisoutline & JSXBase.HTMLAttributes<HTMLDxIconPausekreisoutlineElement>;
            "dx-icon-pfeilhoch": LocalJSX.DxIconPfeilhoch & JSXBase.HTMLAttributes<HTMLDxIconPfeilhochElement>;
            "dx-icon-pfeillinks": LocalJSX.DxIconPfeillinks & JSXBase.HTMLAttributes<HTMLDxIconPfeillinksElement>;
            "dx-icon-pfeilrechts": LocalJSX.DxIconPfeilrechts & JSXBase.HTMLAttributes<HTMLDxIconPfeilrechtsElement>;
            "dx-icon-pfeilrunter": LocalJSX.DxIconPfeilrunter & JSXBase.HTMLAttributes<HTMLDxIconPfeilrunterElement>;
            "dx-icon-phonelink": LocalJSX.DxIconPhonelink & JSXBase.HTMLAttributes<HTMLDxIconPhonelinkElement>;
            "dx-icon-photovoltaikbold": LocalJSX.DxIconPhotovoltaikbold & JSXBase.HTMLAttributes<HTMLDxIconPhotovoltaikboldElement>;
            "dx-icon-photovoltaikthin": LocalJSX.DxIconPhotovoltaikthin & JSXBase.HTMLAttributes<HTMLDxIconPhotovoltaikthinElement>;
            "dx-icon-placeholder": LocalJSX.DxIconPlaceholder & JSXBase.HTMLAttributes<HTMLDxIconPlaceholderElement>;
            "dx-icon-play": LocalJSX.DxIconPlay & JSXBase.HTMLAttributes<HTMLDxIconPlayElement>;
            "dx-icon-playkreis": LocalJSX.DxIconPlaykreis & JSXBase.HTMLAttributes<HTMLDxIconPlaykreisElement>;
            "dx-icon-playkreisfill": LocalJSX.DxIconPlaykreisfill & JSXBase.HTMLAttributes<HTMLDxIconPlaykreisfillElement>;
            "dx-icon-playkreisoutline": LocalJSX.DxIconPlaykreisoutline & JSXBase.HTMLAttributes<HTMLDxIconPlaykreisoutlineElement>;
            "dx-icon-pluskreis": LocalJSX.DxIconPluskreis & JSXBase.HTMLAttributes<HTMLDxIconPluskreisElement>;
            "dx-icon-privathaftpflichtbold": LocalJSX.DxIconPrivathaftpflichtbold & JSXBase.HTMLAttributes<HTMLDxIconPrivathaftpflichtboldElement>;
            "dx-icon-privathaftpflichtthin": LocalJSX.DxIconPrivathaftpflichtthin & JSXBase.HTMLAttributes<HTMLDxIconPrivathaftpflichtthinElement>;
            "dx-icon-privatkreditbold": LocalJSX.DxIconPrivatkreditbold & JSXBase.HTMLAttributes<HTMLDxIconPrivatkreditboldElement>;
            "dx-icon-privatkreditthin": LocalJSX.DxIconPrivatkreditthin & JSXBase.HTMLAttributes<HTMLDxIconPrivatkreditthinElement>;
            "dx-icon-projezieren": LocalJSX.DxIconProjezieren & JSXBase.HTMLAttributes<HTMLDxIconProjezierenElement>;
            "dx-icon-rechtsschutzbold": LocalJSX.DxIconRechtsschutzbold & JSXBase.HTMLAttributes<HTMLDxIconRechtsschutzboldElement>;
            "dx-icon-rechtsschutzthin": LocalJSX.DxIconRechtsschutzthin & JSXBase.HTMLAttributes<HTMLDxIconRechtsschutzthinElement>;
            "dx-icon-reisenbold": LocalJSX.DxIconReisenbold & JSXBase.HTMLAttributes<HTMLDxIconReisenboldElement>;
            "dx-icon-reisenthin": LocalJSX.DxIconReisenthin & JSXBase.HTMLAttributes<HTMLDxIconReisenthinElement>;
            "dx-icon-reload": LocalJSX.DxIconReload & JSXBase.HTMLAttributes<HTMLDxIconReloadElement>;
            "dx-icon-repeat": LocalJSX.DxIconRepeat & JSXBase.HTMLAttributes<HTMLDxIconRepeatElement>;
            "dx-icon-repeat1": LocalJSX.DxIconRepeat1 & JSXBase.HTMLAttributes<HTMLDxIconRepeat1Element>;
            "dx-icon-repeatfill": LocalJSX.DxIconRepeatfill & JSXBase.HTMLAttributes<HTMLDxIconRepeatfillElement>;
            "dx-icon-replay": LocalJSX.DxIconReplay & JSXBase.HTMLAttributes<HTMLDxIconReplayElement>;
            "dx-icon-replay10": LocalJSX.DxIconReplay10 & JSXBase.HTMLAttributes<HTMLDxIconReplay10Element>;
            "dx-icon-replay30": LocalJSX.DxIconReplay30 & JSXBase.HTMLAttributes<HTMLDxIconReplay30Element>;
            "dx-icon-replaykreisfill": LocalJSX.DxIconReplaykreisfill & JSXBase.HTMLAttributes<HTMLDxIconReplaykreisfillElement>;
            "dx-icon-requiredbold": LocalJSX.DxIconRequiredbold & JSXBase.HTMLAttributes<HTMLDxIconRequiredboldElement>;
            "dx-icon-requiredthin": LocalJSX.DxIconRequiredthin & JSXBase.HTMLAttributes<HTMLDxIconRequiredthinElement>;
            "dx-icon-rewind": LocalJSX.DxIconRewind & JSXBase.HTMLAttributes<HTMLDxIconRewindElement>;
            "dx-icon-rewind10": LocalJSX.DxIconRewind10 & JSXBase.HTMLAttributes<HTMLDxIconRewind10Element>;
            "dx-icon-schliessen": LocalJSX.DxIconSchliessen & JSXBase.HTMLAttributes<HTMLDxIconSchliessenElement>;
            "dx-icon-schlossauf": LocalJSX.DxIconSchlossauf & JSXBase.HTMLAttributes<HTMLDxIconSchlossaufElement>;
            "dx-icon-schlossoffenthinoutlined": LocalJSX.DxIconSchlossoffenthinoutlined & JSXBase.HTMLAttributes<HTMLDxIconSchlossoffenthinoutlinedElement>;
            "dx-icon-schlosszu": LocalJSX.DxIconSchlosszu & JSXBase.HTMLAttributes<HTMLDxIconSchlosszuElement>;
            "dx-icon-schlosszuthinoutlined": LocalJSX.DxIconSchlosszuthinoutlined & JSXBase.HTMLAttributes<HTMLDxIconSchlosszuthinoutlinedElement>;
            "dx-icon-schulungsreisenfilled": LocalJSX.DxIconSchulungsreisenfilled & JSXBase.HTMLAttributes<HTMLDxIconSchulungsreisenfilledElement>;
            "dx-icon-schulungsreisenoutlined": LocalJSX.DxIconSchulungsreisenoutlined & JSXBase.HTMLAttributes<HTMLDxIconSchulungsreisenoutlinedElement>;
            "dx-icon-schutzengelbold": LocalJSX.DxIconSchutzengelbold & JSXBase.HTMLAttributes<HTMLDxIconSchutzengelboldElement>;
            "dx-icon-schutzengelthin": LocalJSX.DxIconSchutzengelthin & JSXBase.HTMLAttributes<HTMLDxIconSchutzengelthinElement>;
            "dx-icon-schutzschild": LocalJSX.DxIconSchutzschild & JSXBase.HTMLAttributes<HTMLDxIconSchutzschildElement>;
            "dx-icon-seitenanfang": LocalJSX.DxIconSeitenanfang & JSXBase.HTMLAttributes<HTMLDxIconSeitenanfangElement>;
            "dx-icon-senden": LocalJSX.DxIconSenden & JSXBase.HTMLAttributes<HTMLDxIconSendenElement>;
            "dx-icon-sendenerror": LocalJSX.DxIconSendenerror & JSXBase.HTMLAttributes<HTMLDxIconSendenerrorElement>;
            "dx-icon-shuffle": LocalJSX.DxIconShuffle & JSXBase.HTMLAttributes<HTMLDxIconShuffleElement>;
            "dx-icon-shufflefill": LocalJSX.DxIconShufflefill & JSXBase.HTMLAttributes<HTMLDxIconShufflefillElement>;
            "dx-icon-sidebarauf": LocalJSX.DxIconSidebarauf & JSXBase.HTMLAttributes<HTMLDxIconSidebaraufElement>;
            "dx-icon-sidebarerror": LocalJSX.DxIconSidebarerror & JSXBase.HTMLAttributes<HTMLDxIconSidebarerrorElement>;
            "dx-icon-sidebarzu": LocalJSX.DxIconSidebarzu & JSXBase.HTMLAttributes<HTMLDxIconSidebarzuElement>;
            "dx-icon-skiptonext": LocalJSX.DxIconSkiptonext & JSXBase.HTMLAttributes<HTMLDxIconSkiptonextElement>;
            "dx-icon-skiptoprevious": LocalJSX.DxIconSkiptoprevious & JSXBase.HTMLAttributes<HTMLDxIconSkiptopreviousElement>;
            "dx-icon-skype": LocalJSX.DxIconSkype & JSXBase.HTMLAttributes<HTMLDxIconSkypeElement>;
            "dx-icon-slideshow": LocalJSX.DxIconSlideshow & JSXBase.HTMLAttributes<HTMLDxIconSlideshowElement>;
            "dx-icon-sparenbold": LocalJSX.DxIconSparenbold & JSXBase.HTMLAttributes<HTMLDxIconSparenboldElement>;
            "dx-icon-sparenthin": LocalJSX.DxIconSparenthin & JSXBase.HTMLAttributes<HTMLDxIconSparenthinElement>;
            "dx-icon-sparkontenbold": LocalJSX.DxIconSparkontenbold & JSXBase.HTMLAttributes<HTMLDxIconSparkontenboldElement>;
            "dx-icon-sparkontenthin": LocalJSX.DxIconSparkontenthin & JSXBase.HTMLAttributes<HTMLDxIconSparkontenthinElement>;
            "dx-icon-spaten": LocalJSX.DxIconSpaten & JSXBase.HTMLAttributes<HTMLDxIconSpatenElement>;
            "dx-icon-speakersfill": LocalJSX.DxIconSpeakersfill & JSXBase.HTMLAttributes<HTMLDxIconSpeakersfillElement>;
            "dx-icon-speakersoutline": LocalJSX.DxIconSpeakersoutline & JSXBase.HTMLAttributes<HTMLDxIconSpeakersoutlineElement>;
            "dx-icon-sprechblase": LocalJSX.DxIconSprechblase & JSXBase.HTMLAttributes<HTMLDxIconSprechblaseElement>;
            "dx-icon-sprechblasen": LocalJSX.DxIconSprechblasen & JSXBase.HTMLAttributes<HTMLDxIconSprechblasenElement>;
            "dx-icon-startupappfilled": LocalJSX.DxIconStartupappfilled & JSXBase.HTMLAttributes<HTMLDxIconStartupappfilledElement>;
            "dx-icon-startupappoutlined": LocalJSX.DxIconStartupappoutlined & JSXBase.HTMLAttributes<HTMLDxIconStartupappoutlinedElement>;
            "dx-icon-stateerror": LocalJSX.DxIconStateerror & JSXBase.HTMLAttributes<HTMLDxIconStateerrorElement>;
            "dx-icon-staterequired": LocalJSX.DxIconStaterequired & JSXBase.HTMLAttributes<HTMLDxIconStaterequiredElement>;
            "dx-icon-statesuccess": LocalJSX.DxIconStatesuccess & JSXBase.HTMLAttributes<HTMLDxIconStatesuccessElement>;
            "dx-icon-sternhalb": LocalJSX.DxIconSternhalb & JSXBase.HTMLAttributes<HTMLDxIconSternhalbElement>;
            "dx-icon-sternleer": LocalJSX.DxIconSternleer & JSXBase.HTMLAttributes<HTMLDxIconSternleerElement>;
            "dx-icon-sternvoll": LocalJSX.DxIconSternvoll & JSXBase.HTMLAttributes<HTMLDxIconSternvollElement>;
            "dx-icon-stop": LocalJSX.DxIconStop & JSXBase.HTMLAttributes<HTMLDxIconStopElement>;
            "dx-icon-systemstatusfilled": LocalJSX.DxIconSystemstatusfilled & JSXBase.HTMLAttributes<HTMLDxIconSystemstatusfilledElement>;
            "dx-icon-systemstatusoutlined": LocalJSX.DxIconSystemstatusoutlined & JSXBase.HTMLAttributes<HTMLDxIconSystemstatusoutlinedElement>;
            "dx-icon-tablet": LocalJSX.DxIconTablet & JSXBase.HTMLAttributes<HTMLDxIconTabletElement>;
            "dx-icon-tastatur": LocalJSX.DxIconTastatur & JSXBase.HTMLAttributes<HTMLDxIconTastaturElement>;
            "dx-icon-teilen": LocalJSX.DxIconTeilen & JSXBase.HTMLAttributes<HTMLDxIconTeilenElement>;
            "dx-icon-telefon": LocalJSX.DxIconTelefon & JSXBase.HTMLAttributes<HTMLDxIconTelefonElement>;
            "dx-icon-thumbsupfill": LocalJSX.DxIconThumbsupfill & JSXBase.HTMLAttributes<HTMLDxIconThumbsupfillElement>;
            "dx-icon-thumbsupoutline": LocalJSX.DxIconThumbsupoutline & JSXBase.HTMLAttributes<HTMLDxIconThumbsupoutlineElement>;
            "dx-icon-tv": LocalJSX.DxIconTv & JSXBase.HTMLAttributes<HTMLDxIconTvElement>;
            "dx-icon-tvconnected": LocalJSX.DxIconTvconnected & JSXBase.HTMLAttributes<HTMLDxIconTvconnectedElement>;
            "dx-icon-twitter": LocalJSX.DxIconTwitter & JSXBase.HTMLAttributes<HTMLDxIconTwitterElement>;
            "dx-icon-ueberlaufmenue": LocalJSX.DxIconUeberlaufmenue & JSXBase.HTMLAttributes<HTMLDxIconUeberlaufmenueElement>;
            "dx-icon-uhr": LocalJSX.DxIconUhr & JSXBase.HTMLAttributes<HTMLDxIconUhrElement>;
            "dx-icon-unfallbold": LocalJSX.DxIconUnfallbold & JSXBase.HTMLAttributes<HTMLDxIconUnfallboldElement>;
            "dx-icon-unfallthin": LocalJSX.DxIconUnfallthin & JSXBase.HTMLAttributes<HTMLDxIconUnfallthinElement>;
            "dx-icon-unternehmenspraesentationfuerfirmenkundenfilled": LocalJSX.DxIconUnternehmenspraesentationfuerfirmenkundenfilled & JSXBase.HTMLAttributes<HTMLDxIconUnternehmenspraesentationfuerfirmenkundenfilledElement>;
            "dx-icon-unternehmenspraesentationfuerfirmenkundenoutlined": LocalJSX.DxIconUnternehmenspraesentationfuerfirmenkundenoutlined & JSXBase.HTMLAttributes<HTMLDxIconUnternehmenspraesentationfuerfirmenkundenoutlinedElement>;
            "dx-icon-unternehmenspraesentationprivatkundenfilled": LocalJSX.DxIconUnternehmenspraesentationprivatkundenfilled & JSXBase.HTMLAttributes<HTMLDxIconUnternehmenspraesentationprivatkundenfilledElement>;
            "dx-icon-unternehmenspraesentationprivatkundenoutlined": LocalJSX.DxIconUnternehmenspraesentationprivatkundenoutlined & JSXBase.HTMLAttributes<HTMLDxIconUnternehmenspraesentationprivatkundenoutlinedElement>;
            "dx-icon-upload": LocalJSX.DxIconUpload & JSXBase.HTMLAttributes<HTMLDxIconUploadElement>;
            "dx-icon-vbnewsappfilled": LocalJSX.DxIconVbnewsappfilled & JSXBase.HTMLAttributes<HTMLDxIconVbnewsappfilledElement>;
            "dx-icon-vbnewsappoutlined": LocalJSX.DxIconVbnewsappoutlined & JSXBase.HTMLAttributes<HTMLDxIconVbnewsappoutlinedElement>;
            "dx-icon-vbpostservicefilled": LocalJSX.DxIconVbpostservicefilled & JSXBase.HTMLAttributes<HTMLDxIconVbpostservicefilledElement>;
            "dx-icon-vbpostserviceoutlined": LocalJSX.DxIconVbpostserviceoutlined & JSXBase.HTMLAttributes<HTMLDxIconVbpostserviceoutlinedElement>;
            "dx-icon-vbshopfilled": LocalJSX.DxIconVbshopfilled & JSXBase.HTMLAttributes<HTMLDxIconVbshopfilledElement>;
            "dx-icon-vbshopoutlined": LocalJSX.DxIconVbshopoutlined & JSXBase.HTMLAttributes<HTMLDxIconVbshopoutlinedElement>;
            "dx-icon-vbweltfilled": LocalJSX.DxIconVbweltfilled & JSXBase.HTMLAttributes<HTMLDxIconVbweltfilledElement>;
            "dx-icon-vbweltoutlined": LocalJSX.DxIconVbweltoutlined & JSXBase.HTMLAttributes<HTMLDxIconVbweltoutlinedElement>;
            "dx-icon-veranstaltungsverwaltungfilled": LocalJSX.DxIconVeranstaltungsverwaltungfilled & JSXBase.HTMLAttributes<HTMLDxIconVeranstaltungsverwaltungfilledElement>;
            "dx-icon-veranstaltungsverwaltungoutlined": LocalJSX.DxIconVeranstaltungsverwaltungoutlined & JSXBase.HTMLAttributes<HTMLDxIconVeranstaltungsverwaltungoutlinedElement>;
            "dx-icon-verguetungsrechnerfilled": LocalJSX.DxIconVerguetungsrechnerfilled & JSXBase.HTMLAttributes<HTMLDxIconVerguetungsrechnerfilledElement>;
            "dx-icon-verguetungsrechneroutlined": LocalJSX.DxIconVerguetungsrechneroutlined & JSXBase.HTMLAttributes<HTMLDxIconVerguetungsrechneroutlinedElement>;
            "dx-icon-verteilenhoriz": LocalJSX.DxIconVerteilenhoriz & JSXBase.HTMLAttributes<HTMLDxIconVerteilenhorizElement>;
            "dx-icon-verteilenvertik": LocalJSX.DxIconVerteilenvertik & JSXBase.HTMLAttributes<HTMLDxIconVerteilenvertikElement>;
            "dx-icon-videoadd": LocalJSX.DxIconVideoadd & JSXBase.HTMLAttributes<HTMLDxIconVideoaddElement>;
            "dx-icon-videoaddcheck": LocalJSX.DxIconVideoaddcheck & JSXBase.HTMLAttributes<HTMLDxIconVideoaddcheckElement>;
            "dx-icon-videocall": LocalJSX.DxIconVideocall & JSXBase.HTMLAttributes<HTMLDxIconVideocallElement>;
            "dx-icon-videocallmissed": LocalJSX.DxIconVideocallmissed & JSXBase.HTMLAttributes<HTMLDxIconVideocallmissedElement>;
            "dx-icon-videocamera": LocalJSX.DxIconVideocamera & JSXBase.HTMLAttributes<HTMLDxIconVideocameraElement>;
            "dx-icon-videocamoff": LocalJSX.DxIconVideocamoff & JSXBase.HTMLAttributes<HTMLDxIconVideocamoffElement>;
            "dx-icon-videochatfill": LocalJSX.DxIconVideochatfill & JSXBase.HTMLAttributes<HTMLDxIconVideochatfillElement>;
            "dx-icon-videochatoutline": LocalJSX.DxIconVideochatoutline & JSXBase.HTMLAttributes<HTMLDxIconVideochatoutlineElement>;
            "dx-icon-videosettings": LocalJSX.DxIconVideosettings & JSXBase.HTMLAttributes<HTMLDxIconVideosettingsElement>;
            "dx-icon-videothek": LocalJSX.DxIconVideothek & JSXBase.HTMLAttributes<HTMLDxIconVideothekElement>;
            "dx-icon-vollebreite": LocalJSX.DxIconVollebreite & JSXBase.HTMLAttributes<HTMLDxIconVollebreiteElement>;
            "dx-icon-vorteilsrechnergeneralivitalityfilled": LocalJSX.DxIconVorteilsrechnergeneralivitalityfilled & JSXBase.HTMLAttributes<HTMLDxIconVorteilsrechnergeneralivitalityfilledElement>;
            "dx-icon-vorteilsrechnergeneralivitalityoutlined": LocalJSX.DxIconVorteilsrechnergeneralivitalityoutlined & JSXBase.HTMLAttributes<HTMLDxIconVorteilsrechnergeneralivitalityoutlinedElement>;
            "dx-icon-vpdigitalfilled": LocalJSX.DxIconVpdigitalfilled & JSXBase.HTMLAttributes<HTMLDxIconVpdigitalfilledElement>;
            "dx-icon-vpdigitaloutlined": LocalJSX.DxIconVpdigitaloutlined & JSXBase.HTMLAttributes<HTMLDxIconVpdigitaloutlinedElement>;
            "dx-icon-vspvertragsmanagementplusfilled": LocalJSX.DxIconVspvertragsmanagementplusfilled & JSXBase.HTMLAttributes<HTMLDxIconVspvertragsmanagementplusfilledElement>;
            "dx-icon-vspvertragsmanagementplusoutlined": LocalJSX.DxIconVspvertragsmanagementplusoutlined & JSXBase.HTMLAttributes<HTMLDxIconVspvertragsmanagementplusoutlinedElement>;
            "dx-icon-vuvbold": LocalJSX.DxIconVuvbold & JSXBase.HTMLAttributes<HTMLDxIconVuvboldElement>;
            "dx-icon-vuvthin": LocalJSX.DxIconVuvthin & JSXBase.HTMLAttributes<HTMLDxIconVuvthinElement>;
            "dx-icon-weg": LocalJSX.DxIconWeg & JSXBase.HTMLAttributes<HTMLDxIconWegElement>;
            "dx-icon-whatsapp": LocalJSX.DxIconWhatsapp & JSXBase.HTMLAttributes<HTMLDxIconWhatsappElement>;
            "dx-icon-wohngebaeudebold": LocalJSX.DxIconWohngebaeudebold & JSXBase.HTMLAttributes<HTMLDxIconWohngebaeudeboldElement>;
            "dx-icon-wohngebaeudethin": LocalJSX.DxIconWohngebaeudethin & JSXBase.HTMLAttributes<HTMLDxIconWohngebaeudethinElement>;
            "dx-icon-xing": LocalJSX.DxIconXing & JSXBase.HTMLAttributes<HTMLDxIconXingElement>;
            "dx-icon-youtube": LocalJSX.DxIconYoutube & JSXBase.HTMLAttributes<HTMLDxIconYoutubeElement>;
            "dx-icon-zeitraffer": LocalJSX.DxIconZeitraffer & JSXBase.HTMLAttributes<HTMLDxIconZeitrafferElement>;
            "dx-icon-zurueck": LocalJSX.DxIconZurueck & JSXBase.HTMLAttributes<HTMLDxIconZurueckElement>;
            "dx-info": LocalJSX.DxInfo & JSXBase.HTMLAttributes<HTMLDxInfoElement>;
            "dx-input-label": LocalJSX.DxInputLabel & JSXBase.HTMLAttributes<HTMLDxInputLabelElement>;
            "dx-internal-wizard-step": LocalJSX.DxInternalWizardStep & JSXBase.HTMLAttributes<HTMLDxInternalWizardStepElement>;
            "dx-legend": LocalJSX.DxLegend & JSXBase.HTMLAttributes<HTMLDxLegendElement>;
            "dx-link": LocalJSX.DxLink & JSXBase.HTMLAttributes<HTMLDxLinkElement>;
            "dx-list": LocalJSX.DxList & JSXBase.HTMLAttributes<HTMLDxListElement>;
            "dx-list-flyout": LocalJSX.DxListFlyout & JSXBase.HTMLAttributes<HTMLDxListFlyoutElement>;
            "dx-list-item": LocalJSX.DxListItem & JSXBase.HTMLAttributes<HTMLDxListItemElement>;
            "dx-logo": LocalJSX.DxLogo & JSXBase.HTMLAttributes<HTMLDxLogoElement>;
            "dx-logo-bildmarke": LocalJSX.DxLogoBildmarke & JSXBase.HTMLAttributes<HTMLDxLogoBildmarkeElement>;
            "dx-logo-wortmarke": LocalJSX.DxLogoWortmarke & JSXBase.HTMLAttributes<HTMLDxLogoWortmarkeElement>;
            "dx-media-query-value": LocalJSX.DxMediaQueryValue & JSXBase.HTMLAttributes<HTMLDxMediaQueryValueElement>;
            "dx-modal": LocalJSX.DxModal & JSXBase.HTMLAttributes<HTMLDxModalElement>;
            "dx-multi-dropdown": LocalJSX.DxMultiDropdown & JSXBase.HTMLAttributes<HTMLDxMultiDropdownElement>;
            "dx-notification-bar": LocalJSX.DxNotificationBar & JSXBase.HTMLAttributes<HTMLDxNotificationBarElement>;
            "dx-notification-indicator": LocalJSX.DxNotificationIndicator & JSXBase.HTMLAttributes<HTMLDxNotificationIndicatorElement>;
            "dx-notification-toast": LocalJSX.DxNotificationToast & JSXBase.HTMLAttributes<HTMLDxNotificationToastElement>;
            "dx-number-input": LocalJSX.DxNumberInput & JSXBase.HTMLAttributes<HTMLDxNumberInputElement>;
            "dx-number-paginator": LocalJSX.DxNumberPaginator & JSXBase.HTMLAttributes<HTMLDxNumberPaginatorElement>;
            "dx-number-paginator-page-button": LocalJSX.DxNumberPaginatorPageButton & JSXBase.HTMLAttributes<HTMLDxNumberPaginatorPageButtonElement>;
            "dx-number-picker": LocalJSX.DxNumberPicker & JSXBase.HTMLAttributes<HTMLDxNumberPickerElement>;
            "dx-overflow-menu": LocalJSX.DxOverflowMenu & JSXBase.HTMLAttributes<HTMLDxOverflowMenuElement>;
            "dx-overflow-menu-item": LocalJSX.DxOverflowMenuItem & JSXBase.HTMLAttributes<HTMLDxOverflowMenuItemElement>;
            "dx-overlay": LocalJSX.DxOverlay & JSXBase.HTMLAttributes<HTMLDxOverlayElement>;
            "dx-paginator": LocalJSX.DxPaginator & JSXBase.HTMLAttributes<HTMLDxPaginatorElement>;
            "dx-placeholder": LocalJSX.DxPlaceholder & JSXBase.HTMLAttributes<HTMLDxPlaceholderElement>;
            "dx-popup": LocalJSX.DxPopup & JSXBase.HTMLAttributes<HTMLDxPopupElement>;
            "dx-process-header": LocalJSX.DxProcessHeader & JSXBase.HTMLAttributes<HTMLDxProcessHeaderElement>;
            "dx-pulse-icon": LocalJSX.DxPulseIcon & JSXBase.HTMLAttributes<HTMLDxPulseIconElement>;
            "dx-radio-button": LocalJSX.DxRadioButton & JSXBase.HTMLAttributes<HTMLDxRadioButtonElement>;
            "dx-radio-button-group": LocalJSX.DxRadioButtonGroup & JSXBase.HTMLAttributes<HTMLDxRadioButtonGroupElement>;
            "dx-representative-info": LocalJSX.DxRepresentativeInfo & JSXBase.HTMLAttributes<HTMLDxRepresentativeInfoElement>;
            "dx-scrollable-shadow": LocalJSX.DxScrollableShadow & JSXBase.HTMLAttributes<HTMLDxScrollableShadowElement>;
            "dx-sidebar": LocalJSX.DxSidebar & JSXBase.HTMLAttributes<HTMLDxSidebarElement>;
            "dx-sidebar-content": LocalJSX.DxSidebarContent & JSXBase.HTMLAttributes<HTMLDxSidebarContentElement>;
            "dx-simple-grow-box": LocalJSX.DxSimpleGrowBox & JSXBase.HTMLAttributes<HTMLDxSimpleGrowBoxElement>;
            "dx-site-navigation": LocalJSX.DxSiteNavigation & JSXBase.HTMLAttributes<HTMLDxSiteNavigationElement>;
            "dx-site-navigation-menu": LocalJSX.DxSiteNavigationMenu & JSXBase.HTMLAttributes<HTMLDxSiteNavigationMenuElement>;
            "dx-site-navigation-menu-item": LocalJSX.DxSiteNavigationMenuItem & JSXBase.HTMLAttributes<HTMLDxSiteNavigationMenuItemElement>;
            "dx-site-navigation-scope": LocalJSX.DxSiteNavigationScope & JSXBase.HTMLAttributes<HTMLDxSiteNavigationScopeElement>;
            "dx-slide-show": LocalJSX.DxSlideShow & JSXBase.HTMLAttributes<HTMLDxSlideShowElement>;
            "dx-slider": LocalJSX.DxSlider & JSXBase.HTMLAttributes<HTMLDxSliderElement>;
            "dx-slideshow-slider": LocalJSX.DxSlideshowSlider & JSXBase.HTMLAttributes<HTMLDxSlideshowSliderElement>;
            "dx-sort": LocalJSX.DxSort & JSXBase.HTMLAttributes<HTMLDxSortElement>;
            "dx-sort-handle": LocalJSX.DxSortHandle & JSXBase.HTMLAttributes<HTMLDxSortHandleElement>;
            "dx-sort-item": LocalJSX.DxSortItem & JSXBase.HTMLAttributes<HTMLDxSortItemElement>;
            "dx-spacer": LocalJSX.DxSpacer & JSXBase.HTMLAttributes<HTMLDxSpacerElement>;
            "dx-spinner": LocalJSX.DxSpinner & JSXBase.HTMLAttributes<HTMLDxSpinnerElement>;
            "dx-tab-bar": LocalJSX.DxTabBar & JSXBase.HTMLAttributes<HTMLDxTabBarElement>;
            "dx-tab-dropdown": LocalJSX.DxTabDropdown & JSXBase.HTMLAttributes<HTMLDxTabDropdownElement>;
            "dx-tab-page": LocalJSX.DxTabPage & JSXBase.HTMLAttributes<HTMLDxTabPageElement>;
            "dx-table": LocalJSX.DxTable & JSXBase.HTMLAttributes<HTMLDxTableElement>;
            "dx-table-cell": LocalJSX.DxTableCell & JSXBase.HTMLAttributes<HTMLDxTableCellElement>;
            "dx-table-footer": LocalJSX.DxTableFooter & JSXBase.HTMLAttributes<HTMLDxTableFooterElement>;
            "dx-table-header": LocalJSX.DxTableHeader & JSXBase.HTMLAttributes<HTMLDxTableHeaderElement>;
            "dx-table-header-item": LocalJSX.DxTableHeaderItem & JSXBase.HTMLAttributes<HTMLDxTableHeaderItemElement>;
            "dx-table-row": LocalJSX.DxTableRow & JSXBase.HTMLAttributes<HTMLDxTableRowElement>;
            "dx-tag": LocalJSX.DxTag & JSXBase.HTMLAttributes<HTMLDxTagElement>;
            "dx-text": LocalJSX.DxText & JSXBase.HTMLAttributes<HTMLDxTextElement>;
            "dx-text-area": LocalJSX.DxTextArea & JSXBase.HTMLAttributes<HTMLDxTextAreaElement>;
            "dx-text-input": LocalJSX.DxTextInput & JSXBase.HTMLAttributes<HTMLDxTextInputElement>;
            "dx-text-list": LocalJSX.DxTextList & JSXBase.HTMLAttributes<HTMLDxTextListElement>;
            "dx-toggle": LocalJSX.DxToggle & JSXBase.HTMLAttributes<HTMLDxToggleElement>;
            "dx-user-avatar": LocalJSX.DxUserAvatar & JSXBase.HTMLAttributes<HTMLDxUserAvatarElement>;
            "dx-wizard": LocalJSX.DxWizard & JSXBase.HTMLAttributes<HTMLDxWizardElement>;
            "dx-wizard-step": LocalJSX.DxWizardStep & JSXBase.HTMLAttributes<HTMLDxWizardStepElement>;
            "dx-yes-no": LocalJSX.DxYesNo & JSXBase.HTMLAttributes<HTMLDxYesNoElement>;
        }
    }
}
