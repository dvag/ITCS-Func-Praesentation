import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Element to determine if a question is answered with yes or no.
 *
 * @path /Form
 * @name Yes-No-Selection
 * @shortname Yes-No
 * @icon check
 * @stable
 */
export declare class DsYesNo implements ComponentInterface {
  private radioGroupElement;
  self: HTMLDsYesNoElement;
  /**
   * State of the yes/no-selection
   *
   * @value "yes": yes is selected
   * @value "no": no is selected
   * @value "unset": nothing is selected
   * @example value
   */
  value: "yes" | "no" | "unset";
  /**
   * Text under the element showed in a red dialog.
   * @value string: Errormessage.
   * @example error
   */
  errormessage?: string;
  /**
   * Colors the border of the element red.
   * @value true: red border.
   * @value false: grey border.
   * @example error
   */
  error: boolean;
  /**
   * Deactivates the Radio-Button.
   * @value false: The Radio-Button is interactable.
   * @value true: The Radio-Button is deactivated.
   *
   * @example value-disabled
   */
  disabled: boolean;
  /**
   * The yes/no component is in read-only mode.
   * A text is rendered that shown the `label`-value of the selected Radio-Button.
   * @value false: Default mode.
   * @value true: Text of the `value`-attribute is shown.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks the element as mandarory.
   * @value false: Not mandatory. (Default)
   * @value true: Mandatory field.
   * @example required
   */
  required: boolean;
  /**
   * How the width of the child elements is determined.
   *
   * @value parent: The Parent element determines the width.
   * @value max-content: The widest child element determines the width of all child elements.
   *
   * @example size-parent
   */
  size: "parent" | "max-content";
  /**
   * Event contains `"yes"`, when Ja or `"no"` when Nein was selected.
   * The user can't unselect the value.
   * @example event
   */
  valueChange: EventEmitter<string>;
  /**
   * Sets the tab-focus to the element.
   * @example focus
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private handleRadioGroupValueChange;
  private radioGroupValue;
  render(): any;
}
