import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form element to select a numeric value within the range.
 * @path /Form
 * @name Slider
 * @icon sliders-h
 * @stable
 */
export declare class DsSlider implements ComponentInterface {
  private valueElement;
  private dragController;
  self: HTMLDsSliderElement;
  isDragging: boolean;
  /**
   * Minimal value of the range, the slider can have.
   * @value number: Minimal value of the slider.
   * @example min-max-value
   */
  min: number;
  /**
   * Maximum value of the range, the slider can have.
   * @value number: Maximum value of the slider.
   * @example min-max-value
   */
  max: number;
  /**
   * Size of the Steps, the values can be selected.
   * @value number: Minimal possible change.
   * @example step
   */
  step: number;
  /**
   * Current value of the slider.
   * @value number: Current value
   * @example min-max-value
   */
  value: number;
  valueChanged(): void;
  /**
   * Text on top of the slider, that displays the current value.
   * A dollarsign followed by a number represents the value of the slider.
   * The amount of numbers determines the amount of decimal numbers.
   *
   * @value string: Formatting of the slider value, e.g. `$1 %` or `$2 â‚¬`
   * @example formattedvalue
   */
  formattedvalue: string;
  /**
   * Text under the slider.
   *
   * @important
   * @value string: Text, e.g. `Zinsatz`
   * @example label
   */
  label?: string;
  /**
   * Switches the input to the read-only mode.
   * The value of the element is shown in a simple way. The element is not usable anymore.
   * @value false: Formfield
   * @value true: Value as text
   * @example readonly
   */
  readonly: boolean;
  /**
   * User made changes. Contains the chosen value.
   * @example value-change
   */
  valueChange: EventEmitter<number>;
  componentWillLoad(): Promise<void> | void;
  private format;
  private valueTranslationX;
  private getHostWidth;
  render(): any;
  private renderLabel;
}
