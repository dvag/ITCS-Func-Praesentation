import { ComponentInterface, EventEmitter } from "../../../../../stencil-public-runtime";
import { DateError, DateSelectionMode } from "../date";
/**
 * Form Element which holds a date (up to year 9999).
 * Spawns a calendar to pick a date from when focused.
 *
 * @name Date-Input
 * @shortname Date
 * @path /Form/Textfeld
 *
 * @experimental
 */
export declare class DsDateInput implements ComponentInterface {
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  private lastErrorType;
  private calendar;
  self: HTMLDsDateInputElement;
  dayEmpty: boolean;
  monthEmpty: boolean;
  yearEmpty: boolean;
  currentlyEditing: boolean;
  inputFocused: boolean;
  internalValue: string;
  internalErrorMessage: string;
  /**
   * The current displayed date.
   *
   * @important
   * @value string: A date in following format: YYYY-MM-dd
   * @example value
   */
  value: string;
  valueChanged(): void;
  /**
   * Text, which is displayed on the top of the input field.
   * @important
   * @value string: label text
   * @example label
   */
  label?: string;
  /**
   * Text, which is displayed in a red popup at the bottom of the input field.
   * @value string: Error text
   * @example error
   */
  errormessage?: string;
  /**
   * Displays the border of the input with a red color.
   * @value true: red border
   * @value false: default border
   * @example error
   */
  error: boolean;
  /**
   * Whether the input is interactable or not.
   * The label and border are grey to indicate the disabled state.
   * @value false: Input is not disabled.
   * @value true: Input is disabled.
   *
   * @example disabled
   */
  disabled: boolean;
  /**
   * Whether the input is readonly or editable.
   * If true the value of this component will be visualized as a normal text.
   * @value false: Input is editable.
   * @value true: Input is read-only.
   *
   * @example readonly
   */
  readonly: boolean;
  readonlyChanged(): void;
  /**
   * Marks this input as required.
   * @value false: Input is not required
   * @value true: Input is required
   *
   * @example required
   */
  required: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Define the minimal allowed date.
   * @value string: A date in following format: YYYY-MM-dd
   *
   * @example minmax
   */
  min?: string;
  /**
   * Define the maximal allowed date.
   * @value string: A date in following format: YYYY-MM-dd
   *
   * @example minmax
   */
  max?: string;
  /**
   * Defines how a date can be selected or edited.
   *
   * @value "day-month-year": The user can edit three input fields: day (TT), month (MM) and year (JJJJ).
   * The calendar shows all three views (month, year and decade) for selecting a date.
   * @value "month-year": The user can edit two input fields: month (MM) and year (JJJJ).
   * The calendar shows two views (year and decade) for selecting a month.
   * @value "day-month": The user can edit two input fields: day(TT) and month (MM).
   * The calendar shows two views (month and year) for selecting a date.
   * @example mode
   */
  mode: DateSelectionMode;
  onModeChange(): void;
  /**
   * Indicates whether a calendar is shown when focusing this component.
   *
   * @value true: The calendar is displayed when the date input is focused.
   * @value false: There is no calendar displayed when the date input is focused.
   *
   * @internal
   */
  calendarenabled: boolean;
  /**
   * Delegates the current value while the user is editing the input.
   * @example change-events
   */
  valueChange: EventEmitter<string>;
  /**
   * Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component.
   * @example change-events
   */
  valueComplete: EventEmitter<string>;
  /**
   * Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component.
   * @example change-events
   */
  errorFound: EventEmitter<DateError>;
  /**
   * @internal
   */
  segmentBlur: EventEmitter<string>;
  /**
   * Sets the focus on the day-input element.
   * @example focus
   */
  focusControl(): Promise<void>;
  /**
   * Remotely triggered by parent date range component
   * @internal
   */
  internalForceEmitChangeEvent(): Promise<void>;
  private dayInputController;
  private monthInputController;
  private yearInputController;
  private currentFocusedIndex;
  connectedCallback(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  componentWillRender(): Promise<void> | void;
  private initalizeInputController;
  private updateInputControllerDisableStates;
  /**
   * Sets the date dependant on the current mode
   * E.g: If the current mode is "day-month" we have to set every date's year in this context to 0
   */
  private adjustDateDependantOnCurrentMode;
  private checkInputs;
  private isDateEnabled;
  private isMonthEnabled;
  private isYearEnabled;
  private updateInputSegments;
  private focusNext;
  private focusPrevious;
  private focus;
  private obtainValueChangesFromOutside;
  private checkValueValidity;
  private getErrorMessage;
  private getFormattedDisplayDate;
  private emitValueChange;
  private emitValueComplete;
  private updateCalendarValue;
  private isValueValid;
  private isInputValid;
  formatToDateString(value: string): string;
  onFocusInput(): void;
  handleKeyInput(e: KeyboardEvent): void;
  private incrementCurrentSegment;
  private decrementCurrentSegment;
  private getInputController;
  private clearInput;
  private onBlur;
  private setFocusedIndex;
  private get day();
  private get month();
  private get year();
  private handleInput;
  private updateInternalValue;
  private selectDate;
  private setCalendar;
  private renderHiddenFallbackInput;
  private renderDayInput;
  private renderMonthInput;
  private renderYearInput;
  private renderInput;
  private renderClearButton;
  private renderIconOrClearButton;
  private renderCalendar;
  render(): any;
}
