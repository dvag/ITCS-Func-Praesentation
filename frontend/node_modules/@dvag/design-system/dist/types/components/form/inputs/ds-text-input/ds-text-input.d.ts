import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
/**
 * Formelement for text input.
 *
 * @path /Form/TextInput
 * @name Text Input
 * @shortname Text
 * @icon font
 * @stable
 */
export declare class DsTextInput implements ComponentInterface {
  private inputElement?;
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  private preventAutocomplete;
  self: HTMLDsTextInputElement;
  inputFocused: boolean;
  internalValue: string;
  autocompleteValues: TextInputAutocompleteValue[];
  currentFocusedIndex: number;
  /**
   * Label which is displayed above the input field.
   * @important
   * @value string: Label e.g `first name`
   * @example label
   */
  label?: string;
  /**
   * Text, which is displayed within a red dialog beneath the input.
   * @value string: error message
   * @example error
   */
  errormessage?: string;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Input has a red outline.
   * @value true: red outlined.
   * @value false: gray outlined.
   * @example error
   */
  error: boolean;
  /**
   * The value of this input.
   * @important
   * @value string: value of this input.
   * @example value
   */
  value: string;
  valueChanged(): void;
  /**
   * Limits the amount of characters a user can enter.
   * @value number: Amount of possible characters.
   * @example limitlength
   */
  limitlength?: number;
  /**
   * Placeholder for this input field.
   * @value string: The placeholder.
   */
  placeholder: string;
  /**
   * Assists the user with a masking.
   * The mask is defined as a pattern. The character `X` represents an alphanumeric character and `0` represents
   * numerals.
   * The user can only enter characters that are marked with `X` and `0`.
   * All other delimiters will be replaced automatically by the text input.
   * The delimiters will be removed, when the content is get programmatic.
   *
   * Beispiel: `XX00 0000 0000 0000 0000 00` (Deutsche IBAN)
   * @value string: Pattern for the mask.
   * @example mask
   * @example mask-iban
   * @example mask-complex
   */
  mask?: string;
  /**
   * Defines if the input field is enabled or not.
   * @value true: Input ist disabled
   * @value false: Input is not disabled
   * @example disabled
   */
  disabled: boolean;
  /**
   * Input field is in readonly mode.
   * The value of this input is displaey in an simplified manner.
   * The input field is not interactable.
   * @value false: input is not editable.
   * @value true: input is read-only.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Input is marked as required. And the user needs to fulfill the input's requirements.
   * @value true: Input field is required and draws a yellow outline and displays an icon beneath the input.
   * @value false: Input field is not required.
   * @example required
   */
  required: boolean;
  /**
   * Emits this event when the user changes the value of this input.
   * @example change-events
   */
  valueChange: EventEmitter<string>;
  /**
   * This Event is emitted when the user accepts the value.
   * The user accepts the value by pressing the Enter Key or when the user leave the input.
   * @example change-events
   */
  valueComplete: EventEmitter<string>;
  /**
   * This event is fired, when the user fills out this input.
   * The event paylod contains an controller which can be used to submit autocomplete values.
   * @example autocomplete-plz
   */
  autocomplete: EventEmitter<TextInputAutocompleteController>;
  /**
   * This event is fired when the user selects an autocomplete value from the list.
   * The event payload contains the `data` of the selected AutoCompleteOption.
   * @example autocomplete-plz-ort
   */
  selectAutocomplete: EventEmitter;
  /**
   * Focuses this input field.
   * @example focus
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private obtainValueChangesFromOutside;
  private onInputFocused;
  private onInputBlurred;
  private clearInput;
  private onInputKeyDown;
  private shouldShowAutocompleteValues;
  private onInputKeyUp;
  private updateCurrentFocusedIndexAndScrollIntoView;
  private scrollIntoView;
  private onInputClicked;
  private moveTextCursorToEnd;
  private onInputInput;
  private selectAutocompleteValue;
  private emitAutocompleteEvent;
  private emitValueChange;
  private emitValueComplete;
  private handleMaskedInput;
  render(): any;
  private renderInput;
  private renderAutocompleteValues;
  private renderClearButton;
}
export interface TextInputAutocompleteController {
  value: string;
  provideValues: (values: TextInputAutocompleteValue[]) => void;
}
export interface TextInputAutocompleteValue {
  label: string;
  value: string;
  data?: any;
}
