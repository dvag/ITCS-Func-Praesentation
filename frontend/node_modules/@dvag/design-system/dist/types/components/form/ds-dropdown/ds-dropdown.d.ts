import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { DropdownOption } from "./ds-dropdown-option/ds-dropdown-option";
/**
 * Form element for selecting multiple options in a list.
 *
 * @path /Form
 * @name Dropdown
 * @icon caret-square-down
 * @stable
 */
export declare class DsDropdown implements ComponentInterface {
  self: HTMLDsDropdownElement;
  private inputElement?;
  private elseOptionInput?;
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  private preventReFocus;
  private selectScanningEnabled;
  private nativeSelect;
  private optionsObserver;
  private observeSelectElementIntervalHandle;
  options: DropdownOption[];
  selectedOption: DropdownOption;
  inputFocused: boolean;
  listOpen: boolean;
  internalValue: StringOrObject;
  showMouseHoverEffectOnList: boolean;
  /**
   * Label which is displayed above the selection input field.
   * @important
   * @value string: Label text e.g. `First name`
   * @example value
   */
  label?: string;
  /**
   * Text, which is displayed in a red error popup at the bottom of the input field.
   * @value string: Error text.
   * @example error
   */
  errormessage?: string;
  /**
   * Indicates that an error exist within the input field. Colors the border in red.
   * @value true: An error exists.
   * @value false: There is no error.
   * @example error
   */
  error: boolean;
  /**
   * Whether the selection is readonly or editable.
   * If true the value of this component will be visualized as a normal text.
   * @value false: Input is editable.
   * @value true: Input is read-only.
   *
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks this input field as a required form element.
   * @value false: Not required
   * @value true: It is necessary to select an option to fulfill the requirement.
   * @example required
   */
  required: boolean;
  /**
   * Placeholder text which is displayed when no option is currently selected.
   * @value string: Placeholder text
   * @example placeholder
   */
  placeholder: string;
  /**
   * An icon which is displayed next to the placeholder text.
   * @value string: The name of an icon.
   * @example icon
   */
  icon?: string;
  /**
   * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null.
   * Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
   *
   * @important
   * @value string: The string value of the selected option.
   * @value object: The value of the selected option in case it's a complex type.
   * @value null: No option selected.
   * @example value
   */
  value: StringOrObject;
  valueChanged(): void;
  /**
   * Defines the text alignment.
   * @value left: Text is left aligned.
   * @value right: Text is right aligned.
   * @example text-align
   */
  textalign: string;
  /**
   * Defines the position of the dropdown list.
   * @value top: The list is displayed at the top of the input field.
   * @value bottom: The list is displayed at the bottom of the input field.
   * @example popup-position
   */
  popupposition: "top" | "bottom";
  /**
   * Whether it is possible to select an option which is not present in the current option list.
   *
   * @value false: The user can only select an option in the list.
   * @value true: The user is able to set a value which is not present in the option list by editing a text field under
   * the selection input field.
   * @example elseoption
   */
  elseoption: boolean;
  /**
   * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
   * @value string: Button label
   * @example elseoption
   */
  elseoptionbuttonlabel?: string;
  /**
   * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
   * @value string: Text input label.
   * @example elseoption
   */
  elseoptioninputlabel?: string;
  /**
   * Determines if the else-option input field is visible to the user. This property automatically changes
   * on user interaction or providing a value that doesn't match any dropdown options.
   * @value false: Else-option input field is not displayed.
   * @value true: Else-option input field is displayed.
   * @example elseoption-selected
   */
  elseoptionselected: boolean;
  /**
   * Defines whether the dropdown is enabled or not.
   * @value true: Dropdown is not editable.
   * @value false: Dropdown is editable.
   * @example disabled
   */
  disabled: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Delegates the current selection or text input (`elseoption`) while the user is still editing.
   *
   * @example complex
   */
  valueChange: EventEmitter<StringOrObject>;
  /**
   * Delegates the final selection or text input (`elseoption`).
   * The event is fired when the dropdown loses focus or pushing the 'Enter' key.
   *
   * @example complex
   */
  valueComplete: EventEmitter<StringOrObject>;
  /**
   * Sets the focus on this element.
   *
   * @example focus
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentDidRender(): void;
  /**
   * If the value changed from outside we need to check what option to use.
   * Possible cases can be:
   * - Setting value attribute
   * - Set of possible <ds-dropdown-option> changed
   * - Native <select> supervise detected a value change
   */
  private findSelectedOption;
  private collectOptions;
  private updateInternalValue;
  private obtainValueChangesFromOutside;
  private sanitizeValue;
  private onInputFocused;
  private onInputBlurred;
  private toggleList;
  private onInputKeyUp;
  private onInputKeyDown;
  private onInputClicked;
  private setOpenListStatus;
  /**
   * Used by the hidden native <select> to react to changes.
   */
  private selectOptionsByValue;
  private requestElseOption;
  private selectValueFromElseOption;
  private handleUpAndDownNavigation;
  private emitValueChange;
  private emitValueComplete;
  private selectOption;
  private scrollIntoView;
  private superviseSelectElement;
  private valueMatchesOption;
  render(): any;
  private renderNativeSelect;
  private renderOpenListButton;
  private renderItemList;
  private renderElseOptionButton;
  private renderOption;
  private renderSubLabels;
  private renderCurrentValue;
  private renderElseOptionInput;
}
export declare type StringOrObject = string | {
  [key: string]: any;
};
