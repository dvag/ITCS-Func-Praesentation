import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form-element to select multiple options.
 *
 * @path /Form
 * @name Checkbox
 * @icon check-square
 * @stable
 */
export declare class DsCheckBox implements ComponentInterface {
  private inputElement;
  self: HTMLDsCheckboxElement;
  /**
   * Text, Label which is displayed next to the checkbox.
   * If there is no `label` set, only the checkbox is displayed.
   *
   * @important
   * @value string: name of the option e.g. `Ausdruck gewünscht`
   * @example label
   */
  label?: string;
  /**
   * Disables the interaction with the checkbox.
   * @value false: Checkbox is interactable.
   * @value true: Checkbox is disabled.
   *
   * @example disabled
   */
  disabled: boolean;
  /**
   * The checkbox will be in read-only state.
   * Depending on the `checked`-state an icon icon is rendered.
   * @value false: Default visualization of the checkbox
   * @value true: Icon-representation of the `checked`-state
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks this checkbox as a required form element.
   * @value false: Not required
   * @value true: It is necessary to select an option to fulfill the requirement.
   * @example required
   */
  required: boolean;
  /**
   * @internal
   */
  requirementfulfilled: boolean;
  /**
   * State of the Checkbox.
   * @value false: Checkbox is not checked.
   * @value true: Checkbox is checked.
   *
   * @example checked
   */
  checked: boolean;
  /**
   * Text, which is displayed in a red error popup at the bottom of the checkbox.
   * @value string: Error text.
   * @example error
   */
  errormessage?: string;
  /**
   * Färbt den Rahmen der Checkbox rot ein.
   * @value true: roter Rahmen
   * @value false: goldener Rahmen
   * @example error
   */
  error: boolean;
  /**
   * Indicates that an error exist within the checkbox. Colors the border in red.
   *
   * @example check-event
   */
  checkedChange: EventEmitter<boolean>;
  mouseOver: boolean;
  inputFocused: boolean;
  /**
   * Sets the focus on this element.
   * @example focus
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private get showLabel();
  private select;
  toggle(e: KeyboardEvent): void;
  render(): any;
  private renderLabel;
}
