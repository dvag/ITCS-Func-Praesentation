import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { SearchAutoCompleteHandler } from "./auto-complete-value";
/**
 * Searchbar
 *
 * If the user makes an entry in the search field, the `search` event is triggered.
 * This enables the asynchronous supply of search suggestions. If the user selects
 * a search suggestion, a searchSelect event will be triggered.
 *
 * @path /Form
 * @name Search Input
 * @shortname Search
 * @icon search
 * @experimental
 */
export declare class DsSearch implements ComponentInterface {
  private inputElement?;
  private searchDebounce;
  private lastEmittedCompleteValue;
  private lastEmittedChangeValue;
  private lastSearchId;
  private categories;
  private navigatableListItems;
  self: HTMLDsSearchElement;
  inputFocused: boolean;
  internalValue: string;
  searchValues: SearchAutocompleteValue[];
  waitForSearchValues: boolean;
  selectedOption: SearchAutocompleteValue;
  popupopen: boolean;
  /**
   * Specifies the search term.
   * @value string: Search term
   */
  value: string;
  valueChanged(): void;
  /**
   * Specifies the placeholder text of this component.
   * @value string: Text used as the placeholder.
   */
  placeholder: string;
  /**
   * Specifies how many entries are visible when the popup is open.
   *
   * @value number: a number like 2.5 or 4.5
   * @example example
   */
  visibleentries: number;
  /**
   * Specifies the text that will be shown when there are no search results.
   * @value string: Text which will be displayed.
   * @example no-results-text
   */
  noresultstext: string;
  /**
   * Component will call the browsers `scrollIntoView()` method on the form
   * component after each search request. So the user can easily see the popup to choose from.
   *
   * @value true: Component will scroll popup list into view.
   * @value false: Component won't touch scrolling at all.
   * @example autoscrollintoview
   */
  autoscrollintoview: boolean;
  /**
   *
   * While the user is typing, this event is triggered and returns a controller in the event payload (`event.detail`).
   * This controller can be used to send input field values for autocompletion.
   * The user entered value can be determined using `event.detail.value`.
   *
   * The generated search suggestions are passed as an array to the `event.detail.provideValues()`
   * method. A search suggestion is an object with the properties:
   *
   * - `label`: Primary search suggestion text, which will be transferred to the input field when it is accepted
   * - `prelabel`: Optional text above the label that describes the search suggestion in more detail.
   * - `sublabel`: Optional text under the label that describes the search suggestion in more detail
   * - `category`: Optional categorization
   * - `data`: Optional field for any data.
   *
   * A search suggestion object can contain further properties, which can be evaluated with the `searchSelect`
   * event.
   *
   * @example example
   */
  search: EventEmitter<SearchAutoCompleteHandler>;
  /**
   * Fired when the user selects a search suggestion.
   * As event payload (`event.detail`) the object is supplied,
   * which created the search suggestion.
   *
   * @example example
   */
  selectSearch: EventEmitter;
  /**
   * Fired when the user changes the search term.
   */
  valueChange: EventEmitter<string>;
  /**
   * Confirmation of the entered value by the user. Event is triggered by
   * pressing the Enter key or by leaving the input field.
   */
  valueComplete: EventEmitter<string>;
  /**
   * Focuses this search.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  componentDidRender(): void;
  disconnectedCallback(): void;
  private obtainValueChangesFromOutside;
  private createDummySelectedOptionWithCurrentValue;
  private onInputFocused;
  private onInputBlurred;
  private clearInput;
  private blurInput;
  private getCurrentSearchValue;
  private onInputKeyUp;
  private handleUpAndDownNavigation;
  private selectEntryWithArrowDownOrUp;
  private selectOption;
  private selectSearchValue;
  private scrollIntoView;
  private onInputInput;
  private emitSearchEvent;
  private extractCategories;
  private populateCategoriesFromSearchResults;
  private fillNavigatableListFromCategories;
  private emitValueComplete;
  private emitValueChange;
  render(): any;
  private renderInput;
  private renderClearButton;
  private renderAutocompleteValues;
  private renderPopupContent;
  private renderCategories;
  private renderCategoryHeadline;
  private renderWaitingSpinner;
  private renderEmptySearchResults;
  private renderAutoCompleteItem;
}
export interface SearchAutocompleteValue {
  id?: string;
  label: string;
  prelabel: string;
  sublabel: string;
  category: string;
  data?: any;
}
