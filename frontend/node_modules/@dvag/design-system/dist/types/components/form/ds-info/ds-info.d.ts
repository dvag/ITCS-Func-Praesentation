import { ComponentInterface } from "../../../stencil-public-runtime";
/**
 * Adds an info button to components. Shows a popover-dialog, when the button is clicked.
 * The content of the popover is variable. Please pay attention to the Design-Patterns.
 * Der Inhalt des Popovers kann frei gewählt werden. Hierfür sind die Designvorgaben zu beachten.
 *
 * @path /Form/Layout
 * @name Infobutton
 * @shortname Info
 * @icon font
 * @slot - Child elements that get wrapped by the info button.
 * @slot modal - Slot to add a modal dialog. This must be defined, if the info-text is larger than 180 characters, to display the whole text or additional informations.
 * @slot content - content of the popover. If the slot is empty, no popover is shown.
 * @stable
 */
export declare class DsInfo implements ComponentInterface {
  private modalObserver;
  private popup;
  private modal;
  private content;
  private contentResizeObserver;
  self: HTMLDsInfoElement;
  /**
   * Defines which width the info element takes
   * @value string: max-width
   * @value string: content
   * @important
   */
  size: "max-width" | "content";
  /**
   * Hide the Infobutton
   * @value true: Infobutton hidden
   * @value false: Infobutton visible
   * @example hidebutton
   */
  hidebutton: boolean;
  /**
   * Manually controls the visiblity of the popup that contains
   * the explaination text.
   * @value false: Popup is not visible.
   * @value true: Popup is visible.
   * @example popupvisible
   */
  popupvisible: boolean;
  centerContentAndInfo: boolean;
  infoButtonOffsetX: string;
  infoButtonOffsetY: string;
  private handleModalOpened;
  /**
   * Sets a modal for the info-I
   *
   * Should not be used with the modal-slot. The slotted modal is more important.
   *
   * @example remote-modal
   */
  setModal(modal: HTMLDsModalElement): Promise<void>;
  windowClicked(e: MouseEvent): void;
  onWindowKeyDown(): void;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private togglePopUp;
  private closePopupOnClickOutside;
  private setContent;
  private computeInfoButtonOffset;
  render(): any;
}
