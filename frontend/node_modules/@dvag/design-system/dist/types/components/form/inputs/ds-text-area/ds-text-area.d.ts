import { EventEmitter } from "../../../../stencil-public-runtime";
/**
 * Formular-Element zur Erfassung von Flie√ütext
 *
 * @path /Form/Textfeld
 * @name Textarea
 * @shortname Textarea
 * @icon align-justify
 * @stable
 */
export declare class DsTextArea {
  self: HTMLDsTextAreaElement;
  private inputElement?;
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  inputFocused: boolean;
  internalValue: string;
  /**
   * Text that is shown under the textarea in a red dialog.
   * @value string: Errormessage
   * @example error
   */
  errormessage?: string;
  /**
   * Colors the border of the textarea red.
   * @value true: red border.
   * @value false: grey border.
   * @example error
   */
  error: boolean;
  /**
   * Label shown above the textarea.
   * @value string: Label e.g `Notizen`
   * @important
   * @example label
   */
  label?: string;
  /**
   * Maximum number of characters.
   * @value number: Number of characters
   * @example maxlength
   */
  maxlength?: number;
  /**
   * Number of lines shown simultaneously.
   * @value number: Number of lines.
   * @example lines
   */
  lines: number;
  /**
   * Text of the textarea.
   * @important
   * @value string: Content of the textarea.
   * @example value
   */
  value: string;
  /**
   * Textarea is disabled and cannot be used anymore.
   * Label and border are grey.
   * @value true: Textarea is disabled
   * @value false: Textarea is not disabled
   * @example disabled
   */
  disabled: boolean;
  /**
   * Textarea is in read-only mode.
   * Content of the textare is displayed in a simple way.
   * @value false: Formfield
   * @value true: Shows the content only as text.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks the textarea as mandatory.
   * @value false: Not mandatory (Default).
   * @value true: mandatory field.
   * @example required
   * @example required-maxlength
   */
  required: boolean;
  valueChanged(): void;
  /**
   * Event is thrown when the user changes the content of the textarea.
   *
   * @example change-events
   */
  valueChange: EventEmitter<string>;
  /**
   * Event is thrown when the user checks the input. Event is triggered when the user presses Return or
   * leaves the textarea.
   *
   * @example change-events
   */
  valueComplete: EventEmitter<string>;
  /**
   * Sets the focus to the textarea.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private obtainValueChangesFromOutside;
  private onInputFocused;
  private onInputBlurred;
  private onInputKeyUp;
  private emitValueChange;
  private emitValueComplete;
  render(): any;
  private renderInput;
  private renderRemainingLetters;
}
