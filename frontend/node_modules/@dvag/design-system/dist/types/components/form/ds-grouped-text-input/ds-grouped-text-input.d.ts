import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Formelement which only accepts characters in a defined order.
 *
 * @path /Form/Textfeld
 * @name Grouped-Text-Input
 * @shortname Grouped-input
 * @icon font
 */
export declare class DsGroupedTextInput implements ComponentInterface {
  self: HTMLDsGroupedTextInputElement;
  private allGroupedTextInputController;
  private groups;
  private internalValue;
  private forceBlur;
  active: boolean;
  userInputed: boolean;
  /**
   * Define your mask using :
   *
   * ยง Defines a character like a-zA-Z
   *
   * \# Defines a number like 0-9
   *
   * a-zA-Z0-9 in your pattern will render these characters as placeholders.
   *
   * any non-word character will be used as 'delemiter'.
   *
   * Example: `DE## #### #### #### #### ####` (German IBAN)
   * @value string: Pattern
   * @example german-iban
   * @example common-iban
   */
  mask: string;
  onMaskChanged(): void;
  /**
   * Label which is displayed above the input field.
   * @important
   * @value string: Label e.g `first name`
   * @example label
   */
  label: string;
  /**
   * @important
   * @value string: value of this input.
   * @example value
   */
  value: string;
  onValueChanged(): void;
  /**
   * Text displayed below the input field in a red dialog.
   * @value string: Errormessage
   * @example error
   */
  errormessage?: string;
  /**
   * Colors the frame of the input field red.
   * @value true: Red outline
   * @value false: Gray outline
   * @example error
   */
  error: boolean;
  /**
   * Input is no longer operable.
   * Label and frame are gray.
   * @value true: Input is disabled
   * @value false: Input ist not disabled
   * @example disabled
   */
  disabled: boolean;
  /**
   * Marks this form field as mandatory
   * @value false: Required form field (default)
   * @value true: Reguired form field
   * @example required
   */
  required: boolean;
  /**
   * Input field is in readonly mode.
   * The value of this input is displaey in an simplified manner.
   * The input field is not interactable.
   * @value false: input is not editable.
   * @value true: input is read-only.
   */
  readonly: boolean;
  /**
   * Change of the entered value during the user's input.
   * @example change-events
   */
  valueChange: EventEmitter<string>;
  /**
   * Confirmation of the entered value by the user. Event is triggered by
   * Pressing the Enter key or by leaving the input field.
   *
   * @example change-events
   */
  valueComplete: EventEmitter<string>;
  connectedCallback(): void;
  componentWillLoad(): void | Promise<void>;
  componentDidRender(): void;
  private obtainValueFromOutside;
  private checkFilledOut;
  private normalizeValue;
  private findInnerInputElement;
  private focusFirstUnfulfilledInput;
  private focusFirstInput;
  private blurAllInputs;
  private blurWhenInactive;
  private checkUserInputed;
  private clearAllInputs;
  private reConstructInputsAndDelimiter;
  private handleInput;
  private handleKeyDown;
  private getFirstController;
  private getNextController;
  private getPreviousController;
  private focusPreviousController;
  private focusNextController;
  private writeOverflowToNextInputController;
  private computeNewValue;
  private valueChanged;
  private handleOnKeyUp;
  private handleArrowKeys;
  private onDeleteBackwards;
  private initalizeGroupedTextInputController;
  render(): any;
  private renderGroups;
  private renderReadonly;
  private renderClearButton;
}
