import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form element which offers multiple options in the form of `<ds-radio-button>` elements.
 * Only one option can be selected at a time.
 *
 * @path /Form
 * @name Radio-Button-Group
 * @shortname Radio
 * @icon object-group
 * @stable
 *
 * @slot - One or more `<ds-radio-button>` elements.
 */
export declare class DsRadioButtonGroup implements ComponentInterface {
  private slotObserver;
  private borderedFormGroup;
  private shouldEmitValueChange;
  self: HTMLDsRadioButtonGroupElement;
  radioButtons: HTMLDsRadioButtonElement[];
  inputFocused: boolean;
  /**
   * @internal
   */
  radiogroupid: string;
  /**
   * Defines if the group is in a read-only state.
   * The label of the current selected radio button will be displayed.
   *
   * @value false: The component is displayed normally.
   * @value true: The current selected option is displayed as text. If no option is selected no text will be displayed.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Defines if the radio button group is a required form element.
   * @value false: It is not required to select an option.
   * @value true: To fulfill the requirement one option has to be selected.
   * @example required
   */
  required: boolean;
  /**
   * A text which is displayed in an error popup below the component.
   * @value string: Error text
   * @example error
   */
  errormessage?: string;
  onErrorMessageChange(): void;
  /**
   * Sets the error state on the group.
   *
   * @value true: An error exists.
   * @value false: No error exists.
   * @example error
   */
  error: boolean;
  /**
   * Disables the ability to interact with this component.
   * Every option inside will also be set to `disabled`.
   *
   * @value false: User can select an option.
   * @value true: User cannot select an option.
   *
   * @example disabled
   */
  disabled: boolean;
  onDisabledChange(): void;
  /**
   * This property mirrors the current selected option.
   * If set, an inner radio button with the same `value` has to exist.
   *
   * @value string: The value of an inner radio button.
   * @example value
   * @example read-value
   * @example write-value
   */
  value: string;
  valueChanged(newValue: string, oldValue: string): void;
  /**
   * Delegates the current selected `<ds-radio-button>` element's value.
   * This event will not trigger when setting the `value` in JavaScript.
   *
   * @example read-value
   */
  valueChange: EventEmitter<string>;
  onKeyUp(e: KeyboardEvent): void;
  onChildFocused(): void;
  onChildBlurred(): void;
  /**
   * Sets the focus on the radio group.
   *
   * If an option is selected it will be focused.
   * If no option is selected the first option will be focused.
   * @example focus
   */
  focusControl(): Promise<void>;
  /**
   * @internal
   */
  select(value: string): Promise<void>;
  connectedCallback(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  private updateCheckedStates;
  private emitValueChange;
  private hasError;
  private injectStates;
  private getSelectedRadioButton;
  private init;
  private handleRequirement;
  private handleErrorMessage;
  private isConnectedToBorderedFormGroup;
  private renderErrorPopup;
  componentShouldUpdate(_: any, __: any, propName: string): boolean | void;
  render(): any;
}
