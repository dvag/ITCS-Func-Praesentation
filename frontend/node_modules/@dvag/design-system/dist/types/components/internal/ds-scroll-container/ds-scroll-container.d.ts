import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * @internal
 */
export declare class DsScrollContainer implements ComponentInterface {
  private scrollContainer;
  private scrollContainerBoundings;
  private initialYPositionOnScrollBar;
  private updateScrollParameterEvents;
  private slotObserver;
  private updateHandler;
  private verticalMouseMoveHandler;
  private horizontalMouseMoveHandler;
  private mouseUpHandler;
  self: HTMLDsScrollContainerElement;
  currentDraggingBar: "horizontal" | "vertical";
  collisionTop: number;
  collisionBottom: number;
  horizontalThumbWidth: number;
  verticalThumbHeight: number;
  onDraggingBarChanged(newVal: any, oldVal: any): void;
  verticalThumbTop: number;
  horizontalThumbLeft: number;
  top: number;
  left: number;
  height: number;
  width: number;
  thumbwidth: number;
  thumbmargin: number;
  thumbcolor: string;
  thumbopacity: number;
  minthumbsize: number;
  scrollbarspace: number;
  scrollbaroffset: number;
  scrollbarwidth: number;
  scrollbarmargin: number;
  verticalscrollbarposition: "left" | "right";
  horizontalscrollbarposition: "top" | "bottom";
  scrollbarcolorfactor: number;
  scrollbarborderradius: number;
  scrollbaropacity: number;
  scrollVerticalActive: EventEmitter<boolean>;
  scrollHorizontalActive: EventEmitter<boolean>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private handleScrollBarMouseUp;
  private update;
  private updateVertical;
  private updateHorizontal;
  private get scrollBarWidth();
  private init;
  private get verticalScrollContainerHeight();
  private get horizontalScrollContainerWidth();
  private getTargetMargin;
  private get verticalScrollContainerY();
  private get horizontalScrollContainerX();
  private scrollContainerBegin;
  private toLocal;
  private handleVerticalScrollBarMouseDown;
  private handleHorizontalScrollBarMouseDown;
  handleVerticalScrollBarMouseMove(e: MouseEvent): void;
  handleHorizontalScrollBarMouseMove(e: MouseEvent): void;
  private get visibleVertical();
  private get visibleHorizontal();
  private getScrollPositionY;
  private getScrollPositionX;
  render(): any;
  private get actualScrollbarSpace();
  private createVerticalScrollBar;
  private createHorizontalScrollBar;
  private renderScrollBars;
}
