import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { ChartSample } from "../ds-chart-sample/ds-chart-sample";
/**
 * This component visualizes data array in the form of a donut chart.
 * It consists of multiple segments which each represents a data input.
 *
 * @name Donut-Chart
 * @shortname Donut
 * @path /Visualization
 * @icon chart-pie
 * @stable
 *
 * @slot content - `<ds-chart-sample>` elements which are translated to donut segments.
 * @slot-example content
 */
export declare class DsDonutChart implements ComponentInterface {
  private slotObserver;
  private mouseMoveHandler;
  self: HTMLDsDonutChartElement;
  chartInput: ChartSample[];
  selected: number;
  /**
   * The radius of the donut.
   *
   * @value Number:
   */
  radius?: number;
  /**
   * Specifies the width of the donut's segments.
   *
   * @value number: The width of a segment.
   */
  segmentwidth: number;
  /**
   * The distance between all segments.
   *
   * @value number: The distance in pixels.
   */
  offset?: number;
  /**
   * Specifies the scale factor of selected segments.
   *
   * @value number: The scaling factor of the selected segment.
   */
  scale?: number;
  /**
   * The starting angle of the first segment.
   *
   * @value number: An angle between 0 and 360.
   * e.g.:
   * First segment starts...
   * - 0: from the top (12 o'clock)
   * - 90: from the right (3 o'clock)
   * - 180: from the bottom (6 o'clock)
   * - 270: from the left (9 o'clock)
   */
  startangle: number;
  /**
   * Triggers when a segment is clicked. It delegates the index of the selected segment.
   *
   * @value number: The index of the selected segment.
   */
  segmentSelect: EventEmitter<number>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private collectSamplesFromChildren;
  private getHitAngle;
  private handleMouseMove;
  private selectSegmentByAngle;
  private selectSegment;
  private addWindowHandler;
  private removeWindowHandler;
  private getCircleSegmentPoints;
  private generateDonutCreateData;
  private get maxSize();
  private get circleOrigin();
  private getScaledOuterRadius;
  render(): any;
  private renderDonutChart;
  private renderSegment;
  private renderSegments;
}
