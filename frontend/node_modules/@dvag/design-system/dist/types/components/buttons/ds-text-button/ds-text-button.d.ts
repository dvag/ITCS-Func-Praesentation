import { ComponentInterface } from "../../../stencil-public-runtime";
/**
 * Button used for a subtile call to action.
 *
 * @path /Buttons
 * @name Text-Button
 * @shortname Text
 * @icon external-link-alt
 * @stable
 *
 * @slot - Content of the button, that can be a combination `<ds-text>` und `<ds-icon>`. The `size` attribute of a `<ds-icon>` is set automatically.
 * @slot-example labeling
 */
export declare class DsTextButton implements ComponentInterface {
  private breakpointAware;
  private buttonElement;
  private slotObserver;
  self: HTMLDsTextButtonElement;
  /**
   * Specifies the responsiveness strategy.
   * @value auto: Text size is automatically determined by evaluating the device screen size.
   * @value small: Use text size for small device screens.
   * @value large: Use text size for large device screens.
   * @example screensize
   */
  screensize: "small" | "large" | "auto";
  screensizeChanged(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): Promise<void> | void;
  /**
   * Sets the color of the button.
   * @value gold: Gold color (default value)
   * @value rot: Special case for destructive actions
   * @example color
   */
  color: "gold" | "rot";
  /**
   * Disables user interaction on the button.
   * @value false: User can interaction with the button.
   * @value true: User can not interaction with the button.
   * @example disabled
   */
  disabled: boolean;
  /**
   * Disables the ability to focus the button via tabulator navigation.
   * @value false: Button is reachable via tab navigation.
   * @value true: Button is ignored when using tab navigation.
   */
  unfocusable: boolean;
  /**
   * Focuses this element.
   */
  focusControl(): Promise<void>;
  render(): any;
}
