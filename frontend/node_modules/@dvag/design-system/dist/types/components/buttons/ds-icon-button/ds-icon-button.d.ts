import { ComponentInterface } from "../../../stencil-public-runtime";
/**
 * Button used to call application-specific features. It can be used with an icon or a combination
 * of icon and text.
 *
 * @path /Buttons
 * @name Icon-Button
 * @shortname Icon
 * @icon pen-square
 * @stable
 * @slot - Content of the button. Make sure to always use a `<ds-icon>` without setting the `size` attribut. Optionally you can complement the icon with a `<ds-text>`.
 * @slot-example labeling
 */
export declare class DsIconButton implements ComponentInterface {
  private buttonElement;
  self: HTMLDsIconButtonElement;
  /**
   * Sets the color of the button.
   * @value gold: Gold color (default value)
   * @value rot: Special case for destructive actions
   * @example color
   */
  color: "gold" | "rot";
  /**
   * Sets the background color.
   * @value hellgrau-4: Button uses a light grey background (default value).
   * @value weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background.
   * @example backgroundcolor
   */
  backgroundcolor: "weiss" | "hellgrau-4";
  /**
   * Disables user interaction on the button.
   * @value false: User can interaction with the button.
   * @value true: User can not interaction with the button.
   * @example disabled
   */
  disabled: boolean;
  /**
   * Defines the size of othe button.
   * @value medium: Medium button size
   * @value small: Small button size, optimized for usage in forms
   * @example size
   */
  size: "medium" | "small";
  /**
   * Defines the alignment of elements within the button.
   * @value row: Content elements are layouted from left to right.
   * @value column: Content elments are layouted from top to bottom.
   * @example align
   */
  align: "row" | "column";
  /**
   * Disables the ability to focus the button via tabulator navigation.
   * @value false: Button is reachable via tab navigation.
   * @value true: Button is ignored when using tab navigation.
   */
  unfocusable: boolean;
  /**
   * Focuses this element.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  render(): any;
}
