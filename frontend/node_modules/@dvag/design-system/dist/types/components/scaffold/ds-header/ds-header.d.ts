import { ComponentInterface } from "../../../stencil-public-runtime";
import { HeaderUserConfiguration } from "./ds-header-user/ds-header-user";
import { HeaderCustomerConfiguration } from "./ds-header-customer/ds-header-customer";
import { HeaderActionConfiguration } from "./ds-header-action/ds-header-action";
import { HeaderActionListConfiguration } from "./ds-header-action-list/ds-header-action-list";
/**
 * Der Header befindet sich immer am oberen Rand der Seite. Hier finden ggf. Hauptnavigation und Benutzermenü sowie das Logo Platz
 * Der Header sollte immer innerhalb einer `<ds-app>` genutzt werden.
 * Anwendungsbeispiele sind auch [hier](assets/examples/old_VSP-Seite1.html) zu finden
 *
 * @path /Scaffold
 * @name Header
 * @icon heading
 * @stable
 *
 * @slot center - Mittlerer Bereich für z.B. Navigationslinks
 * @slot right - Bereich an der rechten Seite, für z.B. Benutzermenü
 * @slot below - Weitere Sticky-Elemente unterhalb des Headers
 */
export declare class DsHeader implements ComponentInterface {
  private breakpointAware;
  private userConfigObserver;
  private customerConfigObserver;
  private headerActionItemObserver;
  private userAvatarElement;
  customerConfiguration: HeaderCustomerConfiguration;
  userConfiguration: HeaderUserConfiguration;
  userPopupOpen: boolean;
  headerActionItems: (HeaderActionConfiguration | HeaderActionListConfiguration)[];
  renderActionItemsInHeader: boolean;
  self: HTMLDsHeaderElement;
  /**
   * Whether the header is used within a fullscreen application or not.
   *
   * @value true: The header content takes the full application width into consideration.
   * @value false: The header content has a defined maximal width of 1200 pixels.
   *
   * @example fullscreen
   */
  fullscreen: boolean;
  /**
   * Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo).
   * @value default: Deutsche Vermögensberatung (Standardwert)
   * @value allfinanz: Deutsche Vermögensberatung Allfinanz
   * @example header-allfinanz
   */
  brand: "default" | "allfinanz";
  connectedCallback(): void;
  disconnectedCallback(): void;
  windowClicked(e: Event): void;
  private getLogo;
  private toggleUserPopup;
  render(): any;
  private renderHeaderItems;
  private renderCustomer;
  private renderHeaderMenuItems;
  private renderHeaderMenuActionItems;
  private renderHeaderMenuAction;
  private renderHeaderMenuActionList;
  private renderHeaderActionMenuItemsRecursiv;
  private renderSeparator;
}
