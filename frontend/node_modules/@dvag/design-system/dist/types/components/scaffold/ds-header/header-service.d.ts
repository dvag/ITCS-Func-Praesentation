import { DsObservable, ObservableSubscription } from "../../../classes/multicast-observable";
export declare class HeaderService {
  private headerSubject;
  private headerHeightSubject;
  private contentHeightBelowHeaderSubject;
  private headerResizeObserver;
  private reservedAdditionalHeightBelowHeader;
  static instance(): HeaderService;
  get header$(): DsObservable<HTMLDsHeaderElement>;
  get header(): HTMLDsHeaderElement;
  set header(header: HTMLDsHeaderElement);
  get headerHeight$(): DsObservable<number>;
  get headerHeight(): number;
  get contentHeightBelowHeader$(): DsObservable<number>;
  get contentHeightBelowHeader(): number;
  private delegateHeightChange;
  /**
   * Reserves additional height below the header. (e.g. for other fixed or sticky elements)
   * @param ref: The reference to reserve the height for.
   * @param height: The height which should be reserved
   */
  reserveHeightFor(ref: object, height: number): void;
  /**
   * Frees the reserved height below the header.
   * @param ref: The reference to free the height of.
   */
  freeHeightFor(ref: object): void;
  private delegateContentHeightBelowHeader;
}
export declare function subscribeToHeaderHeight(heightChangeCallback: (height: number) => void): HeaderHeightSubscription;
export declare function subscribeToContentHeightBelowHeader(heightChangeCallback: (height: number) => void): HeaderHeightSubscription;
export declare type HeaderHeightSubscription = ObservableSubscription<number>;
