import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Ein Container, der bei Hinzufügen und Entfernen von Inhalten automatisch auf die neue Höhe animiert.
 *
 * @name Grow Box
 * @shortname Growbox
 * @path /Layout
 * @icon box
 *
 * @slot - Der Inhalt der Box, der die Höhe für die Box vorgibt.
 */
export declare class DsGrowBox implements ComponentInterface {
  self: HTMLDsGrowBoxElement;
  private lastScrollHeight;
  private contentElement;
  private resizeObserver;
  private isInTransition;
  private suppressSlideContentTimeoutHandle;
  childGrowboxIsGrowing: boolean;
  contentIsVisible: boolean;
  /**
   * Gibt an, ob die Box offen oder geschlossen sein soll. Wenn dieser Wert geändert wird, animiert die Box automatisch
   * auf die entsprechende Höhe.
   *
   * @value true: Die Box animiert seine Höhe auf die Höhe seiner Kind-Elemente.
   * @value false: Die Box animiert seine Höhe auf den Wert 0.
   *
   * @example open
   */
  open: boolean;
  /**
   * Gibt an, ob die Kind-Elemente mitgeschoben werden, wenn sich die Box öffnet oder schließt.
   *
   * @value true: Die Kind-Elemente werden nach oben bzw. unten geschoben, wenn sich der `open`-State der Box verändert.
   * @value false: Die Kind-Elemente bleiben immer an Ort und Stelle.
   *
   * @example slide-content
   */
  slidecontent?: boolean;
  /**
   * Gibt an, ob nach dem Initialisieren der Box bereits animiert werden soll.
   *
   * @value true: Sofern das `open`-Attribute den Wert `true` hat, animiert die Box auf seine berechnete Höhe.
   * @value false: Beim Initialisieren der Box wird keine Animation stattfinden.
   *
   * @example animate-on-init
   */
  animateoninit: boolean;
  /**
   * @internal
   * Benutzt für Growbox zu Growbox Kommunikation
   */
  growboxGrowStart: EventEmitter<number>;
  /**
   * Event kennzeichnet den Abschluss einer Transition. Die Event-Payload (`event.detail`)
   * enthält Status-Informationen zur Growbox.
   */
  growStart: EventEmitter<GrowStartEvent>;
  /**
   * Wirft Ergeignis, wenn sich die Sichtbarkeit des Contents ändert.
   * Die Event-Payload (`event.detail`) enthält einen boolean, ob der
   * Content sichtbar ist.
   */
  contentVisibilityChange: EventEmitter<boolean>;
  onContentVisibilityChange(event: CustomEvent): void;
  onChildGrowboxGrowStart(event: CustomEvent): void;
  componentWillLoad(): Promise<void> | void;
  private handleTransitionStart;
  private handleTransitionEnd;
  private contentElementCreated;
  private checkHeight;
  private getHeightOfContent;
  render(): any;
}
export interface GrowStartEvent {
  fromOpen: boolean;
  toOpen: boolean;
}
export interface GrowEndEvent {
  open: boolean;
}
