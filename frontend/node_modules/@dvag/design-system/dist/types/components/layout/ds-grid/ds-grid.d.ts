import { ComponentInterface } from "../../../stencil-public-runtime";
import { GridBreakpoint } from "./grid-models";
/**
 * Responsive Layout-Element zur Anordnung mehrerer Elemente einem Grid-System.
 *
 * Es werden mehrere Grid-Systeme unterstützt, die mittels der `base` Property bestimmt werden.
 *
 * Es gibt vier Breakpoints (S für Smartphone, M für Tablets, L für Laptops, XL für Desktops), um responsives
 * Verhalten zu modellieren. Für jeden Breakpoint gibt eine Property, die mit einem Grid-Syntax definiert werden kann.
 *
 * ## Grid-Syntax
 * Der Syntax besteht aus 4 Operatoren:
 *
 * | Operator | Bedeutung |
 * |-----|-----|
 * | **`2`** | Eine Zahl beschreibt, wie viele Grid-Spalten sich ein Element nehmen soll. `0` bedeutet, Element ausblenden. |
 * | **`(3)`** | Eine Zahl in Klammern beschreibt, dass Weißraum mit einer gewissen Spaltengröße erzeugt wird. |
 * | **`-`** | Abgrenzung zwischen `Zahlen` in einer Zeile. Zusammen mit den Zahlen ergeben sie die Zeilen-Definition. z.B. `2-2-2`: drei Elemente in einer Zeile nehmen sich jeweils 2 Spalten. |
 * | **`/`** | Die nachfolgenden Zeilen-Definition wird in einer neuen Zeile anzeigt. z.B. `2-2/4`: Es gibt drei Elemente. Zwei werden in der ersten Zeile angezeigt, das dritte in der zweiten Zeile. |
 * | **`*`** | Wiederhole die vorherige Zeilen-Definition so oft, wie es Elemente gibt. z.B. `4/*`: Alle Elemente nutzen 4 Grid-Spalten und werden immer in einer neuen Zeile angezeigt. |
 *
 * ## Spaltenanzahl
 *
 * Die konkrete Spaltenanzahl wird über die Grid-Basis (`base` Property) bestimmt. Jeder Breakpoint hat eine feste zugewiesene
 * Spaltenanzahl.
 *
 * | Grid-Basis | S | M | L | XL |
 * |-----|-----|-----|-----|-----|
 * | `page` | 4 | 6 | 8 | 12 |
 *
 * *Beispiel: In einem `page`-Grid dürfen maximal 12 Spalten in der `xl`-Property pro Zeile verteilt werden.*
 *
 * @path /Layout
 * @name Grid
 * @stable
 * @icon th
 * @slot - Elemente für die das Layout erstellt werden soll.
 * @example tutorial-1
 */
export declare class DsGrid implements ComponentInterface {
  private breakpointAware;
  private slotObserver;
  self: HTMLDsGridElement;
  breakpoint: GridBreakpoint;
  numberOfChildNodes: number;
  /**
   * Art des Grids (Grad-Basis) die für dieses Grid verwendet wird.
   * @value page: Standard-Seiten-Grid
   * @example page-1
   * @example page-2
   */
  base: string;
  /**
   * Grid-Layout im Grid-Syntax (siehe oben) für Smartphone-Auflösungen.
   *
   * Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
   *
   * @value string: Layout im Grid-Syntax
   * @important
   */
  s?: string;
  /**
   * Grid-Layout im Grid-Syntax (siehe oben) für Tablet-Auflösungen.
   *
   * Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
   *
   * @value string: Layout im Grid-Syntax
   * @important
   */
  m?: string;
  /**
   * Grid-Layout im Grid-Syntax (siehe oben) für Laptop-Auflösungen.
   *
   * Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
   *
   * @value string: Layout im Grid-Syntax
   * @important
   */
  l?: string;
  /**
   * Grid-Layout im Grid-Syntax (siehe oben) für Desktop-Auflösungen.
   *
   * Es muss mindestens eine Breakpoint-Größe (S, M, L oder XL) definiert sein.
   *
   * @value string: Layout im Grid-Syntax
   * @important
   */
  xl?: string;
  private usedGrid;
  private gridPool;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private gridBase;
  private getBreakpointFromBreakpointAware;
  private updateChosenGrid;
  render(): any;
}
