import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * A notification toast to visualize specific events like successes, errors, warnings etc.
 * The notification automatically renders under any other visible notifications.
 *
 * @name Notification Toast
 * @shortname Toast
 * @path /Modals
 * @icon bell
 *
 * @slot - Content within the notification which is displayed under the title
 */
export declare class DsNotificationToast implements ComponentInterface {
  private closeHandle;
  self: HTMLDsNotificationToastElement;
  show: boolean;
  /**
   * The title of the notification.
   *
   * @value string: The title.
   *
   * @example default
   */
  titlestring: string;
  /**
   * The icon which is rendered at the left side of the notification.
   *
   *  @value string: A valid icon name.
   *  @example icon
   */
  icon?: string;
  /**
   * The color of the icon.
   *
   * @value string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)
   * @example icon
   */
  iconcolor?: string;
  /**
   * Text under the content. (e.g. for displaying error codes)
   *
   * @value string: Displayed text under the content.
   * @example sub-content
   */
  subcontent?: string;
  /**
   * Specifies the time in seconds the notification is visible before it's closed automatically.
   *
   * @value number: A time in seconds. Any number below zero is considered as infinite.
   * @value undefined The notification stays visible until it's closed by clicking on the close button on the
   * top right corner.
   *
   * @example close-after
   */
  closeafter: number;
  /**
   * Specifies the visibility. If the notification closes automatically or by clicking on the close button
   * this attribute will be set to false.
   *
   * @value true: Toast will be displayed under the header.
   * @value false: Toast is invisible.
   *
   * @example default
   */
  visible: boolean;
  onVisibleChanged(): void;
  /**
   * Fires when the notification closes automatically or by clicking on the close button.
   *
   * @example close-notification
   */
  closeNotification: EventEmitter<void>;
  connectedCallback(): void;
  componentDidLoad(): void;
  private closeImmediately;
  handleTransitionEnd(e: TransitionEvent): void;
  renderTitle(): any;
  renderSubContent(): any;
  renderIcon(): any;
  renderCloseButton(): any;
  render(): any;
}
