import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { AlertButtonData } from "../ds-alert-button/ds-alert-button";
/**
 * Modal alert which overlays over the page to show a dialog which displays confirmation options.
 * @path /Modals
 * @name Alert
 * @icon exclamation-triangle
 * @stable
 */
export declare class DsAlert implements ComponentInterface {
  self: HTMLDsAlertElement;
  private modalDialog;
  customRenderFunction: () => any;
  private slotObserver;
  private minButtonSpaceOnSides;
  private submitResult;
  private submitResultSubscription;
  private customShowCalled;
  private transitionStartHelper;
  buttonsData: AlertButtonData[];
  direction: "column" | "row";
  ignoreSlots: boolean;
  nooverlay: boolean;
  /**
   * Defines if the alert is visible or not.
   * @value true: Alert is visible.
   * @value false: Alert is not visible.
   *
   * @example visible
   */
  visible: boolean;
  /**
   * Defines in which direction the buttons should be displayed.
   *
   * @value column: The buttons will be displayed from left to right.
   * @value row: The buttons will be displayed from top to bottom.
   * @value auto: The direction is computed dependant on the label size of the buttons.
   * @example actions-direction-row
   * @example actions-direction-column
   * @example actions-direction-auto-s
   * @example actions-direction-auto-l
   */
  actionsdirection: "column" | "row" | "auto";
  /**
   *  Fires when the user interacts with one of the alert's buttons.
   *  @exqmple button-click
   */
  buttonClick: EventEmitter<string>;
  componentWillLoad(): void;
  connectedCallback(): void;
  componentDidRender(): void;
  disconnectedCallback(): void;
  onKeyDown(e: KeyboardEvent): void;
  private calculateDirection;
  private prepareShowAlert;
  /**
   * Shows the alert and returns a promise with the users choice.
   * *Important*: This method should not be called with the `showAlert` or `showConfirm` method in an alert's lifecycle.
   *
   * @example method-show
   */
  show(): Promise<any>;
  /**
   * Shows a predefined alert with one confirmation button.
   *
   * *Important*: This method should not be called with the `show` method in an alert's lifecycle.
   *
   * @param title Title text.
   * @param body The content text below the title.
   * @param icon An icon name which is displayed over the title.
   * @param iconColor The icon color.
   * @param okLabel The label text of the confirmation button.
   * @example method-show-alert
   */
  showAlert(title: string, body: string, okLabel?: string, icon?: string, iconColor?: string): Promise<any>;
  /**
   * Shows a predefined alert with two buttons.
   * The right button confirms and the left button cancels the alert.
   * The method returns a promise which resolves when the user interacts with one of the two options.
   * The resolved promise contains `true` when the user confirms the alert and `false` when the user cancels the alert.
   *
   * *Important*: This method should not be called with the `show` method in an alert's lifecycle.
   *
   * @param title Title text.
   * @param body The content text below the title.
   * @param cancelLabel The label text of the left button (cancel).
   * @param confirmLabel The label text of the right button (confirm).
   * @param icon An icon name which is displayed over the title.
   * @param iconColor The icon color.
   * @param destructive Indicates whether the alert implies a destructive action when confirming (e.g. deletion of a resource).
   * @example method-show-confirm1
   * @example method-show-confirm2
   */
  showConfirm(title: string, body: string, cancelLabel: string, confirmLabel: string, icon?: string, iconColor?: string, destructive?: boolean): Promise<boolean>;
  private handleButtonClick;
  private handleTransitionStart;
  private handleTransitionEnd;
  render(): any;
  private renderDefault;
  private renderIcon;
  private renderIconSlot;
  private renderDefaultContent;
  private renderContent;
  private renderButtons;
  private renderButton;
}
