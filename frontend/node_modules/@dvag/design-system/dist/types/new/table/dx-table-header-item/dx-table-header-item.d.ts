import { ComponentInterface } from "../../../stencil-public-runtime";
import { ColumnSettings, ColumnType, SortDirection } from "../table-common-types";
/**
 * @path /Table
 * @name Table Column
 * @shortname Column
 * @stable
 *
 */
export declare class DxTableHeaderItem implements ComponentInterface {
  private breakpointAware;
  private table;
  private tableScrollChanged;
  self: HTMLDxTableHeaderItemElement;
  /**
   * Allows the table to sort this column.
   *
   * @value true: The column is sortable.
   * @value false: The column is not sortable.
   */
  sortable: boolean;
  onSortableChange(): void;
  /**
   * The title text of this column. This value represents the column identificator if there is no `columnid` specified.
   *
   * @value string: The title text.
   */
  label?: string;
  /**
   * This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property. Otherwise the `label` property will be send.
   * @value string: An unique identifikation for this column.
   */
  columnid?: string;
  /**
   * The alignment of the title text and the cell contents within this column.
   * **Warning:** The default alignment which is defined by the `type` property will be overriden.
   *
   * @value left: Child elements are left-aligned.
   * @value right: Child elements right-aligned.
   * @value center: Child elements are centered.
   */
  align?: "left" | "right" | "center";
  /**
   * Specifies the priority of this column which is considered in the table's secondary sorting.
   *
   * @value number: Priority. The lower this number the higher the chance this column will be considered first
   * in the secondary sorting of the table.
   *
   */
  sortpriority?: number;
  /**
   * Declare your own sorting function for this column. This enables you to sort your own objects.
   *
   * @value function: The sort function.
   */
  customSort: (firstCell: HTMLDxTableCellElement, secondCell: HTMLDxTableCellElement) => number;
  onCustomSortChanged(): void;
  /**
   * Define the minimal width of the table in pixels.
   *
   * @value number: The minimal width in pixels.
   */
  minwidth?: number;
  /**
   * Define the maximum width of the table in pixels.
   *
   * @value number: The maximal width in pixels.
   */
  maxwidth?: number;
  onChangeAlign(): void;
  /**
   * Defines a type for the whole column.
   *
   * @value text: Renders the provided `value` property of an `<dx-table-cell>` as a left aligned text.
   *
   * @value numeric: Renders the provided `number` value of an `<dx-table-cell>` as a right aligned text.
   *
   * @value date: Renders the provided string ('YYYY-mm-dd') of an `<dx-table-cell>` as a left aligned text.
   *
   * @value currency: Renders the provided `number` of an `<dx-table-cell>` as right aligned text with attached currency icon.
   *
   * @value html: Renders the provided html elements.
   *
   */
  type: ColumnType;
  /**
   * Specifies the number of rows within an column.
   *
   * @value s: Table cells have only 1 text row
   * @value m: Table cells have up to 2 text rows.
   * @value l: Table cell have up to 3 text rows.
   */
  linesize: "s" | "m" | "l";
  /**
   * @internal
   */
  usemaxwidth: boolean;
  /**
   * Whether this column is sticky or not.
   * @value true: The column and the corresponding cells are sticky and cannot be scrolled
   * @value false: The column can be scrolled away.
   */
  sticky: boolean;
  sortState: SortDirection;
  internAlign?: "left" | "right" | "center";
  tableScrollable: boolean;
  mediaQueryAllowsStickyness: boolean;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): void;
  /**
   * @internal
   */
  setSortDirection(state: SortDirection): Promise<void>;
  /**
   * @internal
   */
  toColumnSettings(): Promise<ColumnSettings>;
  getMinWidth(): Promise<number>;
  getMaxWidth(): Promise<number>;
  private updateMediaQueryStickyness;
  private getCellLines;
  private buildStyle;
  private internalGetMinWidth;
  private internalGetMaxWidth;
  private getAlignment;
  private getSortIcon;
  private getHeaderCellLines;
  private useMultipleLines;
  private isSticky;
  render(): any;
  private renderLabel;
  private renderSortButton;
  private getNextSortState;
  private invokeSort;
  private getParentTable;
}
