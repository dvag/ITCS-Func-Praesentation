import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { SelectionMode } from "../table-common-types";
/**
 * A table row which represents a data object within an array.
 * It renders `<dx-table-cell>` components in a row.
 *
 * @path /Table
 * @name Table Row
 * @shortname Row
 * @icon grip-lines
 * @stable
 *
 *
 * @slot `<dx-table-cell>` elements which are aligned dependant on the outer table columns.
 * @slot content - The content which is placed inside the row. When defined, a collapsable button is displayed which triggers the visibility of the content.
 * @slot-example content
 */
export declare class DxTableRow implements ComponentInterface {
  private breakpointAware;
  private table;
  private tableScrollChanged;
  private expansionChangedHandler;
  private selectionChangedHandler;
  self: HTMLDxTableRowElement;
  open: boolean;
  showExpandColumn: boolean;
  showSelectionColumn: boolean;
  tableScrollable: boolean;
  selectionMode: SelectionMode;
  mediaQueryAllowsStickyness: boolean;
  /**
   * @internal
   */
  visible: boolean;
  /**
   * A unique identifier for the data this row displays in a table.
   *
   * @value string: Unique identifier
   */
  rowid: string;
  /**
   * Selects this row.
   * If true the row will be selected and the table's selection will be enabled.
   *
   * @value true: Row is selected.
   * @value false: Row is not selected.
   * @example selection
   */
  selected: boolean;
  onRowSelected(): void;
  /**
   * Fired when the selection-status of the row is changed.
   * @value boolean: Row is selected or not.
   */
  rowSelected: EventEmitter<boolean>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private showStickyContainer;
  private updateMediaQueryStickyness;
  private handleGrowBoxStateChanged;
  private renderStickyColumn;
  private renderStickyColumns;
  private renderSelectionInput;
  render(): any;
}
