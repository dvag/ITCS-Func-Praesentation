import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { SelectionMode, SortState, TableSelection } from "../table-common-types";
import { ArrayStringOrArray } from "../../misc/dx-number-picker/dx-number-picker";
/**
 * A table for visualizing data in columns and rows.
 *
 * It has the ability to sort and paginate it's content out of the box.
 * This feature can be disabled, if you want to realize data sorting and pagination manually.
 *
 * @name Table
 * @path /
 * @icon table
 *
 * @stable
 *
 * @slot - Definition of the table data (rows) and data structure (columns) by using specialized sub-component (e.g.: `dx-table-header`, `dx-table-row`, etc.).
 */
export declare class DxTable implements ComponentInterface {
  private mutationObserver;
  private headerItemElements;
  private settings;
  private currentSortSettings;
  private tableResizeObserver;
  private sortDebounce;
  private rowDebounce;
  private selectionGroup;
  private touchMoveDetected;
  private expansionEnabled;
  private headerItemElementsWidth;
  private initialized;
  private invokeSortInputParamsBeforeInit;
  private scrollHandler;
  self: HTMLDxTableElement;
  currentPage: number;
  sortState: SortState;
  selectedRowKeys: string[];
  showLeftShadow: boolean;
  showRightShadow: boolean;
  scrollContainer: HTMLDivElement;
  rowElements: HTMLDxTableRowElement[];
  /**
   * @internal
   */
  internalScrollable: boolean;
  onInternalScrollableChanged(): void;
  /**
   * The initially selected option for the page size.
   * It only has an effect if the `pagesizes` property is defined.
   *
   * @value number: Number of rows per page.
   *
   * @example paginator
   */
  pagesize: number;
  /**
   * When defined it enables the pagination for this table.
   * It defines the available page sizes a user is able to select.
   *
   * @value ArrayString: Comma separated List of values in JSON-format e.g.: "[5,10,25]"
   * @value number[]: Array of numbers.
   *
   * @example paginator
   */
  pagesizes: ArrayStringOrArray;
  /**
   * Defines the column that is used for initially sorting the table.
   *
   * @value string: The `columnId` or `label` of the column.
   *
   * @example initial-sort
   */
  initialsort?: string;
  /**
   * Specifies the initial sort direction.
   *
   * @value asc: Ascending order.
   * @value desc: Descending order.
   *
   * @example initial-sort
   */
  initialsortdirection: "asc" | "desc";
  /**
   * Specifies whether the table is self-managed or remote-controlled.
   *
   * @value managed: The table is responsible for sorting and pagination.
   * @value remote: The table relies on an external implementation for creating rows, sorting and pagination using the `tableStateChanged` event.
   *
   * @example remote
   * @example remote-complex
   */
  mode: "managed" | "remote";
  /**
   * Enables the selection of rows.
   * A `key` for every row has to be specified.
   *
   * @value true: The selection-group will be opened.
   * @value false: The selection-group will be closed.
   *
   * @example selection
   */
  selectionenabled: boolean;
  onSideBarOpenChange(): void;
  /**
   * Specifies if only one or multiple rows can be selected.
   *
   * @value multi: Multiple rows can be selected.
   * @value single: One row can be selected at a time.
   *
   * @example selection-mode
   */
  selectionmode: SelectionMode;
  onSelectionModeChanged(): void;
  /**
   * The data length this table should visualize. In case the table manages itself this attribute should not be set.
   * If the table is remote-controlled this attribute has to be set because the table needs to know the exact amount
   * of data to visualize the **paging** accordingly.
   *
   * @example remote
   * @example remote-complex
   */
  rowcount: number;
  /**
   * Specifies if the table should be scrollable. It is necessary to ensure that every `<dx-header-item>` has the width property set.
   * @value true: Table is scrollable.
   * @value false: Table is not scrollable.
   * @example scrollable
   */
  scrollable: boolean;
  onScrollableChange(): void;
  onTouchStart(): void;
  onTouchmove(): void;
  onTouchEnd(event: TouchEvent): void;
  /**
   * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
   *
   * @example table-state-changed
   */
  tableStateChanged: EventEmitter<TableConfig>;
  /**
   * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
   *
   * @example table-state-changed
   */
  selectionStateChanged: EventEmitter<TableSelection>;
  /**
   * This event will be fired as soon as the table`s state changes (e.g. sorting, paging...)
   *
   * @example table-state-changed
   */
  expansionChanged: EventEmitter<boolean>;
  /**
   * This event will be fired as soon as the table`s scroll state changes.
   *
   * @internal
   */
  internalScrollChanged: EventEmitter<boolean>;
  /**
   * In case a row is selected this event will fire the key of the row.
   *
   * @value string: If the `selectionmode` allows a single selection the event will delegate one selected row key.
   * @value string[]: If the `selectionmode` allows a multi selection the event will delegate all selected row keys.
   *
   * @deprecated Please use the `rowSelected` event of the `<dx-table-row>` components to get notified when a new row was selected.
   */
  rowsSelected: EventEmitter<string[]>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private initTableResizeObserver;
  private setScrollable;
  private emitSelectionChanged;
  private updateTableHeaderWidths;
  private getStickyColumnsWidth;
  private getScrollWidth;
  private setScrollContainer;
  private updateTableScroll;
  private controlOpticalHints;
  private isScrollingPossible;
  /**
   * @internal
   */
  invokeSort(element: HTMLDxTableHeaderItemElement, reverse: boolean): Promise<void>;
  private internalInvokeSort;
  private reSort;
  private handlePaginationPageSizeChanged;
  private isUsingPagination;
  private updateRows;
  private handleRemoteSelection;
  private init;
  private getCurrentRowsRangeIndices;
  private emitTableStateChanged;
  private updateHeaderItems;
  private sameSettings;
  private updateCellSettings;
  private getRows;
  private getFooters;
  private compareColumns;
  private sortRows;
  private checkForDuplicateRowKeys;
  private reOrderRows;
  private updateVisibility;
  private getLastVisibleRow;
  private handlePaginationPageChanged;
  private handleRadioSelection;
  private handleCheckboxSelection;
  componentDidRender(): void;
  componentWillRender(): Promise<void>;
  render(): any;
  private renderPageSizePicker;
  private renderPaginator;
  private renderScrollableTableContent;
  private renderTable;
}
export interface TableConfig {
  page: number;
  pageSize: number;
  fromIndex: number;
  toIndex: number;
  sortState: SortState;
}
