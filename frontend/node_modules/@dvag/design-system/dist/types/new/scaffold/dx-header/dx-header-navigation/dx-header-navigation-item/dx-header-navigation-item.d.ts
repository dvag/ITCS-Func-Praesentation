import { ComponentInterface, EventEmitter } from "../../../../../stencil-public-runtime";
import { Ref } from "../../../../../classes/misc-util";
/**
 * A navigation item which is displayed within a `<dx-header-navigation>` sidebar content.
 * It is possible to insert multiple `<dx-header-navigation-item>` elements which are displayed in the navigation sidebar content,
 * when this component is interacted with.
 *
 * @name Header Navigation Item
 * @shortname Item
 * @path /Scaffold/Header/Navigation
 * @icon map-pin
 * @stable
 */
export declare class DxHeaderNavigationItem implements ComponentInterface {
  private slotObserver;
  private children;
  self: HTMLDxHeaderNavigationSidebarContentElement;
  /**
   * The displayed label.
   *
   * @value string: The text which is displayed inside the navigation item.
   * @example example
   */
  label: string;
  /**
   * Unique identifier of this component within a `<dx-header-navigation>` element.
   * @value string: Identifier
   * @example example
   */
  value: string;
  /**
   * The size of the dropdown.
   *
   * @value m: A medium sized navigation item is displayed.
   * @value l: A large sized navigation item is displayed.
   */
  size: NavigationItemSize;
  /**
   * Fired when the user interacts with this item. (e.g. by clicking it)
   * It emits a navigation item payload which consists of the corresponding navigation item's `value` and a function which, when called, closes the sidebar.
   * @example interaction
   */
  interaction: EventEmitter<NavigationItemInteractionPayload>;
  /**
   * @internal
   */
  internalChangeSidebarVisibility: EventEmitter<boolean>;
  connectedCallback(): void;
  componentWillLoad(): Promise<void> | void;
  disconnectedCallback(): void;
  /**
   * @internal
   *
   * Inserts a navigationItem recursively into the tree.
   * @param belongsToPage: The page the navigation item belongs to
   * @param pageIndexCount: An iterating pageIndex reference which
   */
  insertNavigationTree(belongsToPage: NavigationPage, pageIndexCount: Ref<number>): Promise<void>;
  private createNavigationItem;
}
export interface NavigationPage {
  pageIndex: number;
  navigationItems: NavigationItem[];
  previousPage: NavigationPage;
}
export interface NavigationItem {
  id: string;
  label: string;
  value: string;
  size: NavigationItemSize;
  refersToPage: NavigationPage;
  interact: () => void;
}
export interface NavigationItemInteractionPayload {
  value: string;
  closeSidebar: () => void;
}
export declare type NavigationItemSize = "m" | "l";
