import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { NotificationIndicatorThemeType, NotificationIndicatorType } from "../../../internal/dx-notification-indicator/notification-indicator.util";
import { MenuItem } from "../header-menu.util";
import { NavigationPage } from "./dx-header-navigation-item/dx-header-navigation-item";
/**
 * This component adds a navigation menu item to a `<dx-header>` element. It is able to contain multiple `<dx-header-navigation-item>`
 * to generate navigation content for the sidebar.
 *
 * @name Header Navigation
 * @shortname Navigation
 * @path /Scaffold/Header
 * @icon map
 * @stable
 */
export declare class DxHeaderNavigation implements ComponentInterface, MenuItem {
  self: HTMLDxHeaderNavigationElement;
  private slotObserver;
  private sidebarContent;
  notifications: NotificationIndicatorType;
  navigationPage: NavigationPage;
  /**
   * Defines whether the sidebar closes automatically on interacting with a navigation item with no children.
   *
   * @value true: When interacting with a navigation item which has no child navigation items the sidebar closes.
   * @value false: The sidebar does not close when interacting with any navigation items.
   *
   * @example auto-close
   */
  autoclose: boolean;
  /**
   * @internal
   * We want to ensure that this component has always the highest level of priority by always keeping it at the lowest possible number because it should never be hidden by the header.
   */
  priority: number;
  /**
   * The priority must not be changed because the navigation component should never hide.
   */
  onPriorityChange(): void;
  /**
   * @internal
   */
  internalactive: boolean;
  /**
   * Defines whether there is a notification within this component or not.
   * @value true: A notification indication is shown at the top right of the navigation menu item.
   * @value false: There is no notification indication on the navigation menu item.
   *
   * @example notification
   */
  notification: boolean;
  /**
   * @internal
   * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
   */
  internalnotification: boolean;
  /**
   * Specifies the theme for the displayed notifications.
   * The "system" theme is used when a notification emerges from the system like a notification bell.
   * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
   * @value system: Red badge with white border and white text.
   * @value user: Gray badge with white border and black text.
   * @example notifications-theme
   */
  notificationstheme: NotificationIndicatorThemeType;
  /**
   * @internal
   * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
   */
  internalnotificationstheme: NotificationIndicatorThemeType;
  /**
   * Fired when the navigation's header menu item is interacted with.
   * @example menu-interaction
   */
  menuInteraction: EventEmitter<void>;
  /**
   * @internal
   */
  internalChangeSidebarVisibility: EventEmitter<boolean>;
  /**
   * @internal
   * Force the menu bar to update the sidebar content.
   */
  internalForceSidebarContentUpdate: EventEmitter<void>;
  onSidebarOpen(e: CustomEvent): void;
  onSidebarClose(e: CustomEvent): void;
  onChildMenuInteraction(e: CustomEvent<void>): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): Promise<void> | void;
  /**
   * @internal
   */
  renderSidebarContent(): Promise<any>;
  /**
   * @internal
   */
  getDefaultWidth(): Promise<any>;
  private computeNotificationsThemeType;
  render(): any;
}
export interface NavigationPayload {
  navigateTo: string;
  closeSidebarHandle: () => void;
}
