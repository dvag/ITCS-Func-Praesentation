import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { MenuItem } from "../header-menu.util";
import { NotificationIndicatorThemeType, NotificationIndicatorType } from "../../../internal/dx-notification-indicator/notification-indicator.util";
/**
 * A clickable item in the header menu.
 * @name Header Menu item
 * @shortname Item
 * @path /Scaffold/Header/Menu
 * @icon square
 * @stable
 */
export declare class DxHeaderMenuItem implements ComponentInterface, MenuItem {
  self: HTMLDxHeaderMenuItemElement;
  /**
   * Highlights this entry
   * @value true: Entry highlighted
   * @value false: Entry not highlighted
   * @internal
   */
  internalactive: boolean;
  /**
   * The icon which is displayed in the menu item.
   *
   * @value string: The name of the icon.
   * @example icon
   */
  icon: string;
  /**
   * The priority indicates the order in which the entries can be shown and hidden.
   * This property does not have any effect when the component is not within a `<dx-header>` element.
   *
   * @value number: The priority of the user menu item.
   * @example priority
   */
  priority: number;
  /**
   * The `<dx-header>` slot which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload.
   *
   * @value string: The name of the connected slot which is displayed within the `<dx-header>` sidebar when interacted with.
   * @example connected-slot
   */
  connectedslot: string;
  /**
   * @internal
   */
  internalopen: boolean;
  /**
   * The number of notifications that are visible inside of the indicator on this item.
   * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
   * @value "no-number": Only a red circle without a number is displayed as an indicator.
   * @example notifications
   */
  notifications: NotificationIndicatorType;
  /**
   * Specifies the theme for the displayed notifications.
   * The "system" theme is used when a notification emerges from the system like a notification bell.
   * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
   *
   * @value system: Red badge with white border and white text.
   * @value user: Gray badge with white border and black text.
   * @example notifications
   */
  notificationstheme: NotificationIndicatorThemeType;
  /**
   * Fired when the header menu item is interacted with.
   * @example menu-interaction
   */
  menuInteraction: EventEmitter<string>;
  componentWillLoad(): Promise<void> | void;
  /**
   * @internal
   */
  getDefaultWidth(): Promise<number>;
  render(): any;
}
