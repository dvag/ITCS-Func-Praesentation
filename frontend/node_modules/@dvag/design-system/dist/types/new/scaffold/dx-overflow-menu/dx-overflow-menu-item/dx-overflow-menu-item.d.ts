import { StringOrObject } from "../../../layout/dx-list/list.util";
/**
 * A menu item within a `<dx-overflow-menu>` element which describes an action to perform within a specific application context.
 *
 * @path /Miscellaneous/Menu
 * @name Overflow Menu Item
 * @shortname Item
 * @icon list-ul
 * @stable
 */
export declare class DxOverflowMenuItem {
  self: HTMLDxOverflowMenuItemElement;
  /**
   * An icon which is displayed next to the label text.
   * @value string: The icon name.
   *
   * @example icon
   */
  icon?: string;
  /**
   * Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported.
   * @value string: Internal value as string. (e.g. `"apple"`)
   * @value object: Complex type e.g. `{name: "apple", amount: 3}`
   *
   * @example label
   */
  value?: StringOrObject;
  /**
   * The label which is displayed in the option list.
   * In case `value` is undefined, this `label` represents the internal value.
   * @value string: Displayed text e.g. `Apple`
   *
   * @example label
   */
  label: string;
  /**
   * Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last
   * option which selected attribute is true, will be selected.
   * @value true: This option is selected (Depending on the selection rule of the parent dropdown)
   * @value false: This option is not selected.
   */
  selected: boolean;
  /**
   * @internal
   * Extracts this element's properties into a complex javascript object.
   */
  toOverflowMenuItem(): Promise<OverflowMenuItem>;
  private handleSelection;
}
export interface OverflowMenuItem {
  id: string;
  icon: string;
  value: StringOrObject;
  label: string;
  selected: boolean;
  setSelected: (selected: boolean) => void;
}
