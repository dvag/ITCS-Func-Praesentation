import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { MenuItem } from "../header-menu.util";
import { AppFavoritesApp, CloseSidebarDetail, LaunchAppDetail } from "./app-favorite";
import { NotificationIndicatorThemeType, NotificationIndicatorType } from "../../../internal/dx-notification-indicator/notification-indicator.util";
/**
 * This component adds a navigation menu item to a `<dx-header>` element. It is able to contain multiple `<dx-header-navigation-item>`
 * to generate navigation content for the sidebar.
 *
 * @name Header App Favorites
 * @shortname App Favorites
 * @path /Scaffold/Header
 * @icon stars
 * @stable
 */
export declare class DxHeaderAppFavorites implements ComponentInterface, MenuItem {
  private slotObserver;
  private sidebarContent;
  self: HTMLDxHeaderNavigationElement;
  apps: AppFavoritesApp[];
  onAppsChanged(): void;
  /**
   * The priority indicates the order in which the entries can be shown and hidden.
   * @value number: The priority of the user menu item.
   */
  priority: number;
  /**
   * @internal
   */
  internalactive: boolean;
  /**
   * Specifies the theme for the displayed notifications.
   * The "system" theme is used when a notification emerges from the system like a notification bell.
   * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
   *
   * @value system: Red badge with white border and white text.
   * @value user: Gray badge with white border and black text.
   */
  notificationstheme: NotificationIndicatorThemeType;
  /**
   * The number of notifications that are visible inside of the indicator on this item.
   * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
   * @value "no-number": Only a red circle without a number is displayed as an indicator.
   */
  notifications: NotificationIndicatorType;
  /**
   * Fired when the navigation's header menu item is interacted with.
   * @example menu-interaction
   */
  menuInteraction: EventEmitter<void>;
  /**
   * @internal
   */
  internalopen: boolean;
  /**
   * @internal
   */
  internalChangeSidebarVisibility: EventEmitter<boolean>;
  /**
   * @internal
   * Force the menu bar to update the sidebar content.
   */
  internalForceSidebarContentUpdate: EventEmitter<void>;
  /**
   * Fires when the user deletes a favorite app. The event delegates the application id of the deleted app.
   */
  deleteApp: EventEmitter<string>;
  /**
   * Fires when the user sorts his favorite apps. The event delegates the application ids dependant on the current sorting.
   */
  sortApps: EventEmitter<string[]>;
  /**
   * Fires when the user clicks on the "Favoriten hinzuf√ºgen" button within the sidebar content.
   */
  addApp: EventEmitter<CloseSidebarDetail>;
  /**
   * Fires when toggling the edit mode within the sidebar. (e.g. by clicking the "Favoriten bearbeiten" button)
   * @example edit-app-event
   */
  editApps: EventEmitter<boolean>;
  /**
   * Fires when the user clicks selects an app. The event delegates the application id of the corresponding app.
   */
  launchApp: EventEmitter<LaunchAppDetail>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillLoad(): Promise<void> | void;
  onSidebarOpen(e: CustomEvent): void;
  onSidebarClose(e: CustomEvent): void;
  /**
   * @internal
   */
  getDefaultWidth(): Promise<number>;
  /**
   * @internal
   */
  renderSidebarContent(): Promise<any>;
  private pulsate;
  render(): any;
}
