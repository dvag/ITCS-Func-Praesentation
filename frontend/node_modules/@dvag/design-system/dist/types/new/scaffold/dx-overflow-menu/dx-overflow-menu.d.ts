import { EventEmitter } from "../../../stencil-public-runtime";
import { OverflowMenuItem } from "./dx-overflow-menu-item/dx-overflow-menu-item";
import { HorizontalDirection } from "../../../classes/common-types";
import { ItemSelectionPayload, ListFlyoutSelectionMode } from "../../layout/dx-list/dx-list-flyout/dx-list-flyout";
import { StringOrObject } from "../../layout/dx-list/list.util";
/**
 * A menu which holds multiple `<dx-overflow-menu-item>` elements to perform specific actions within a specific application context.
 *
 * @path /Miscellaneous
 * @name Overflow Menu
 * @shortname Menu
 * @icon ellipsis-h
 * @stable
 */
export declare class DxOverflowMenu {
  private menuItemsObserver;
  self: HTMLDxOverflowMenuElement;
  /**
   * The text which is displayed instead of the menu icon.
   * @value string: The text.
   *
   * @example label
   */
  label: string;
  /**
   * The alignment defines in which direction the menu button aligns.
   *
   * @value left: The menu button is displayed on the left and the list anchors on the left of the button.
   * @value right: The menu button is displayed on the right and the list anchors on the right of the button.
   *
   * @example align
   */
  align: HorizontalDirection;
  /**
   * Defines whether the user is able to select only one or multiple menu items.
   *
   * @value single: The user can select only one menu-item which immediately closes the flyout.
   * @value multi: The user is able to select multiple menu items.
   *
   * @example selection-mode
   */
  selectionmode: ListFlyoutSelectionMode;
  /**
   * Defines the maximum number of menu items the user is able to select.
   * This property only has an effect if the `selectionmode` is `multi`.
   *
   * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
   * @value undefined: The user is able to select all menu items.
   *
   * @example max-selections
   */
  maxselections: number;
  /**
   * Defines the maximum number of selected menu-item labels the menu displays.
   * This property only has an effect if the `selectionmode` is `multi`.
   *
   * @value number: A number greater than zero which defines the upper limit of labels being displayed in the menu.
   * @value undefined: All selected labels are displayed in the menu.
   * @example max-labels
   */
  maxlabels: number;
  menuItems: OverflowMenuItem[];
  internalLabel: string;
  listOpen: boolean;
  onListOpenChanged(): void;
  /**
   * Fires when the user selects a menu item.
   * The event payload consists of a `SelectionPayload` object which contains a `value` property, being either a string, an object.
   * When the `selectionmode` equals `multi` the omitted `value` within the `SelectionPayload` is an array of strings and objects.
   *
   *
   * @example selection
   * @example selection-complex
   */
  selection: EventEmitter<SelectionPayload>;
  /**
   * Fires when the list opens.
   * The event payload consists of an `OpenChangePayload` object which contains an `isOpen` property.
   *
   * @example list-open-change
   */
  listOpenChange: EventEmitter<OpenChangePayload>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillRender(): void;
  onItemSelectionChange(e: CustomEvent<ItemSelectionPayload>): void;
  private updateMenuItems;
  private updateInternalLabel;
  private computeInternalLabel;
  private emitSelection;
  private collectMenuItems;
  private onInputKeyDown;
  private renderButtonIconSlot;
  private renderTextButton;
  render(): any;
}
export interface SelectionPayload {
  value: StringOrObject | StringOrObject[];
}
export interface OpenChangePayload {
  isOpen: boolean;
}
