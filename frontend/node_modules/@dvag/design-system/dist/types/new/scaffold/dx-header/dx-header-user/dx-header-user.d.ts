import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { NotificationIndicatorThemeType, NotificationIndicatorType } from "../../../internal/dx-notification-indicator/notification-indicator.util";
import { MenuItem } from "../header-menu.util";
/**
 * Adds a header menu item to a `<dx-header>` and a sidebar content for the sidebar when placed inside the header's `menu` slot.
 *
 * @name User menu item
 * @shortname User
 * @path /Scaffold/Header
 * @icon user
 * @stable
 */
export declare class DxHeaderUser implements ComponentInterface, MenuItem {
  self: HTMLDxHeaderUserElement;
  /**
   * The full name of the user.
   * @value string: Firstname, middle names and lastname separated by spaces.
   * @example name
   */
  name: string;
  /**
   * The priority indicates the order in which the entries can be shown and hidden.
   * @value number: The priority of the user menu item.
   * @example priority
   */
  priority: number;
  /**
   * The image URL of the user.
   * @value string: URL
   * @example image
   */
  imageurl?: string;
  /**
   * The number of notifications that are visible inside of the indicator on this item.
   * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
   * @value "no-number": Only a red circle without a number is displayed as an indicator.
   *
   * @example notifications
   */
  notifications: NotificationIndicatorType;
  /**
   * Specifies the theme for the displayed notifications.
   * The "system" theme is used when a notification emerges from the system like a notification bell.
   * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
   *
   * @value system: Red badge with white border and white text.
   * @value user: Gray badge with white border and black text.
   * @example notifications-theme
   */
  notificationstheme: NotificationIndicatorThemeType;
  /**
   * @internal
   */
  internalactive: boolean;
  /**
   * @internal
   */
  internalopen: boolean;
  /**
   * Defines whether the account button "Benutzerkonto" is displayed or not.
   *
   * @value true: The account button is visible.
   * @value false: The account button is not visible.
   * @example account-available
   */
  accountavailable: boolean;
  /**
   * Fired when the sign-out button ("Abmelden") is clicked in the user's sidebar content.
   * @example sidebar-events
   */
  signOut: EventEmitter<void>;
  /**
   * Fired when the account button ("Benutzerkonto") is clicked in the user's sidebar content.
   * @example sidebar-events
   */
  accountInteraction: EventEmitter<void>;
  /**
   * Fired when the user's header menu item is interacted with.
   * @example menu-interaction
   */
  menuInteraction: EventEmitter<void>;
  /**
   * @internal
   * Force the menu bar to update the sidebar content.
   */
  internalForceSidebarContentUpdate: EventEmitter<void>;
  connectedCallback(): void;
  componentShouldUpdate(_: any, __: any, propName: string): boolean | void;
  /**
   * @internal
   */
  renderSidebarContent(): Promise<any>;
  /**
   * @internal
   */
  getDefaultWidth(): Promise<any>;
  render(): any;
}
