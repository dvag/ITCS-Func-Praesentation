import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { SiteNavigationMenuItem } from "../dx-site-navigation-menu-item/dx-site-navigation-menu-item";
import { SiteNavigationExpansionBreakpoint } from "../dx-site-navigation/dx-site-navigation";
/**
 * Adds a navigation menu to a content area. For examples see: [Site Navigation](#/component/dx-site-navigation)
 * @name Menu
 * @path /Scaffold/Site Navigation
 * @shortname Menu
 * @icon bars
 * @slot - A configuration of `<dx-site-navigation-menu-item>` elements.
 * @slot action - A place for action item, e.g. `<dx-button>` elements.
 * @stable
 */
export declare class DxSiteNavigationMenu implements ComponentInterface {
  private menuItemObserver;
  private breakpointAware;
  private headerHeightSubscription;
  private scopes;
  private scopeIntersectionObserver;
  private smallScreenHeaderIntersectionObserver;
  private enableScrollSelection;
  private lastRequestedSelectionValue;
  private scrollContainerElement;
  private floatingWrapperElement;
  private smallScreenTriggerElement;
  private fadeOutFloatingWrapperElementTimeout;
  self: HTMLDxSiteNavigationMenuElement;
  menuItems: SiteNavigationMenuItemWithChildren[];
  openedMenuItemValue: string;
  headerState: HeaderState;
  usesStates: boolean;
  scrollContainerIsScrollable: boolean;
  smallScreenModalVisible: boolean;
  /**
   * If activated, the menu looks out for dx-site-navigation-section elements with the same value
   * as the menu items, to automatically scroll into view.
   * @value true: Automatic navigation is enabled (default)
   * @value false: No automatic navigation
   */
  autonavigation: boolean;
  /**
   * Title of the page. The text is display in the modal view on the small screen modals.
   * @value string: Page title.
   */
  titlestring: string;
  /**
   * The value of the selected menu item.
   */
  selectedvalue: string;
  /**
   * @internal
   */
  expandedlayoutat: SiteNavigationExpansionBreakpoint;
  onExpandedLayoutAtChanges(): void;
  /**
   * Event is fired when the user interacts with a menu item.
   * The event details object contains the following properties:
   * - `value`: (string) value of the menu item the user clicked
   * - `complete`: (function) needs to be called if not using autonavigation feature. While not completed the menu will not connect to scopes in order to select items by scrolling into the area.
   */
  navigate: EventEmitter<NavigateEventDetail>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  onWindowChange(): void;
  private updateLayoutDependentOnCurrentBreakpoint;
  /**
   * Registers a new dx-site-navigation-scope element for tracking
   * @internal
   */
  addScope(scope: HTMLDxSiteNavigationScopeElement): Promise<void>;
  /**
   * Removes a previously registered dx-site-navigation-scope element from tracking
   * @internal
   */
  removeScope(scope: HTMLDxSiteNavigationScopeElement): Promise<void>;
  private updateScrollabilityOfScrollContainer;
  private configureIntersectionObserver;
  private configureSmallScreenIntersectionObserver;
  private updateSmallScreenFloatingWrapperPosition;
  private selectValueWhileScrolling;
  private registerMenuItemObserver;
  get isLargeScreen(): boolean;
  private openCloseItem;
  private clickOnItem;
  private waitAndScrollToScopeWithValue;
  private reEnableScrollSelection;
  private scrollToElement;
  private getParentOf;
  private renderItem;
  private renderLargeScreenMenu;
  private renderSmallScreenHeader;
  private renderSmallScreenMenu;
  render(): any;
}
interface HeaderState {
  isVisible: boolean;
  height: number;
}
export interface SiteNavigationMenuItemWithChildren extends SiteNavigationMenuItem {
  children: SiteNavigationMenuItem[];
}
export interface NavigateEventDetail {
  value: string;
  complete: () => void;
}
export {};
