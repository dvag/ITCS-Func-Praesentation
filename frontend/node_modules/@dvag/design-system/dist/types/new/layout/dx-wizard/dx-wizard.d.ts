import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { Orientation } from "../../../classes/common-types";
/**
 * A component which enables you to display multiple views one by one. It is commonly used to lead the user through multiple forms.
 *
 * @name Wizard
 * @path /Layout
 * @icon step-forward
 *
 * @slot - `<dx-wizard-step>` elements representing the steps within this component.
 * @slot ${value} - These slots represent the content the wizard should transition to when displaying a specific step. The `value` reflects the `value` property of the corresponding `<dx-wizard-step>`. (e.g. `<dx-wizard-step value="info">` => `<dx-card slot="info">`
 * @slot content - This slot is displayed when there are no ${value} slots defined.
 *
 * @slot-example main
 * @slot-example content-example
 * @slot-example show-content
 */
export declare class DxWizard implements ComponentInterface {
  private modal;
  private pageIndexTypes;
  private breakpointAware;
  private slotObserver;
  private steps;
  private contentSwitcher;
  self: HTMLDxWizardElement;
  stepsAreVisible: boolean;
  internalOrientation: Orientation;
  /**
   * This text will be displayed within the mobile-view's modal and should reflect the headline of the current page the user is in.
   *
   * @value string: The headline of the current site.
   *
   * @example headline
   * @important
   */
  headline: string;
  /**
   * Defines from which breakpoint the expanded large screen layout of the component is displayed.
   *
   * @value auto: The expanded layout starts at mq2 for the `horizontal` layout and mq3 for the `vertical` layout.
   * @value mq3: The expanded layout starts at mq3 or bigger.
   * @value mq4: The expanded layout starts at mq4 or bigger.
   *
   * @example expanded-layout-at
   */
  expandedlayoutat: "auto" | "mq3" | "mq4";
  /**
   * Defines the orientation of the wizard's expanded view.
   * The default orientation of the mobile view (dependent on `expandedlayoutat` property) is always `horizontal`.
   *
   * @value horizontal: All wizards will be displayed from left to right as long as there are six steps at most. If there are more than six steps the `vertical` view will be displayed instead.
   * @value vertical: All steps are displayed from top to bottom. Only the mobile view displays a horizontal setup.
   *
   * @example orientation
   * @example orientation-invalid
   */
  orientation: Orientation;
  onOrientationChanged(): void;
  /**
   * The current visible step.
   * @value string: The `value` value of an inner `<dx-wizard-step>` element.
   *
   * @example current-step
   */
  currentstep: string;
  onValueChanged(_: any, oldValue: any): void;
  /**
   * Fires when the `currentstep` property value changes.
   *
   * @example current-step
   */
  currentStepChange: EventEmitter<string>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  onWizardStepFinishedChange(e: CustomEvent<boolean>): void;
  private initializeBreakpointAware;
  private initializeSlotObserver;
  private getCurrentEditedStep;
  private getExpandedViewOrientation;
  private buildWizardStepStates;
  private buildPageIndexTypes;
  private setInternalOrientation;
  private getExtendedWizardStep;
  private onWizardStepInteraction;
  private editWizardStep;
  private collectWizardSteps;
  private updateInternalOrientation;
  private isMobileViewForBreakpoint;
  private isMobileView;
  private renderStepDisplayText;
  private renderCurrentStepLabel;
  private renderGap;
  private renderFirstGap;
  private renderLastGap;
  private getLastVisitedStepIndex;
  private renderWizardStep;
  private renderWizardSteps;
  private getConnectedContentSlots;
  private renderContextContainer;
  private renderContent;
  private renderView;
  render(): any;
}
