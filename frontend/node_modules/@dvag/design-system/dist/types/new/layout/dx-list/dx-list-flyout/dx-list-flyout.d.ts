import { EventEmitter } from "../../../../stencil-public-runtime";
import { GrowBoxState } from "../../../internal/dx-simple-grow-box/dx-simple-grow-box";
import { HorizontalDirection, VerticalDirection } from "../../../../classes/common-types";
import { StringOrObject } from "../list.util";
/**
 * Wraps a dx-list component and adds functionality.
 * @internal
 */
export declare class DxListFlyout {
  private upperScrollContainer;
  private scrollHandle;
  private scrollContainer;
  private currentHighlightedItem;
  private listItems;
  private defaultSlottedElements;
  private breakpointAware;
  self: HTMLDxListFlyoutElement;
  open: boolean;
  position: VerticalDirection;
  direction: HorizontalDirection;
  preventSpaceSelection: boolean;
  preventArrowSelection: boolean;
  size: "m" | "l";
  itemsvisible: number;
  selectionmode: ListFlyoutSelectionMode;
  stopclickpropagationonpopup: boolean;
  defaulthighlightfirst: boolean;
  focusable: boolean;
  /**
   * Automatically clears the current selected item when the list closes.
   */
  clearselectiononclose: boolean;
  /**
   * Whether a list item should be selected when focused with the keyboard or not.
   */
  selectonhighlight: boolean;
  /**
   * Defines the maximal number of menu items the user is able to select.
   * This property only has an effect if the `selectionmode` is `multi`.
   *
   * @value number: A number greater than zero which defines the upper limit of menu items being able to be selected.
   * @value undefined: The user is able to select all menu items.
   */
  maxselections: number;
  onMaxSelectionsChanged(): void;
  numberOfListItems: number;
  internalPosition: VerticalDirection;
  /**
   * Fires when the selection within the list changes.
   * It contains the values of the currently selected items.
   */
  itemSelectionChange: EventEmitter<ItemSelectionPayload>;
  /**
   * Fires when the position of the flyout changes when specific conditions are met (not enough space in viewport etc.).
   * It contains the new position.
   */
  positionChange: EventEmitter<VerticalDirection>;
  componentWillLoad(): void;
  private mutationObserver;
  connectedCallback(): void;
  private createMutationObserver;
  private getListItems;
  disconnectedCallback(): void;
  /**
   * Workaround for Firefox Bug:
   * https://bugzilla.mozilla.org/show_bug.cgi?id=771241
   *
   * Because of the preventDefault used in mousedown for every listItem the CSS :active state is not applied for the list items.
   */
  onWindowMouseUp(): void;
  private updateUpperScrollContainer;
  private addScrollEventListener;
  private removeScrollEventListener;
  private handleListItemFocus;
  maxheight: number;
  private updateScrollContainerMaxHeight;
  private getMinListHeight;
  private computeHeightToViewportEnd;
  private getScrollContainerHeight;
  private getExplicitSelectionKeys;
  private handleSelectionInput;
  onWindowResize(): void;
  onWindowScroll(): void;
  onListItemInteraction(e: CustomEvent<void>): void;
  private focusItem;
  onGrowBoxStateChanged(e: CustomEvent<GrowBoxState>): void;
  onKeyDown(e: KeyboardEvent): void;
  private emitSelectionChange;
  private clearSelection;
  private selectItem;
  private updateListItemsDisabledState;
  private handleUpDownNavigation;
  private highlightItem;
  private setHighlightStyles;
  private clearHighlighting;
  private getOffsetY;
  componentWillRender(): void;
  render(): any;
}
export declare type ListFlyoutSelectionMode = "single" | "multi";
export declare type SelectionReason = "explicit" | "implicit";
export interface ItemSelectionPayload {
  selectedItems: StringOrObject[];
  reason: SelectionReason;
}
