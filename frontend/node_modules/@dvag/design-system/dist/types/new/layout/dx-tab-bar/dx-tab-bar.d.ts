import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { TabPage } from "./dx-tab-page/dx-tab-page";
/**
 * Manages tabs to display different page contents by clicking on tabs.
 *
 * @path /Layout
 * @name Tab-Bar
 * @shortname Tabs
 * @icon columns
 * @stable
 *
 * @slot - `<dx-tab-page>` elements. A tab will be generated for each of them.
 * @slot-example simple
 * @slot-example complex
 */
export declare class DxTabBar implements ComponentInterface {
  private breakpointAware;
  private slotObserver;
  private resizeObserver;
  self: HTMLDxTabBarElement;
  tabPages: TabPage[];
  viewMode: "tab" | "dropdown";
  showLeftButton: boolean;
  showRightButton: boolean;
  parentIsCard: boolean;
  /**
   * Displays the tab page which `value` property corresponds to this property.
   *
   * @important
   * @value string: `value` of the `<dx-tab-page>` to display.
   *
   * @example selected
   */
  selected?: string;
  showChanged(): void;
  /**
   * This event fires when the user selects a new tab.
   * It contains the `value` of the corresponding `<dx-tab-page>`.
   *
   * @example tab-change
   */
  tabChange: EventEmitter<string>;
  connectedCallback(): Promise<void> | void;
  disconnectedCallback(): void;
  componentShouldUpdate(_: unknown, __: unknown, propName: string): boolean;
  private initializeObservers;
  private collectTabs;
  private updateSlotVisibility;
  private updateViewMode;
  private setActiveTab;
  private getLabel;
  private checkShowButtons;
  private onScrollTabBar;
  private get scrollContainer();
  private onScrollButtonClicked;
  private renderBarItem;
  private renderScrollButton;
  private renderTabBarItems;
  private renderTabs;
  private renderDropdown;
  private renderTabBar;
  render(): any;
}
