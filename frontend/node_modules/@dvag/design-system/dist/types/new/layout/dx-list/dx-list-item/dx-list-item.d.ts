import { EventEmitter } from "../../../../stencil-public-runtime";
import { Point } from "../../../../classes/math-util";
import { Draggable } from "../../../internal/dx-sort/draggable";
import { RadioElementOwner } from "../../../form/dx-radio-button-group/radio.util";
import { HorizontalDirection } from "../../../../classes/common-types";
import { StringOrObject } from "../list.util";
/**
 * A list item which is used within a dx-list element.
 *
 * @path /Layout/List
 * @name List item
 * @shortname Item
 * @icon list-ul
 * @stable
 *
 * @slot content - Content which is displayed on the right side of the item.
 * @slot-example content
 */
export declare class DxListItem implements Draggable, RadioElementOwner {
  private internalIcon;
  self: HTMLDxListItemElement;
  /**
   * @internal
   * Defines whether the content is shown below or next to the label
   */
  internalcontentbelow: boolean;
  /**
   * @internal
   */
  internaldraggable: boolean;
  /**
   * @internal
   */
  internaldragging: boolean;
  /**
   * The internal value of this item, which is either a string or an object.
   * It will be delegated by the `itemSelectionChange` event of the upper `dx-list-flyout` element when the selection changes.
   * Currently only important for dx-dropdown and dx-multi-dropdown.
   *
   * @value string: e.g. `Hausrat-1`
   * @value object: e.g. `{id: "hausrat", index: 1}`
   *
   * @example radio-group
   */
  value: StringOrObject;
  /**
   * The type of the item.
   *
   * @value default: The item will be displayed with an optional icon and a label.
   * @value selectable: The item is displayed like the default and can be selected.
   * @value checkbox: The item displays a checkbox instead of an icon. The selection can be toggled by clicking the item.
   *
   * @example type
   */
  type: ListItemType;
  /**
   * The size of this item.
   * @internal
   */
  internalsize: "m" | "l";
  /**
   * The text which is displayed within the item.
   *
   * @value string: A text
   *
   * @example label
   */
  label: string;
  /**
   * The text which is displayed above the label.
   *
   * @value string: A text
   *
   * @internal
   */
  prelabel: string;
  /**
   * The text which is displayed below the label.
   *
   * @value string: A text
   *
   * @example sub-label
   */
  sublabel: string;
  /**
   * The icon which is displayed next to the label.
   *
   * @value string: The icon name.
   *
   * @example icon
   */
  icon: string;
  /**
   * Implies the action which is triggered when this list item is interacted with.
   *
   * @value navigate: The list item implies that another view is shown after clicking it.
   * @example action-indicator
   */
  actionindicator?: ActionIndicatorType;
  /**
   * @internal
   */
  internalanimation: boolean;
  onIconChanged(newIcon: string, oldIcon: string): void;
  /**
   * Defines whether the item is disabled or not.
   *
   * @value true: The item is displayed in a gray tone and can't be interacted with
   * @value false: The item is displayed normally.
   *
   * @exmaple disabled
   */
  disabled: boolean;
  /**
   * The current selection state of this item.
   *
   * @value true: The item is selected. This state will be visualized according to the `type`.
   * @value false: The item is not selected.
   *
   * @example selected
   */
  selected: boolean;
  onSelectedChange(): void;
  onCheckedChange(e: CustomEvent<boolean>): void;
  /**
   * Defines the text alignment.
   * @value left: Text is left aligned.
   * @value right: Text is right aligned.
   * @example text-align
   */
  textalign: HorizontalDirection;
  /**
   * Fires when interacting with this component.
   * Currently only important for dx-list-flyout.
   *
   * @internal
   */
  listItemInteraction: EventEmitter<void>;
  /**
   * @internal
   */
  dragBegin: EventEmitter<Point>;
  /**
   * @internal
   */
  dragUpdate: EventEmitter<Point>;
  /**
   * @internal
   */
  dragFinish: EventEmitter<Point>;
  componentWillLoad(): void;
  onInteraction(e: CustomEvent<void>): void;
  getRadioElement(): Promise<HTMLDxRadioButtonElement>;
  focusControl(): Promise<void>;
  private queryForRadioElement;
  private getActiveElementSwapperSlot;
  private renderLabels;
  private renderIcon;
  private renderCheckbox;
  private renderRadioButton;
  private renderSortHandle;
  private renderAnimatableActionIndicator;
  private renderActionIndicator;
  private renderLeftSide;
  private renderRightSide;
  private renderBelowContent;
  private renderContent;
  render(): any;
}
interface ListItemTypeToRenderFunction {
  default: () => any;
  selectable: () => any;
  checkbox: () => any;
  radio: () => any;
  clickable: () => any;
}
export declare type ListItemType = keyof ListItemTypeToRenderFunction;
declare const ACTION_INDICATOR_VALUES: readonly ["navigate"];
export declare type ActionIndicatorType = typeof ACTION_INDICATOR_VALUES[number];
export {};
