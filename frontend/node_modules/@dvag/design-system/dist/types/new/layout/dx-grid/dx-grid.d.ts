import { ComponentInterface } from "../../../stencil-public-runtime";
import { GridBreakpoint } from "./grid-models";
import { Size } from "../../../classes/sizes.util";
/**
 * Responsive layout element to align multiple elements within a grid.
 *
 * Multiple grid systems are supported through the `base` property.
 *
 * There are currently five breakpoints which can be used:
 * MQ1 for Mobile devices
 * MQ2 and MQ3 for tablets,
 * MQ4 for laptops,
 * MQ5 for desktop PCs
 *
 * You can define each breakpoint indivually to match a style proper for the given context device.
 *
 * ## Grid-Syntax
 * The syntax consists of four operators:
 *
 * | Operator | Meaning |
 * |-----|-----|
 * | **`2`** | A number defines the amount of grid columns an element gets. `0` means that the corresponding element is hidden. |
 * | **`(3)`** | A number in brackets defines the amount of grid columns which are used as whitespace. |
 * | **`-`** | Delimitation between `numbers` in a row. In combination with numbers they define a row within the grid. e.g. `4-4-4`: Three elements in a row are each taking 4 columns of space. |
 * | **`/`** | Starts a new row definition. e.g. `2-2/4`: There are three elements. The first two elements will be displayed in the first row and the third will be displayed in the second row. |
 * | **`*`** | Repeats the previous row definition for all rows to follow. e.g. `12/*`: All elements use 12 grid columns and are displayed in a seperate row. |
 *
 * ## Column amount
 *
 * The amount of column is defined by the grid base (`base` property). Each breakpoint has a defined number of columns.
 * The default base defines 12 columns for each breakpoint. These can differ from base to base.
 *
 * @path /Layout
 * @name Grid
 * @icon th
 * @stable
 *
 * @slot - Elements to be layouted in the grid.
 * @example tutorial-1
 */
export declare class DxGrid implements ComponentInterface {
  private breakpointAware;
  private slotObserver;
  self: HTMLDxGridElement;
  breakpoint: GridBreakpoint;
  numberOfChildNodes: number;
  /**
   * The grid's base. Different bases can define a custom amount of columns for every breakpoint.
   *
   * @value page: Default page grid.
   * @example page-1
   * @example page-2
   */
  base: string;
  /**
   * The gap between the rows of the grid.
   *
   * @value 0, 4, 8, 16, 24, 32, 40, 48, 56, 64, 80, 120: The gap between the rows.
   * @example row-gap
   */
  rowgap: Size;
  /**
   * Grid-Layout definition for the MQ1-Breakpoint.
   *
   * There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
   *
   * @value string: Layout definition in the grid syntax.
   * @important
   */
  mq1?: string;
  /**
   * Grid-Layout definition for the MQ2-Breakpoint.
   *
   * There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
   *
   * @value string: Layout definition in the grid syntax.
   * @important
   */
  mq2?: string;
  /**
   * Grid-Layout definition for the MQ3-Breakpoint.
   *
   * There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
   *
   * @value string: Layout definition in the grid syntax.
   * @important
   */
  mq3?: string;
  /**
   * Grid-Layout definition for the MQ4-Breakpoint.
   *
   * There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
   *
   * @value string: Layout definition in the grid syntax.
   * @important
   */
  mq4?: string;
  /**
   * Grid-Layout definition for the MQ5-Breakpoint.
   *
   * There has to be at least one breakpoint defined (MQ1, MQ2, MQ3, MQ4 oder MQ5).
   *
   * @value string: Layout definition in the grid syntax.
   * @important
   */
  mq5?: string;
  private updateGridPoolBeforeRender;
  private usedGrid;
  private gridPool;
  private updateGridPool;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentShouldUpdate(_: any, __: any, propName: string): boolean | void;
  componentWillRender(): Promise<void> | void;
  private gridBase;
  private getBreakpointFromBreakpointAware;
  private updateChosenGrid;
  render(): any;
}
