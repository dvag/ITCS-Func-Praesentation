import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * An element which can display multiple elements in a slide show.
 *
 * @path /Layout
 * @name Slide show
 * @icon images
 * @stable
 */
export declare class DxSlideShow implements ComponentInterface {
  self: HTMLDxSlideShowElement;
  useTransition: boolean;
  private slotObserver;
  private children;
  private elementsContainer;
  private swipeController;
  private pageOnSwipeDetectionStart;
  private breakpointAware;
  page: number;
  onPageChanged(): void;
  /**
   * Defines the amount of items visible for the MQ1 breakpoint.
   * @value number: Amount of visible items.
   */
  mq1amount?: number;
  /**
   * Defines the amount of items visible for the MQ2 breakpoint.
   * @value number: Amount of visible items.
   */
  mq2amount?: number;
  /**
   * Defines the amount of items visible for the MQ3 breakpoint.
   * @value number: Amount of visible items.
   */
  mq3amount?: number;
  /**
   * Defines the amount of items visible for the MQ4 breakpoint.
   * @value number: Amount of visible items.
   */
  mq4amount?: number;
  /**
   * Defines the amount of items visible for the MQ5 breakpoint.
   * @value number: Amount of visible items.
   */
  mq5amount?: number;
  /**
   * The initial page which is displayed when loading the component.
   * @value number: The first page to show.
   */
  initialpage?: number;
  /**
   * The space between the slotted elements.
   * @value number: Pixel value of the space between the slotted elements.
   */
  spacebetween: number;
  /**
   * Specifies which navigation element should be displayed.
   *
   * @value paginator: A paginator is displayed under the slide-show.
   * @value slider: A slider is displayed under the slide-show.
   * @example slider
   */
  viewmode: "paginator" | "slider";
  /**
   * Delegates the current page when it changes.
   */
  pageChange: EventEmitter<number>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  /**
   * A function to programmatically transition to the specified page.
   * Returns a promise which is fulfilled after the transition is done.
   *
   * @param page The page to transition to.
   * @example set-page
   */
  setPage(page: number): Promise<void>;
  private updateSlideTransitionDuration;
  private getAmountOfDisplayedChildren;
  private getTransformValueByPercentage;
  private getMaxPages;
  private getNumberOfChildren;
  private updateTranslationByPageNumber;
  private updateTranslationByPercentage;
  private renderNavigation;
  private renderNavigationElement;
  private disableTransition;
  private enableTransition;
  private renderLeftNavigationButton;
  private renderRightNavigationButton;
  render(): any;
}
