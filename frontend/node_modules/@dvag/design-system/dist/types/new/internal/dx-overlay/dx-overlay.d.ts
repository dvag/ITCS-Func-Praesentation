import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { HorizontalDirection, VerticalDirection } from "../../../classes/common-types";
/**
 * @internal
 *
 * @slot - The base content the popup needs for computing it's width. If no default slot is specified the overlay computes the width dependent on the viewport width.
 */
export declare class DxOverlay implements ComponentInterface {
  self: HTMLDxOverlayElement;
  private contentElement;
  private popupElement;
  private slotObserver;
  private resizeObserver;
  private hidePopup;
  private internalAnchorPosition;
  popupContentAvailable: boolean;
  /**
   * Position, where to place the popup
   */
  position: PopupPosition;
  /**
   * The position to anchor ("right" or "left" to the content width) the popup to.
   */
  anchorposition: HorizontalDirection;
  /**
   * CSS display mode of the content area.
   */
  contentdisplay: "block" | "inline-block";
  /**
   * Additional pixels between content and popup when using horizontal placement.
   */
  offsetx: number;
  /**
   * Additional pixels between content and popup when using vertical placement.
   */
  offsety: number;
  /**
   * Pointer events are delegated to the popup element if true.
   */
  popupinteractable: boolean;
  /**
   * Whether the overlay's position and bounding can be changed over time.
   */
  fixate: boolean;
  /**
   * When the overlay is disabled the width and position is not updated anymore.
   */
  disabled: boolean;
  /**
   * The width of the popup. This simplifies the compution of the popup position.
   * If not fixatewidth is defined the width of the parent bounding box is used instead.
   */
  fixatewidth: number;
  fixedAlignmentChange: EventEmitter<"left" | "right">;
  onDisabledChanged(): void;
  onWindowChange(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentWillUpdate(): Promise<void> | void;
  private updateFixedPosition;
  private initializeResizeObserver;
  private updatePosition;
  private internalUpdatePosition;
  private computeWidth;
  private computePosition;
  private applyValues;
  obtainContentRef(element: HTMLDivElement): void;
  obtainPopupRef(element: HTMLDivElement): void;
  render(): any;
}
export declare type PopupPosition = VerticalDirection | HorizontalDirection;
