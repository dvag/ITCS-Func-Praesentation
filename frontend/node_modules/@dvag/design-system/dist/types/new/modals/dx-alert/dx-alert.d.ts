/**
 * Displays an alert in the center of the screen, blocking most user interactions on the background.
 * @path /Modals
 * @name Alert
 * @icon bell-exclamation
 *
 * @stable
 */
export declare class DxAlert {
  private modalDialog;
  private slotObserver;
  self: HTMLDxAlertElement;
  internalActionsDirection: ActionLayoutDirection;
  shadowTopVisible: boolean;
  shadowBottomVisible: boolean;
  /**
   * Specifies the icon which will be shown above the text.
   *
   * @value string: A valid icon name.
   * @example icon
   */
  icon?: string;
  /**
   * The title of the dialog.
   * @value string: The title.
   * @example titlestring
   */
  titlestring: string;
  /**
   * The content of the dialog.
   * @value string: The content which is displayed below the title.
   * @example content
   */
  content?: string;
  /**
   * The sublabel of the dialog which can be used for e.g. error codes.
   * @value string: The sublabel.
   * @example sublabel
   */
  sublabel?: string;
  /**
   * Defines the visual representation of the button.
   * @value default: Shows the titlestring and icon in a dark color.
   * @value error: Shows the titlestring and icon in a red color to imply an error.
   *
   * @example type-error
   * @example type-default
   */
  type: AlertType;
  /**
   * Defines the visibility of the alert.
   * @value true: Alert is visible.
   * @value false: Alert is not visible.
   *
   * @example visible
   */
  visible: boolean;
  /**
   * Defines in which direction the buttons should be displayed.
   *
   * @value column: The buttons will be displayed from left to right.
   * @value row: The buttons will be displayed from top to bottom.
   *
   * @example actions-direction-row
   * @example actions-direction-column
   * @default "column"
   */
  actionsdirection: ActionLayoutDirection;
  componentWillLoad(): void;
  componentDidRender(): void;
  disconnectedCallback(): void;
  private updateShadowVisibility;
  private renderIcon;
  private renderContent;
  private renderSublabel;
  private renderCustom;
  private renderActions;
  render(): any;
}
declare const COLOR_FOR_TYPE: {
  readonly default: "headline";
  readonly error: "error";
};
declare const ActionLayoutDirection: {
  readonly ROW: "row";
  readonly COLUMN: "column";
};
export declare type ActionLayoutDirection = typeof ActionLayoutDirection[keyof typeof ActionLayoutDirection];
export declare type AlertType = keyof typeof COLOR_FOR_TYPE;
export {};
