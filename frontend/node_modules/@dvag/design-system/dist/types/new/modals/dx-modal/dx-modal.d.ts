import { EventEmitter } from "../../../stencil-public-runtime";
/**
 * Modal dialog.
 * @path /Modals
 * @name Modal
 * @icon sticky-note
 * @stable
 *
 * @slot content - The content of the modal. Is rendered in the middle of the modal.
 * @slot primary-actions - Buttons in the right lower corner of the modal.
 * @slot secondary-actions - Buttons in the left lower corner of the modal.
 */
export declare class DxModal {
  private modalDialog;
  private scrollableElement;
  private topShadowElement;
  private bottomShadowElement;
  self: HTMLDsModalElement;
  state: ModalState;
  /**
   * The modal dialog component can either be displayed in fullscreen, or the dialog adjusts to the size of the content.
   * @value fullscreen: The dialog is displayed in fullscreen mode.
   * @value content: The dialog adjusts to the content.
   * @value number: A custom defined max-height in pixels.
   *
   * @example content-small
   * @example content-large
   * @example fullscreen-small
   * @example fullscreen-large
   * @example defined-small
   * @example defined-large
   */
  height: ModalHeight;
  /**
   * Defines the modal's width dependent on the current breakpoint.
   *
   * @value s: The modal takes up to 444 pixels width.
   * @value m: The modal takes up to 678 pixels width.
   * @value l: The modal takes up to 912 pixels width.
   * @value xl: The modal takes up to 1146 pixels width.
   * @value xxl: The modal takes up to 1380 pixels width.
   *
   * @example width
   */
  width: "s" | "m" | "l" | "xl" | "xxl" | "internal-site-navigation-menu";
  /**
   * The label of the dialog.
   * @value string: the title.
   */
  label: string;
  /**
   * Defines if the dialog is visible or not.
   * @value true: Dialog is visible.
   * @value false: Dialog is not visible.
   */
  visible: boolean;
  visibleChanged(): void;
  /**
   * The Event triggers as soon the dialog opens.
   */
  modalOpened: EventEmitter<void>;
  /**
   * The Event triggers, as soon the user closes the dialog via the close button or through clicking on the background behind the modal.
   * It emits an object with meta-data containing the reason the modal was closed and a function to prevent the modal from closing.
   *
   * @example prevent-background-close
   * @example modal-closed
   */
  modalClosed: EventEmitter<ModalClosedPayload>;
  componentWillLoad(): Promise<void> | void;
  disconnectedCallback(): void;
  componentDidRender(): void;
  private visibilityChanged;
  private onLayoutAnimationEnd;
  private handleClosing;
  private closeModal;
  private closeModalOnClickOutside;
  private setScrollContainer;
  private scrollHandler;
  private controlOpticalHints;
  private getDefinedHeight;
  render(): any;
  private renderHeader;
  private renderContent;
  private renderFooter;
}
export declare type ModalHeight = "fullscreen" | "content" | "internal-site-navigation-menu" | number;
declare type ModalState = "closed" | "opening" | "opened" | "closing";
/**
 * The ModalClosedPayload is emitted with the `closeModal` event of a modal.
 */
export interface ModalClosedPayload {
  /**
   * The reason the modal closed.
   * @value background: The user clicked on the background of the modal.
   * @value button: The user clicked on the close-button on the upper right of the modal.
   */
  reason: ModalClosedReason;
  /**
   * A function which prevents the modal from closing when called.
   * @example modal-closed
   */
  preventCloseModal: () => void;
}
declare type ModalClosedReason = "background" | "button";
export {};
