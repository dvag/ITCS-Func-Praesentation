import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
import { NewChartSample } from "../dx-chart-sample/dx-chart-sample";
/**
 * This component visualizes data array in the form of a donut chart.
 * It consists of multiple segments which each represents a data input.
 *
 * @name Donut-Chart
 * @shortname Donut
 * @path /Visualization
 * @icon chart-pie
 *
 * @slot - `<dx-chart-sample>` elements which are translated to donut segments.
 *
 * @stable
 */
export declare class DxDonutChart implements ComponentInterface {
  private donutRadius;
  private viewBoxSize;
  private virtualScaledSegmentWidth;
  private labelPositioningFactor;
  private debounce;
  private breakpointAware;
  private slotObserver;
  private mouseMoveHandler;
  self: HTMLDxDonutChartElement;
  chartInput: NewChartSample[];
  internalSelected: number;
  /**
   * The index of the selected segment.
   *
   * @value number: An index between 0 and (n - 1), whereas n = number of segments.
   *
   * @example selected
   */
  selected: number;
  /**
   * The color scheme which is used to color the segments
   *
   * @value blue: All segments are displayed in a predefined blue color
   * @value gray: All segments are displayed in a predefined gray color
   * @value signal: The segments can be displayed in the three different signal colors (success, warning, error).
   * @value custom: The color of segments can be set to any color in the color palette.
   *
   * @example color-scheme
   * @example signal
   */
  colorscheme: DonutChartColorScheme;
  /**
   * A label which is displayed in the center of the component.
   *
   * @value string: The label text.
   *
   * @example label
   */
  label: string;
  /**
   * A sub-label which is displayed below the `label` in the center of the component.
   *
   * @value string: The sub-label text.
   *
   * @example label
   */
  sublabel: string;
  /**
   * Defines whether to show the outer labels of the segments or not.
   *
   * @value true: The label of every segment is displayed.
   * @value false: No segment labels are visible.
   *
   * @example show-segment-labels
   */
  showsegmentlabels: boolean;
  onShowSegmentLabelsChanged(): void;
  /**
   * Triggers when a segment is clicked. It delegates the index of the selected segment.
   *
   * @value number: The index of the selected segment.
   *
   * @example segment-select
   */
  segmentSelect: EventEmitter<number>;
  connectedCallback(): void;
  disconnectedCallback(): void;
  onWindowResizeChange(): void;
  update(): Promise<void>;
  private startUpdateCalculation;
  private updatePositions;
  componentDidLoad(): void;
  private collectSamplesFromChildren;
  private getHitAngle;
  private getSegmentIndexOnCoordinate;
  private handleMouseMove;
  private getSelectIndexWithAngle;
  private selectSegmentByAngle;
  private selectSegment;
  private generateDonutCreateData;
  private get getScaledOuterDiameter();
  private getScaledOuterRadius;
  private getSegmentMiddleDirectionFromOrigin;
  private getSegmentEndDirectionFromOrigin;
  private getColor;
  private handlePointerEnter;
  private handlePointerLeave;
  private handlePointerUp;
  private renderLineFromDirectionVector;
  private renderCircleSegment;
  private renderSegmentMask;
  private renderLabelLine;
  private renderCircleSegments;
  private renderSegmentLabels;
  private renderLabels;
  render(): any;
}
export declare type DonutChartColorScheme = "blue" | "gray" | "signal" | "custom";
