import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form element that displays a selectable range of numeric values.
 * @path /Form/Inputs
 * @name Slider
 * @icon sliders-h
 * @stable
 */
export declare class DxSlider implements ComponentInterface {
  self: HTMLDxSliderElement;
  private dragController;
  private resizeObserver;
  private knobElement;
  private lineElement;
  private labelTextElement;
  private valueElement;
  private minLabelElement;
  private maxLabelElement;
  private ticksOfKeyDown;
  /**
   * Lower bounds of the slider range.
   * @value number: minimal value of the slider.
   * @example min-max-value
   */
  min: number;
  /**
   * Upper bounds of the slider range.
   * @value number: maximum value of the slider.
   * @example min-max-value
   */
  max: number;
  /**
   * Step size of the slider values. Possible values are always multiples of
   * the step size. Values are automatically rounded to match the step size.
   * @value number: step size.
   * @example step
   */
  step: number;
  /**
   * Current value of the slider.
   * @value number: current value
   * @example min-max-value
   */
  value: number;
  valueChanged(): void;
  /**
   * If enabled, it displays labels for the minimum and maximum values.
   * @value false: labels are hidden (default)
   * @value true: labels are shown
   * @example show-min-max-label
   */
  showminmaxlabel: boolean;
  /**
   * If enabled, it displays a label with the current value above the knob.
   * @value true: label is shown (default)
   * @value false: label is hidden
   * @example show-value-label
   */
  showvaluelabel: boolean;
  /**
   * Pattern used to format the current value.
   * A '$' followed by a digit represents the value of the slider.
   * The value of digits determines the amount of decimal numbers.
   *
   * @value string: formatting of the slider value, e.g. `$1 %` or `$2 â‚¬`
   * @example formattingpattern
   */
  formattingpattern: string;
  /**
   * Label text below the slider.
   *
   * @important
   * @value string: Text, e.g. `Amount`
   * @example label
   */
  label?: string;
  /**
   * Turns the input into the read-only mode.
   * @value false: value can be modified by the user (default)
   * @value true: value can not be modified by the user
   * @example readonly
   */
  readonly: boolean;
  /**
   * Defines if the input field is enabled or not.
   * @value true: Input ist disabled
   * @value false: Input is not disabled
   * @example disabled
   */
  disabled: boolean;
  /**
   * User made changes. Contains the chosen value.
   * @example value-change
   */
  valueChange: EventEmitter<number>;
  componentDidRender(): void;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private updatePosition;
  private updateValueLabelPosition;
  private updateMinMaxLabelVisibility;
  private clickOnSlider;
  private applyNewValue;
  private eventCanControlValueByKey;
  private keyDownOnSlider;
  private keyUpOnSlider;
  private checkAsserts;
  private get usedValue();
  /**
   * The relative value represents the [value] within the [min] and [max] range
   * as a value between 0.0 and 1.0.
   */
  private get relativeValue();
  private renderLabel;
  private renderMinMaxLabels;
  private renderValue;
  render(): any;
}
