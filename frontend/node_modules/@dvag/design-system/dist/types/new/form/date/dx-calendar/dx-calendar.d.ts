import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { DateRange } from "../date-range.util";
import { DateSelectionMode } from "../date";
import { Calendar } from "./calendar-creator";
/**
 * @experimental
 * @internal
 */
export declare class DxCalendar implements ComponentInterface {
  private calendarContainer;
  private headerLabel;
  private isAnimating;
  private parent;
  private preventNextDateViewChange;
  private currentDate;
  private currentView;
  self: HTMLDxCalendarElement;
  internalDate: Date;
  internalView: CalendarView;
  selectedRange: DateRange;
  value: string;
  onValueChange(): void;
  /**
   * Defines the minimal allowed date.
   */
  min?: string;
  /**
   * Defines the maximal allow date.
   */
  max?: string;
  /**
   * Error message which is displayed above the calendar view.
   *
   * @value string: Error message.
   */
  errormessage?: string;
  /**
   * Whether we can select a range of two dates or only one date.
   *
   * @value true: Two separate dates can be selected. All dates between them are highlighted.
   * @value false: Only one date can be selected at a time.
   */
  rangeenabled: boolean;
  /**
   * Defines how a date can be selected.
   *
   * @value "day-month-year": The month calendar view is the main view to select a date in.
   * You can click on days within a month to select them.
   * @value "month-year": The year calendar view is the main view to select a date in.
   * You can click on months within a year to select them.
   * @value "day-month": The month calendar view is the main view to select a date in.
   * You can click on days within a month to select them. The year information is irrelevant in this mode.
   * Selected date's years are always 0.
   */
  mode: DateSelectionMode;
  /**
   * Fires a date range when the user selects a new date.
   * The payload is dependant on the `rangeenabled` property.
   * When false the payload only consists of a `from` date and an undefined `to` date.
   * When true the payload consists of a `from` and `to` date.
   */
  rangeSelected: EventEmitter<DateRange>;
  connectedCallback(): void;
  componentWillLoad(): Promise<void> | void;
  private getInitializedView;
  /**
   * Sets the date dependant on the current mode
   * E.g: If the current mode is "day-month" we have to set every date's year in this context to 0
   */
  private adjustDateDependantOnCurrentMode;
  private updateInternalState;
  private isDateSelectionEnabled;
  /**
   * Currently no mode disables the month selection.
   * This method exists in case a mode appears which doesn't need a month selection.
   */
  private isMonthSelectionEnabled;
  private isYearSelectionEnabled;
  onAnimationStart(): void;
  onAnimationEnd(e: AnimationEvent): void;
  private addSlidingAnimation;
  private slide;
  private navigate;
  private previous;
  private next;
  onClickHeaderLabel(): void;
  private get maxDate();
  private get minDate();
  private handleRowEntryClick;
  componentShouldUpdate(_: unknown, __: unknown, propName: string): boolean | void;
  private selectRange;
  private getAboveView;
  private getBelowView;
  private getViews;
  private createCalendar;
  private renderRowEntry;
  renderErrorMessage(): any;
  renderCalendar(calendar: Calendar): any;
  renderHeader(label: string, leftButtonEnabled: boolean, rightButtonEnabled: boolean): any;
  render(): void;
}
declare const enum CalendarView {
  DAY = "day",
  MONTH = "month",
  YEAR = "year"
}
export {};
