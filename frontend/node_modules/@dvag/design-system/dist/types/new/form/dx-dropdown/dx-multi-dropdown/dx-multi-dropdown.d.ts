import { ComponentInterface, EventEmitter } from "../../../../stencil-public-runtime";
import { FlyoutPosition } from "../../../internal/dx-flyout/dx-flyout";
import { NewDropdownOption } from "../dx-dropdown-option/dx-dropdown-option";
import { HorizontalDirection } from "../../../../classes/common-types";
import { ItemSelectionPayload } from "../../../layout/dx-list/dx-list-flyout/dx-list-flyout";
/**
 * Form element for selecting multiple options in a list.
 *
 * @path /Form/Dropdown
 * @name Multi-Dropdown
 * @shortname Multi
 * @icon caret-square-down
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export declare class DxMultiDropdown implements ComponentInterface {
  self: HTMLDxMultiDropdownElement;
  private inputElement?;
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  private preventReFocus;
  private selectScanningEnabled;
  private optionsObserver;
  private observeSelectElementIntervalHandle;
  options: NewDropdownOption[];
  inputFocused: boolean;
  listOpen: boolean;
  internalValue: string[];
  showMouseHoverEffectOnList: boolean;
  internalPopupPosition: FlyoutPosition;
  activeIndex: number;
  /**
   * The size of the dropdown.
   *
   * @value s: A small dropdown is displayed.
   * @value m: A medium sized dropdown is displayed.
   */
  size: "s" | "m";
  /**
   * The selection label will be displayed when at least one option is selected.
   *
   * @value string: The text which is displayed next to the amount of selected options.
   */
  selectionlabel: string;
  /**
   * Label which is displayed above the selection input field.
   * @important
   * @value string: Label text e.g. `First name`
   * @example label
   */
  label?: string;
  /**
   * Text, which is displayed in a red error popup at the bottom of the input field.
   * @value string: Error text.
   * @example error
   */
  errormessage?: string;
  /**
   * Whether the selection is readonly or editable.
   * If true the value of this component will be visualized as a normal text.
   * @value false: Input is editable.
   * @value true: Input is read-only.
   *
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks this input field as a required form element.
   * @value false: Not required
   * @value true: It is necessary to select an option to fulfill the requirement.
   * @example required
   */
  required: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Placeholder text which is displayed when no option is currently selected.
   * @value string: Placeholder text
   * @example placeholder
   */
  placeholder: string;
  /**
   * An icon which is displayed next to the placeholder text.
   * @value string: The name of an icon.
   * @example icon
   */
  icon?: string;
  /**
   * Defines the text alignment.
   * @value left: Text is left aligned.
   * @value right: Text is right aligned.
   * @example text-align
   */
  textalign: HorizontalDirection;
  /**
   * Defines the position of the dropdown list.
   * @value top: The list is displayed at the top of the input field.
   * @value bottom: The list is displayed at the bottom of the input field.
   * @example popup-position
   */
  popupposition: "top" | "bottom";
  /**
   * Defines whether the dropdown is enabled or not.
   * @value true: Dropdown is not editable.
   * @value false: Dropdown is editable.
   * @example disabled
   */
  disabled: boolean;
  /**
   * Delegates the current selection while the user is still editing.
   *
   * @example complex
   */
  valueChange: EventEmitter<HTMLDxDropdownOptionElement[]>;
  /**
   * Delegates the final selection.
   * The event is fired when the dropdown loses focus or pushing the 'Enter' key.
   *
   * @example complex
   */
  valueComplete: EventEmitter<HTMLDxDropdownOptionElement[]>;
  componentWillLoad(): Promise<void> | void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  onForceUpdateOnChange(e: CustomEvent): void;
  /**
   * Sets the focus on this element.
   *
   * @example focus
   */
  focusControl(): Promise<void>;
  private collectOptions;
  private onInputFocused;
  private onInputBlurred;
  private toggleList;
  private onInputKeyUp;
  /**
   * Delegates keyboard events to the underlying list element.
   * The list element itself cannot receive keyboard events because it has a tabIndex of -1.
   */
  private onInputKeyDown;
  private onInputClicked;
  private setOpenListStatus;
  /**
   * Used by the hidden native <select> to react to changes.
   */
  private selectOptionsByValue;
  private get selectedDropdownOptions();
  private get selectedOptions();
  private get selectedDropdownOptionElements();
  private compareArray;
  private emitValueChange;
  private emitValueComplete;
  private superviseSelectElement;
  onItemSelectionChanged(e: CustomEvent<ItemSelectionPayload>): void;
  onPopupPositionChanged(e: CustomEvent<FlyoutPosition>): void;
  private getInnerDropdownOptionElements;
  private isChevronRotated;
  render(): any;
  private renderNativeSelect;
  private renderOpenListButton;
  private renderItemList;
  private renderOption;
  private renderCurrentValue;
}
export declare type StringOrObjectArray = string | {
  [key: string]: any;
}[];
