import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form element which displays whether something is true or false.
 *
 * @path /Form
 * @name Checkbox
 * @icon check-square
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export declare class DxCheckBox implements ComponentInterface {
  private inputElement;
  self: HTMLDxCheckboxElement;
  /**
   * Text, which is displayed next to the checkbox.
   *
   * @important
   * @value string: Label text.
   * @example label
   */
  label?: string;
  /**
   * Disables the ability to interact with this component.
   *
   * @value false: User can interact with this component.
   * @value true: User cannot interact with this component.
   *
   * @example disabled
   */
  disabled: boolean;
  /**
   * Defines if the checkbox is in a read-only state.
   * If the `checked` property is false, the component will not be rendered.
   * @value false: The checkbox is displayed normally.
   * @value true: A success icon and the label are displayed next to each other.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Defines if the checkbox is a required form element.
   * @value false: It is not required to set the checkbox`s `checked` state to true.
   * @value true: The checkbox's `checked` state has to be true to fulfill the requirement.
   * @example required
   */
  required: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Defines whether the checkbox is checked or not.
   * @value false: Checkbox is unchecked.
   * @value true: Checkbox is checked.
   *
   * @example checked
   */
  checked: boolean;
  /**
   * A text which is displayed in an error popup below the component.
   * @value string: Error text
   * @example error
   */
  errormessage?: string;
  /**
   * Delegates the current `checked` value of this component when the user interacts with it.
   *
   * @example check-event
   */
  checkedChange: EventEmitter<boolean>;
  /**
   * Sets the focus on this component.
   * @example focus
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private check;
  toggle(e: KeyboardEvent): void;
  onForceUpdateOnChange(e: CustomEvent): void;
  private renderIcon;
  private renderCheckboxLabelContainerIcon;
  private renderRequiredIcon;
  private renderKiSyncIcon;
  private renderCheckboxLabelContainer;
  private renderReadOnly;
  render(): any;
}
