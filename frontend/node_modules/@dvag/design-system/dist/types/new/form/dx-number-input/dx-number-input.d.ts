import { ComponentInterface, EventEmitter } from "../../../stencil-public-runtime";
/**
 * Form element for capturing number input.
 *
 * @path /Form/Inputs
 * @name Number-Input
 * @shortname Numbers
 * @icon square-root-alt
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export declare class DxNumberInput implements ComponentInterface {
  self: HTMLDxNumberInputElement;
  private inputElement?;
  private lastEmittedCompleteValue;
  private lastEmittedChangeValue;
  private formattedValue;
  private preventObtainValueChanges;
  private lastUnpreventedInputElementValue;
  inputFocused: boolean;
  active: boolean;
  /**
   * Text on top of the input field.
   * @important
   * @value string: description e.g `Vorname`
   * @example value
   */
  label?: string;
  /**
   * The step size defines the steps you can access when pressing the arrow up or arrow down key. The possible numbers are dependent on the `step` and the `min` value of this component.
   *
   * Example: if step=3 and min=undefined, possible numbers are [..., -6, -3, 0, 3, 6, 9, ...].
   * Example: if step=3 and min=2 the possible numbers shift by 2: [..., -4, -1, 2, 5, 8, 11, ...].
   *
   * @value number: The step size.
   *
   * @example step
   */
  step?: number;
  /**
   * Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision`
   * `placeholder` or `unit`
   *
   * @value currency-euro: Euro
   * @value percent: percent value
   * @example profile
   */
  profile?: "currency-euro" | "percent";
  /**
   * Text under the input field, that is shown in a red dialog.
   * @value string: Errormessage.
   * @example error-message
   */
  errormessage?: string;
  /**
   * Value of the input field.
   * @important
   * @value string: Value of the input.
   * @example value
   */
  value: number;
  /**
   * Defines the size of this input.
   *
   * @value m: medium size text-input
   * @value s: small sized input. Should only be used in special cases.
   */
  size: "s" | "m";
  /**
   * Determines the amount of pre-decimal numbers.
   * The element prevents all inputs higher than this value.
   *
   * @value number: Maximum amount of pre-decimal numbers.
   * @example limit-length
   */
  limitlength?: number;
  /**
   * Determines the minimal value. The minimal value is **within** the possible input.
   * @value number: The minimal value the input field can have.
   */
  min: number;
  /**
   * Determines the maximum value. The maximum value is **within** the possible input.
   * @value number: The maximum value the input field can have.
   */
  max: number;
  /**
   * Determines the amount of decimal numbers.
   *
   * @value number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)
   * @example custom
   */
  precision?: number;
  /**
   * Displays a unit next to the input.
   * @value string: A unit text (e.g: "â‚¬", "$", "qm").
   * @example custom
   */
  unit: string;
  /**
   * Controls the visualization of the pre-deciaml thousandseparator.
   * @value true: Usses thousandseparator (default).
   * @value false: No grouping.
   * @example thousandseparator
   */
  thousandseparator?: boolean;
  /**
   * Placeholder that is shown, when the input is empty.
   *
   * @value string: Placeholder.
   * @example custom
   */
  placeholder?: string;
  /**
   * Input is not interactable.
   * Label and border are grey.
   * @value true: Input is disabled.
   * @value false: Input is not disabled.
   * @example disabled
   */
  disabled: boolean;
  valueChanged(): void;
  /**
   * Input is in read only mode.
   * The content of the input is displayed in a simple way. The input is not interactable.
   * @value false: Formfield.
   * @value true: Text of the value.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Marks the formfield as mandatory.
   * @value false: Not mandatory (default).
   * @value true: Mandatory.
   * @example required
   */
  required: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * Changes of the input value during the input of the user.
   *
   * @example change-events
   */
  valueChange: EventEmitter<number>;
  /**
   * Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field.
   *
   * @example change-events
   */
  valueComplete: EventEmitter<number>;
  /**
   * Sets the tab-focus to the form element.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): void;
  componentShouldUpdate(_: any, __: any, propName: string): boolean | void;
  onForceUpdateOnChange(e: CustomEvent): void;
  private getUnformattedValue;
  private obtainValueChangesFromOutside;
  private sanitizeValue;
  private onInputFocused;
  private onInputBlurred;
  private clearInput;
  private setValueInternal;
  private onInputKeyUp;
  private preventInput;
  private computeDisplayValue;
  private onInput;
  private emitValueChange;
  private emitValueComplete;
  private get inputTypeDefinition();
  private getDisplayValue;
  private isClearButtonVisible;
  render(): any;
  private handleArrows;
  private renderInput;
  private renderUnit;
  private renderClearButton;
}
