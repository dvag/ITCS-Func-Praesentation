import { EventEmitter } from "../../../stencil-public-runtime";
import { ItemSelectionPayload } from "../../layout/dx-list/dx-list-flyout/dx-list-flyout";
/**
 * Form element for selecting and filtering options in a list.
 *
 * @path /Form
 * @name Combobox
 * @icon caret-square-down
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export declare class DxCombobox {
  private inputElement?;
  private lastEmittedChangeValue;
  private lastEmittedCompleteValue;
  private preventReFocus;
  private lastSelectedOption;
  private internalIcon;
  self: HTMLDxComboboxElement;
  inputFocused: boolean;
  internalValue: string;
  options: ComboboxOption[];
  searchResult: ComboboxCategory[];
  listOpen: boolean;
  internalErrorMessage: string;
  waitForMoreInput: boolean;
  selectedOption: ComboboxOption;
  onSelectedOptionChanged(newOption: ComboboxOption, oldOption: ComboboxOption): void;
  isLoading: boolean;
  onIsLoadingChanged(): void;
  /**
   * The maximum height the list can reach when opened.
   *
   * @value number: The height in pixels.
   * @example max-list-height
   */
  maxlistheight: number;
  /**
   * The text which is displayed within the flyout while the search is in progress.
   *
   * @value string: The loading text.
   * @example loading-text
   */
  loadingtext: string;
  /**
   * The text which is displayed within the flyout when no entries are found with the input provided by the user.
   *
   * @value string: The empty search result text.
   * @example empty-search-text
   */
  emptysearchtext: string;
  /**
   * Label which is displayed above the input field.
   * @important
   * @value string: Label e.g `first name`
   * @example label
   */
  label?: string;
  /**
   * Defines the size of this input.
   *
   * @value m: medium size text-input
   * @value s: small sized input. Should only be used in special cases.
   * @example size
   */
  size: "s" | "m";
  /**
   * Error text which is displayed within a red dialog beneath the input.
   * @value string: error message
   * @example error
   */
  errormessage?: string;
  /**
   * The value of this input.
   * @important
   * @value string: Value of this input.
   * @example value
   */
  value: string;
  valueChanged(): void;
  /**
   * Limits the amount of characters a user can enter.
   * @value number: Amount of possible characters.
   *
   * @example limit-length
   */
  limitlength?: number;
  /**
   * Placeholder for this input field.
   * @value string: The placeholder.
   * @example placeholder
   */
  placeholder: string;
  /**
   * Defines if the input field is disabled or not.
   * @value true: Input is disabled
   * @value false: Input is not disabled
   * @example disabled
   */
  disabled: boolean;
  /**
   * Input field is in readonly mode.
   * The value of this input is display in an simplified manner.
   * The input field is not interactable.
   * @value false: input is not editable.
   * @value true: input is read-only.
   * @example readonly
   */
  readonly: boolean;
  /**
   * Input is marked as required.
   * @value false: Not required.
   * @value true: Input field is required, and an icon is displayed below the input field.
   * @example required
   */
  required: boolean;
  /**
   * Indicates that the form is synced with the KI.
   * @value true: Synchronized.
   * @value false: Not synchronized.
   * @example kisynced
   */
  kisynced: boolean;
  /**
   * The text which is displayed when the input length is less than the `presearchlettercount`.
   *
   * @value string: A text describing the condition to start a search.
   * @example pre-search-condition-text
   */
  presearchconditiontext: string;
  /**
   * The minimum number of letters before starting the search.
   * @value number: The number of letters that allow starting the search.
   * @example pre-search-letter-count
   */
  presearchlettercount: number;
  /**
   * Emits this event when the user changes the value of this input.
   * @example change-events
   */
  valueChange: EventEmitter<string>;
  /**
   * This event is emitted when the user accepts the value.
   * The user accepts the value by pressing the Enter key or when the user leave the input.
   * @example change-events
   */
  valueComplete: EventEmitter<string>;
  /**
   * This event is fired, when the user fills out this input.
   * The event paylod contains an controller which can be used to submit autocomplete options.
   * @example search
   * @example select-search-option
   * @example option-labels
   * @example option-icons
   */
  search: EventEmitter<ComboboxSearchController>;
  /**
   * This event is fired when the user selects an autocomplete options from the list.
   * The event payload contains the `data` of the selected AutoCompleteOption.
   *
   * @example select-search-option
   */
  selectSearchOption: EventEmitter;
  /**
   * Trigger when the user presses the "Enter" key while editing the input field.
   *
   * @example enter-press
   */
  enterPress: EventEmitter<void>;
  onItemSelectionChanged(e: CustomEvent<ItemSelectionPayload>): void;
  /**
   * Focuses this input field.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  onForceUpdateOnChange(e: CustomEvent): void;
  private obtainValueChangesFromOutside;
  private findOption;
  private onFocused;
  onDocumentBlur(): void;
  private onBlurred;
  private onListFlyoutClicked;
  private internalClearInput;
  private clearInput;
  private onInputKeyDown;
  private onInputInput;
  private internalSelectOption;
  private selectOption;
  private startSearch;
  private emitValueChange;
  private emitValueComplete;
  private renderInputIcon;
  private renderInput;
  private renderDefaultContainer;
  private renderListContent;
  private renderCategory;
  private renderAutocompleteValues;
  private renderOpenListButton;
  private renderIconAndClearButton;
  render(): any;
}
export interface ComboboxSearchController {
  value: string;
  reason: SearchReason;
  provideValues: (categories: ComboboxCategory[]) => void;
}
export interface ComboboxCategory {
  label?: string;
  options: ComboboxOption[];
}
export interface ComboboxOption {
  preLabel?: string;
  label: string;
  subLabel?: string;
  icon?: string;
  value?: string;
  data?: any;
}
declare type SearchReason = "clear" | "focus" | "input";
export {};
