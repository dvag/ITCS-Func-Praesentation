import { ComponentInterface } from "../../../stencil-public-runtime";
/**
 * Displays text content in different text styles.
 * @path /Basics
 * @name Text
 * @icon font
 * @stable
 * @slot - Contains just plain text nodes. It may not have further HTML elements.
 */
export declare class DxText implements ComponentInterface {
  self: HTMLDxTextElement;
  textStyle: TextStyle;
  /**
   * Specifies the style of the text.
   *
   * If the `type` attribute isn't set, a default style will be set, that is based on the
   * parent components.
   *
   * @value auto: The style is determined automatically based on the position the `<dx-text>` in the element tree.
   *
   * @value Headline-1: Shortcut is `h1`
   * @value Headline-2: Shortcut is `h2`
   * @value Headline-3: Shortcut is `h3`
   * @value Headline-4: Shortcut is `h4`
   * @value Headline-5: Shortcut is `h5`
   *
   * @value Paragraph-Big: Shortcut is `pb`
   * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
   * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
   * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
   *
   * @value Paragraph-Standard: Shortcut is `ps`
   * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
   * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
   * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
   *
   * @value Infotext-Standard: Shortcut is `it`
   * @value Infotext-Standard-Italic: Shortcut is `it-italic`
   * @value Infotext-Standard-Bold: Shortcut is `it-bold`
   * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
   *
   * @value Infotext-Small: Shortcut is `its`
   * @value Infotext-Small-Italic: Shortcut is `its-italic`
   * @value Infotext-Small-Bold: Shortcut is `its-bold`
   * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
   *
   * @important
   * @example text-styles
   * @example text-styles-shortcuts
   */
  type: string;
  typeChanged(): void;
  /**
   * Defines the text color.
   * @value string: Name of the color (see example for references)
   * @example colors
   */
  color?: string;
  componentWillLoad(): void;
  disconnectedCallback(): void;
  private computeTextStyleBasedOnTypeProperty;
  private getStyleClasses;
  render(): any;
}
declare enum TextStyle {
  INHERIT = "INHERIT",
  HEADLINE_1 = "HEADLINE_1",
  HEADLINE_2 = "HEADLINE_2",
  HEADLINE_3 = "HEADLINE_3",
  HEADLINE_4 = "HEADLINE_4",
  HEADLINE_5 = "HEADLINE_5",
  PARAGRAPH_STANDARD = "PARAGRAPH_STANDARD",
  PARAGRAPH_STANDARD_BOLD = "PARAGRAPH_STANDARD_BOLD",
  PARAGRAPH_STANDARD_ITALIC = "PARAGRAPH_STANDARD_ITALIC",
  PARAGRAPH_STANDARD_BOLD_ITALIC = "PARAGRAPH_STANDARD_BOLD_ITALIC",
  PARAGRAPH_BIG = "PARAGRAPH_BIG",
  PARAGRAPH_BIG_BOLD = "PARAGRAPH_BIG_BOLD",
  PARAGRAPH_BIG_ITALIC = "PARAGRAPH_BIG_ITALIC",
  PARAGRAPH_BIG_BOLD_ITALIC = "PARAGRAPH_BIG_BOLD_ITALIC",
  INFOTEXT_STANDARD = "INFOTEXT_STANDARD",
  INFOTEXT_STANDARD_BOLD = "INFOTEXT_STANDARD_BOLD",
  INFOTEXT_STANDARD_ITALIC = "INFOTEXT_STANDARD_ITALIC",
  INFOTEXT_STANDARD_BOLD_ITALIC = "INFOTEXT_STANDARD_BOLD_ITALIC",
  INFOTEXT_SMALL = "INFOTEXT_SMALL",
  INFOTEXT_SMALL_BOLD = "INFOTEXT_SMALL_BOLD",
  INFOTEXT_SMALL_ITALIC = "INFOTEXT_SMALL_ITALIC",
  INFOTEXT_SMALL_BOLD_ITALIC = "INFOTEXT_SMALL_BOLD_ITALIC"
}
export {};
