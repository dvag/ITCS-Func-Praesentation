import { EventEmitter, ComponentInterface } from "../../../stencil-public-runtime";
/**
 * Displays a small tag / chip.
 * A tag can be a static text display or an interactive element.
 * @path /Form/Other
 * @name Tag
 * @new
 * @icon tag
 * @stable
 */
export declare class DxTag implements ComponentInterface {
  self: HTMLDxTagElement;
  /**
   * Defines the type of tag.
   * @value static: Tag is not interactable by the user. The tag only shows its given label.
   * @value interactive: Tag is interactable by the user.
   */
  type: "static" | "interactive";
  /**
   * Defines the theme for this tag. The theme tag only works in combination with `static` tag type.
   *
   * @value gray: Gray theme
   * @value gold: Gold theme
   * @value green: Green theme
   * @value red: Red theme
   * @value orange: Orange theme
   * @value purple: Purple theme
   * @value turquoise: Turquoise theme
   * @example themes
   * @important
   */
  theme?: TagThemeChoices;
  /**
   * Colors the background in the given color from the color palette.
   * Only works for the `static` tag type.
   * @value string: A color from the color palette
   * @example custom-colors
   */
  color?: string;
  /**
   * Colors the tag text in the given color from the color palette.
   * Only works for the `static` tag type.
   * @value string: A color from the color palette
   * @example custom-colors
   */
  textcolor?: string;
  /**
   * Defines if the interactive tag displays a remove button.
   * Only works in comination with the `type` property set to `interactive` and the tag is not `selectable`.
   * @value true: tag shows button.
   * @value false: tag does not show button.
   * @example remove-event
   */
  removeable: boolean;
  /**
   * Defines whether the tag is selectable or not.
   * @value true: tag is selectable .
   * @value false: tag is not selectable.
   * @example select-event
   */
  selectable?: boolean;
  /**
   * Defines if the tag is selected.
   * When the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired.
   * @value true: tag is selected.
   * @value false: tag is not selected.
   */
  selected: boolean;
  controlSelectedStatus(): void;
  /**
   * Displays the given value
   * @value string: A text to display.
   */
  label: string;
  /**
   * Is fired when the user interacts with the remove button.
   *
   * @example remove-event
   */
  remove: EventEmitter<void>;
  /**
   * Is fired when the user interacts with a selectable tag.
   * @example select-event
   */
  selectChange: EventEmitter<boolean>;
  connectedCallback(): void;
  private removeButtonClicked;
  private toggleSelected;
  render(): any;
  private renderCloseButton;
  private renderLabel;
  private renderInteractive;
  private renderStatic;
}
export declare type TagThemeChoices = "gray" | "gold" | "green" | "red" | "orange" | "purple" | "turquoise";
