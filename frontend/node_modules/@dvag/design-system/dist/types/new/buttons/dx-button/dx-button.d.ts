import { ComponentInterface } from "../../../stencil-public-runtime";
import { HorizontalDirection } from "../../../classes/common-types";
/**
 * Displays a primary or secondary button.
 *
 * @path /Buttons
 * @name Button
 * @icon minus-square
 * @stable
 */
export declare class DxButton implements ComponentInterface {
  private buttonElement;
  self: HTMLDxButtonElement;
  /**
   * Defines the visual representation of the button.
   * @value primary-s: Small flat colored button to indicate an important action.
   * @value primary-m: Medium sized flat colored button to indicate an important action.
   * @value primary-l: Large flat colored button to indicate an important action.
   * @value secondary-s: Small outlined transparent button for less important actions.
   * @value secondary-m: Medium sized outlined transparent button for less important actions.
   * @value secondary-l: Large outlined transparent button for less important actions.
   * @value text: Small button with no default background color.
   * @example type
   */
  type: ButtonType;
  /**
   * Specifies the icon which will be shown beside the text.
   *
   * @value string: A valid icon name.
   * @example icon
   */
  icon?: string;
  /**
   * Specifies whether the icon is positioned left or right of the text as long a text is defined.
   *
   * @value left: The icon is displayed left of the text.
   * @value right: The icon is displayed right of the text.
   * @example icon
   */
  iconposition: HorizontalDirection;
  /**
   * The text which is displayed within the button.
   *
   * @value string: The text.
   * @example label
   */
  label?: string;
  /**
   * Modifies the button width behavior
   * @value false: Button width is determined by the button content
   * @value true: Button width is stretched to match the width of the host element.
   */
  stretch: boolean;
  /**
   * Disables user interaction on the button.
   * @value false: User can interaction with the button.
   * @value true: User can not interaction with the button.
   * @example disabled
   */
  disabled: boolean;
  /**
   * Shows a loading spinner within the button.
   * The spinner location can be controlled with the `iconposition` property.
   * @value true: Loading spinner is visible.
   * @value false: Loading spinner is not visible.
   * @example loading-spinner
   */
  loading: boolean;
  /**
   * Disables the ability to focus the button via tabulator navigation.
   * @value false: Button is reachable via tab navigation.
   * @value true: Button is ignored when using tab navigation.
   * @example unfocusable
   */
  unfocusable: boolean;
  /**
   * The theme of the button defines the look and feel of the button, which is dependent in which context the button is used.
   * @value default: The default button can be placed anywhere and is the main usage of a button.
   * @value on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background.
   * @value destructive: A button which implies a destructive action. (e.g deleting an item from a list)
   *
   * @example theme
   */
  theme: ButtonTheme;
  /**
   * Focuses this element.
   */
  focusControl(): Promise<void>;
  componentWillLoad(): Promise<void> | void;
  private getStyleClasses;
  private getLoadingSpinnerTheme;
  render(): any;
  private renderInnerIcon;
  private renderIconContainer;
}
export declare type ButtonType = "primary-l" | "primary-m" | "primary-s" | "secondary-l" | "secondary-m" | "secondary-s" | "text";
export declare type ButtonTheme = "default" | "on-gold" | "destructive";
