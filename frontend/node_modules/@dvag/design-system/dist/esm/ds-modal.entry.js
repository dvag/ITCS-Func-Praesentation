import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { i as isSlotDefined } from './render-util-1dee6655.js';
import { c as assertPropertyValue } from './assert-7fc7463a.js';
import { M as ModalScrollHelper } from './modal-scroll-helper-ad3b2dc1.js';
import './value-store-f4663db1.js';
import './misc-util-d3b69f2c.js';

const dsModalCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .overlay{position:fixed;z-index:1000;left:0;top:0;right:0;bottom:0;background-color:#666666;transition:opacity 300ms ease-in-out;opacity:0.6}:host .modal-layout{position:fixed;z-index:1001;left:0;top:0;right:0;bottom:0;display:flex;justify-content:center;align-items:center}:host .modal-layout .modal-element{position:relative;display:flex;flex-direction:column;background-color:#ffffff;border-radius:6px;overflow:hidden;box-shadow:0 0 30px 0 rgba(0, 0, 0, 0.16);max-width:1200px}:host .modal-layout .modal-element .header{height:64px;display:flex;align-items:center;flex-shrink:0;padding:0 8px}@media (min-width: 768px){:host .modal-layout .modal-element .header{padding:0 16px}}:host .modal-layout .modal-element .header .header-side{width:44px;height:44px}:host .modal-layout .modal-element .header .header-label{flex-grow:1;text-align:center}:host .modal-layout .modal-element .header-shadow,:host .modal-layout .modal-element .footer-shadow{position:absolute;z-index:2;height:16px;left:0;right:0;pointer-events:none}:host .modal-layout .modal-element .header-shadow{top:64px;background:linear-gradient(0deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.08) 100%)}:host .modal-layout .modal-element .footer-shadow{background:linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.08) 100%);bottom:64px}:host .modal-layout .modal-element .footer-shadow:not(.visible){display:none}:host .modal-layout .modal-element .footer-shadow.one-slot{bottom:96px}:host .modal-layout .modal-element .footer-shadow.two-slots{bottom:152px}@media (min-width: 768px){:host .modal-layout .modal-element .footer-shadow.one-slot,:host .modal-layout .modal-element .footer-shadow.two-slots{bottom:86px}}:host .modal-layout .modal-element .content{overflow-y:auto;flex-grow:1;padding:16px;position:relative;top:0;left:0}@media (min-width: 768px){:host .modal-layout .modal-element .content{padding:24px}}:host .modal-layout .modal-element .content.color-white{background-color:inherit}:host .modal-layout .modal-element .content.color-grey{background-color:#f5f5f5}:host .modal-layout .modal-element .footer{display:flex;flex-direction:column;align-items:center;justify-content:space-between;box-sizing:border-box;flex-shrink:0;padding:24px 16px}@media (min-width: 768px){:host .modal-layout .modal-element .footer{padding:24px}}:host .modal-layout .modal-element .footer:not(.visible){display:none}:host .modal-layout .modal-element .footer.one-slot{height:96px}:host .modal-layout .modal-element .footer.two-slots{height:152px}@media (min-width: 768px){:host .modal-layout .modal-element .footer.one-slot,:host .modal-layout .modal-element .footer.two-slots{height:86px;flex-direction:row;justify-content:space-between}:host .modal-layout .modal-element .footer .footer-left-button{margin-right:24px}}:host(.state-closed) .modal-element{opacity:0;visibility:hidden}:host(.state-closing),:host(.state-closed){pointer-events:none}:host(.state-closing) .overlay,:host(.state-closed) .overlay{opacity:0}:host(.state-opening) .modal-layout{animation:animate-open 400ms ease-in-out;animation-fill-mode:forwards}:host(.state-closing) .modal-layout{animation:animate-close 400ms ease-in-out;animation-fill-mode:forwards}@keyframes animate-open{from{transform:translateY(-100vh);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes animate-close{0%{transform:translateY(0);opacity:1}100%{transform:translateY(-100vh);opacity:0}}:host(.size-fullscreen) .modal-element{width:100%;height:100%;border-radius:0}@media (min-width: 1200px){:host(.size-fullscreen) .modal-element{margin:32px;max-height:calc(100vh - 64px);border-radius:6px}}:host(.size-content) .modal-layout .modal-element{max-height:calc(100vh - 64px)}@media (min-width: 991px){:host(.size-content) .modal-layout .modal-element{max-width:min(100vw - 64px, 1200px)}}@media (max-width: 767px){:host(.size-content) .modal-layout .modal-element{width:100%;height:100%;border-radius:0;max-height:inherit}}";

const DsModal = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.modalOpened = createEvent(this, "modalOpened", 7);
    this.modalClosed = createEvent(this, "modalClosed", 7);
    this.state = "closed";
    /**
     * Defines whether a click outside the modal will close the modal or not.
     *
     * @value true: A click on the background causes the modal to close.
     * @value false: A click on the background does nothing.
     *
     * @example allow-background-close
     */
    this.allowbackgroundclose = true;
    /**
     * Hintergrundfarbe für den Content-Bereich
     * @value weiss: weißer Hintergrund
     * @value grau: gräulicher Hintergrund
     * @example contentcolor
     */
    this.contentcolor = "weiss";
  }
  visibleChanged() {
    this.visibilityChanged();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.visibilityChanged();
  }
  disconnectedCallback() {
    ModalScrollHelper.instance().unblock(this.self);
  }
  componentDidRender() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.visible) {
      scrollHelper.block(this.self, this.scrollableElement);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  visibilityChanged() {
    if (this.visible && this.state !== "opening") {
      this.state = "opening";
      this.modalOpened.emit();
    }
    else if (!this.visible && this.state !== "closed") {
      // DO NOT EMIT modalClosed
      this.handleClosing();
    }
  }
  layoutAnimationEnd() {
    if (this.state === "opening") {
      this.state = "opened";
    }
    else if (this.state === "closing") {
      this.state = "closed";
    }
  }
  handleClosing() {
    this.visible = false;
    this.state = "closing";
  }
  closeModal() {
    this.handleClosing();
    this.modalClosed.emit();
  }
  closeModalOnClickOutside(e) {
    if (this.allowbackgroundclose &&
      !e.composedPath().includes(this.modalDialog)) {
      this.closeModal();
    }
  }
  render() {
    assertPropertyValue("ds-modal", "size", this.size, [
      "fullscreen",
      "content",
    ]);
    assertPropertyValue("ds-modal", "contentcolor", this.contentcolor, [
      "weiss",
      "grau",
    ]);
    const isRightButtonDefined = isSlotDefined(this.self, RIGHT_BUTTON);
    const isLeftButtonDefined = isSlotDefined(this.self, LEFT_BUTTON);
    const countOfDefinedSlots = (isRightButtonDefined ? 1 : 0) + (isLeftButtonDefined ? 1 : 0);
    return (h(Host, { class: {
        "size-fullscreen": this.size === "fullscreen",
        "size-content": this.size === "content",
        "state-closed": this.state === "closed",
        "state-opened": this.state === "opened",
        "state-opening": this.state === "opening",
        "state-closing": this.state === "closing",
      } }, h("div", { class: "overlay" }), h("div", { class: "modal-layout", onClick: (e) => this.closeModalOnClickOutside(e), onAnimationEnd: () => this.layoutAnimationEnd() }, h("div", { ref: (el) => (this.modalDialog = el), class: "modal-element" }, this.renderHeader(), this.renderContent(countOfDefinedSlots), this.renderFooter(countOfDefinedSlots), h("div", { class: "header-shadow" }), h("div", { class: {
        "footer-shadow": true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } })))));
  }
  renderHeader() {
    if (this.state === "closed") {
      return;
    }
    return (h("div", { class: "header" }, h("div", { class: "header-side" }), h("div", { class: "header-label" }, h("ds-text", { type: "ftf" }, this.label)), h("div", { class: "header-side" }, h("ds-function-icon-button", { id: ElementIdGenerator.createId(this.self, "close-button"), onClick: () => this.closeModal() }, h("ds-icon", { id: ElementIdGenerator.createId(this.self, "close-button"), icon: "schliessen-dialog", size: 32 })))));
  }
  renderContent(countOfDefinedSlots) {
    return (h("div", { ref: (el) => (this.scrollableElement = el), class: {
        content: true,
        "color-white": this.contentcolor == "weiss",
        "color-grey": this.contentcolor == "grau",
        "no-footer": countOfDefinedSlots === 0,
      } }, h("slot", { name: "content" })));
  }
  renderFooter(countOfDefinedSlots) {
    if (this.state === "closed") {
      return;
    }
    return (h("div", { class: {
        footer: true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } }, h("div", { class: "footer-left-button" }, h("slot", { name: "left-button" })), h("div", null, h("slot", { name: "right-button" }))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "visible": ["visibleChanged"]
  }; }
};
const RIGHT_BUTTON = "right-button";
const LEFT_BUTTON = "left-button";
DsModal.style = dsModalCss;

export { DsModal as ds_modal };
