import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { a as isSlotUndefined } from './render-util-1dee6655.js';
import './value-store-f4663db1.js';

const dxCardHeaderCss = ":host:host([hidden]){display:none !important}:host .header{display:block;position:relative;box-sizing:border-box;height:64px;padding:0 24px}:host .header .header-content{padding:12px 0;height:100%;box-sizing:border-box;overflow:hidden;display:flex;justify-content:space-between;align-items:center}:host .header .header-content .icon-label-container{height:100%;flex:1;margin-right:16px;display:flex;justify-content:flex-start;align-items:center}:host .header .header-content .icon-label-container .chevron{pointer-events:none;margin-right:16px}:host .header .header-content .icon-label-container .icon{pointer-events:none;margin-right:8px;flex:0 0 24px}:host .header .header-content .icon-label-container .label{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;white-space:break-spaces;overflow:hidden;min-width:100px}:host .header .header-content .slot-container,:host .header .header-content .action-container{z-index:var(--dx-card-header-slot-z-index-offset, 1)}:host .header .header-content .slot-container:focus-within,:host .header .header-content .action-container:focus-within{z-index:calc(var(--dx-card-header-slot-z-index-offset, 1) + 1)}:host .header .header-content .action-container{margin-left:16px}:host .header .header-content .checkbox{z-index:var(--dx-card-header-slot-z-index-offset, 1);margin-left:16px}:host .header .header-content .header-button-overlay{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;background-color:transparent}:host .header .header-content .header-button-overlay[disabled]{cursor:unset}:host .header .header-bottom-border{display:var(--dx-card-header-bottom-border-display, block);transition:var(--dx-card-header-bottom-border-transition, none);transform:var(--dx-card-header-bottom-border-transform, none);opacity:var(--dx-card-header-bottom-border-opacity, 1);height:1px;background-color:#c8aa22;position:relative;bottom:1px}";

const DxCardHeader = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.cardHeaderInteract = createEvent(this, "cardHeaderInteract", 7);
    /**
     * If true, the header is clickable and shows a chevron icon on the left side.
     * @internal
     */
    this.collapsable = false;
    /**
     * Whether the header chevron points down or up.
     * @internal
     */
    this.collapsed = false;
  }
  componentDidRender() {
    if (this.collapsable) {
      verifyElementId(this.self);
    }
  }
  renderIcon() {
    if (this.icon == null || this.icon.length === 0) {
      return;
    }
    return (h("dx-icon", { class: "icon", icon: this.icon, size: 24, color: this.iconcolor }));
  }
  renderButtonOverlay() {
    if (!this.collapsable) {
      return;
    }
    return (h("button", { id: ElementIdGenerator.createId(this.self, "-control"), class: "header-button-overlay", onClick: () => this.cardHeaderInteract.emit() }));
  }
  renderChevron() {
    if (!this.collapsable) {
      return;
    }
    return h("dx-chevron", { class: "chevron", directiontop: this.collapsed });
  }
  renderActionSlot() {
    if (isSlotUndefined(this.self, "action")) {
      return;
    }
    return (h("div", { class: "action-container" }, h("slot", { name: "action" })));
  }
  render() {
    var _a;
    return (h(Host, null, h("div", { class: "header" }, h("div", { class: "header-content" }, h("div", { class: "icon-label-container" }, this.renderChevron(), this.renderIcon(), h("dx-text", { type: "ps", class: "label", color: "black" }, (_a = this.label) !== null && _a !== void 0 ? _a : "")), h("div", { class: "slot-container" }, h("slot", null)), this.renderActionSlot(), this.renderButtonOverlay()), h("div", { class: {
        "header-bottom-border": true,
      } }))));
  }
  get self() { return getElement(this); }
};
DxCardHeader.style = dxCardHeaderCss;

export { DxCardHeader as dx_card_header };
