import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { a as assert } from './assert-7fc7463a.js';
import { C as ColorPalette } from './color-palette-56f42693.js';
import { A as ADD_BULLET_TO_TEXT_CSS_CLASS_NAME } from './constants-3bb4a4ce.js';

const dxIconCss = ":host{display:inline-block;overflow:hidden;line-height:0;width:var(--dx-icon-attr-size);height:var(--dx-icon-attr-size)}:host:host([hidden]){display:none !important}:host svg{width:var(--dx-icon-attr-size);height:var(--dx-icon-attr-size);transition:fill var(--dx-icon-color-transition-duration, 150ms) ease-in-out;fill:var(--dx-icon-color, #c8aa22)}";

const DxIcon = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Icon subject
     * @value string: Name of the icon.
     * @example all-icons
     */
    this.icon = "placeholder";
  }
  onIconChanged() {
    this.icon = this.icon || "placeholder";
  }
  componentDidRender() {
    let size = this.size != null ? this.size : this.getSizeFromCssVariables();
    const possibleSizes = [16, 24, 32, 48, 64, 72];
    assert(possibleSizes.includes(size), () => {
      const message = `Invalid size: ${size}!\nPossible sizes ${possibleSizes.join(", ")}`;
      size = 0;
      return message;
    }, this.self);
  }
  getSizeFromCssVariables() {
    const inheritedSize = getComputedStyle(this.self).getPropertyValue("--dx-icon-attr-size");
    if (inheritedSize != null) {
      const size = parseInt(inheritedSize.trim());
      if (!isNaN(size)) {
        return size;
      }
    }
    return null;
  }
  renderExternalIcon(size) {
    return (h("object", { data: this.icon, type: "image/svg+xml", width: this.size, height: this.size }, h("dx-icon-placeholder", { size: size })));
  }
  renderIcon(size) {
    const pathEndsWithDotSVGRegEx = /.*.svg/;
    if (pathEndsWithDotSVGRegEx.test(this.icon)) {
      return this.renderExternalIcon(size);
    }
    const IconTag = `dx-icon-${this.icon.replace(/-/g, "")}`;
    return h(IconTag, null);
  }
  render() {
    assert(this.icon != null, () => "The property 'icon' has to be defined.");
    return (h(Host, { style: generateStyleMap$1(this.size, this.color) }, this.renderIcon(this.size)));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "icon": ["onIconChanged"]
  }; }
};
function generateStyleMap$1(size, color) {
  const map = {};
  if (size != null && !isNaN(size)) {
    map["--dx-icon-attr-size"] = `${size}px`;
  }
  if (color) {
    map["--dx-icon-color"] = new ColorPalette(true).getColorCode(color);
  }
  return map;
}
DxIcon.style = dxIconCss;

const DxIconPlaceholder = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return h("svg", { viewBox: "0 0 24 24", fill: "none" }, h("path", { "fill-rule": "evenodd", "clip-rule": "evenodd", d: "M0 0V24H24V0H0ZM22.2929 1H1.70711L12 11.2929L22.2929 1ZM23 1.70711L12.7071 12L23 22.2929V1.70711ZM11.2929 12L1 1.70711V22.2929L11.2929 12ZM1.70711 23L12 12.7071L22.2929 23H1.70711Z", style: { 'fill': 'var(--dx-icon-color,#C8AA22)', 'transition': 'fill var(--dx-icon-transition-duration, 0) ease-in-out' } }));
  }
};

const dxTextCss = "@charset \"UTF-8\";:host{display:inline;font-family:\"DVAG-Type\";text-decoration:var(--dx-text-text-decoration, none);color:var(--dx-text-color, #575757);transition:var(--dx-text-color-transition, none);letter-spacing:0}:host:host([hidden]){display:none !important}:host:host(.bold){font-weight:bold;--dx-text-font-weight:bold}:host:host(.italic){font-style:italic;--dx-text-font-style:italic}:host:host(.bold-italic){font-weight:bold;--dx-text-font-weight:bold;font-style:italic;--dx-text-font-style:italic}:host:host(.with-bullet)::before{display:inline-block;content:\"â€¢\";white-space:nowrap;margin-right:var(--dx-text-list-bullet-width);margin-left:calc(-2 * var(--dx-text-list-bullet-width));color:#2b2b2b}:host(.style-inherit){font-weight:var(--dx-text-font-weight, 400);text-transform:var(--dx-text-text-transform, none);text-decoration:var(--dx-text-text-decoration, none)}@media (min-width: 0px){:host(.style-inherit){font-size:var(--dx-text-font-size-small, var(--dx-text-font-size, 16px));line-height:var(--dx-text-line-height-small, var(--dx-text-line-height, 24px))}}@media (min-width: 1280px){:host(.style-inherit){font-size:var(--dx-text-font-size-large, var(--dx-text-font-size, 18px));line-height:var(--dx-text-line-height-large, var(--dx-text-line-height, 28px))}}:host(.style-headline-1),:host(.style-headline-2),:host(.style-headline-3),:host(.style-headline-4),:host(.style-headline-5){color:var(--dx-text-color, #2b2b2b)}@media (min-width: 0px){:host(.style-headline-1):host(.style-headline-1),:host(.style-headline-2):host(.style-headline-1),:host(.style-headline-3):host(.style-headline-1),:host(.style-headline-4):host(.style-headline-1),:host(.style-headline-5):host(.style-headline-1){font-size:34px;--dx-text-font-size:34px;line-height:44px;--dx-text-line-height:44px}}@media (min-width: 1280px){:host(.style-headline-1):host(.style-headline-1),:host(.style-headline-2):host(.style-headline-1),:host(.style-headline-3):host(.style-headline-1),:host(.style-headline-4):host(.style-headline-1),:host(.style-headline-5):host(.style-headline-1){font-size:46px;--dx-text-font-size:46px;line-height:56px;--dx-text-line-height:56px}}@media (min-width: 0px){:host(.style-headline-1):host(.style-headline-2),:host(.style-headline-2):host(.style-headline-2),:host(.style-headline-3):host(.style-headline-2),:host(.style-headline-4):host(.style-headline-2),:host(.style-headline-5):host(.style-headline-2){font-size:30px;--dx-text-font-size:30px;line-height:40px;--dx-text-line-height:40px}}@media (min-width: 1280px){:host(.style-headline-1):host(.style-headline-2),:host(.style-headline-2):host(.style-headline-2),:host(.style-headline-3):host(.style-headline-2),:host(.style-headline-4):host(.style-headline-2),:host(.style-headline-5):host(.style-headline-2){font-size:38px;--dx-text-font-size:38px;line-height:48px;--dx-text-line-height:48px}}@media (min-width: 0px){:host(.style-headline-1):host(.style-headline-3),:host(.style-headline-2):host(.style-headline-3),:host(.style-headline-3):host(.style-headline-3),:host(.style-headline-4):host(.style-headline-3),:host(.style-headline-5):host(.style-headline-3){font-size:26px;--dx-text-font-size:26px;line-height:36px;--dx-text-line-height:36px}}@media (min-width: 1280px){:host(.style-headline-1):host(.style-headline-3),:host(.style-headline-2):host(.style-headline-3),:host(.style-headline-3):host(.style-headline-3),:host(.style-headline-4):host(.style-headline-3),:host(.style-headline-5):host(.style-headline-3){font-size:30px;--dx-text-font-size:30px;line-height:40px;--dx-text-line-height:40px}}@media (min-width: 0px){:host(.style-headline-1):host(.style-headline-4),:host(.style-headline-2):host(.style-headline-4),:host(.style-headline-3):host(.style-headline-4),:host(.style-headline-4):host(.style-headline-4),:host(.style-headline-5):host(.style-headline-4){font-size:22px;--dx-text-font-size:22px;line-height:32px;--dx-text-line-height:32px}}@media (min-width: 1280px){:host(.style-headline-1):host(.style-headline-4),:host(.style-headline-2):host(.style-headline-4),:host(.style-headline-3):host(.style-headline-4),:host(.style-headline-4):host(.style-headline-4),:host(.style-headline-5):host(.style-headline-4){font-size:26px;--dx-text-font-size:26px;line-height:36px;--dx-text-line-height:36px}}@media (min-width: 0px){:host(.style-headline-1):host(.style-headline-5),:host(.style-headline-2):host(.style-headline-5),:host(.style-headline-3):host(.style-headline-5),:host(.style-headline-4):host(.style-headline-5),:host(.style-headline-5):host(.style-headline-5){font-size:20px;--dx-text-font-size:20px;line-height:28px;--dx-text-line-height:28px}}@media (min-width: 1280px){:host(.style-headline-1):host(.style-headline-5),:host(.style-headline-2):host(.style-headline-5),:host(.style-headline-3):host(.style-headline-5),:host(.style-headline-4):host(.style-headline-5),:host(.style-headline-5):host(.style-headline-5){font-size:22px;--dx-text-font-size:22px;line-height:32px;--dx-text-line-height:32px}}:host(.style-paragraph-standard),:host(.style-paragraph-big){color:var(--dx-text-color, #575757)}@media (min-width: 0px){:host(.style-paragraph-standard):host(.style-paragraph-standard),:host(.style-paragraph-big):host(.style-paragraph-standard){font-size:16px;--dx-text-font-size:16px;line-height:24px;--dx-text-line-height:24px}}@media (min-width: 1280px){:host(.style-paragraph-standard):host(.style-paragraph-standard),:host(.style-paragraph-big):host(.style-paragraph-standard){font-size:18px;--dx-text-font-size:18px;line-height:28px;--dx-text-line-height:28px}}@media (min-width: 0px){:host(.style-paragraph-standard):host(.style-paragraph-big),:host(.style-paragraph-big):host(.style-paragraph-big){font-size:20px;--dx-text-font-size:20px;line-height:28px;--dx-text-line-height:28px}}@media (min-width: 1280px){:host(.style-paragraph-standard):host(.style-paragraph-big),:host(.style-paragraph-big):host(.style-paragraph-big){font-size:22px;--dx-text-font-size:22px;line-height:32px;--dx-text-line-height:32px}}@media (min-width: 0px){:host(.style-infotext-standard):host(.style-infotext-standard),:host(.style-infotext-small):host(.style-infotext-standard){font-size:14px;--dx-text-font-size:14px;line-height:20px;--dx-text-line-height:20px}}@media (min-width: 1280px){:host(.style-infotext-standard):host(.style-infotext-standard),:host(.style-infotext-small):host(.style-infotext-standard){font-size:16px;--dx-text-font-size:16px;line-height:24px;--dx-text-line-height:24px}}@media (min-width: 0px){:host(.style-infotext-standard):host(.style-infotext-small),:host(.style-infotext-small):host(.style-infotext-small){font-size:12px;--dx-text-font-size:12px;line-height:16px;--dx-text-line-height:16px}}@media (min-width: 1280px){:host(.style-infotext-standard):host(.style-infotext-small),:host(.style-infotext-small):host(.style-infotext-small){font-size:14px;--dx-text-font-size:14px;line-height:20px;--dx-text-line-height:20px}}";

const DxText = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.textStyle = TextStyle.INHERIT;
    /**
     * Specifies the style of the text.
     *
     * If the `type` attribute isn't set, a default style will be set, that is based on the
     * parent components.
     *
     * @value auto: The style is determined automatically based on the position the `<dx-text>` in the element tree.
     *
     * @value Headline-1: Shortcut is `h1`
     * @value Headline-2: Shortcut is `h2`
     * @value Headline-3: Shortcut is `h3`
     * @value Headline-4: Shortcut is `h4`
     * @value Headline-5: Shortcut is `h5`
     *
     * @value Paragraph-Big: Shortcut is `pb`
     * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
     * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
     * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
     *
     * @value Paragraph-Standard: Shortcut is `ps`
     * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
     * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
     * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
     *
     * @value Infotext-Standard: Shortcut is `it`
     * @value Infotext-Standard-Italic: Shortcut is `it-italic`
     * @value Infotext-Standard-Bold: Shortcut is `it-bold`
     * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
     *
     * @value Infotext-Small: Shortcut is `its`
     * @value Infotext-Small-Italic: Shortcut is `its-italic`
     * @value Infotext-Small-Bold: Shortcut is `its-bold`
     * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
     *
     * @important
     * @example text-styles
     * @example text-styles-shortcuts
     */
    this.type = "auto";
  }
  typeChanged() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  componentWillLoad() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  disconnectedCallback() {
    this.self.classList.remove(ADD_BULLET_TO_TEXT_CSS_CLASS_NAME); // placed by parent dx-text-list
  }
  computeTextStyleBasedOnTypeProperty() {
    var _a, _b;
    this.textStyle = TextStyle.INHERIT;
    let matchedStyle;
    // Use type property
    if (((_a = this.type) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      matchedStyle = TEXT_STYLE_MAPPING.find((style) => style.names.some((styleName) => this.type.toLowerCase() === styleName.toLowerCase()));
    }
    assert(matchedStyle != null, () => `<dx-text> type has an invalid value: ${this.type}.\n\nPossible values are: ${TEXT_STYLE_MAPPING.map((s) => `\n- ${s.names
      .map((n) => `"${n}"` +
      " (deprecated)".repeat(s.deprecated.includes(n) ? 1 : 0))
      .join(", ")}`)
      .join("")
      .toLowerCase()}\n\n Wird kein type angegeben, wird der Text-Stil automatisch ermittelt.`);
    assert(!((_b = matchedStyle === null || matchedStyle === void 0 ? void 0 : matchedStyle.deprecated) === null || _b === void 0 ? void 0 : _b.includes(this.type)), () => `Found deprecated type ${this.type}! Please use ${matchedStyle.names
      .filter((name) => !matchedStyle.deprecated.includes(name))
      .join(" or ")} instead.`);
    if (matchedStyle != null) {
      this.textStyle = matchedStyle.textStyle;
    }
  }
  getStyleClasses() {
    const currentStyle = this.textStyle.toLowerCase().replace(/_/g, "-");
    const isBold = currentStyle.includes("bold");
    const isItalic = currentStyle.includes("italic");
    // Remove secondary formatting styles from string
    const primaryStyle = currentStyle.replace(/(-?(bold|italic)-?)/g, "");
    const classes = {};
    classes[`style-${primaryStyle}`] = true;
    classes["bold"] = isBold && !isItalic;
    classes["italic"] = isItalic && !isBold;
    classes["bold-italic"] = isBold && isItalic;
    return classes;
  }
  render() {
    const styleClasses = this.getStyleClasses();
    return (h(Host, { class: Object.assign({}, styleClasses), style: generateStyleMap(this.color) }, h("slot", null)));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "type": ["typeChanged"]
  }; }
};
function generateStyleMap(color) {
  if ((color === null || color === void 0 ? void 0 : color.length) > 0) {
    const hexColor = new ColorPalette(true).getColorCode(color);
    return { color: hexColor, "--dx-text-color": hexColor };
  }
  return {};
}
var TextStyle;
(function (TextStyle) {
  TextStyle["INHERIT"] = "INHERIT";
  TextStyle["HEADLINE_1"] = "HEADLINE_1";
  TextStyle["HEADLINE_2"] = "HEADLINE_2";
  TextStyle["HEADLINE_3"] = "HEADLINE_3";
  TextStyle["HEADLINE_4"] = "HEADLINE_4";
  TextStyle["HEADLINE_5"] = "HEADLINE_5";
  TextStyle["PARAGRAPH_STANDARD"] = "PARAGRAPH_STANDARD";
  TextStyle["PARAGRAPH_STANDARD_BOLD"] = "PARAGRAPH_STANDARD_BOLD";
  TextStyle["PARAGRAPH_STANDARD_ITALIC"] = "PARAGRAPH_STANDARD_ITALIC";
  TextStyle["PARAGRAPH_STANDARD_BOLD_ITALIC"] = "PARAGRAPH_STANDARD_BOLD_ITALIC";
  TextStyle["PARAGRAPH_BIG"] = "PARAGRAPH_BIG";
  TextStyle["PARAGRAPH_BIG_BOLD"] = "PARAGRAPH_BIG_BOLD";
  TextStyle["PARAGRAPH_BIG_ITALIC"] = "PARAGRAPH_BIG_ITALIC";
  TextStyle["PARAGRAPH_BIG_BOLD_ITALIC"] = "PARAGRAPH_BIG_BOLD_ITALIC";
  TextStyle["INFOTEXT_STANDARD"] = "INFOTEXT_STANDARD";
  TextStyle["INFOTEXT_STANDARD_BOLD"] = "INFOTEXT_STANDARD_BOLD";
  TextStyle["INFOTEXT_STANDARD_ITALIC"] = "INFOTEXT_STANDARD_ITALIC";
  TextStyle["INFOTEXT_STANDARD_BOLD_ITALIC"] = "INFOTEXT_STANDARD_BOLD_ITALIC";
  TextStyle["INFOTEXT_SMALL"] = "INFOTEXT_SMALL";
  TextStyle["INFOTEXT_SMALL_BOLD"] = "INFOTEXT_SMALL_BOLD";
  TextStyle["INFOTEXT_SMALL_ITALIC"] = "INFOTEXT_SMALL_ITALIC";
  TextStyle["INFOTEXT_SMALL_BOLD_ITALIC"] = "INFOTEXT_SMALL_BOLD_ITALIC";
})(TextStyle || (TextStyle = {}));
/**
 * @value Headline-1: Shortcut is `h1`
 * @value Headline-2: Shortcut is `h2`
 * @value Headline-3: Shortcut is `h3`
 * @value Headline-4: Shortcut is `h4`
 * @value Headline-5: Shortcut is `h5`
 *
 * @value Paragraph-Big: Shortcut is `pb`
 * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
 * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
 * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
 *
 * @value Paragraph-Standard: Shortcut is `ps`
 * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
 * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
 * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
 *
 * @value Infotext-Standard: Shortcut is `it`
 * @value Infotext-Standard-Italic: Shortcut is `it-italic`
 * @value Infotext-Standard-Bold: Shortcut is `it-bold`
 * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
 *
 * @value Infotext-Small: Shortcut is `its`
 * @value Infotext-Small-Italic: Shortcut is `its-italic`
 * @value Infotext-Small-Bold: Shortcut is `its-bold`
 * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
 */
const TEXT_STYLE_MAPPING = [
  {
    names: ["auto"],
    deprecated: [],
    textStyle: TextStyle.INHERIT,
  },
  {
    names: ["Paragraph-Standard", "ps"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD,
  },
  {
    names: ["Paragraph-Standard-Bold", "ps-bold"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_BOLD,
  },
  {
    names: ["Paragraph-Standard-Italic", "ps-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_ITALIC,
  },
  {
    names: ["Paragraph-Standard-Bold-Italic", "ps-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_BOLD_ITALIC,
  },
  {
    names: ["Paragraph-Big", "pb"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG,
  },
  {
    names: ["Paragraph-Big-Bold", "pb-bold"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_BOLD,
  },
  {
    names: ["Paragraph-Big-Italic", "pb-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_ITALIC,
  },
  {
    names: ["Paragraph-Big-Bold-Italic", "pb-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_BOLD_ITALIC,
  },
  {
    names: ["Headline-1", "h1"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_1,
  },
  {
    names: ["Headline-2", "h2"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_2,
  },
  {
    names: ["Headline-3", "h3"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_3,
  },
  {
    names: ["Headline-4", "h4"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_4,
  },
  {
    names: [
      "Headline-5",
      "h5",
    ],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_5,
  },
  {
    names: ["Infotext-Standard", "it"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD,
  },
  {
    names: ["Infotext-Standard-Bold", "it-bold"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_BOLD,
  },
  {
    names: ["Infotext-Standard-Italic", "it-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_ITALIC,
  },
  {
    names: ["Infotext-Standard-Bold-Italic", "it-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_BOLD_ITALIC,
  },
  {
    names: ["Infotext-Small", "its"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL,
  },
  {
    names: ["Infotext-Small-Bold", "its-bold"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_BOLD,
  },
  {
    names: ["Infotext-Small-Italic", "its-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_ITALIC,
  },
  {
    names: ["Infotext-Small-Bold-Italic", "its-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_BOLD_ITALIC,
  },
];
DxText.style = dxTextCss;

export { DxIcon as dx_icon, DxIconPlaceholder as dx_icon_placeholder, DxText as dx_text };
