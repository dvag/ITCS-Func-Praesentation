import { r as registerInstance, f as forceUpdate, h, H as Host, g as getElement } from './index-04c470ea.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';
import { c as assertPropertyValue } from './assert-7fc7463a.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dsTextButtonCss = ":host{display:inline-block;width:max-content;line-height:0;--ds-text-font-weight:500}:host:host([hidden]){display:none !important}:host:host(.disabled){pointer-events:none}:host:host(.unfocusable) button{box-shadow:none}:host:host ::slotted(*){pointer-events:none}:host:host(.color-gold){--ds-text-color:#a7893d;--ds-icon-color:#a7893d}:host:host(.color-gold):host(:hover){--ds-text-color:#957b36;--ds-icon-color:#957b36}:host:host(.color-gold):host(:active){--ds-text-color:#856d30;--ds-icon-color:#856d30}:host:host(.color-gold):host(.disabled){--ds-text-color:#e3dac4;--ds-icon-color:#e3dac4}:host:host(.color-rot){--ds-text-color:#be1413;--ds-icon-color:#be1413}:host:host(.color-rot):host(:hover){--ds-text-color:#99100f;--ds-icon-color:#99100f}:host:host(.color-rot):host(:active){--ds-text-color:#7d0d0d;--ds-icon-color:#7d0d0d}:host:host(.color-rot):host(.disabled){--ds-text-color:#f2d0cf;--ds-icon-color:#f2d0cf}:host.color-gold{--ds-text-color:#a7893d;--ds-icon-color:#a7893d}:host.color-gold:host(:hover){--ds-text-color:#957b36;--ds-icon-color:#957b36}:host.color-gold:host(:active){--ds-text-color:#856d30;--ds-icon-color:#856d30}:host.color-gold:host(.disabled){--ds-text-color:#e3dac4;--ds-icon-color:#e3dac4}:host.color-rot{--ds-text-color:#be1413;--ds-icon-color:#be1413}:host.color-rot:host(:hover){--ds-text-color:#99100f;--ds-icon-color:#99100f}:host.color-rot:host(:active){--ds-text-color:#7d0d0d;--ds-icon-color:#7d0d0d}:host.color-rot:host(.disabled){--ds-text-color:#f2d0cf;--ds-icon-color:#f2d0cf}:host>button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent}:host>button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host(.screensize-small) button{--ds-icon-attr-size:24;--ds-text-font-size:16px;height:24px}:host(.screensize-small) ::slotted(*:not(:last-child)){margin-right:6px}:host(.screensize-large) button{--ds-icon-attr-size:32;--ds-text-font-size:18px;height:32px}:host(.screensize-large) ::slotted(*:not(:last-child)){margin-right:8px}";

const DsTextButton = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Specifies the responsiveness strategy.
     * @value auto: Text size is automatically determined by evaluating the device screen size.
     * @value small: Use text size for small device screens.
     * @value large: Use text size for large device screens.
     * @example screensize
     */
    this.screensize = "auto";
    /**
     * Sets the color of the button.
     * @value gold: Gold color (default value)
     * @value rot: Special case for destructive actions
     * @example color
     */
    this.color = "gold";
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     */
    this.unfocusable = false;
  }
  screensizeChanged() {
    var _a;
    (_a = this.self
      .querySelectorAll("ds-text")) === null || _a === void 0 ? void 0 : _a.forEach((node) => {
      node.screensize = this.screensize;
    });
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this));
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.slotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.slotObserver = new SlotObserver(this.self, "ds-text", (nodes) => {
      nodes.forEach((node) => {
        node.screensize = this.screensize;
      });
    });
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  render() {
    assertPropertyValue("ds-text-button", "screensize", this.screensize, [
      "auto",
      "small",
      "large",
    ]);
    assertPropertyValue("ds-text-button", "color", this.color, ["gold", "rot"]);
    return (h(Host, { class: {
        "screensize-small": this.screensize === "small" ||
          (this.screensize === "auto" && !this.breakpointAware.xl),
        "screensize-large": this.screensize === "large" ||
          (this.screensize === "auto" && this.breakpointAware.xl),
        "color-gold": this.color === "gold",
        "color-rot": this.color === "rot",
        disabled: this.disabled,
        unfocusable: this.unfocusable,
      } }, h("button", { type: "button", ref: (el) => (this.buttonElement = el), id: ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabIndex: this.unfocusable ? -1 : 0 }, h("slot", null))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "screensize": ["screensizeChanged"]
  }; }
};
DsTextButton.style = dsTextButtonCss;

export { DsTextButton as ds_text_button };
