import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { A as ADD_BULLET_TO_TEXT_CSS_CLASS_NAME } from './constants-3bb4a4ce.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import './query-util-02753b43.js';

const dsTextListCss = ":host{display:block;padding-left:var(--ds-text-list-bullet-width);--ds-text-list-bullet-width:4px;--ds-text-line-height:calc(\n    var(--ds-text-font-size) + var(--ds-text-font-size) * 0.4\n  )}:host:host([hidden]){display:none !important}:host .list{display:flex;flex-direction:column}:host .list ::slotted(ds-text){margin-left:var(--ds-text-list-bullet-width);min-height:calc(var(--ds-text-font-size) * 1.3);margin-top:3px;margin-bottom:3px}:host:host(.screensize-small){--ds-text-font-size:16px}:host:host(.screensize-medium){--ds-text-font-size:18px}:host:host(.screensize-large){--ds-text-font-size:20px}:host .whitespace-render{position:fixed;top:-10000px}";

const DsTextList = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.bulletWidth = 4;
    /**
     * Defines the style of the text, that is propagated to the `<ds-text>` child elements,
     * if they have `type` attribute set to `"auto"`.
     *
     * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
     * @value Ueberschrift-1: Shortcut for `u1`
     * @value Ueberschrift-2: Shortcut for `u2`
     * @value Ueberschrift-3: Shortcut for `u3`
     * @value Ueberschrift-4: Shortcut for `u4`
     * @value Ueberschrift-5: Shortcut for `u5`
     * @value Kapitelueberschrift: Shortcut for `ku`
     * @value Fliesstext-Standard: Shortcut for `ft`
     * @value Fliesstext-Fett: Shortcut for `ftf`
     * @value Fliesstext-Gross: Shortcut for `ftg`
     * @value Infotext-Standard: Shortcut for `it`
     * @value Infotext-Klein: Shortcut for `itk`
     * @important
     * @example type
     */
    this.type = "auto";
  }
  onTypeChange() {
    this.updateTextTypes();
  }
  connectedCallback() {
    this.bulletResizeObserver = new ResizeObserver(() => {
      var _a;
      this.bulletWidth = Math.round((_a = this.bulletWidthReference) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width);
    });
    this.updateTextTypes();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.bulletResizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  updateTextTypes() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this.slotObserver = new SlotObserver(this.self, "*", (nodes) => {
      nodes.forEach((node) => {
        if (node.parentElement === this.self) {
          node.classList.add(ADD_BULLET_TO_TEXT_CSS_CLASS_NAME);
          if (["ds-text", "ds-text-list"].includes(node.tagName.toLowerCase()) &&
            node["type"] ===
              "auto") {
            node["type"] =
              this.type;
          }
        }
      });
      if (this.bulletWidthReference != null) {
        this.bulletResizeObserver.observe(this.bulletWidthReference);
      }
    });
  }
  render() {
    return (h(Host, { style: {
        "--ds-text-list-bullet-width": this.bulletWidth + "px",
      } }, h("div", { class: {
        list: true,
      } }, h("slot", null)), h("ds-text", { ref: (ref) => (this.bulletWidthReference = ref), type: this.type, class: "whitespace-render" }, "\u25CF")));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "type": ["onTypeChange"]
  }; }
};
DsTextList.style = dsTextListCss;

export { DsTextList as ds_text_list };
