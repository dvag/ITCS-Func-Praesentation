import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import './value-store-f4663db1.js';

const dxNotificationBarCss = ":host{display:block;background-color:#f7f7f7}:host:host([hidden]){display:none !important}.outer-container{--dx-page-padding:16px;max-width:1460px;padding:40px var(--dx-page-padding)}@media (min-width: 476px){.outer-container{--dx-page-padding:24px}}@media (min-width: 760px){.outer-container{--dx-page-padding:32px}}@media (min-width: 1280px){.outer-container{--dx-page-padding:40px}}@media (min-width: 1460px){.outer-container{margin:auto}}.outer-container .notification-container{display:flex;flex-direction:column-reverse;background-color:white;border:1px solid #d6d6d6;padding:24px}@media (min-width: 476px){.outer-container .notification-container{flex-direction:row}}.outer-container .notification-container .content{flex-grow:1;margin-right:16px}.outer-container .notification-container .close-button-container{display:flex;justify-content:flex-end}@media (min-width: 476px){.outer-container .notification-container .close-button-container{align-items:flex-start;margin:0}}.outer-container .notification-container .close-button-container .close-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;padding:0}.outer-container .notification-container .close-button-container .close-button[disabled]{cursor:unset}";

const DxNotificationBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.closeNotification = createEvent(this, "closeNotification", 7);
    this.closedByUser = false;
    /**
     * Shows or hides the notification.
     * @value true: Notification is displayed.
     * @value false: Notification is hidden.
     * @example header-integration
     */
    this.visible = true;
    this.internalVisiblity = false;
  }
  onVisibileChange() {
    this.internalVisiblity = this.visible;
  }
  componentWillLoad() {
    if (this.visible) {
      this.openNotificationDelayed();
    }
  }
  openNotificationDelayed() {
    setTimeout(() => {
      this.internalVisiblity = true;
    }, 300);
  }
  userClosesNotification() {
    this.closedByUser = true;
    this.visible = false;
  }
  emitCloseEvent() {
    this.closeNotification.emit();
  }
  handleGrowBoxStateChanged(e) {
    if (e.detail !== "closed") {
      return;
    }
    if (!this.visible && this.closedByUser) {
      this.emitCloseEvent();
    }
    this.closedByUser = false;
  }
  renderCloseButton() {
    return (h("div", { class: "close-button-container" }, h("button", { id: ElementIdGenerator.createId(this.self, "close-button"), class: "close-button", onClick: () => this.userClosesNotification() }, h("dx-icon", { icon: "schliessen", size: 24, color: "default" }))));
  }
  render() {
    return (h(Host, null, h("dx-simple-grow-box", { open: this.internalVisiblity, onGrowBoxStateChange: (e) => this.handleGrowBoxStateChanged(e), style: {
        "--dx-simple-grow-box-animation-duration": `${ANIMATION_DURATION}ms`,
      } }, h("div", { class: { "outer-container": true, open: this.internalVisiblity } }, h("div", { class: "notification-container" }, h("div", { class: "content" }, h("slot", { name: "content" })), this.renderCloseButton())))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "visible": ["onVisibileChange"]
  }; }
};
const ANIMATION_DURATION = 500;
DxNotificationBar.style = dxNotificationBarCss;

export { DxNotificationBar as dx_notification_bar };
