import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { G as GridBreakpoint, g as getBreakpointMinWidth } from './grid-models-f7973aae.js';
import { a as assert } from './assert-7fc7463a.js';

const dxHeroImageCss = ":host{display:block;overflow:hidden;line-height:0}:host:host([hidden]){display:none !important}:host img{width:100%;object-fit:cover;object-position:0 0;height:100%}";

const DxHeroImage = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  renderSource(breakpoint, url, fallbackUrl) {
    if (url && url !== fallbackUrl) {
      return (h("source", { media: `(min-width: ${getBreakpointMinWidth(breakpoint)}px)`, srcSet: url }));
    }
  }
  render() {
    const defaultSrc = this.mq1 || this.mq2 || this.mq3 || this.mq4 || this.mq5;
    assert((defaultSrc === null || defaultSrc === void 0 ? void 0 : defaultSrc.length) > 0, () => "You have to define at least one image url!");
    return (h(Host, null, h("picture", null, [
      this.renderSource(GridBreakpoint.MQ5, this.mq5, defaultSrc),
      this.renderSource(GridBreakpoint.MQ4, this.mq4, defaultSrc),
      this.renderSource(GridBreakpoint.MQ3, this.mq3, defaultSrc),
      this.renderSource(GridBreakpoint.MQ2, this.mq2, defaultSrc),
    ], h("img", { src: defaultSrc, alt: "image" }))));
  }
  get self() { return getElement(this); }
};
DxHeroImage.style = dxHeroImageCss;

export { DxHeroImage as dx_hero_image };
