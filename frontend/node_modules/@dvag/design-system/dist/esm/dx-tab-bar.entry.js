import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-04c470ea.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { t as tagOf, j as getInnerActiveElement } from './misc-util-d3b69f2c.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dxTabBarCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .tab-bar{position:relative;height:64px;--dx-dropdown-selected-font-weight:700;display:flex}:host .tab-bar.tab-mode{overflow:hidden}:host .tab-bar .spacer{width:4px;flex-shrink:0;flex-grow:0;background-color:transparent;box-sizing:border-box;height:64px}:host .tab-bar .spacer.expandable{flex-grow:1}:host .tab-bar .spacer.page-padding{--dx-page-padding:16px;width:var(--dx-page-padding)}@media (min-width: 476px){:host .tab-bar .spacer.page-padding{--dx-page-padding:24px}}@media (min-width: 760px){:host .tab-bar .spacer.page-padding{--dx-page-padding:32px}}@media (min-width: 1280px){:host .tab-bar .spacer.page-padding{--dx-page-padding:40px}}:host .tab-bar .dropdown-container{display:flex;align-items:flex-end}:host .tab-bar .dropdown-container dx-dropdown{flex:1}:host .tab-bar .scroll-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;padding:0;flex:0 0 0;height:64px;transition:flex 200ms ease-in-out;background-color:transparent;pointer-events:none;--dx-icon-color:#337a96;overflow:hidden}:host .tab-bar .scroll-button[disabled]{cursor:unset}:host .tab-bar .scroll-button.icon-right{flex-direction:row-reverse}:host .tab-bar .scroll-button:focus-visible{outline:2px solid #004763}:host .tab-bar .scroll-button.show{flex:0 0 64px;pointer-events:all}@media not all and (pointer: coarse){:host .tab-bar .scroll-button.show:hover{background-color:rgba(0, 0, 0, 0.03);--dx-icon-color:#00587c}}:host .tab-bar .scroll-button.show:active{background-color:rgba(0, 0, 0, 0.07);--dx-icon-color:#004763}:host .tab-bar .scroll-button.left{flex-direction:row}:host .tab-bar .scroll-button.right{flex-direction:row-reverse}:host .tab-bar .clip-container{overflow:hidden;flex:1;border-bottom:var(--dx-container-border-bottom, 1px solid #d6d6d6)}:host .tab-bar .clip-container .scroll-container{overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;height:64px;position:relative;left:-64px;transition:left 200ms ease-in-out 0s, width 200ms ease-in-out 0s;width:calc(100% + 128px)}:host .tab-bar .clip-container .scroll-container::-webkit-scrollbar{display:none}:host .tab-bar .clip-container .scroll-container.left-button-hidden{left:0;width:calc(100% + 64px)}:host .tab-bar .clip-container .scroll-container.right-button-hidden{width:calc(100% + 64px)}:host .tab-bar .clip-container .scroll-container.both-buttons-hidden{left:0;width:100%}:host .tab-bar .clip-container .scroll-container .page-container{width:max-content}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container{display:flex;align-items:flex-start}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item{height:64px;flex-grow:0;flex-shrink:0;box-sizing:border-box;position:relative}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .selected-state-line-container .selected-state-line{position:relative;width:100%;height:3px;bottom:3px;background-color:#c8aa22;opacity:0;pointer-events:none;transition:opacity 300ms ease-in-out}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .selected-state-line-container .selected-state-line.selected{opacity:1}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;background-color:transparent;box-sizing:border-box;position:relative;transition:all 0.3s ease-in-out;padding:20px 16px 19px 16px}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button[disabled]{cursor:unset}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button.icon-right{flex-direction:row-reverse}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button:focus-visible{outline:2px solid #004763}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button:not(.selected){--dx-text-color:#337a96;border-color:#d6d6d6 !important;border-bottom-width:1px}@media not all and (pointer: coarse){:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button:not(.selected):hover{--dx-text-color:#00587c;background-color:rgba(0, 0, 0, 0.03)}}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button:not(.selected):active{--dx-text-color:#004763;background-color:rgba(0, 0, 0, 0.07)}@media (min-width: 1280px){:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button{padding:18px 16px 17px 16px}}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button.selected{--dx-text-color:#2b2b2b;pointer-events:none;cursor:default}:host .tab-bar .clip-container .scroll-container .page-container .tab-bar-items-container .bar-item .bar-item-button:focus-visible{outline:2px solid #004763;outline-offset:2px}:host .tab-page-content .page-container{padding:24px 0}:host(.parent-is-card){--dx-container-border-bottom:none}:host(.parent-is-card) .tab-page-content{border:1px solid #d6d6d6}@media (min-width: 0px){:host(.parent-is-card) .tab-page-content{border-top:0}}@media (min-width: 760px){:host(.parent-is-card) .tab-page-content{border-top:1px solid #d6d6d6}}:host(.parent-is-card) .tab-bar{position:relative;top:1px}:host(.parent-is-card) .tab-bar .bar-item{border-left:1px solid transparent;border-right:1px solid transparent;border-top:1px solid transparent}:host(.parent-is-card) .tab-bar .bar-item.selected{background-color:white}:host(.parent-is-card) .tab-bar .bar-item.selected{border-left:1px solid #d6d6d6;border-right:1px solid #d6d6d6;border-top:1px solid #d6d6d6}:host(.parent-is-card) .tab-bar .bar-item .selected-state-line-container{padding:0 8px 0 8px}:host(.parent-is-card) .tab-bar .tab-dropdown{--dx-tab-dropdown-golden-line-container-padding-right:16px;--dx-tab-dropdown-golden-line-container-padding-left:16px;--dx-tab-dropdown-current-value-border-top:1px solid #d6d6d6;--dx-tab-dropdown-current-value-border-left:1px solid #d6d6d6;--dx-tab-dropdown-current-value-border-right:1px solid #d6d6d6}";

const DxTabBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tabChange = createEvent(this, "tabChange", 7);
    this.tabPages = [];
    this.viewMode = "tab";
    this.showLeftButton = false;
    this.showRightButton = false;
    this.parentIsCard = false;
  }
  showChanged() {
    this.updateSlotVisibility();
  }
  connectedCallback() {
    this.initializeObservers();
    this.updateViewMode();
    this.parentIsCard = tagOf(this.self.parentElement) === "dx-card";
  }
  disconnectedCallback() {
    var _a, _b, _c;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.slotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.resizeObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
  }
  componentShouldUpdate(_, __, propName) {
    if (propName === "viewMode") {
      const innerActiveElement = getInnerActiveElement(this.self);
      innerActiveElement === null || innerActiveElement === void 0 ? void 0 : innerActiveElement.blur();
    }
    return true;
  }
  initializeObservers() {
    this.breakpointAware = new BreakpointAware(() => {
      this.updateViewMode();
    }, true);
    this.slotObserver = new SlotObserver(this.self, ":scope > dx-tab-page", async (nodes) => {
      var _a;
      await this.collectTabs(nodes);
      if (this.selected == undefined || this.selected === "") {
        this.selected = (_a = this.tabPages[0]) === null || _a === void 0 ? void 0 : _a.value;
      }
      this.updateSlotVisibility();
    });
    this.resizeObserver = new ResizeObserver(() => {
      this.checkShowButtons(this.scrollContainer);
    });
  }
  async collectTabs(nodes) {
    this.tabPages = await Promise.all(nodes.map((node) => {
      return node.toTabPage();
    }));
  }
  updateSlotVisibility() {
    this.tabPages.forEach((tabPage) => {
      const isVisible = this.selected === tabPage.value;
      tabPage.element.style.display = isVisible ? "block" : "none";
    });
  }
  updateViewMode() {
    this.viewMode =
      this.breakpointAware.mq1 || this.breakpointAware.mq2 ? "dropdown" : "tab";
  }
  setActiveTab(tabPage) {
    if (this.selected !== tabPage.value) {
      this.selected = tabPage.value;
      this.tabChange.emit(tabPage.value);
    }
  }
  getLabel(selected) {
    var _a;
    return (_a = this.tabPages.find((tabPage) => tabPage.value === selected)) === null || _a === void 0 ? void 0 : _a.label;
  }
  checkShowButtons(scrollContainer) {
    if (scrollContainer == null) {
      return;
    }
    this.showLeftButton = scrollContainer.scrollLeft - SCROLL_OFFSET_BIAS > 0;
    this.showRightButton =
      scrollContainer.offsetWidth +
        scrollContainer.scrollLeft +
        SCROLL_OFFSET_BIAS <
        scrollContainer.scrollWidth;
  }
  onScrollTabBar(e) {
    this.checkShowButtons(e.target);
  }
  get scrollContainer() {
    return this.self.shadowRoot.querySelector(".scroll-container");
  }
  onScrollButtonClicked(position) {
    const sign = position === "left" ? -1 : 1;
    const scrollContainer = this.scrollContainer;
    let scrollLeftOffset = SCROLL_STEP_IN_PX * sign;
    const newScrollLeft = scrollContainer.scrollLeft + scrollLeftOffset;
    if (newScrollLeft < SCROLL_OFFSET_BIAS) {
      scrollLeftOffset = -scrollContainer.scrollLeft;
    }
    else if (newScrollLeft >
      scrollContainer.scrollWidth -
        scrollContainer.offsetWidth -
        SCROLL_OFFSET_BIAS) {
      scrollLeftOffset =
        scrollContainer.scrollWidth - scrollContainer.offsetWidth;
    }
    this.scrollContainer.scrollBy({
      left: scrollLeftOffset,
      behavior: "smooth",
    });
  }
  renderBarItem(tabPage) {
    const isSelected = this.selected === tabPage.value;
    return (h("div", { class: { "bar-item": true, selected: isSelected } }, h("button", { id: ElementIdGenerator.createId(this.self, `tab-${tabPage.value}`), key: tabPage.value, class: {
        "bar-item-button": true,
        selected: isSelected,
      }, disabled: isSelected, onClick: (e) => {
        this.setActiveTab(tabPage);
        scrollElementIntoView(e.target);
      } }, h("dx-text", { type: "ps", class: "label" }, tabPage.label)), h("div", { class: { "selected-state-line-container": true } }, h("div", { class: { "selected-state-line": true, selected: isSelected } }))));
  }
  renderScrollButton(position) {
    return (h("button", { id: ElementIdGenerator.createId(this.self, `scroll-button-${position}`), class: {
        "scroll-button": true,
        left: position === "left",
        right: position === "right",
        show: (this.showLeftButton && position === "left") ||
          (this.showRightButton && position === "right"),
      }, onClick: () => this.onScrollButtonClicked(position) }, h("dx-icon", { icon: `chevron-${position === "left" ? "links" : "rechts"}`, size: 24 })));
  }
  renderTabBarItems() {
    return (h("div", { class: "clip-container", onScroll: (e) => {
        // If the clip-container is the one emitting the scroll event we want to prevent it.
        if (e.target.classList.contains("clip-container")) {
          // Fixes implicit scroll of clip-container when calling scrollIntoView
          // This bug could also be resolved by using overflow: clip instead of overflow: hidden for the clip-container,
          // but this feature is not implemented for Safari Browsers.
          e.preventDefault();
          e.target.scrollLeft = 0;
        }
      } }, h("div", { class: {
        "scroll-container": true,
        "right-button-hidden": !this.showRightButton && this.showLeftButton,
        "left-button-hidden": !this.showLeftButton && this.showRightButton,
        "both-buttons-hidden": !this.showLeftButton && !this.showRightButton,
      }, onScroll: (e) => this.onScrollTabBar(e) }, h("div", { class: "page-container", ref: (ref) => {
        if (ref != null) {
          this.resizeObserver.observe(ref);
        }
      } }, h("div", { class: "tab-bar-items-container" }, this.tabPages.map((tabPage, index) => {
      return [
        index !== 0 ? h("div", { class: { spacer: true } }) : null,
        this.renderBarItem(tabPage),
      ];
    }))))));
  }
  renderTabs() {
    return (h(Fragment, null, this.renderScrollButton("left"), this.renderTabBarItems(), this.renderScrollButton("right")));
  }
  renderDropdown() {
    return (h("dx-tab-dropdown", { class: "tab-dropdown", label: this.getLabel(this.selected), key: tabPageArrayHash(this.tabPages), onValueComplete: (e) => {
        this.selected = e.detail.value;
      } }, this.tabPages.map((tabPage) => (h("dx-dropdown-option", { label: tabPage.label, value: tabPage.value })))));
  }
  renderTabBar() {
    return (h("div", { class: {
        "tab-bar": true,
        "tab-mode": this.viewMode === "tab",
      } }, this.viewMode === "tab" ? this.renderTabs() : null, this.viewMode === "dropdown" ? this.renderDropdown() : null));
  }
  render() {
    return (h(Host, { class: {
        "parent-is-card": this.parentIsCard,
      } }, this.renderTabBar(), h("div", { class: "tab-page-content" }, h("div", { class: "page-container" }, h("slot", null)))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "selected": ["showChanged"]
  }; }
};
const SCROLL_STEP_IN_PX = 160;
const SCROLL_OFFSET_BIAS = 32;
function tabPageArrayHash(tabPages) {
  return tabPages.map((tabPage) => tabPage.label + tabPage.value).join(",");
}
function scrollElementIntoView(element) {
  element === null || element === void 0 ? void 0 : element.scrollIntoView({
    behavior: "smooth",
    inline: "center",
    block: "nearest",
  });
}
DxTabBar.style = dxTabBarCss;

export { DxTabBar as dx_tab_bar };
