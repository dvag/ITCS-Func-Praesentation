import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { a as assert } from './assert-7fc7463a.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { c as createMetaComponentsSlotObserver } from './slot-observer-9196738e.js';
import { f as findDuplicatedValues } from './value-0745991d.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dxTabDropdownCss = ":host{outline:none;width:100%}:host .list-flyout{outline:none}:host .list-flyout .base-component{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;width:100%;display:flex;user-select:none;cursor:pointer;padding:0}:host .list-flyout .base-component[disabled]{cursor:unset}:host .list-flyout .base-component.icon-right{flex-direction:row-reverse}:host .list-flyout .base-component:focus-visible{outline:2px solid #004763}:host .list-flyout .base-component .current-value{width:100%;display:flex;flex:1;align-items:center;align-self:stretch;padding-left:16px;position:relative;border-left:var(--dx-tab-dropdown-current-value-border-left, none);border-right:var(--dx-tab-dropdown-current-value-border-right, none);border-top:var(--dx-tab-dropdown-current-value-border-top, none)}:host .list-flyout .base-component .current-value .golden-line-container{position:absolute;bottom:0;left:0;width:100%;padding-left:var(--dx-tab-dropdown-golden-line-container-padding-left, 0);padding-right:var(--dx-tab-dropdown-golden-line-container-padding-right, 0);box-sizing:border-box}:host .list-flyout .base-component .current-value .golden-line-container .golden-line{position:relative;height:3px;width:100%;background-color:#c8aa22}:host .list-flyout .base-component .open-list-button{flex:0 0 64px;border-bottom:var(--dx-tab-dropdown-open-list-button-border-bottom, 1px solid #d6d6d6);height:64px;display:flex;align-items:center;justify-content:center}:host .list-flyout .base-component .open-list-button.list-open{background-color:rgba(0, 0, 0, 0.07) !important}@media not all and (pointer: coarse){:host .list-flyout .base-component:hover>.open-list-button{background-color:rgba(0, 0, 0, 0.03)}}:host:host(:active) .list-flyout .base-component .open-list-button{background-color:rgba(0, 0, 0, 0.07)}";

const DxTabDropdown = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueComplete = createEvent(this, "valueComplete", 7);
    this.internalOpen = false;
  }
  onItemSelectionChanged(e) {
    const option = this.options.find((option) => { var _a, _b; return option.value === ((_b = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b[0]); });
    this.selectedOption = option;
  }
  connectedCallback() {
    this.optionsObserver =
      createMetaComponentsSlotObserver(this.self, "dx-dropdown-option", async (nodes) => {
        await this.collectOptions(nodes);
        const duplicates = findDuplicatedValues(this.options.filter((option) => !option.isSeparator));
        assert(duplicates.length == 0, () => `It is not allowed for multiple 'dx-dropdown-option' elements to share the same value!\nFollowing duplicated value were found: ${duplicates.join()}`, this.self);
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.optionsObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  async collectOptions(nodes) {
    this.options = await Promise.all(nodes.map((node) => {
      return node.toOption();
    }));
  }
  /**
   * Delegates keyboard events to the underlying list element.
   * The list element itself cannot receive keyboard events because it has a tabIndex of -1.
   */
  onInputKeyDown(event) {
    const listFlyoutElement = this.self.shadowRoot.querySelector("dx-list-flyout");
    if (event.target === listFlyoutElement ||
      event.composedPath().includes(listFlyoutElement)) {
      return;
    }
    if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      event.preventDefault();
    }
    if (this.internalOpen) {
      listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.dispatchEvent(new event.constructor(event.type, event));
    }
    else if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      this.internalOpen = true;
    }
  }
  onInputKeyUp(e) {
    if (["Enter", "Escape"].includes(e.code)) {
      this.closeListAndEmitSelectedOption(this.selectedOption);
    }
  }
  closeListAndEmitSelectedOption(selectedOption) {
    this.internalOpen = false;
    this.valueComplete.emit(selectedOption);
    this.label = selectedOption.label;
  }
  renderItemList() {
    var _a;
    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option, index) => {
      return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `list-item-${index}`), type: "selectable", value: option.value, label: option.label, icon: option.icon, onClick: () => this.closeListAndEmitSelectedOption(option), selected: this.selectedOption === option }));
    });
  }
  renderBaseSlot() {
    return (h("button", { onClick: () => (this.internalOpen = !this.internalOpen), slot: "base", class: { "base-component": true } }, this.renderCurrentValue(), this.renderOpenListButton()));
  }
  renderOpenListButton() {
    return (h("div", { class: {
        "open-list-button": true,
        "list-open": this.internalOpen,
      } }, h("dx-chevron", { class: "chevron", directiontop: this.internalOpen })));
  }
  renderCurrentValue() {
    return (h("div", { class: { "current-value": true } }, h("dx-text", null, this.label), h("div", { class: "golden-line-container" }, h("div", { class: "golden-line" }))));
  }
  render() {
    return (h(Host, { onKeyDown: (e) => this.onInputKeyDown(e), onKeyUp: (e) => this.onInputKeyUp(e), tabIndex: 0 }, h("dx-list-flyout", { class: "list-flyout", itemsvisible: 5.5, size: "m", selectionmode: "single", open: this.internalOpen }, this.renderBaseSlot(), this.renderItemList())));
  }
  get self() { return getElement(this); }
};
DxTabDropdown.style = dxTabDropdownCss;

export { DxTabDropdown as dx_tab_dropdown };
