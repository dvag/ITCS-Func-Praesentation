import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';

const dsFormLayoutCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .layout{display:grid;column-gap:24px;row-gap:8px;align-items:baseline}:host .column .label{margin-bottom:8px}:host .column *{width:100%}";

const DsFormLayout = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Amount of white space (%) on the right side.
     * Has no impact if `size` is set to `xl`.
     */
    this.whitespace = 10;
    /**
     * Amount of space (%) of interaction area. From this value the whitespace value is subtracted.
     * Has no impact if `size` is `l` or `xl`.
     */
    this.interaction = 35;
  }
  onSizeChange() {
    this.internalSize = this.computeInternalSize();
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => {
      this.internalSize = this.computeInternalSize();
    });
  }
  disconnectedCallback() {
    this.breakpointAware.disconnect();
  }
  componentWillLoad() {
    this.internalSize = this.computeInternalSize();
  }
  computeInternalSize() {
    if (this.size === "s" && this.breakpointAware.xs) {
      return "l";
    }
    return this.size;
  }
  getGridColumn(num, unit) {
    return num > 0 ? `${num}${unit}` : "";
  }
  buildCssGridStyle() {
    if (this.internalSize === "s") {
      return {
        "grid-template-columns": `${this.getGridColumn(100 - this.interaction, "fr")} ${this.getGridColumn(this.interaction, "fr")} ${this.getGridColumn(this.whitespace, "%")}`,
      };
    }
    else if (this.internalSize === "l") {
      return {
        "grid-template-columns": `1fr ${this.getGridColumn(this.whitespace, "%")}`,
      };
    }
    else if (this.internalSize === "xl") {
      return {
        "grid-template-columns": "1fr",
      };
    }
  }
  renderSlotDependantOfSize() {
    const namedSlots = [
      h("div", { class: "label" }, this.renderLabelSlot()),
      h("div", { class: "interaction" }, this.renderInteractionSlot()),
    ];
    if (this.internalSize === "l") {
      return h("div", { class: "column" }, namedSlots);
    }
    return namedSlots;
  }
  renderInteractionSlot() {
    var _a, _b;
    const usesDsInfoInsideInteractionSlot = ((_b = (_a = this.self
      .querySelector('*[slot="interaction"]')) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === "ds-info";
    const size = this.computeInternalSize();
    if (!usesDsInfoInsideInteractionSlot && size !== "xl") {
      return (h("ds-info", { hidebutton: true }, h("slot", { name: "interaction" })));
    }
    else {
      return h("slot", { name: "interaction" });
    }
  }
  renderLabelSlot() {
    var _a, _b;
    const usesDsInfoInsideLabelSlot = ((_b = (_a = this.self.querySelector('*[slot="label"]')) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) ===
      "ds-info";
    const size = this.computeInternalSize();
    if (!usesDsInfoInsideLabelSlot && size === "l") {
      return (h("ds-info", { hidebutton: true }, h("slot", { name: "label" })));
    }
    else {
      return h("slot", { name: "label" });
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "layout", style: Object.assign({}, this.buildCssGridStyle()) }, this.renderSlotDependantOfSize())));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "size": ["onSizeChange"]
  }; }
};
DsFormLayout.style = dsFormLayoutCss;

export { DsFormLayout as ds_form_layout };
