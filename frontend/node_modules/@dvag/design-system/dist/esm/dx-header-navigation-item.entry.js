import { r as registerInstance, c as createEvent, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId } from './element-id-handling-bb37154e.js';
import { c as createMetaComponentsSlotObserver } from './slot-observer-9196738e.js';
import { s as sortByNavigationItemSize } from './navigation.util-687f2333.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const DxHeaderNavigationItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.interaction = createEvent(this, "interaction", 7);
    this.internalChangeSidebarVisibility = createEvent(this, "internalChangeSidebarVisibility", 7);
    /**
     * The size of the dropdown.
     *
     * @value m: A medium sized navigation item is displayed.
     * @value l: A large sized navigation item is displayed.
     */
    this.size = "l";
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, ":scope > dx-header-navigation-item", (nodes) => {
        this.children = nodes.sort(sortByNavigationItemSize);
      });
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  disconnectedCallback() {
    this.slotObserver.disconnect();
  }
  /**
   * @internal
   *
   * Inserts a navigationItem recursively into the tree.
   * @param belongsToPage: The page the navigation item belongs to
   * @param pageIndexCount: An iterating pageIndex reference which
   */
  async insertNavigationTree(belongsToPage, pageIndexCount) {
    if (belongsToPage == null) {
      return;
    }
    const navigationItem = this.createNavigationItem();
    // If we have any children we create a new page for them and recursively add new navigation pages and items.
    if (this.children.length > 0) {
      const refersToPage = {
        pageIndex: pageIndexCount.value,
        previousPage: belongsToPage,
        navigationItems: [],
      };
      navigationItem.refersToPage = refersToPage;
      // The pageIndexCount is a reference which tracks the recursive count. If we add a new navigation page we have to increment the count.
      pageIndexCount.value += 1;
      for (const child of this.children) {
        await child.insertNavigationTree(refersToPage, pageIndexCount);
      }
    }
    belongsToPage.navigationItems.push(navigationItem);
  }
  createNavigationItem() {
    var _a;
    const value = (_a = this.value) !== null && _a !== void 0 ? _a : this.label;
    return {
      id: this.self.id,
      size: this.size,
      label: this.label,
      value: value,
      refersToPage: null,
      interact: () => this.interaction.emit({
        value: value,
        closeSidebar: () => {
          this.internalChangeSidebarVisibility.emit(false);
        },
      }),
    };
  }
  get self() { return getElement(this); }
};

export { DxHeaderNavigationItem as dx_header_navigation_item };
