import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { i as isSlotDefined } from './render-util-1dee6655.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dxInfoCss = ":host{display:flex;align-items:baseline;position:relative;top:0;left:0}:host:host([hidden]){display:none !important}:host:host(.center-content){align-items:center}:host .info-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;flex-shrink:0;cursor:pointer}:host .info-button[disabled]{cursor:unset}:host .info-button.icon-right{flex-direction:row-reverse}:host .info-button:focus-visible{outline:2px solid #004763}:host .info-button.hidden{pointer-events:none;visibility:hidden}:host .content{height:max-content}:host(.full-width){width:100%}:host(.full-width) .content{flex-grow:1;min-width:0}";

const DxInfo = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Defines the width the info element gets.
     * @value max-width: The info element takes the available space independant of the width of it's inner element.
     * @value content: The info button is displayed right next to the content.
     * @important
     *
     * @example example
     */
    this.size = "max-width";
    /**
     * Defines whether the info button is visible or hidden.
     *
     * @value true: The info button is not visible.
     * @value false: The info button is visible.
     * @example hidebutton
     */
    this.hidebutton = false;
  }
  /**
   * Sets a modal for the info element.
   * This function has no effect when there is a slotted modal within this element.
   *
   * @example remote-modal
   */
  async setModal(modal) {
    if (isSlotDefined(this.self, "modal")) {
      console.warn("'setModal' does not have an effect.\nThere is already a slotted modal within this info element!\n", this.self);
      return;
    }
    this.modal = modal;
  }
  componentWillLoad() {
    this.contentResizeObserver = new ResizeObserver(() => {
      requestAnimationFrame(() => {
        this.centerContentAndInfo = this.content.offsetHeight < 40;
      });
    });
  }
  connectedCallback() {
    this.modalObserver = new SlotObserver(this.self, "dx-modal", (nodes) => {
      if (nodes.length > 0) {
        this.modal = nodes[0];
      }
    });
  }
  componentWillRender() {
    if (!this.hidebutton) {
      verifyElementId(this.self);
    }
  }
  disconnectedCallback() {
    this.modalObserver.disconnect();
    this.contentResizeObserver.disconnect();
  }
  setContent(ref) {
    var _a, _b;
    if (ref === this.content) {
      return;
    }
    if (this.content != null) {
      (_a = this.contentResizeObserver) === null || _a === void 0 ? void 0 : _a.unobserve(this.content);
    }
    this.content = ref;
    (_b = this.contentResizeObserver) === null || _b === void 0 ? void 0 : _b.observe(this.content);
  }
  openModal() {
    if (this.modal != null) {
      this.modal.visible = true;
    }
  }
  render() {
    return (h(Host, { class: {
        "full-width": this.size === "max-width",
        "content-width": this.size === "content",
        "center-content": this.centerContentAndInfo,
      } }, h("div", { class: "content", ref: (ref) => this.setContent(ref) }, h("slot", null)), h("dx-button", { id: ElementIdGenerator.createId(this.self, "info-icon"), type: "text", icon: "information", onClick: () => this.openModal(), class: {
        "info-button": true,
        hidden: this.hidebutton,
      } }), h("slot", { name: "modal" })));
  }
  get self() { return getElement(this); }
};
DxInfo.style = dxInfoCss;

export { DxInfo as dx_info };
