import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { a as isSlotUndefined } from './render-util-1dee6655.js';

const dxScrollableShadowCss = ".sc-dx-scrollable-shadow-h{display:block;position:relative}.sc-dx-scrollable-shadow-h([hidden]).sc-dx-scrollable-shadow-h{display:none !important}.sc-dx-scrollable-shadow-h .shadow.sc-dx-scrollable-shadow{position:absolute;height:3px;background-color:rgba(0, 0, 0, 0.03);left:0;width:100%;transition:opacity 200ms ease-in-out;opacity:0;z-index:1}.sc-dx-scrollable-shadow-h .shadow.top.sc-dx-scrollable-shadow{top:0}.sc-dx-scrollable-shadow-h .shadow.top.show-border.sc-dx-scrollable-shadow{border-top:1px solid #d6d6d6}.sc-dx-scrollable-shadow-h .shadow.bottom.sc-dx-scrollable-shadow{bottom:0}.sc-dx-scrollable-shadow-h .shadow.bottom.show-border.sc-dx-scrollable-shadow{border-bottom:1px solid #d6d6d6}.sc-dx-scrollable-shadow-h .shadow.visible.sc-dx-scrollable-shadow{opacity:1}";

const DxScrollableShadow = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.showborders = false;
    this.showTopShadow = false;
    this.showBottomShadow = false;
  }
  connectedCallback() {
    this.updateScrollShadowVisibilities();
    this.resizeObserver = new ResizeObserver(() => {
      this.updateScrollShadowVisibilities();
    });
    this.resizeObserver.observe(this.self);
  }
  disconnectedCallback() {
    this.resizeObserver.disconnect();
  }
  onScrolling() {
    this.updateScrollShadowVisibilities();
  }
  updateScrollShadowVisibilities() {
    const slottedScrollElement = this.self.querySelector("*:not(.shadow)");
    if (slottedScrollElement) {
      this.showTopShadow = slottedScrollElement.scrollTop > 0;
      this.showBottomShadow =
        slottedScrollElement.offsetHeight + slottedScrollElement.scrollTop <
          slottedScrollElement.scrollHeight;
    }
  }
  render() {
    return (h(Host, null, h("div", { class: {
        shadow: true,
        top: true,
        visible: this.showTopShadow,
        "show-border": this.showborders,
      } }), h("div", { class: {
        shadow: true,
        bottom: true,
        visible: this.showBottomShadow,
        "show-border": this.showborders,
      } }), h("slot", null)));
  }
  get self() { return getElement(this); }
};
DxScrollableShadow.style = dxScrollableShadowCss;

const dxSidebarContentCss = ":host{--dx-page-padding:16px;display:flex;flex-direction:column;box-sizing:border-box;height:100%;padding:16px 0}:host:host([hidden]){display:none !important}@media (min-width: 476px){:host{--dx-page-padding:24px}}@media (min-width: 760px){:host{--dx-page-padding:32px}}@media (min-width: 1280px){:host{--dx-page-padding:40px}}:host .header{margin-bottom:16px;padding:0 var(--dx-sidebar-content-padding, var(--dx-page-padding, 16px))}:host .scrollable-shadow-container{overflow:hidden}:host .scrollable-shadow-container.content-grows{flex:1}:host .scrollable-shadow-container .content{overflow-y:auto;overflow-x:hidden;padding:0 var(--dx-sidebar-content-padding, var(--dx-page-padding, 16px));height:100%}:host .scrollable-shadow-container .content.content-grow{flex:1}:host .footer{margin-top:16px;padding:0 var(--dx-sidebar-content-padding, var(--dx-page-padding, 16px))}";

const DxSidebarContent = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Defines if the content area should claim the available space.
     * @internal
     */
    this.contentgrows = true;
  }
  renderSlot(slot) {
    if (isSlotUndefined(this.self, slot)) {
      return;
    }
    return (h("div", { class: slot }, h("slot", { name: slot })));
  }
  render() {
    return (h(Host, null, this.renderSlot("header"), h("dx-scrollable-shadow", { showborders: true, class: {
        "scrollable-shadow-container": true,
        "content-grows": this.contentgrows,
      } }, h("div", { class: { content: true } }, h("slot", null))), this.renderSlot("footer")));
  }
  get self() { return getElement(this); }
};
DxSidebarContent.style = dxSidebarContentCss;

export { DxScrollableShadow as dx_scrollable_shadow, DxSidebarContent as dx_sidebar_content };
