import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { C as ColorPalette } from './color-palette-56f42693.js';
import { d as displayNumberAsCurrency } from './currency-util-a17990de.js';
import './assert-7fc7463a.js';

const dxTableCellCss = ":host{width:100%;overflow:hidden;position:relative;display:flex;align-items:center;align-self:stretch;flex:1;pointer-events:none}:host:host([hidden]){display:none !important}:host .cell{font-family:DVAG-Type, sans-serif;color:#2b2b2b;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;box-sizing:border-box;padding:0 16px}:host .cell.multiple-lines{display:-webkit-box;-webkit-line-clamp:var(--dx-table-cell-lines, 1);-webkit-box-orient:vertical;white-space:break-spaces}:host .cell.align-left{text-align:start}:host .cell.align-right{text-align:end}:host .cell.align-center{text-align:center}:host .cell dx-text{overflow:hidden;text-overflow:ellipsis}:host .cell ::slotted(*){overflow:hidden;text-overflow:ellipsis}:host:host(.cell){font-family:DVAG-Type, sans-serif;color:#2b2b2b;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;box-sizing:border-box;padding:0 16px}:host:host(.cell).multiple-lines{display:-webkit-box;-webkit-line-clamp:var(--dx-table-cell-lines, 1);-webkit-box-orient:vertical;white-space:break-spaces}:host:host(.cell).align-left{text-align:start}:host:host(.cell).align-right{text-align:end}:host:host(.cell).align-center{text-align:center}:host:host(.cell) dx-text{overflow:hidden;text-overflow:ellipsis}:host:host(.cell) ::slotted(*){overflow:hidden;text-overflow:ellipsis}:host .popup-container{position:absolute;width:100%;bottom:0}:host .popup-container.align-right{right:0;--dx-popup-offset-right:0px;--dx-popup-offset-left:initial}:host .popup-container.align-center{left:50%;--dx-popup-offset-left:-10px}:host .popup-container .overlay{position:fixed;z-index:1110;left:0;top:0;right:0;bottom:0;background-color:#666666;transition:opacity 300ms ease-in-out;opacity:0.6;opacity:0;pointer-events:all}@keyframes fade-in{0%{opacity:0}100%{opacity:1}}:host .popup-container dx-popup{z-index:1111;animation:fade-in 400ms ease-in-out;animation-iteration-count:1}:host .cell .html-alignment-container{display:flex}:host .cell .overflow-container{width:100%;pointer-events:all}:host .cell:not(.multiple-lines) .overflow-container{display:flex;overflow:hidden}:host .cell.align-left .html-alignment-container,:host .cell.align-left .overflow-container{justify-content:flex-start}:host .cell.align-right .html-alignment-container,:host .cell.align-right .overflow-container{justify-content:flex-end}:host .cell.align-center .html-alignment-container,:host .cell.align-center .overflow-container{justify-content:center}";

const DxTableCell = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.touchDetected = false;
    this.tooltipText = "";
    this.showTooltip = false;
  }
  onShowTooltipChanged() {
    if (this.showTooltip) {
      this.updateTooltipText();
    }
  }
  /**
   * @internal
   */
  async obtainSettings(settings) {
    this.settings = settings;
  }
  updateTooltipText() {
    requestAnimationFrame(() => {
      var _a;
      const cell = this.self.shadowRoot.querySelector(".cell");
      this.tooltipText =
        ((_a = ((cell === null || cell === void 0 ? void 0 : cell.textContent) || this.self.textContent)) === null || _a === void 0 ? void 0 : _a.trim()) || this.value;
    });
  }
  getInnerElement() {
    var _a, _b, _c, _d;
    const currentType = (_a = this.type) !== null && _a !== void 0 ? _a : (_b = this.settings) === null || _b === void 0 ? void 0 : _b.type;
    if (currentType == null) {
      return h("div", null);
    }
    if (currentType === "html") {
      return (h("div", { class: "html-alignment-container" }, h("div", { class: "overflow-container" }, h("slot", null))));
    }
    if (currentType === "text") {
      return this.renderCellText(this.value);
    }
    if (currentType === "numeric") {
      const numericText = (_c = parseFloat(this.value)) === null || _c === void 0 ? void 0 : _c.toLocaleString("de-DE");
      return this.renderCellText(numericText);
    }
    if (currentType === "currency") {
      const currencyText = displayNumberAsCurrency(parseFloat(this.value), 2);
      return this.renderCellText(`${currencyText} â‚¬`);
    }
    if (currentType === "date") {
      const split = (_d = this.value) === null || _d === void 0 ? void 0 : _d.split("-");
      const text = split != null ? `${split[2]}.${split[1]}.${split[0]}` : "";
      return this.renderCellText(text);
    }
  }
  renderCellText(text) {
    return (h("div", { class: "overflow-container" }, h("dx-text", null, text)));
  }
  handleContextMenu(e) {
    e.preventDefault();
    this.showTooltip = true;
  }
  getStyle() {
    var _a, _b;
    const style = Object.assign({}, (_a = this.settings) === null || _a === void 0 ? void 0 : _a.sizeStyle);
    if (this.color != null) {
      style["background-color"] = new ColorPalette(true).getColorCode(this.color);
    }
    const lines = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.lines;
    style["--dx-table-cell-lines"] = lines !== null && lines !== void 0 ? lines : 1;
    if (lines > 1) {
      style["padding-top"] = "8px";
      style["padding-bottom"] = "8px";
    }
    return style;
  }
  getAlign() {
    var _a;
    return this.align || ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.align);
  }
  render() {
    var _a, _b;
    const alignClass = {};
    if (this.align || this.settings != null) {
      alignClass["align-" + this.getAlign()] = true;
    }
    return (h(Host, { role: "cell", style: this.getStyle(), slot: ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.sticky) ? "sticky" : undefined }, h("div", { class: Object.assign({ cell: true, "multiple-lines": ((_b = this.settings) === null || _b === void 0 ? void 0 : _b.lines) > 1 }, alignClass), title: this.tooltipText, onTouchStart: () => (this.touchDetected = true), onContextMenu: (e) => {
        if (this.touchDetected) {
          this.handleContextMenu(e);
          this.touchDetected = false;
        }
      } }, this.getInnerElement()), this.renderPopup(alignClass)));
  }
  renderPopup(alignClass) {
    var _a;
    if (!this.showTooltip || !(((_a = this.tooltipText) === null || _a === void 0 ? void 0 : _a.length) > 0)) {
      return;
    }
    const alignment = this.getAlign();
    return (h("div", { class: Object.assign({ "popup-container": true }, alignClass) }, h("div", { class: "overlay", onTouchEnd: (e) => {
        e.stopPropagation();
        e.preventDefault();
        this.showTooltip = false;
      } }), h("dx-popup", { arrowposition: alignment !== "center" ? alignment !== null && alignment !== void 0 ? alignment : "left" : "left", show: true }, h("dx-text", null, this.tooltipText))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "showTooltip": ["onShowTooltipChanged"]
  }; }
};
DxTableCell.style = dxTableCellCss;

export { DxTableCell as dx_table_cell };
