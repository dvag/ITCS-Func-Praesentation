import { r as registerInstance, h } from './index-04c470ea.js';

const dxChevronCss = ":host{display:inline-block}:host:host([hidden]){display:none !important}:host dx-icon{transition:transform 300ms ease-in-out}:host dx-icon.size-16{transform:translateY(-2px)}:host dx-icon.size-16.rotated{transform:translateY(2.66px) rotate(180deg)}:host dx-icon.size-24{transform:translateY(-3px)}:host dx-icon.size-24.rotated{transform:translateY(4px) rotate(180deg)}";

const DxChevron = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Defines the direction the arrow is pointing to.
     * @value true: the arrow is pointing up.
     * @value false: the arrow is pointing down.
     */
    this.directiontop = false;
    this.size = 24;
    /**
     * If `false` the chevron will be displayed with color `default`
     * If `true` the chevron will be displayed with color `active` or the color set via `activecolor`
     */
    this.active = false;
    /**
     * Color of the chevron when active property is `false`.
     * Use a color from the color palette.
     * @value string: The name of a color from the color palette.
     */
    this.inactivecolor = "default";
    /**
     * Color of the chevron when active property is `true`.
     * Use a color from the color palette.
     * @value string: The name of a color from the color palette.
     */
    this.activecolor = "active";
  }
  render() {
    return (h("dx-icon", { class: {
        rotated: this.directiontop,
        "size-16": this.size === 16,
        "size-24": this.size === 24,
      }, icon: "chevron-runter", color: this.active ? this.activecolor : this.inactivecolor, size: this.size }));
  }
};
DxChevron.style = dxChevronCss;

export { DxChevron as dx_chevron };
