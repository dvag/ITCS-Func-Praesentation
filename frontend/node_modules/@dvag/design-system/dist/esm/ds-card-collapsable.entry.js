import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { i as isSlotDefined } from './render-util-1dee6655.js';
import { a as assert } from './assert-7fc7463a.js';

const dsCardCollapsableCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .header{cursor:pointer}:host .header .header-content{display:flex;align-items:center}:host .header .header-content ds-checkbox,:host .header .header-content ds-icon{margin-right:12px}";

const DsCardCollapsable = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Sets the theme of the `<ds-card-header>` element within this component.
     *
     * @value arrow: Renders an arrow in the header which visualizes the current collapse state.
     * @value checkbox: Render a checkbox in the header which is checked whether the card is collapsed or not.
     * @value custom: Enables the feature to define a custom card header in the `header` slot.
     *
     * @example arrow
     * @example checkbox
     * @example custom
     */
    this.type = "arrow";
    /**
     * The current collapse state.
     *
     * @value false: The card is collapsed.
     * @value true: The card is unfolded.
     *
     * @example open
     * @example close
     */
    this.open = false;
  }
  toggleOpen() {
    this.open = !this.open;
  }
  componentWillLoad() {
    this.showBorder = this.open;
  }
  handleHeaderClick() {
    if (this.type !== "custom") {
      this.toggleOpen();
    }
  }
  render() {
    return (h(Host, { style: {
        "--ds-card-header-separator-opacity": `${this.showBorder ? 1 : 0}`,
      } }, [this.renderHeader(), this.renderContent()]));
  }
  renderToggleButton() {
    if (this.type === "checkbox") {
      return h("ds-checkbox", { checked: this.open, class: "no-id-warning" });
    }
    else if (this.type === "arrow") {
      return (h("ds-icon", { size: 24, icon: this.open ? "collapse-close" : "collapse-open" }));
    }
  }
  renderHeaderContent() {
    return (h("div", { class: {
        "header-content": true,
      } }, this.renderToggleButton(), h("ds-text", { type: "u5", screensize: "small" }, this.label)));
  }
  renderHeader() {
    assert(isSlotDefined(this.self, "header")
      ? this.type === "custom"
      : this.type !== "custom", () => "Header-Slot should be defined when type === 'custom'");
    return this.type === "custom" ? (h("slot", { name: "header" })) : (h("ds-card-header", { class: {
        header: true,
      }, onClick: () => this.handleHeaderClick() }, this.renderHeaderContent()));
  }
  renderContent() {
    return (h("dx-simple-grow-box", { slidecontent: true, class: {
        content: true,
      }, animationmode: "top-to-bottom", open: this.open, onGrowBoxStateChange: (event) => {
        this.showBorder = event.detail !== "closed";
      } }, h("slot", null)));
  }
  get self() { return getElement(this); }
};
DsCardCollapsable.style = dsCardCollapsableCss;

export { DsCardCollapsable as ds_card_collapsable };
