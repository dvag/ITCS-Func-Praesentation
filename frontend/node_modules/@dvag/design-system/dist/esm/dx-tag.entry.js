import { r as registerInstance, c as createEvent, h, g as getElement } from './index-04c470ea.js';
import { d as assertPropertyNotEmpty } from './assert-7fc7463a.js';
import { C as ColorPalette } from './color-palette-56f42693.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import './value-store-f4663db1.js';

const dxTagCss = ":host{box-sizing:border-box;width:max-content}:host:host([hidden]){display:none !important}.static{display:inline-flex;user-select:none;padding:6px 8px;cursor:default}@media (min-width: 1280px){.static{padding:4px 8px}}.static.gray-theme{--dx-text-color:#2b2b2b;background-color:#d6d6d6}.static.gold-theme{--dx-text-color:#ffffff;background-color:#c8aa22}.static.green-theme{--dx-text-color:#617b01;background-color:#cad799}.static.red-theme{--dx-text-color:#5e141f;background-color:#d8a7ae}.static.orange-theme{--dx-text-color:#8b4714;background-color:#f6c9a7}.static.purple-theme{--dx-text-color:#380454;background-color:#be9bd1}.static.turquoise-theme{--dx-text-color:#00453e;background-color:#99c7c2}.interactive{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;background-color:rgba(0, 88, 124, 0);border-color:#337a96;--dx-text-color:#337a96;--dx-icon-color:#337a96;display:inline-flex;user-select:none;padding:6px 8px;cursor:pointer;outline-offset:1px;outline-width:1px;background-color:#e5eef2;--dx-text-color:#00587c}.interactive[disabled]{cursor:unset}.interactive.icon-right{flex-direction:row-reverse}.interactive:focus-visible{outline:2px solid #004763}@media not all and (pointer: coarse){.interactive:hover{background-color:rgba(0, 88, 124, 0.1);border-color:#00587c;--dx-text-color:#00587c;--dx-icon-color:#00587c}}.interactive:active{background-color:rgba(0, 88, 124, 0.2);border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}.interactive.removeable{cursor:default}@media not all and (pointer: coarse){.interactive.removeable:hover{background-color:#e5eef2;--dx-text-color:#00587c}}.interactive.removeable:active{background-color:#e5eef2;--dx-text-color:#00587c}@media not all and (pointer: coarse){.interactive:not(.removeable):hover{background-color:#ccdee5;--dx-text-color:#00354a}}.interactive:not(.removeable):active{background-color:#b2cdd8;--dx-text-color:#004763}.interactive.selected{background-color:#b2cdd8;--dx-text-color:#004763;--dx-text-decoration:bold}@media not all and (pointer: coarse){.interactive.selected:hover{background-color:#80acbe;--dx-text-color:#00354a}}.interactive.selected:active{background-color:#4c8aa3;--dx-text-color:#001219}.interactive .close-button{position:relative;width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;padding:2px;margin-left:2px;--dx-text-color:#337a96;background-color:#e5eef2}.interactive .close-button[disabled]{cursor:unset}.interactive .close-button.icon-right{flex-direction:row-reverse}.interactive .close-button:focus-visible{outline:2px solid #004763}@media not all and (pointer: coarse){.interactive .close-button:hover{background-color:#ccdee5;--dx-text-color:#00587c}}.interactive .close-button:active{background-color:#b2cdd8;--dx-text-color:#2b2b2b}.interactive .close-button .extended-click-area{width:32px;height:32px;position:absolute}@media (min-width: 1280px){.interactive .close-button .extended-click-area{width:36px;height:36px}}.interactive .label{text-align:center}.interactive .label::before{display:block;content:attr(data-label);font-weight:bold;height:0;overflow:hidden;visibility:hidden}";

const DxTag = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.remove = createEvent(this, "remove", 7);
    this.selectChange = createEvent(this, "selectChange", 7);
    /**
     * Defines the type of tag.
     * @value static: Tag is not interactable by the user. The tag only shows its given label.
     * @value interactive: Tag is interactable by the user.
     */
    this.type = "static";
    /**
     * Defines if the interactive tag displays a remove button.
     * Only works in comination with the `type` property set to `interactive` and the tag is not `selectable`.
     * @value true: tag shows button.
     * @value false: tag does not show button.
     * @example remove-event
     */
    this.removeable = false;
    /**
     * Defines whether the tag is selectable or not.
     * @value true: tag is selectable .
     * @value false: tag is not selectable.
     * @example select-event
     */
    this.selectable = false;
    /**
     * Defines if the tag is selected.
     * When the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired.
     * @value true: tag is selected.
     * @value false: tag is not selected.
     */
    this.selected = false;
  }
  controlSelectedStatus() {
    if (!this.selectable) {
      this.selected = false;
    }
  }
  connectedCallback() {
    if (this.type === "static" &&
      this.theme == null &&
      this.color == null &&
      this.textcolor == null) {
      assertPropertyNotEmpty("dx-tag", "theme", this.theme, "Please specify a theme or use the textcolor and color attribute of this element");
    }
    this.controlSelectedStatus();
  }
  removeButtonClicked(e) {
    e.stopImmediatePropagation();
    this.remove.emit();
  }
  toggleSelected() {
    if (!this.selectable || this.removeable) {
      return;
    }
    this.selected = !this.selected;
    this.selectChange.emit(this.selected);
  }
  render() {
    if (this.type === "static") {
      return this.renderStatic();
    }
    else {
      return this.renderInteractive();
    }
  }
  renderCloseButton() {
    if (!this.removeable) {
      return;
    }
    return (h("button", { onClick: (e) => {
        this.removeButtonClicked(e);
      }, class: "close-button" }, h("dx-icon", { icon: "schliessen", size: 16, color: "default" }), h("div", { class: "extended-click-area" })));
  }
  renderLabel() {
    const textType = this.theme === "gold" || this.selected ? "it-bold" : "it";
    const dataLabelContent = this.selectable ? this.label : null;
    return (h("dx-text", { class: { label: this.selectable }, "data-label": dataLabelContent, type: textType }, this.label));
  }
  renderInteractive() {
    return (h("button", { onClick: () => this.toggleSelected(), id: ElementIdGenerator.createId(this.self, "control"), class: {
        interactive: true,
        removeable: this.removeable,
        selected: this.selected,
      } }, this.renderLabel(), this.renderCloseButton()));
  }
  renderStatic() {
    const colorPalette = new ColorPalette(true);
    const backgroundHexColor = this.color
      ? colorPalette.getColorCode(this.color)
      : null;
    const textHexColor = this.textcolor
      ? colorPalette.getColorCode(this.textcolor)
      : null;
    return (h("div", { class: {
        static: true,
        "gray-theme": this.theme === "gray",
        "gold-theme": this.theme === "gold",
        "green-theme": this.theme === "green",
        "red-theme": this.theme === "red",
        "orange-theme": this.theme === "orange",
        "purple-theme": this.theme === "purple",
        "turquoise-theme": this.theme === "turquoise",
      }, style: {
        "background-color": backgroundHexColor,
        "--dx-text-color": textHexColor,
      } }, this.renderLabel()));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "selected": ["controlSelectedStatus"]
  }; }
};
DxTag.style = dxTagCss;

export { DxTag as dx_tag };
