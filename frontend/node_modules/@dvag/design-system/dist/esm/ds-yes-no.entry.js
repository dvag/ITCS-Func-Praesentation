import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import './value-store-f4663db1.js';

const dsYesNoCss = ":host{display:block}:host:host([hidden]){display:none !important}:host:host(.disabled),:host:host(.disabled *){pointer-events:none !important}";

const DsYesNo = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    /**
     * State of the yes/no-selection
     *
     * @value "yes": yes is selected
     * @value "no": no is selected
     * @value "unset": nothing is selected
     * @example value
     */
    this.value = "unset";
    /**
     * Colors the border of the element red.
     * @value true: red border.
     * @value false: grey border.
     * @example error
     */
    this.error = false;
    /**
     * Deactivates the Radio-Button.
     * @value false: The Radio-Button is interactable.
     * @value true: The Radio-Button is deactivated.
     *
     * @example value-disabled
     */
    this.disabled = false;
    /**
     * The yes/no component is in read-only mode.
     * A text is rendered that shown the `label`-value of the selected Radio-Button.
     * @value false: Default mode.
     * @value true: Text of the `value`-attribute is shown.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks the element as mandarory.
     * @value false: Not mandatory. (Default)
     * @value true: Mandatory field.
     * @example required
     */
    this.required = false;
    /**
     * How the width of the child elements is determined.
     *
     * @value parent: The Parent element determines the width.
     * @value max-content: The widest child element determines the width of all child elements.
     *
     * @example size-parent
     */
    this.size = "max-content";
    this.handleRadioGroupValueChange = (event) => {
      event.stopPropagation();
      const value = event.detail;
      if (["yes", "no"].includes(value) && this.value !== value) {
        this.value = value;
        this.valueChange.emit(this.value);
      }
    };
  }
  /**
   * Sets the tab-focus to the element.
   * @example focus
   */
  async focusControl() {
    this.radioGroupElement.focusControl().then();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  radioGroupValue() {
    if (["yes", "no"].includes(this.value)) {
      return this.value;
    }
    else {
      return undefined;
    }
  }
  render() {
    return (h(Host, { class: {
        disabled: this.disabled,
      } }, h("ds-radio-button-group", { required: this.required, readonly: this.readonly, ref: (el) => (this.radioGroupElement = el), error: this.error, errormessage: this.errormessage, id: ElementIdGenerator.createId(this.self, "group"), value: this.radioGroupValue(), onValueChange: (e) => this.handleRadioGroupValueChange(e) }, h("ds-bordered-form-group", { key: "" + this.required, direction: "row", size: this.size }, h("ds-bordered-form-item", null, h("ds-radio-button", { id: ElementIdGenerator.createId(this.self, "yes"), value: "yes", label: "Ja", disabled: this.disabled })), h("ds-bordered-form-item", null, h("ds-radio-button", { id: ElementIdGenerator.createId(this.self, "no"), value: "no", label: "Nein", disabled: this.disabled }))))));
  }
  get self() { return getElement(this); }
};
DsYesNo.style = dsYesNoCss;

export { DsYesNo as ds_yes_no };
