import { r as registerInstance, c as createEvent, h, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { c as createMetaComponentsSlotObserver } from './slot-observer-9196738e.js';
import { s as sameArrayIgnoreOrder } from './misc-util-d3b69f2c.js';
import { u as unawaited } from './async-0c539b38.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dxHeaderAppFavoritesCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .pulse-icon{--dx-icon-color:var(--dx-header-menu-item-text-icon-theme-color, #2b2b2b)}";

const DxHeaderAppFavorites = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.menuInteraction = createEvent(this, "menuInteraction", 7);
    this.internalChangeSidebarVisibility = createEvent(this, "internalChangeSidebarVisibility", 7);
    this.internalForceSidebarContentUpdate = createEvent(this, "internalForceSidebarContentUpdate", 7);
    this.deleteApp = createEvent(this, "deleteApp", 7);
    this.sortApps = createEvent(this, "sortApps", 7);
    this.addApp = createEvent(this, "addApp", 7);
    this.editApps = createEvent(this, "editApps", 7);
    this.launchApp = createEvent(this, "launchApp", 7);
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     */
    this.notificationstheme = "system";
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     */
    this.notifications = undefined;
    /**
     * @internal
     */
    this.internalopen = true;
  }
  onAppsChanged() {
    this.internalForceSidebarContentUpdate.emit();
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, "dx-header-app-favorites-app", async (nodes) => {
        const newApps = await Promise.all(nodes.map((node) => node.toAppFavoritesApp()));
        // Do not pulsate the first time the slotObserver is called.
        if (this.apps != null && !sameArrayIgnoreOrder(this.apps, newApps)) {
          this.pulsate();
        }
        this.apps = newApps;
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  onSidebarOpen(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  onSidebarClose(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    const closeSidebar = () => {
      this.internalChangeSidebarVisibility.emit(false);
    };
    // We have to process the navigation items here because we cannot insert the <slot> into the dx-header-navigation-sidebar-content because it rendered elsewhere.
    return (h("dx-header-app-favorites-sidebar-content", { id: ElementIdGenerator.createId(this.self, "sidebar-content"), ref: (ref) => (this.sidebarContent = ref), apps: this.apps, onInternalEditApps: (e) => this.editApps.emit(e.detail), onInternalSortApps: (e) => this.sortApps.emit(e.detail), onInternalDeleteApp: (e) => this.deleteApp.emit(e.detail), onInternalAddApp: () => this.addApp.emit({
        closeSidebar,
      }), onInternalLaunchApp: (e) => this.launchApp.emit({
        appid: e.detail,
        closeSidebar,
      }) }));
  }
  pulsate() {
    var _a, _b;
    unawaited((_b = (_a = this.self.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("dx-pulse-icon")) === null || _b === void 0 ? void 0 : _b.pulsate());
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("dx-header-menu-button", { id: ElementIdGenerator.createId(this.self, "button"), notificationstheme: this.notificationstheme, notifications: this.notifications, active: this.internalactive, onInteraction: () => {
        this.menuInteraction.emit();
      } }, h("dx-pulse-icon", { class: "pulse-icon", id: ElementIdGenerator.createId(this.self, "pulse-icon"), icon: "lesezeichen-outline", size: 24 }))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "apps": ["onAppsChanged"]
  }; }
};
DxHeaderAppFavorites.style = dxHeaderAppFavoritesCss;

export { DxHeaderAppFavorites as dx_header_app_favorites };
