import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { o as onNextFrame } from './render-util-1dee6655.js';
import { a as isActiveElement } from './misc-util-d3b69f2c.js';
import { e as extractPath } from './event.util-241bc731.js';
import { B as BaselineElement, R as ReadonlyTextElement } from './base-elements-230aae54.js';
import { h as hasError, E as ErrorMessage } from './error-076bca5b.js';
import { L as LabeledInputContainer } from './input-container-3874871f.js';
import './value-store-f4663db1.js';

const dxComboboxCss = ":host{min-width:0;display:block}:host:host([hidden]){display:none !important}:host:host(.disabled){pointer-events:none}:host:host(.disabled:not(.nested-form-element)){opacity:0.4}:host label{display:block}:host label.container-size-s{--dx-overlay-offset:40px}:host label.container-size-m{--dx-overlay-offset:48px}:host label .container.size-s{position:relative;top:0;left:0;display:flex;height:40px;padding:8px 16px 8px 16px;--dx-info-button-offset-y:0px;box-sizing:border-box;border:1px solid #d6d6d6;border-bottom:var(--dx-container-border-bottom, 1px solid #d6d6d6);background-color:#ffffff;align-items:center;--dx-icon-color:#337a96}:host label .container.size-s.error{border-color:#9d2235;background-color:#f5e9eb}:host label .container.size-s.error input,:host label .container.size-s.error textarea{background:transparent}:host label .container.size-s.active{border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}:host label .container.size-m{position:relative;top:0;left:0;display:flex;height:48px;padding:10px 16px 10px 16px;box-sizing:border-box;border:1px solid #d6d6d6;border-bottom:var(--dx-container-border-bottom, 1px solid #d6d6d6);background-color:#ffffff;align-items:center;--dx-icon-color:#337a96}:host label .container.size-m.error{border-color:#9d2235;background-color:#f5e9eb}:host label .container.size-m.error input,:host label .container.size-m.error textarea{background:transparent}:host label .container.size-m.active{border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}:host label .container input{height:24px;border:none;outline:none;font-family:DVAG-Type;font-size:16px;line-height:24px;letter-spacing:0.02px;color:#2b2b2b;width:1px;flex-grow:1;padding:0}@media (min-width: 1280px){:host label .container input{font-size:18px;line-height:28px}}:host label .container input::placeholder{color:#ababab;opacity:1}:host label .container input:disabled{background-color:#ffffff}:host label .container .input-icon{margin-right:16px}:host label .respect-label-height{--dx-overlay-offset:-24}@media (min-width: 1280px){:host label .respect-label-height{--dx-overlay-offset:-28}}:host label .default-list-container{min-height:64px;padding:20px 16px;box-sizing:border-box}@media (min-width: 1280px){:host label .default-list-container{min-height:68px}}:host label .default-list-container .loading-container{display:flex;align-items:center}:host label .default-list-container .loading-container .loading-spinner{flex-shrink:0;flex-grow:0;margin-right:16px}:host label .category{padding:8px 16px;background-color:#f7f7f7;border-bottom:1px solid #d6d6d6}:host .separator{flex:0 0 1px;height:24px;background-color:#d6d6d6}:host .open-list-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;padding:0}:host .open-list-button[disabled]{cursor:unset}:host .open-list-button.icon-right{flex-direction:row-reverse}:host .open-list-button:focus-visible{outline:2px solid #004763}";

const DxCombobox = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.valueChange = createEvent(this, "valueChange", 7);
    this.valueComplete = createEvent(this, "valueComplete", 7);
    this.search = createEvent(this, "search", 7);
    this.selectSearchOption = createEvent(this, "selectSearchOption", 7);
    this.enterPress = createEvent(this, "enterPress", 7);
    this.preventReFocus = false;
    this.lastSelectedOption = null;
    this.inputFocused = false;
    this.internalValue = "";
    this.listOpen = false;
    this.waitForMoreInput = false;
    this.isLoading = false;
    /**
     * The maximum height the list can reach when opened.
     *
     * @value number: The height in pixels.
     * @example max-list-height
     */
    this.maxlistheight = undefined;
    /**
     * The text which is displayed within the flyout while the search is in progress.
     *
     * @value string: The loading text.
     * @example loading-text
     */
    this.loadingtext = "Suchergebnisse werden geladen";
    /**
     * The text which is displayed within the flyout when no entries are found with the input provided by the user.
     *
     * @value string: The empty search result text.
     * @example empty-search-text
     */
    this.emptysearchtext = "Keine Suchergebnisse zu Ihrer Eingabe gefunden.";
    /**
     * Defines the size of this input.
     *
     * @value m: medium size text-input
     * @value s: small sized input. Should only be used in special cases.
     * @example size
     */
    this.size = "m";
    /**
     * The value of this input.
     * @important
     * @value string: Value of this input.
     * @example value
     */
    this.value = "";
    /**
     * Placeholder for this input field.
     * @value string: The placeholder.
     * @example placeholder
     */
    this.placeholder = "Bitte eingeben ...";
    /**
     * Defines if the input field is disabled or not.
     * @value true: Input is disabled
     * @value false: Input is not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Input field is in readonly mode.
     * The value of this input is display in an simplified manner.
     * The input field is not interactable.
     * @value false: input is not editable.
     * @value true: input is read-only.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
    /**
     * The minimum number of letters before starting the search.
     * @value number: The number of letters that allow starting the search.
     * @example pre-search-letter-count
     */
    this.presearchlettercount = 0;
  }
  onSelectedOptionChanged(newOption, oldOption) {
    this.internalIcon = (newOption === null || newOption === void 0 ? void 0 : newOption.icon) || (oldOption === null || oldOption === void 0 ? void 0 : oldOption.icon) || this.internalIcon;
  }
  onIsLoadingChanged() {
    var _a;
    if (!this.inputFocused &&
      !this.isLoading &&
      ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      const option = this.findOption(this.internalValue);
      if (option) {
        if (option !== this.selectedOption) {
          this.selectedOption = option;
          if (this.selectedOption) {
            this.selectOption(this.selectedOption);
          }
          else if (!this.inputFocused) {
            this.internalErrorMessage = this.emptysearchtext;
          }
        }
      }
      else {
        this.internalErrorMessage = this.emptysearchtext;
      }
    }
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  onItemSelectionChanged(e) {
    var _a, _b;
    this.selectedOption = this.findOption((_b = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b[0]);
    if (e.detail.reason === "implicit") {
      onNextFrame(() => {
        this.focusControl();
      });
    }
    else {
      this.preventReFocus = true;
      if (isActiveElement(this.inputElement)) {
        this.inputElement.blur();
      }
      else {
        this.onBlurred();
      }
      this.selectOption(this.selectedOption);
    }
  }
  /**
   * Focuses this input field.
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
  }
  onForceUpdateOnChange(e) {
    e.detail(this.self);
  }
  obtainValueChangesFromOutside(force = false) {
    if (force || this.value !== this.internalValue) {
      if (this.value == null && this.internalValue == null) {
        return;
      }
      this.internalValue = this.value;
      this.lastEmittedChangeValue = this.value;
      this.lastEmittedCompleteValue = this.value;
      if (this.inputFocused) {
        this.startSearch(undefined);
      }
    }
  }
  findOption(value) {
    var _a, _b, _c;
    return (_c = (_b = (_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.map((category) => { var _a; return (_a = category.options) !== null && _a !== void 0 ? _a : []; })) === null || _b === void 0 ? void 0 : _b.flat()) === null || _c === void 0 ? void 0 : _c.find((option) => compareLowerCase(getOptionValue(option), value));
  }
  onFocused() {
    if (!this.inputFocused) {
      this.listOpen = true;
      this.startSearch("focus");
    }
    this.inputFocused = true;
    onNextFrame(() => {
      this.focusControl();
    });
  }
  onDocumentBlur() {
    this.preventReFocus = true;
    this.inputElement.blur();
  }
  onBlurred() {
    onNextFrame(() => {
      if (this.preventReFocus || !isActiveElement(this.self)) {
        if (!this.isLoading) {
          const option = this.findOption(this.internalValue);
          if (option) {
            this.selectedOption = option;
            this.selectOption(option);
          }
          else if (this.internalValue !== getOptionValue(this.selectedOption)) {
            // If the combobox is currently not loading check if the selected option has to be changed.
            this.selectedOption = this.internalValue
              ? this.lastSelectedOption
              : null;
            this.internalSelectOption(this.selectedOption);
          }
        }
        else if (this.selectedOption != null) {
          // If the combobox is currently loading, disabled the loading when the value is within the last provided options.
          const option = this.findOption(this.internalValue);
          this.isLoading = option !== this.selectedOption;
        }
        this.listOpen = false;
        this.inputFocused = false;
      }
      this.preventReFocus = false;
    });
  }
  onListFlyoutClicked(event) {
    const clickedOnListItem = extractPath(event).some((el) => { var _a; return ((_a = el.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "dx-list-item"; });
    if (clickedOnListItem) {
      this.emitValueComplete();
    }
  }
  internalClearInput() {
    this.inputElement.value = "";
    this.internalValue = "";
    this.selectedOption = null;
    this.lastSelectedOption = null;
    this.internalErrorMessage = "";
    this.emitValueChange();
  }
  clearInput() {
    this.internalClearInput();
    if (this.inputFocused) {
      this.startSearch("clear");
      onNextFrame(() => {
        this.focusControl();
      });
    }
  }
  onInputKeyDown(event) {
    var _a, _b;
    if (event.key == "Enter") {
      this.enterPress.emit();
      if (!this.isLoading) {
        if (((_b = (_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) === 0) {
          this.internalErrorMessage = this.emptysearchtext;
          this.lastSelectedOption = null;
          this.selectedOption = null;
          this.inputElement.blur();
          return;
        }
        else if (!this.listOpen) {
          const option = this.findOption(this.internalValue);
          if (option) {
            this.selectOption(option);
            this.inputElement.blur();
            return;
          }
        }
      }
      else if (this.isLoading) {
        this.inputElement.blur();
        return;
      }
    }
    if (this.listOpen && ["ArrowDown", "ArrowUp"].includes(event.key)) {
      event.preventDefault();
    }
    const listFlyoutElement = this.self.shadowRoot.querySelector("dx-list-flyout");
    if (event.target === listFlyoutElement) {
      return;
    }
    if (listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.open) {
      listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.dispatchEvent(new event.constructor(event.type, event));
    }
  }
  onInputInput() {
    this.internalValue = this.inputElement.value;
    this.listOpen = true;
    this.startSearch("input");
    this.emitValueChange();
  }
  internalSelectOption(option) {
    var _a;
    this.lastSelectedOption = option;
    const newValue = getOptionValue(option);
    if (newValue != null) {
      this.internalErrorMessage = "";
      this.internalValue = newValue;
    }
    else if (((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      this.internalErrorMessage = this.emptysearchtext;
    }
    else {
      this.internalErrorMessage = "";
    }
    this.emitValueChange();
    this.emitValueComplete();
  }
  selectOption(option) {
    var _a;
    this.internalSelectOption(option);
    this.selectSearchOption.emit((_a = option.data) !== null && _a !== void 0 ? _a : getOptionValue(option));
  }
  startSearch(reason) {
    var _a;
    this.waitForMoreInput =
      ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) < this.presearchlettercount;
    if (this.waitForMoreInput) {
      this.isLoading = false;
      return;
    }
    let providedValues = false;
    requestAnimationFrame(() => {
      this.isLoading = !providedValues;
    });
    this.search.emit({
      value: this.internalValue,
      reason: reason,
      provideValues: (values) => {
        providedValues = true;
        this.searchResult = values;
        this.isLoading = false;
      },
    });
  }
  emitValueChange() {
    const valueCandidate = this.internalValue;
    if (this.lastEmittedChangeValue !== valueCandidate) {
      this.value = valueCandidate;
      this.valueChange.emit(this.value);
      this.lastEmittedChangeValue = this.value;
      if (!this.value) {
        this.selectedOption = null;
      }
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  renderInputIcon() {
    var _a, _b;
    return (h("dx-horizontal-grow-box", { open: !this.inputFocused && ((_b = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.icon) === null || _b === void 0 ? void 0 : _b.length) > 0, forcewidth: 40, animationmode: "open-from-left" }, h("dx-icon", { class: "input-icon", size: 24, icon: this.internalIcon, color: "headline" })));
  }
  renderInput() {
    var _a;
    return (h("label", { class: {
        "container-size-s": this.size === "s",
        "container-size-m": this.size === "m",
      } }, h(LabeledInputContainer, { containerProperties: {
        active: this.inputFocused,
        size: this.size,
        title: this.value,
        error: hasError(this.self) || ((_a = this.internalErrorMessage) === null || _a === void 0 ? void 0 : _a.length) > 0,
      }, labelProperties: {
        disabled: this.disabled,
        label: this.label,
        required: this.required,
        kisynced: this.kisynced,
      } }, h(BaselineElement, null), this.renderInputIcon(), h("input", { enterKeyHint: "next", id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), onInput: () => this.onInputInput(), onKeyDown: (event) => this.onInputKeyDown(event), onFocus: () => this.onFocused(), onBlur: () => this.onBlurred(), type: "text", placeholder: this.placeholder, value: this.internalValue, maxLength: this.limitlength, disabled: this.disabled }), this.renderIconAndClearButton()), this.renderAutocompleteValues()));
  }
  renderDefaultContainer(content) {
    return (h("div", { class: "default-list-container", key: "default-container" }, content));
  }
  renderListContent() {
    var _a;
    if (this.waitForMoreInput) {
      return this.renderDefaultContainer(h("dx-text", null, this.presearchconditiontext ||
        `Bitte geben Sie einen Suchbegriff ein (min. ${this.presearchlettercount} Zeichen).`));
    }
    if (this.isLoading) {
      return this.renderDefaultContainer(h("div", { class: "loading-container" }, h("dx-spinner", { class: "loading-spinner", size: "medium", theme: "light" }), h("dx-text", { color: "headline" }, this.loadingtext)));
    }
    if (((_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      return this.searchResult.map((category) => this.renderCategory(category));
    }
    else {
      return this.renderDefaultContainer(h("dx-text", { color: "headline" }, this.emptysearchtext));
    }
  }
  renderCategory(category) {
    var _a;
    return [
      category.label ? (h("div", { class: "category" }, h("dx-text", { type: "it" }, category.label))) : null,
    ].concat((_a = category.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
      const value = getOptionValue(option);
      return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, value.toLowerCase().replace(" ", "-")), value: value, prelabel: option.preLabel, label: option.label, sublabel: option.subLabel, icon: option.icon, type: "selectable", selected: getOptionValue(this.selectedOption) === value }));
    }));
  }
  renderAutocompleteValues() {
    var _a;
    return (h("dx-list-flyout", { maxheight: this.maxlistheight, defaulthighlightfirst: true, preventSpaceSelection: true, selectonhighlight: false, preventArrowSelection: true, focusable: false, open: this.listOpen, position: "bottom", direction: "right", itemsvisible: 5.5, size: "m", selectionmode: "single", onClick: (event) => this.onListFlyoutClicked(event), class: {
        "respect-label-height": ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0,
      } }, h("div", { slot: "base" }), this.renderListContent()));
  }
  renderOpenListButton() {
    return (h("button", { tabIndex: -1, id: ElementIdGenerator.createId(this.self, "open-list-button"), class: {
        "open-list-button": true,
      }, onClick: () => {
        if (this.inputFocused) {
          this.listOpen = !this.listOpen;
        }
        this.focusControl();
      } }, h("dx-chevron", { directiontop: this.listOpen, active: this.inputFocused })));
  }
  renderIconAndClearButton() {
    var _a;
    const isClearButtonVisible = ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0;
    return (h(Fragment, null, h("dx-element-swapper", { active: isClearButtonVisible ? "second" : "first" }, h("dx-icon", { slot: "first", size: 24, icon: "lupe", color: "default", class: "display-icon" }), h("dx-element-swapper", { slot: "second", active: this.isLoading && !this.inputFocused ? "first" : "second" }, h("dx-spinner", { slot: "first", size: "medium", theme: "light" }), h("dx-clear-button", { tabIndex: -1, slot: "second", visible: true, size: 24, onClearInput: () => this.clearInput(), id: ElementIdGenerator.createId(this.self, "clear-button") }))), h("dx-spacer", { mq1: "8h" }), h("div", { class: "separator" }), h("dx-spacer", { mq1: "8h" }), this.renderOpenListButton()));
  }
  render() {
    if (this.readonly) {
      return h(ReadonlyTextElement, { text: this.value, label: this.label });
    }
    return (h(Host, { class: { disabled: this.disabled }, onBlur: () => this.onBlurred() }, this.renderInput(), h(ErrorMessage, { self: this.self, message: this.errormessage || this.internalErrorMessage, custom: {
        onFocus: () => {
          this.preventReFocus = true;
        },
        onBlur: () => {
          this.preventReFocus = false;
        },
      } })));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "selectedOption": ["onSelectedOptionChanged"],
    "isLoading": ["onIsLoadingChanged"],
    "value": ["valueChanged"]
  }; }
};
function getOptionValue(option) {
  return (option === null || option === void 0 ? void 0 : option.value) || (option === null || option === void 0 ? void 0 : option.label);
}
function compareLowerCase(first, second) {
  return ((first === null || first === void 0 ? void 0 : first.length) === (second === null || second === void 0 ? void 0 : second.length) &&
    (first === null || first === void 0 ? void 0 : first.toLowerCase()) === (second === null || second === void 0 ? void 0 : second.toLowerCase()));
}
DxCombobox.style = dxComboboxCss;

export { DxCombobox as dx_combobox };
