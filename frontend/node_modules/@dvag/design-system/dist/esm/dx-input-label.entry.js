import { r as registerInstance, h, H as Host } from './index-04c470ea.js';
import { N as NewKiSyncIcon } from './new-ki-snyc-icon-d9a521a0.js';

const dxInputLabelCss = ":host{padding-bottom:8px;--dx-text-color:#2b2b2b;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}:host:host([hidden]){display:none !important}:host .disabled{color:#2b2b2b}:host .label-container{display:flex}:host .label-container .required-container{display:flex;align-items:center}:host .label-container .required-container .required-icon{margin-left:4px;flex-grow:0;flex-shrink:0}:host .label-container .label-text{overflow:hidden;text-overflow:ellipsis;margin-top:auto;margin-bottom:auto}:host .label-container .non-clickable-container{display:flex;flex:1;justify-content:flex-end}:host .label-container .non-clickable-container.condensed-layout{margin-left:4px;justify-content:flex-start}";

const DxInputLabel = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * The font type.
     */
    this.type = "its";
    /**
     * If the label should be in an disabled state.
     */
    this.disabled = false;
    /**
     * Indicates whether an asterisk is displayed next to the label or not.
     */
    this.required = false;
    /**
     * Indicates when the data is synced to ki.
     */
    this.kisynced = false;
    /**
     * Aligns the icons in a compressed manner.
     */
    this.condensedlayout = false;
  }
  renderAsteriskIcon() {
    if (!this.required || !this.label) {
      return;
    }
    return (h("dx-icon", { class: "required-icon", size: 16, icon: "state-required", color: "gold" }));
  }
  renderKiSynced() {
    if (!this.kisynced) {
      return;
    }
    return (h("div", { class: {
        "condensed-layout": this.condensedlayout,
      } }, h(NewKiSyncIcon, null)));
  }
  render() {
    var _a, _b;
    return (h(Host, { style: {
        display: ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0 ? "block" : "none",
      } }, h("div", { class: "label-container" }, h("dx-text", { type: (_b = this.type) !== null && _b !== void 0 ? _b : "its", class: { "label-text": true, disabled: this.disabled } }, this.label), h("div", { class: "required-container" }, this.renderAsteriskIcon()), h("div", { class: {
        "non-clickable-container": true,
        "condensed-layout": this.condensedlayout,
      }, onClick: (e) => {
        e.preventDefault();
      } }, this.renderKiSynced()))));
  }
};
DxInputLabel.style = dxInputLabelCss;

export { DxInputLabel as dx_input_label };
