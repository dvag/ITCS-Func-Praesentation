import { r as registerInstance, h, H as Host, g as getElement, f as forceUpdate } from './index-04c470ea.js';
import { o as onNextFrame, a as isSlotUndefined } from './render-util-1dee6655.js';
import { t as tagOf, f as findUpperElementByPredicate } from './misc-util-d3b69f2c.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';
import './query-util-02753b43.js';

const dxProcessHeaderCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .container{width:100%;padding-top:16px;padding-bottom:8px}:host .container .main-container{display:flex;align-items:flex-end}:host .container .main-container .left-side{--dx-text-color:#2b2b2b;flex:1;overflow:hidden;min-height:40px}:host .container .main-container .left-side .note-container{margin:8px 0}@media (min-width: 1280px){:host .container .main-container .left-side .note-container{margin:6px 0}}:host .container .main-container .left-side .people-display-container{text-align:left;min-height:40px;display:flex;align-items:center;justify-content:flex-start;margin-top:8px}@media (min-width: 760px){:host .container .main-container .left-side{display:flex}:host .container .main-container .left-side>.people-display-container{flex:1;text-align:right;justify-content:flex-end;margin-top:0;align-self:flex-end}:host .container .main-container .left-side>.headline-note-container{flex:1}}:host .container .main-container .context-menu-container{width:40px;margin-left:24px}";

const DxProcessHeader = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => this.updateAlignment(), true);
    this.overflowMenuSlotObserver = new SlotObserver(this.self, "*", (nodes) => {
      const getSlottedOverflowMenu = (slot) => {
        return nodes
          .filter((node) => tagOf(node) === "dx-overflow-menu")
          .find((node) => {
          const hasContextMenuSlot = (element) => element.slot === slot;
          return (hasContextMenuSlot(node) ||
            findUpperElementByPredicate(node, hasContextMenuSlot, (elem) => elem === this.self));
        });
      };
      this.contextMenu = getSlottedOverflowMenu("context-menu");
      this.peopleDisplay = getSlottedOverflowMenu("people-display");
      this.updateAlignment();
      onNextFrame(() => {
        window.forceUpdate = forceUpdate;
        forceUpdate(this);
      });
    });
  }
  disconnectedCallback() {
    var _a;
    this.breakpointAware.disconnect();
    (_a = this.overflowMenuSlotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  updateAlignment() {
    if (this.contextMenu) {
      this.contextMenu.align = "right";
    }
    if (this.peopleDisplay) {
      this.peopleDisplay.align =
        this.breakpointAware.getEffectiveValue({
          mq1: "left",
          mq3: "right",
        });
    }
  }
  renderNote() {
    if (isSlotUndefined(this.self, "note")) {
      return;
    }
    return (h("div", { class: "note-container" }, h("slot", { name: "note" })));
  }
  renderPeopleDisplay() {
    if (isSlotUndefined(this.self, "people-display")) {
      return;
    }
    return (h("div", { class: "people-display-container" }, h("slot", { name: "people-display" })));
  }
  renderContextMenu() {
    if (isSlotUndefined(this.self, "context-menu")) {
      return;
    }
    return (h("div", { class: "context-menu-container" }, h("slot", { name: "context-menu" })));
  }
  renderHeadlineNoteContainer() {
    return (h("div", { class: "headline-note-container" }, h("dx-text", { type: "h3" }, this.headline), this.renderNote()));
  }
  render() {
    return (h(Host, null, h("dx-container", { class: "container", type: "page", color: "transparent" }, h("div", { class: "main-container" }, h("div", { class: "left-side" }, this.renderHeadlineNoteContainer(), this.renderPeopleDisplay()), this.renderContextMenu()))));
  }
  get self() { return getElement(this); }
};
DxProcessHeader.style = dxProcessHeaderCss;

export { DxProcessHeader as dx_process_header };
