import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { M as ModalScrollHelper } from './modal-scroll-helper-ad3b2dc1.js';
import './misc-util-d3b69f2c.js';
import './value-store-f4663db1.js';

const dsFullscreenSpinnerCss = ":host{display:flex;justify-content:center;align-items:center;position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(102, 102, 102, 0.6);z-index:1000}:host:host([hidden]){display:none !important}";

const DsFullscreenSpinner = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  connectedCallback() {
    var _a;
    (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this.mutationObserver = new MutationObserver(() => this.handleBlocking());
    this.mutationObserver.observe(this.self, { attributes: true });
  }
  disconnectedCallback() {
    var _a;
    ModalScrollHelper.instance().unblock(this.self);
    (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  preventInputIfVisible(e) {
    if (this.isVisible) {
      e.preventDefault();
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
  get isVisible() {
    return getComputedStyle(this.self).display !== "none";
  }
  onKeyDown(e) {
    this.preventInputIfVisible(e);
  }
  onKeyUp(e) {
    this.preventInputIfVisible(e);
  }
  handleBlocking() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.isVisible) {
      scrollHelper.block(this.self, null);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  render() {
    return (h(Host, null, h("ds-spinner", { size: "large", theme: "dark", animationduration: 1500 })));
  }
  get self() { return getElement(this); }
};
DsFullscreenSpinner.style = dsFullscreenSpinnerCss;

export { DsFullscreenSpinner as ds_fullscreen_spinner };
