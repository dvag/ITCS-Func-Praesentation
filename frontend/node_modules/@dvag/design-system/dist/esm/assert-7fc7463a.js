function assert(check, message, ...additionalMessageEntries) {
  if (check instanceof Promise) {
    check.then((checkResult) => {
      if (!checkResult) {
        if (additionalMessageEntries != null) {
          console.error(typeof message === "string" ? message : message(), ...additionalMessageEntries);
        }
        else {
          console.error(typeof message === "string" ? message : message());
        }
      }
    });
  }
  else if (check === false) {
    if (additionalMessageEntries != null) {
      console.error(typeof message === "string" ? message : message(), ...additionalMessageEntries);
    }
    else {
      console.error(typeof message === "string" ? message : message());
    }
  }
}
function assertPropertyValue(tagName, propertyName, propertyValue, possibleValues, ...additionalMessageEntries) {
  assert(possibleValues.includes(propertyValue), () => {
    return `<${tagName}> doesn't support for property '${propertyName}' a value '${propertyValue}'. Possible values are ${possibleValues
      .map((v) => `'${v}'`)
      .join(", ")}.`;
  }, ...additionalMessageEntries);
}
function assertPropertyValueByPredicate(tagName, propertyName, propertyValue, predicate, additionalText = "") {
  assert(predicate(), () => {
    return `<${tagName}> doesn't support for property '${propertyName}' a value '${propertyValue}'. ${additionalText}`;
  });
}
function assertPropertyNotEmpty(tagName, propertyName, propertyValue, additionalText = "") {
  assert(!(propertyValue === "" || propertyValue === undefined), () => {
    return `The property '${propertyName}' in <${tagName}> is empty or unset. ${additionalText}`;
  });
}

export { assert as a, assertPropertyValueByPredicate as b, assertPropertyValue as c, assertPropertyNotEmpty as d };
