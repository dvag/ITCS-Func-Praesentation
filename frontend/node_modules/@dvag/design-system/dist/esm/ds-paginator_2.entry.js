import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { c as clamp } from './math-util-3928f6c7.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { a as assert } from './assert-7fc7463a.js';
import './value-store-f4663db1.js';

const GAP = "gap";
function generatePageIndexTypes(currentPage, numberOfPages, pageRange) {
  const start = clamp(currentPage - pageRange, 1, numberOfPages);
  const end = clamp(currentPage + pageRange, 1, numberOfPages);
  const pageArray = [];
  for (let i = start; i <= end; ++i) {
    pageArray.push(i);
  }
  const diff = end - start;
  const maxVisibleMiddlePages = pageRange * 2 + 1;
  if (diff < maxVisibleMiddlePages) {
    if (start === 1) {
      for (let i = 1; i < maxVisibleMiddlePages - diff; ++i) {
        if (end + i < numberOfPages) {
          pageArray.push(end + i);
        }
      }
    }
    else if (end === numberOfPages) {
      for (let i = 1; i < maxVisibleMiddlePages - diff; ++i) {
        if (start - i > 1) {
          pageArray.unshift(start - i);
        }
      }
    }
  }
  const newStart = pageArray[0];
  if (newStart !== 1) {
    if (newStart - 1 > 1) {
      pageArray.unshift(GAP);
    }
    pageArray.unshift(1);
  }
  const newEnd = pageArray[pageArray.length - 1];
  if (newEnd !== numberOfPages) {
    if (newEnd + 1 < numberOfPages) {
      pageArray.push(GAP);
    }
    pageArray.push(numberOfPages);
  }
  return pageArray;
}

const dsPaginatorCss = ":host{display:flex;align-items:center;padding:4px;justify-content:space-between}:host:host([hidden]){display:none !important}:host .page-container{white-space:nowrap;height:32px}:host .page-container .page-button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent;margin:0 4px;width:32px;height:32px}:host .page-container .page-button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host .page-container .page-button:focus{box-shadow:none !important;background-color:#ebebeb;transition:background-color 250ms ease-in;border-radius:50%;--ds-text-color:#424242}:host .page-container .page-button.current-page{--ds-text-color:#a7893d}";

const DsPaginator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.pageChanged = createEvent(this, "pageChanged", 7);
    /**
     * Gibt an wie viele Seiten links und rechts von der aktuellen Seite angezeigt werden sollen.
     *
     * @value number: Die Anzahl an Seiten links und rechts der aktuellen Seite.
     * @example range
     */
    this.range = 1;
    /**
     * Die Seite, die beim Initialisieren ausgewählt sein soll.
     *
     * @value number: Die initiale Seite. Dieser Wert ändert sich während der Laufzeit abhängig von der aktuell
     * ausgewählten Seite.
     *
     * @example current
     */
    this.current = 1;
  }
  onCountChange() {
    this.setCurrentPage(this.current);
  }
  onPageChange(newValue, oldValue) {
    this.setCurrentPage(newValue);
    if (this.current !== oldValue) {
      this.pageChanged.emit(this.current);
    }
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  setCurrentPage(page) {
    const clampedPage = clamp(page, 1, Math.max(this.count, 1));
    if (clampedPage !== this.current) {
      this.current = clampedPage;
    }
  }
  renderGap() {
    return h("ds-text", null, "...");
  }
  renderPageButton(page) {
    return (h("button", { type: "button", id: ElementIdGenerator.createId(this.self, `page-${page}`), class: {
        "page-button": true,
        "current-page": this.current === page,
      }, onClick: () => this.setCurrentPage(page) }, h("ds-text", null, page)));
  }
  renderPageButtons() {
    if (this.count <= 1) {
      return null;
    }
    const pageIndexTypes = generatePageIndexTypes(this.current, this.count, this.range);
    return (h("div", { class: "page-container" }, pageIndexTypes.map((page) => {
      if (page === GAP) {
        return this.renderGap();
      }
      else {
        return this.renderPageButton(page);
      }
    })));
  }
  render() {
    return (h(Host, { style: {
        visibility: this.count <= 1 ? "hidden" : "visible",
      } }, h("ds-icon-button", { class: "page-down", size: "small", id: ElementIdGenerator.createId(this.self, "page-down"), onClick: () => this.setCurrentPage(this.current - 1) }, h("ds-icon", { icon: "drop-down", style: {
        transform: "rotate(90deg)",
      } })), this.renderPageButtons(), h("ds-icon-button", { class: "page-up", size: "small", id: ElementIdGenerator.createId(this.self, "page-up"), onClick: () => this.setCurrentPage(this.current + 1) }, h("ds-icon", { style: {
        transform: "rotate(-90deg)",
      }, icon: "drop-down" }))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "count": ["onCountChange"],
    "current": ["onPageChange"]
  }; }
};
DsPaginator.style = dsPaginatorCss;

const dsTablePageSizePickerCss = ":host{display:flex}:host:host([hidden]){display:none !important}:host button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent;margin-left:8px;margin-right:8px;width:40px;height:40px;background-color:#f5f5f5;border-radius:4px;--ds-text-color:#c1c1c1}:host button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host button:focus{--ds-text-color:#424242;background-color:#ebebeb;box-shadow:none}:host button.current-page-size{--ds-text-color:#a7893d}:host button:hover{--ds-text-color:#856d30;background-color:#ebebeb}:host button .page-container{display:flex;width:24px;height:24px;justify-content:center;align-items:center}:host button .page-container .page-text{--ds-text-font-size:18px}";

const DsTablePageSizePicker = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.pageSizeChanged = createEvent(this, "pageSizeChanged", 7);
  }
  onValueChange() {
    var _a;
    this.setValue((_a = this.value) !== null && _a !== void 0 ? _a : this.getPageSizeArray()[0]);
  }
  componentWillRender() {
    return new Promise((resolve) => {
      const pageSizes = this.getPageSizeArray();
      assert(Array.isArray(pageSizes), () => {
        return "Fehler beim Parsen des 'pagesizes'-Properties entdeckt.";
      });
      this.setValue(pageSizes.includes(this.value) ? this.value : pageSizes[0]);
      resolve();
    });
  }
  setValue(newPageSize) {
    if (newPageSize !== this.value) {
      this.value = newPageSize;
      this.pageSizeChanged.emit(this.value);
    }
  }
  getPageSizeArray() {
    return JSON.parse(this.pagesizes);
  }
  renderPages() {
    const pageSizes = this.getPageSizeArray();
    return pageSizes.map((pageSize) => {
      return (h("button", { type: "button", class: {
          "current-page-size": this.value === pageSize,
        }, onClick: () => this.setValue(pageSize) }, h("div", { class: "page-container" }, h("ds-text", { class: "page-text", type: "ftg" }, pageSize))));
    });
  }
  render() {
    return h(Host, null, this.renderPages());
  }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
};
DsTablePageSizePicker.style = dsTablePageSizePickerCss;

export { DsPaginator as ds_paginator, DsTablePageSizePicker as ds_table_page_size_picker };
