import { r as registerInstance, f as forceUpdate, h, H as Host, g as getElement } from './index-04c470ea.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';
import { c as createMetaComponentsSlotObserver } from './slot-observer-9196738e.js';
import { a as assert } from './assert-7fc7463a.js';
import { H as HeaderService } from './header-service-3e7097ef.js';
import { i as instanceOfDsHeaderActionConfiguration, a as instanceOfDsHeaderActionListConfiguration } from './header-action-helper-af6d9dad.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { g as generateInitialsForName } from './misc-util-d3b69f2c.js';
import './query-util-02753b43.js';
import './multicast-observable-f2e53ec0.js';
import './value-store-f4663db1.js';

const dsHeaderCss = ":host{display:block;position:-webkit-sticky;position:sticky;z-index:900;top:0;left:0;width:100%}:host:host([hidden]){display:none !important}:host .header-bar{padding:0 16px;display:block;box-sizing:border-box;height:64px;background-color:#ffffff;box-shadow:0 4px 12px 0 rgba(0, 0, 0, 0.16)}@media (min-width: 768px){:host .header-bar{padding:0 24px}}@media (min-width: 1200px){:host .header-bar{padding:0 32px}}:host .header-bar .page-wrapped-content{max-width:1200px;margin:0 auto}@media (min-width: 1200px){:host .header-bar{height:80px}}:host .header-bar .content{height:100%;display:flex;align-items:center}:host .header-bar .content .logo{display:flex;flex:0.5;width:100%}:host .header-bar .content .logo ds-text{padding:24px}@media (min-width: 768px){:host .header-bar .content .logo ds-text{padding-right:32px}}@media (min-width: 1200px){:host .header-bar .content .logo ds-text{padding-right:48px}}:host .header-bar .content .center{display:flex;justify-content:center;width:100%;flex:1}:host .header-bar .content .right{flex:0.5;display:flex;justify-content:flex-end;align-items:center;width:100%;height:100%}:host .header-bar .action-items-in-header{display:flex;height:100%}:host .header-bar .action-items-in-header .action-item-container .header-action-item{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:none;cursor:pointer;border:none;width:100%;display:flex;cursor:pointer;width:100%;height:56px;box-sizing:border-box;justify-content:left;align-items:center;border:0;padding:0;margin:0;flex-grow:1;padding:16px}:host .header-bar .action-items-in-header .action-item-container .header-action-item:hover{background-color:#f5f5f5}:host .header-bar .action-items-in-header .action-item-container .header-action-item:active{background-color:#dedede}:host .header-bar .action-items-in-header .action-item-container .header-action-item.highlight ds-text{font-weight:bold}:host .header-bar .action-items-in-header .action-item-container ds-text{pointer-events:none;white-space:nowrap;overflow-x:hidden}:host .header-bar .action-items-in-header .action-item-container .action-list{width:100%;height:57px;overflow:hidden}:host .header-bar .action-items-in-header .action-item-container .action-list .text-and-arrow{display:flex;align-items:center;flex-grow:1;justify-content:space-between}:host .header-bar .action-items-in-header .action-item-container .action-list .text-and-arrow .arrow{transition:all linear 150ms}:host .header-bar .action-items-in-header .action-item-container .action-list.open{height:max-content}:host .header-bar .action-items-in-header .action-item-container .action-list.open .arrow{transform:rotate(180deg)}:host .user-avatar{position:relative;height:100%;user-select:none;-webkit-user-select:none}:host .user-avatar .user-avatar-button{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:none;cursor:pointer;border:none;width:100%;display:flex;flex-direction:column;align-items:center;padding:0 8px;height:100%;transition:background-color 150ms ease-in-out}:host .user-avatar .user-avatar-button .avatar-circle{height:32px;flex-shrink:0}:host .user-avatar .user-avatar-button .filler{height:100%;flex-shrink:1;display:flex;justify-content:center;align-items:center}:host .user-avatar .user-avatar-button .filler .arrow{opacity:0;transition:opacity 150ms ease-in-out, transform 150ms ease-in-out;height:16px;transform:translateY(-100%)}:host .user-avatar .user-avatar-button:hover,:host .user-avatar .user-avatar-button.open{background-color:#f5f5f5;cursor:pointer}:host .user-avatar .user-avatar-button:hover .arrow,:host .user-avatar .user-avatar-button.open .arrow{opacity:1;transform:translateY(0)}:host .user-avatar .user-avatar-button.open .arrow{transform:rotate(180deg)}:host .user-avatar .popup{position:absolute;right:0;bottom:0;display:none}:host .user-avatar .popup.open{display:block;transition:height ease-in-out 500ms}:host .user-avatar .popup .popup-inner{position:absolute;top:1px;right:0;min-width:175px;max-width:345px;background-color:white;border-bottom-left-radius:6px;border-bottom-right-radius:6px;box-shadow:0 4px 12px 0 rgba(0, 0, 0, 0.32)}:host .user-avatar .popup .popup-inner .action-item-container .header-action-item{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:none;cursor:pointer;border:none;width:100%;display:flex;cursor:pointer;width:100%;height:56px;box-sizing:border-box;justify-content:left;align-items:center;border:0;padding:0;margin:0;flex-grow:1;padding:16px}:host .user-avatar .popup .popup-inner .action-item-container .header-action-item:hover{background-color:#f5f5f5}:host .user-avatar .popup .popup-inner .action-item-container .header-action-item:active{background-color:#dedede}:host .user-avatar .popup .popup-inner .action-item-container .header-action-item.highlight ds-text{font-weight:bold}:host .user-avatar .popup .popup-inner .action-item-container ds-text{pointer-events:none;white-space:nowrap;overflow-x:hidden}:host .user-avatar .popup .popup-inner .action-item-container .action-list{width:100%;height:57px;overflow:hidden}:host .user-avatar .popup .popup-inner .action-item-container .action-list .text-and-arrow{display:flex;align-items:center;flex-grow:1;justify-content:space-between}:host .user-avatar .popup .popup-inner .action-item-container .action-list .text-and-arrow .arrow{transition:all linear 150ms}:host .user-avatar .popup .popup-inner .action-item-container .action-list.open{height:max-content}:host .user-avatar .popup .popup-inner .action-item-container .action-list.open .arrow{transform:rotate(180deg)}:host .user-avatar .popup .popup-inner .popup-head{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:none;cursor:pointer;border:none;width:100%;padding:16px;background-color:#f5f5f5;text-align:left}:host .user-avatar .popup .popup-inner .popup-head.interactable{cursor:pointer}:host .user-avatar .popup .popup-inner .popup-head.interactable:hover{background-color:#c1c1c1}:host .user-avatar .popup .popup-inner .popup-head.interactable:active{background-color:#dedede}:host .user-avatar .popup .popup-inner .popup-action{padding:16px;display:flex;justify-content:center}:host .separator{display:flex;justify-content:flex-end}:host .separator .line{width:100%;height:1px;background-color:#f5f5f5}";

const DsHeader = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.userPopupOpen = false;
    this.headerActionItems = [];
    /*Switch to render action-items in header or in avatar-menu
     will be converted to a Prop when necessary*/
    this.renderActionItemsInHeader = false;
    /**
     * Whether the header is used within a fullscreen application or not.
     *
     * @value true: The header content takes the full application width into consideration.
     * @value false: The header content has a defined maximal width of 1200 pixels.
     *
     * @example fullscreen
     */
    this.fullscreen = false;
    /**
     * Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo).
     * @value default: Deutsche Vermögensberatung (Standardwert)
     * @value allfinanz: Deutsche Vermögensberatung Allfinanz
     * @example header-allfinanz
     */
    this.brand = "default";
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this));
    this.userConfigObserver =
      createMetaComponentsSlotObserver(this.self, "ds-header-user", (nodes) => {
        assert(nodes.length <= 1, () => "<ds-header> Zuviele <ds-header-user> Elemente gefunden");
        if (nodes.length > 0) {
          nodes[0].toHeaderUserConfiguration().then((config) => {
            this.userConfiguration = config;
          });
        }
      });
    this.customerConfigObserver =
      createMetaComponentsSlotObserver(this.self, "ds-header-customer", (nodes) => {
        assert(nodes.length <= 1, () => "<ds-header> Zuviele <ds-header-customer> Elemente gefunden");
        if (nodes.length > 0) {
          nodes[0]
            .toHeaderCustomerConfiguration()
            .then((config) => (this.customerConfiguration = config));
        }
      });
    const headerService = HeaderService.instance();
    const currentRegisteredHeader = headerService.header;
    if (currentRegisteredHeader && currentRegisteredHeader !== this.self) {
      console.warn('Es ist bereits ein <ds-header>-Element registriert worden.\n\n"Es kann nur einen geben".\n- Connor MacLeod');
    }
    headerService.header = this.self;
  }
  disconnectedCallback() {
    var _a, _b, _c, _d;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.userConfigObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.customerConfigObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    (_d = this.headerActionItemObserver) === null || _d === void 0 ? void 0 : _d.disconnect();
    const headerService = HeaderService.instance();
    if (headerService.header === this.self) {
      headerService.header = null;
    }
  }
  windowClicked(e) {
    // Close popup if clicked outside of avatar area
    if (this.userPopupOpen &&
      !e.composedPath().includes(this.userAvatarElement)) {
      this.toggleUserPopup();
      e.stopPropagation();
    }
  }
  getLogo() {
    if (this.breakpointAware.xs) {
      return "bildmarke";
    }
    else {
      if (this.brand === "allfinanz") {
        return "wortmarke-allfinanz";
      }
      return "wortmarke";
    }
  }
  toggleUserPopup() {
    this.userPopupOpen = !this.userPopupOpen;
  }
  render() {
    return (h(Host, null, h("div", { class: "header-bar" }, h("div", { class: {
        content: true,
        "page-wrapped-content": !this.fullscreen,
      } }, h("div", { class: "logo" }, h("ds-logo", { type: this.getLogo() })), h("div", { class: "center" }, h("slot", { name: "center" }), this.renderCustomer()), h("div", { class: "right" }, h("slot", { name: "right" }), this.renderHeaderItems()))), h("slot", { name: "below" })));
  }
  renderHeaderItems() {
    if (this.renderActionItemsInHeader) {
      return (h("div", { class: "action-items-in-header" }, this.renderHeaderMenuActionItems(this.headerActionItems)));
    }
    else {
      return this.renderHeaderMenuItems();
    }
  }
  renderCustomer() {
    if (this.customerConfiguration == null) {
      return;
    }
    const delimiter = ": ";
    return (h("ds-text", { type: "it" }, this.customerConfiguration.typeLabel, delimiter, this.customerConfiguration.name));
  }
  renderHeaderMenuItems() {
    var _a;
    if (((_a = this.userConfiguration) === null || _a === void 0 ? void 0 : _a.name) != null) {
      return (h("div", { class: "user-avatar", ref: (el) => (this.userAvatarElement = el) }, h("button", { id: ElementIdGenerator.createIdFromString(this.userConfiguration.id, "menu-control"), class: {
          "user-avatar-button": true,
          open: this.userPopupOpen,
        }, onClick: () => this.toggleUserPopup() }, h("div", { class: "filler" }), h("ds-user-avatar", { class: "avatar-circle", size: "header", imageurl: this.userConfiguration.imageUrl, initials: generateInitialsForName(this.userConfiguration.name) }), h("div", { class: "filler" }, h("ds-icon", { class: "arrow", size: 16, icon: "drop-down" }))), h("div", { class: {
          popup: true,
          open: this.userPopupOpen,
        } }, h("div", { class: "popup-inner" }, this.renderHeaderMenuActionItems(this.headerActionItems), h("button", { id: ElementIdGenerator.createIdFromString(this.userConfiguration.id, "menu-item-control"), class: {
          "popup-head": true,
          interactable: this.userConfiguration.usernameInteractable,
        }, disabled: !this.userConfiguration.usernameInteractable, onClick: () => {
          if (this.userConfiguration.usernameInteractable) {
            this.userConfiguration.usernameInteraction();
          }
        } }, h("ds-text", { type: "it", screensize: "small", color: "anthrazit" }, this.userConfiguration.name)), h("div", { class: "user-action-item-container" }, this.renderHeaderMenuActionItems(this.userConfiguration.children)), h("div", { class: "popup-action" }, h("ds-button", { id: "ds-header-btn-toggle-user-popup", size: "small", type: "secondary", onClick: () => {
          this.userConfiguration.signOut();
          this.toggleUserPopup();
        } }, h("ds-text", null, "Abmelden")))))));
    }
  }
  renderHeaderMenuActionItems(actionConfigurations) {
    return (h("div", { class: "action-item-container" }, actionConfigurations.map((item) => {
      if (instanceOfDsHeaderActionConfiguration(item)) {
        return this.renderHeaderMenuAction(item);
      }
      else if (instanceOfDsHeaderActionListConfiguration(item)) {
        return this.renderHeaderActionMenuItemsRecursiv(item);
      }
    })));
  }
  renderHeaderMenuAction(item, depth = 0) {
    var _a;
    return [
      h("button", { id: ElementIdGenerator.createIdFromString(item.id, "control"), class: {
          "header-action-item": true,
          highlight: item.highlight,
        }, onClick: () => {
          item.oninteraction();
        } }, h("ds-text", { type: "it" }, (_a = item.label) !== null && _a !== void 0 ? _a : "")),
      this.renderSeparator(depth * 25),
    ];
  }
  renderHeaderMenuActionList(item, depth = 0) {
    var _a;
    return [
      h("button", { id: ElementIdGenerator.createIdFromString(item.id, "control"), class: "header-action-item", onClick: () => {
          item.toggleOpen();
        } }, h("div", { class: "text-and-arrow" }, h("ds-text", { type: "ft" }, (_a = item.label) !== null && _a !== void 0 ? _a : ""), h("ds-icon", { class: "arrow", size: 16, icon: "drop-down" }))),
      this.renderSeparator(depth * 25),
    ];
  }
  renderHeaderActionMenuItemsRecursiv(actionListConfiguration, depth = 0) {
    var _a;
    return (h("div", { class: { "action-list": true, open: actionListConfiguration.open } }, [
      this.renderHeaderMenuActionList(actionListConfiguration, depth),
      (_a = actionListConfiguration.children) === null || _a === void 0 ? void 0 : _a.map((item) => {
        if (instanceOfDsHeaderActionConfiguration(item)) {
          return this.renderHeaderMenuAction(item, depth + 1);
        }
        else if (instanceOfDsHeaderActionListConfiguration(item)) {
          return this.renderHeaderActionMenuItemsRecursiv(item, depth + 1);
        }
      }),
    ]));
  }
  renderSeparator(subtractWidth) {
    return (h("div", { class: "separator" }, h("div", { class: "line", style: { width: `calc(100% - ${subtractWidth}px)` } })));
  }
  get self() { return getElement(this); }
};
DsHeader.style = dsHeaderCss;

export { DsHeader as ds_header };
