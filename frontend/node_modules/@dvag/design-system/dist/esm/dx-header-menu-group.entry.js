import { r as registerInstance, h, g as getElement } from './index-04c470ea.js';
import { e as getSlottedContent, t as tagOf } from './misc-util-d3b69f2c.js';
import { g as getSpacerWidth } from './sizes.util-0576b947.js';
import { i as isMenuLink, a as isMenuItem } from './header-menu.util-16645eb3.js';
import './assert-7fc7463a.js';

const dxHeaderMenuGroupCss = ":host{display:block}:host:host([hidden]){display:none !important}:host ::slotted(dx-header-menu-item),:host ::slotted(dx-header-app-favorites),:host ::slotted(dx-header-user),:host ::slotted(dx-header-navigation){z-index:1}:host dx-header-menu-item,:host dx-header-app-favorites,:host dx-header-user,:host dx-header-navigation{z-index:1}";

const DxHeaderMenuGroup = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * @internal
     */
    this.internalopen = true;
  }
  /**
   * @internal
   */
  async getInnerMenuItems() {
    return Array.from(this.self.querySelectorAll(":scope > dx-header-menu-item, dx-header-user"));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    const slots = getSlottedContent(this.self);
    const menuEntryWidths = (await Promise.all(slots
      .filter((element) => isMenuLink(element) || isMenuItem(element))
      .map((element) => element.getDefaultWidth()))).reduce((acc, width) => acc + width, 0);
    const spacerWidths = slots
      .filter((element) => tagOf(element) === "dx-spacer")
      .reduce((acc, spacer) => acc + getSpacerWidth(spacer), 0);
    return menuEntryWidths + spacerWidths;
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("slot", null)));
  }
  get self() { return getElement(this); }
};
DxHeaderMenuGroup.style = dxHeaderMenuGroupCss;

export { DxHeaderMenuGroup as dx_header_menu_group };
