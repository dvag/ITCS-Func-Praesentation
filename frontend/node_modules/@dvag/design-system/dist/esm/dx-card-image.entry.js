import { r as registerInstance, f as forceUpdate, h, H as Host } from './index-04c470ea.js';
import { a as assert } from './assert-7fc7463a.js';
import { B as BreakpointAware } from './breakpoint-aware-0017fabb.js';

const dxCardImageCss = ":host{display:block;line-height:0}:host:host([hidden]){display:none !important}:host .proportional-image{width:100%}:host .cover-image{background-size:cover}";

const DxCardImage = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Defines the fit of the image.
     *
     * @value  proportional: The image is scaled proportional to its width.
     * @value cover: The image is displayed with a set height. The height is set via the `coverheightmq` properties. The visible part of the image can be controlled using the `coverpositionmq` properties.
     */
    this.fit = "proportional";
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this), true);
  }
  disconnectedCallback() {
    this.breakpointAware.disconnect();
  }
  render() {
    var _a, _b;
    assert(this.url != null, () => "<dx-card-image-header> Eigenschaft 'url' muss gesetzt sein.");
    if (this.fit === "proportional") {
      return (h(Host, null, h("img", { src: this.url, alt: "", class: "proportional-image" })));
    }
    else {
      const coverHeight = (_a = this.breakpointAware.getEffectiveValue({
        mq1: this.coverheightmq1,
        mq2: this.coverheightmq2,
        mq3: this.coverheightmq3,
        mq4: this.coverheightmq4,
        mq5: this.coverheightmq5,
      })) !== null && _a !== void 0 ? _a : "300px";
      const coverPosition = (_b = this.breakpointAware.getEffectiveValue({
        mq1: this.coverpositionmq1,
        mq2: this.coverpositionmq2,
        mq3: this.coverpositionmq3,
        mq4: this.coverpositionmq4,
        mq5: this.coverpositionmq5,
      })) !== null && _b !== void 0 ? _b : "center";
      return (h(Host, null, h("div", { class: "cover-image", style: {
          height: coverHeight,
          "background-position": coverPosition,
          "background-image": `url(${this.url})`,
        } })));
    }
  }
};
DxCardImage.style = dxCardImageCss;

export { DxCardImage as dx_card_image };
