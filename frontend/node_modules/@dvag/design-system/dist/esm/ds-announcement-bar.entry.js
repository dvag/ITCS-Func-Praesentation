import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { s as subscribeToHeaderHeight, H as HeaderService } from './header-service-3e7097ef.js';
import './multicast-observable-f2e53ec0.js';
import './value-store-f4663db1.js';

const dsAnnouncementBarCss = ":host{display:block;position:sticky;top:0;left:0;right:0;background-color:white;padding:16px 0;z-index:899}:host:host([hidden]){display:none !important}";

const DsAnnouncementBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  connectedCallback() {
    this.headerHeightSubscription = subscribeToHeaderHeight((height) => (this.headerHeight = height));
    this.resizeObserver = new ResizeObserver(() => {
      HeaderService.instance().reserveHeightFor(this.self, this.self.offsetHeight);
    });
    this.resizeObserver.observe(this.self);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.headerHeightSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    HeaderService.instance().freeHeightFor(this.self);
  }
  render() {
    return (h(Host, { style: { top: `${this.headerHeight}px` } }, h("ds-page", null, h("slot", null))));
  }
  get self() { return getElement(this); }
};
DsAnnouncementBar.style = dsAnnouncementBarCss;

export { DsAnnouncementBar as ds_announcement_bar };
