import { r as registerInstance, c as createEvent, h, F as Fragment, H as Host, g as getElement } from './index-04c470ea.js';
import { o as onNextFrame } from './render-util-1dee6655.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import './query-util-02753b43.js';

const dxBreadcrumbCss = ":host{flex-grow:1}:host:host([hidden]){display:none !important}.item-measurement-box{position:fixed;top:-3000px;display:flex;visibility:hidden;pointer-events:none}.width-measurement-box{display:flex;height:36px;align-items:center}.breadcrumb-parts-container{overflow:hidden;display:flex;align-items:center;--dx-text-color:var(--dx-header-text-icon-theme-color, #808080);--dx-icon-color:var(--dx-header-text-icon-theme-color, #808080);white-space:nowrap}.breadcrumb-parts-container .chevron-icon{flex-shrink:0}.breadcrumb-parts-container .breadcrumb-item{height:36px;padding-right:8px}.breadcrumb-parts-container .breadcrumb-item.with-label{padding:0 8px}.breadcrumb-parts-container .breadcrumb-item.with-dots{padding-right:4px}.breadcrumb-parts-container .breadcrumb-item.with-home-icon{padding-right:4px}.breadcrumb-parts-container .breadcrumb-item .breadcrumb-item-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;padding:0;height:100%;transition:background-color 300ms ease-in-out;--dx-text-color-transition:none}.breadcrumb-parts-container .breadcrumb-item .breadcrumb-item-button[disabled]{cursor:unset}@media not all and (pointer: coarse){.breadcrumb-parts-container .breadcrumb-item .breadcrumb-item-button:hover{cursor:pointer;--dx-text-color:var(--dx-header-breadcrumb-text-icon-hover-color, #00587c);--dx-icon-color:var(--dx-header-breadcrumb-text-icon-hover-color, #00587c);background-color:var(--dx-header-breadcrumb-background-hover-color, transparent)}}.breadcrumb-parts-container .breadcrumb-item .breadcrumb-item-button:active{--dx-text-color:var(--dx-header-breadcrumb-text-icon-active-color, #004763);--dx-icon-color:var(--dx-header-breadcrumb-text-icon-active-color, #004763);background-color:var(--dx-header-breadcrumb-background-active-color, transparent)}.breadcrumb-parts-container .breadcrumb-item:last-child{display:inline-flex;align-items:center;padding-right:0;padding-left:8px}.breadcrumb-parts-container .breadcrumb-item:last-child dx-text{padding-right:0;cursor:default}.breadcrumb-parts-container .breadcrumb-item:last-child.ellipsis{overflow:hidden}.breadcrumb-parts-container .breadcrumb-item:last-child.ellipsis .ellipsis-text{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}";

const DxBreadcrumb = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.navigateHome = createEvent(this, "navigateHome", 7);
    this.navigate = createEvent(this, "navigate", 7);
    this.renderHomeIcon = true;
    this.items = [];
    this.renderModel = [];
  }
  connectedCallback() {
    this.itemObserver = new SlotObserver(this.self, "dx-breadcrumb-item", async (nodes) => {
      await this.collectOptions(nodes);
    });
    this.measurementResizeObserver = new ResizeObserver(() => {
      this.measureBreadcrumbParts();
    });
  }
  componentDidRender() {
    this.measureBreadcrumbParts();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.itemObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.measurementResizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  onResize() {
    this.updateModel();
  }
  async collectOptions(nodes) {
    return Promise.all(nodes.map((node) => {
      return node.toItem();
    })).then((nodes) => {
      this.items = nodes;
    });
  }
  updateModel() {
    var _a;
    const breadcrumbContainerWidth = (_a = this.breadcrumbContainer) === null || _a === void 0 ? void 0 : _a.clientWidth;
    const totalItemWidth = this.calculateItemWidth();
    const breadcrumbsFit = totalItemWidth <= breadcrumbContainerWidth;
    this.renderHomeIcon = breadcrumbsFit;
    if (breadcrumbsFit) {
      this.renderModel = this.items;
    }
    else {
      onNextFrame(() => {
        this.renderModel = this.calculateRemainingItems(breadcrumbContainerWidth);
      });
    }
  }
  calculateRemainingItems(breadcrumbContainerWidth) {
    let itemWidth = this.calculateItemWidth();
    const remainingItems = Array.from(this.items);
    while (itemWidth - HOME_AND_DOTS_WIDTH_DIFFERENCE > breadcrumbContainerWidth &&
      remainingItems.length > 1) {
      remainingItems.shift();
      const skippedElements = (this.items.length + HOME_OR_DOTS_OFFSET - remainingItems.length) *
        HTML_ELEMENTS_PER_LOGICAL_BUTTON;
      itemWidth = this.calculateItemWidth(skippedElements);
    }
    return remainingItems;
  }
  measureBreadcrumbParts() {
    if (this.totalItemWidth === this.calculateItemWidth()) {
      return;
    }
    onNextFrame(() => {
      this.updateModel();
      this.totalItemWidth = this.calculateItemWidth();
    });
  }
  calculateItemWidth(elementsToSkip = 0) {
    var _a, _b, _c;
    const measurementBoxChildren = Array.from((_c = (_b = (_a = this.measurementBox) === null || _a === void 0 ? void 0 : _a.children[0]) === null || _b === void 0 ? void 0 : _b.children) !== null && _c !== void 0 ? _c : []);
    const spliced = measurementBoxChildren.splice(elementsToSkip);
    const totalWidth = spliced.reduce((prev, curr) => prev + curr.clientWidth, 0);
    const widthForDotsTextOrHomeIcon = elementsToSkip > 0 ? 48 : 0;
    return totalWidth + widthForDotsTextOrHomeIcon;
  }
  setMeasurementBox(measurementBox) {
    if (measurementBox !== this.measurementBox) {
      this.measurementResizeObserver.disconnect();
      this.measurementResizeObserver.observe(measurementBox);
      this.measurementBox = measurementBox;
      requestAnimationFrame(() => {
        this.totalItemWidth = this.calculateItemWidth();
      });
    }
  }
  renderBreadcrumb() {
    return [
      this.renderHomeIcon ? this.renderHomePart() : this.renderDots(),
      this.renderBreadcrumbItems(this.renderModel),
    ];
  }
  renderBreadcrumbItems(items) {
    return items.map((item, index) => {
      return this.renderBreadcrumbItem(item, items.length === 1, index === items.length - 1);
    });
  }
  renderBreadcrumbItem(item, textEllipsis = false, lastItem = false) {
    if (!lastItem) {
      return (h(Fragment, null, h("div", { class: { "breadcrumb-item": true, "with-label": true } }, h("button", { class: "breadcrumb-item-button", onClick: () => this.navigate.emit(item.value) }, this.renderBreadcrumbItemText(textEllipsis, item))), this.renderChevron()));
    }
    else {
      return (h("div", { class: { "breadcrumb-item": true, ellipsis: textEllipsis } }, this.renderBreadcrumbItemText(textEllipsis, item)));
    }
  }
  renderBreadcrumbItemText(textEllipsis, item) {
    return (h("dx-text", { type: "Infotext-Small", class: { "ellipsis-text": textEllipsis } }, item.label));
  }
  renderHomePart() {
    return (h(Fragment, null, h("div", { class: { "breadcrumb-item": true, "with-home-icon": true } }, h("button", { class: "breadcrumb-item-button", onClick: () => this.navigateHome.emit() }, h("dx-icon", { class: "home-icon", icon: "home", size: 16 }))), this.renderChevron()));
  }
  renderDots() {
    var _a;
    const previousItem = this.items.length - this.renderModel.length - 1;
    const navigateValue = (_a = this.items[previousItem]) === null || _a === void 0 ? void 0 : _a.value;
    return (h(Fragment, null, h("div", { class: { "breadcrumb-item": true, "with-dots": true } }, h("button", { class: "breadcrumb-item-button", onClick: () => {
        if (previousItem >= 0) {
          this.navigate.emit(navigateValue);
        }
        else {
          this.navigateHome.emit();
        }
      } }, h("dx-text", { type: "Infotext-Small", key: "ellipse" }, "..."))), this.renderChevron()));
  }
  renderChevron() {
    return h("dx-icon", { class: "chevron-icon", icon: "chevron-rechts", size: 16 });
  }
  render() {
    return (h(Host, null, h("div", { class: "item-measurement-box", ref: (ref) => {
        this.setMeasurementBox(ref);
      } }, h("div", { class: "breadcrumb-parts-container" }, this.renderHomePart(), this.renderBreadcrumbItems(this.items))), h("div", { ref: (ref) => (this.breadcrumbContainer = ref), class: "width-measurement-box" }, h("div", { class: "breadcrumb-parts-container" }, this.renderBreadcrumb()))));
  }
  get self() { return getElement(this); }
};
const HOME_AND_DOTS_WIDTH_DIFFERENCE = 4;
const HOME_OR_DOTS_OFFSET = 1;
const HTML_ELEMENTS_PER_LOGICAL_BUTTON = 2; // Each button has a chevron, so we need to compute with 2 html elements for each
DxBreadcrumb.style = dxBreadcrumbCss;

export { DxBreadcrumb as dx_breadcrumb };
