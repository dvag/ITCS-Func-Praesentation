import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import './value-store-f4663db1.js';

const dxHeaderMenuButtonCss = ":host{display:block;--dx-icon-color:var(--dx-header-menu-link-text-icon-theme-color, #2b2b2b);--dx-text-color:var(--dx-header-menu-link-text-icon-theme-color, #2b2b2b)}:host:host([hidden]){display:none !important}:host .button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;display:flex;height:56px;min-width:48px;align-items:center;justify-content:center;position:relative;transition:background-color 150ms ease-in-out;overflow:hidden}:host .button[disabled]{cursor:unset}:host .button.icon-right{flex-direction:row-reverse}:host .button:focus-visible{outline:2px solid #004763}:host .button:focus-visible{outline:2px solid #004763;outline-offset:-6px}@media not all and (pointer: coarse){:host .button:hover{background-color:var(--dx-header-menu-item-hover-color, #f7f7f7);--dx-notification-indicator-background-color:var(--dx-header-menu-item-hover-color, #f7f7f7)}:host .button:hover .line{opacity:1}}:host .button:active{background-color:var(--dx-header-menu-item-active-color, #ededed);--dx-notification-indicator-background-color:var(--dx-header-menu-item-active-color, #ededed)}:host .button:active .line{opacity:1}:host .button.active .line,:host .button.selected .line{opacity:1}:host .button .line{position:absolute;bottom:0;left:0;display:block;width:100%;height:2px;transition:opacity 150ms ease-in-out;opacity:0;background-color:var(--dx-header-menu-item-selected-state-line-color, #c8aa22)}";

const DxHeaderMenuButton = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.interaction = createEvent(this, "interaction", 7);
    /**
     * Displays this menu button as active.
     * @value true: The menu button displays a line at the bottom and replaces the slotted content with a close icon.
     * @value false: The menu button item displays the slotted content.
     */
    this.active = false;
    /**
     * Displays this menu button as selected.
     * @value true: The menu button displays a line under the slotted content.
     * @value false: The menu button item displays the slotted content.
     */
    this.selected = false;
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     *
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     */
    this.notificationstheme = "system";
  }
  getNotifications() {
    if (this.active) {
      return undefined;
    }
    return this.notifications;
  }
  render() {
    return (h(Host, null, h("button", { id: ElementIdGenerator.createId(this.self, "control"), class: {
        button: true,
        active: this.active,
        selected: this.selected,
      }, onClick: () => {
        this.interaction.emit();
      } }, h("dx-notification-indicator", { theme: this.notificationstheme, notifications: this.getNotifications() }, h("dx-element-swapper", { active: this.active ? "second" : "first" }, h("slot", { slot: "first" }), h("dx-icon", { slot: "second", icon: "schliessen", color: "headline", size: 24 }))), h("div", { class: "line" }))));
  }
  get self() { return getElement(this); }
};
DxHeaderMenuButton.style = dxHeaderMenuButtonCss;

function isValidNotificationIndicatorType(notificationIndicatorType) {
  return (isValidNotificationIndicatorTypeNumber(notificationIndicatorType) ||
    notificationIndicatorType === "no-number");
}
function isValidNotificationIndicatorTypeNumber(notificationIndicatorType) {
  return !!notificationIndicatorType && notificationIndicatorType >= 1;
}
function formatNotificationIndicatorType(notificationIndicatorType) {
  if (!isValidNotificationIndicatorTypeNumber(notificationIndicatorType)) {
    return "";
  }
  const roundedNotificationIndicatorType = Math.round(notificationIndicatorType);
  return roundedNotificationIndicatorType > 99
    ? "99+"
    : roundedNotificationIndicatorType.toString();
}

const dxNotificationIndicatorCss = ":host{display:block;position:relative}:host:host([hidden]){display:none !important}:host .notification-indicator{position:absolute;width:12px;height:12px;top:var(--dx-notification-indicator-top, -4px);right:var(--dx-notification-indicator-right, -2px);transform:scale(0);transition:transform 150ms ease-in-out, border-color 150ms ease-in-out;border:2px solid var(--dx-notification-indicator-background-color, #ffffff);border-radius:12px}:host .notification-indicator.show{transform:scale(1)}:host .notification-indicator.displays-notification-number{min-width:16px;width:unset;height:16px;top:var(--dx-notification-indicator-display-number-top, -8px);right:var(--dx-notification-indicator-display-number-right, -5px);font-family:DVAG-Type, sans-serif;font-size:12px;border-radius:16px}:host .notification-indicator.displays-notification-number.two-digits{padding:0 4px;top:var(--dx-notification-indicator-display-big-number-top, -8px);right:var(--dx-notification-indicator-display-big-number-right, -13.5px)}:host .notification-indicator.theme-system{background-color:#b14e5d;color:#ffffff}:host .notification-indicator.theme-user{background-color:#d6d6d6;color:#000000}";

const DxNotificationIndicator = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     */
    this.theme = "system";
  }
  render() {
    return (h(Host, null, h("slot", null), h("div", { class: {
        "notification-indicator": true,
        "theme-system": this.theme === "system",
        "theme-user": this.theme === "user",
        "displays-notification-number": isValidNotificationIndicatorTypeNumber(this.notifications),
        "two-digits": this.notifications > 9,
        show: isValidNotificationIndicatorType(this.notifications),
      } }, formatNotificationIndicatorType(this.notifications))));
  }
};
DxNotificationIndicator.style = dxNotificationIndicatorCss;

export { DxHeaderMenuButton as dx_header_menu_button, DxNotificationIndicator as dx_notification_indicator };
