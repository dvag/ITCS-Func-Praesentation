import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-04c470ea.js';
import { b as assertPropertyValueByPredicate } from './assert-7fc7463a.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { M as ModalScrollHelper } from './modal-scroll-helper-ad3b2dc1.js';
import { P as PreciseCssSetter } from './precise-css-setter-853ba367.js';
import { i as isSlotDefined } from './render-util-1dee6655.js';
import './value-store-f4663db1.js';
import './misc-util-d3b69f2c.js';

const dxModalCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .overlay{position:fixed;z-index:1001;left:0;top:0;bottom:0;right:0;background-color:rgba(87, 87, 87, 0.6);transition:background-color 300ms ease-in-out}:host .modal-layout{position:fixed;z-index:1001;left:0;top:0;bottom:0;right:0;display:flex;justify-content:center;align-items:flex-start}@media (min-width: 760px){:host .modal-layout{--dx-page-padding:16px;padding:24px var(--dx-page-padding)}}@media (min-width: 760px) and (min-width: 476px){:host .modal-layout{--dx-page-padding:24px}}@media (min-width: 760px) and (min-width: 760px){:host .modal-layout{--dx-page-padding:32px}}@media (min-width: 760px) and (min-width: 1280px){:host .modal-layout{--dx-page-padding:40px}}@media (min-width: 760px) and (min-height: 400px){:host .modal-layout{padding-top:32px;padding-bottom:32px}}@media (min-width: 760px) and (min-height: 800px){:host .modal-layout{padding-top:80px;padding-bottom:80px}}:host .modal-layout .modal-element{position:relative;display:flex;flex-direction:column;background-color:#ffffff;overflow:hidden;max-height:100%;padding:16px 24px;box-sizing:border-box}:host .modal-layout .modal-element .header{display:flex;flex-direction:column}:host .modal-layout .modal-element .header .header-content{display:flex;align-items:center;margin-bottom:16px;flex-shrink:0;justify-content:space-between;position:relative}:host .modal-layout .modal-element .header .header-side{display:flex;justify-content:center;align-items:center}:host .modal-layout .modal-element .header .header-side dx-icon{cursor:pointer}:host .modal-layout .modal-element .header .header-border{height:1px;background-color:#c8aa22}:host .modal-layout .modal-element .modal-content{position:relative;overflow:hidden;display:flex;flex-grow:1}:host .modal-layout .modal-element .modal-content .topShadow{position:absolute;width:100%;height:4px;top:0;z-index:1;background-color:black;opacity:0.1}:host .modal-layout .modal-element .modal-content .topShadow:not(.visible){opacity:0}:host .modal-layout .modal-element .modal-content .bottomShadow{position:absolute;width:100%;height:4px;bottom:0;background-color:black;opacity:0.1}:host .modal-layout .modal-element .modal-content .bottomShadow:not(.visible){opacity:0}:host .modal-layout .modal-element .modal-content .content{position:relative;flex-grow:1;padding:40px 0 40px 0}:host .modal-layout .modal-element .modal-content .content::-webkit-scrollbar{display:none}:host .modal-layout .modal-element .modal-content .content.color-white{background-color:inherit}:host .modal-layout .modal-element .modal-content .content.color-grey{background-color:#ed924e}:host .modal-layout .modal-element .footer{display:flex;flex-direction:column}:host .modal-layout .modal-element .footer .footer-border{height:1px;background-color:#d6d6d6;margin-bottom:16px}:host .modal-layout .modal-element .footer .footer-content{display:flex;flex-direction:column-reverse;flex-shrink:0;align-items:center;gap:16px;--dx-button-width:100%}:host .modal-layout .modal-element .footer .footer-content .footer-left-content,:host .modal-layout .modal-element .footer .footer-content .footer-right-content{display:flex;justify-content:flex-end;flex-wrap:wrap;gap:16px;width:100%}:host .modal-layout .modal-element .footer .footer-content .footer-left-content ::slotted(div),:host .modal-layout .modal-element .footer .footer-content .footer-right-content ::slotted(div){display:flex;justify-content:flex-end;flex-wrap:wrap;gap:16px;width:100%}@media (min-width: 476px){:host .modal-layout .modal-element .footer .footer-content{flex-wrap:wrap-reverse;--dx-button-width:unset;flex-direction:row;justify-content:flex-end;box-sizing:border-box}:host .modal-layout .modal-element .footer .footer-content .footer-right-content,:host .modal-layout .modal-element .footer .footer-content .footer-left-content{max-width:100%;width:max-content}:host .modal-layout .modal-element .footer .footer-content .footer-right-content{margin-left:auto}}:host .modal-layout .modal-element .footer:not(.visible){display:none}:host(.state-closed) .modal-element{opacity:0;visibility:hidden}:host(.state-closing),:host(.state-closed){pointer-events:none}:host(.state-closing) .overlay,:host(.state-closed) .overlay{background-color:rgba(87, 87, 87, 0)}:host(.state-opening) .modal-layout{animation:animate-open 400ms ease-in-out;animation-fill-mode:forwards}:host(.state-closing) .modal-layout{animation:animate-close 400ms ease-in-out;animation-fill-mode:forwards}@keyframes animate-open{from{transform:translateY(-100vh);opacity:0}to{transform:translateY(0);opacity:1}}@keyframes animate-close{0%{transform:translateY(0);opacity:1}100%{transform:translateY(-100vh);opacity:0}}:host .modal-element{width:100%;height:100%}@media (min-width: 476px){:host .modal-element.width-site-navigation{width:354px}}@media (min-width: 760px){:host .modal-element.width-s{width:444px}:host .modal-element.width-m{width:678px}:host .modal-element.width-l{width:912px}:host .modal-element.width-xl{width:1146px}:host .modal-element.width-xxl{width:1380px}}@media (min-width: 760px){:host(.size-defined) .modal-layout .modal-element{height:var(--dx-modal-height)}}@media (min-width: 760px){:host(.size-content) .modal-layout .modal-element{height:initial}}:host(.size-site-navigation-menu) .modal-layout{flex-direction:column;align-items:center;justify-content:flex-start}@media (min-width: 476px){:host(.size-site-navigation-menu) .modal-layout .modal-element{flex-grow:1;max-height:800px}}@media (min-width: 476px){:host(.size-site-navigation-menu) .modal-layout .modal-element{height:initial}}";

const DxModal = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.modalOpened = createEvent(this, "modalOpened", 7);
    this.modalClosed = createEvent(this, "modalClosed", 7);
    this.state = "closed";
    /**
     * Defines the modal's width dependent on the current breakpoint.
     *
     * @value s: The modal takes up to 444 pixels width.
     * @value m: The modal takes up to 678 pixels width.
     * @value l: The modal takes up to 912 pixels width.
     * @value xl: The modal takes up to 1146 pixels width.
     * @value xxl: The modal takes up to 1380 pixels width.
     *
     * @example width
     */
    this.width = "l";
    this.scrollHandler = () => {
      this.controlOpticalHints();
    };
  }
  visibleChanged() {
    this.visibilityChanged();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.visibilityChanged();
  }
  disconnectedCallback() {
    ModalScrollHelper.instance().unblock(this.self);
  }
  componentDidRender() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.visible) {
      scrollHelper.block(this.self, this.scrollableElement);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  visibilityChanged() {
    if (this.visible && this.state !== "opening") {
      this.state = "opening";
      this.modalOpened.emit();
    }
    else if (!this.visible && this.state !== "closed") {
      // DO NOT EMIT modalClosed
      this.handleClosing();
    }
  }
  onLayoutAnimationEnd() {
    if (this.state === "opening") {
      this.state = "opened";
    }
    else if (this.state === "closing") {
      this.state = "closed";
    }
  }
  handleClosing() {
    this.visible = false;
    this.state = "closing";
  }
  closeModal(reason) {
    let shouldCloseModal = true;
    this.modalClosed.emit({
      reason: reason,
      preventCloseModal: () => {
        shouldCloseModal = false;
      },
    });
    if (shouldCloseModal) {
      this.handleClosing();
    }
  }
  closeModalOnClickOutside(e) {
    if (!e.composedPath().includes(this.modalDialog)) {
      this.closeModal("background");
    }
  }
  setScrollContainer(scrollContainer) {
    var _a, _b;
    (_a = this.scrollableElement) === null || _a === void 0 ? void 0 : _a.removeEventListener("scroll", this.scrollHandler);
    this.scrollableElement = scrollContainer;
    (_b = this.scrollableElement) === null || _b === void 0 ? void 0 : _b.addEventListener("scroll", this.scrollHandler);
  }
  controlOpticalHints() {
    if (!this.scrollableElement) {
      return;
    }
    const scrollDistance = this.scrollableElement.scrollTop;
    const maxScrollDistance = this.scrollableElement.scrollHeight - this.scrollableElement.clientHeight;
    const showHeaderShadow = scrollDistance >= maxScrollDistance || scrollDistance > 0;
    const showFooterShadow = scrollDistance == 0 || scrollDistance < maxScrollDistance;
    requestAnimationFrame(() => {
      new PreciseCssSetter(this.topShadowElement)
        .set("visible", showHeaderShadow)
        .execute();
      new PreciseCssSetter(this.bottomShadowElement)
        .set("visible", showFooterShadow)
        .execute();
    });
  }
  getDefinedHeight() {
    const num = parseInt(this.height);
    return !isNaN(num) ? `${num}px` : undefined;
  }
  render() {
    assertPropertyValueByPredicate("dx-modal", "height", this.height, () => {
      return (["fullscreen", "content", "internal-site-navigation-menu"].includes(this.height) || !isNaN(parseInt(this.height)));
    });
    const isRightContainerDefined = isSlotDefined(this.self, PRIMARY_ACTIONS_SLOT);
    const isLeftContainerDefined = isSlotDefined(this.self, SECONDARY_ACTIONS_SLOT);
    const countOfDefinedSlots = (isRightContainerDefined ? 1 : 0) + (isLeftContainerDefined ? 1 : 0);
    const definedHeight = this.getDefinedHeight();
    return (h(Host, { style: {
        "--dx-modal-height": definedHeight,
      }, class: {
        "size-fullscreen": this.height === "fullscreen",
        "size-content": this.height === "content",
        "size-site-navigation-menu": this.height === "internal-site-navigation-menu",
        "size-defined": definedHeight != undefined,
        "state-closed": this.state === "closed",
        "state-opened": this.state === "opened",
        "state-opening": this.state === "opening",
        "state-closing": this.state === "closing",
      } }, h("div", { class: "overlay" }), h("div", { class: "modal-layout", onClick: (e) => this.closeModalOnClickOutside(e), onAnimationEnd: () => this.onLayoutAnimationEnd() }, h("div", { ref: (el) => (this.modalDialog = el), class: {
        "modal-element": true,
        "width-s": this.width === "s",
        "width-m": this.width === "m",
        "width-l": this.width === "l",
        "width-xl": this.width === "xl",
        "width-xxl": this.width === "xxl",
        "width-site-navigation": this.width === "internal-site-navigation-menu",
      } }, this.renderHeader(), this.renderContent(countOfDefinedSlots), this.renderFooter(countOfDefinedSlots)))));
  }
  renderHeader() {
    return (h("div", { class: "header" }, h("div", { class: "header-content" }, h("div", null, h("dx-text", { type: "ps" }, this.label)), h("div", { class: "header-side" }, h("dx-icon", { onClick: () => this.closeModal("button"), id: ElementIdGenerator.createId(this.self, "close-button"), icon: "schliessen", size: 24, color: "default" }))), h("div", { class: "header-border" })));
  }
  renderContent(countOfDefinedSlots) {
    return (h("div", { class: "modal-content" }, h("div", { class: { topShadow: true }, ref: (ref) => (this.topShadowElement = ref) }), h("ds-scroll-container", { scrollbaroffset: 4, scrollbarwidth: 8, thumbwidth: 8, scrollbarmargin: 8, scrollbarborderradius: 0 }, h("div", { ref: (el) => {
        this.scrollableElement = el;
        this.setScrollContainer(el);
      }, class: {
        content: true,
        "no-footer": countOfDefinedSlots === 0,
      } }, h("slot", { name: "content" }))), h("div", { class: { bottomShadow: true }, ref: (ref) => (this.bottomShadowElement = ref) })));
  }
  renderFooter(countOfDefinedSlots) {
    return (h("div", { class: {
        footer: true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } }, h("div", { class: "footer-border" }), h("div", { class: "footer-content" }, h("div", { class: "footer-left-content" }, h("slot", { name: SECONDARY_ACTIONS_SLOT })), h("div", { class: "footer-right-content" }, h("slot", { name: PRIMARY_ACTIONS_SLOT })))));
  }
  get self() { return getElement(this); }
  static get watchers() { return {
    "visible": ["visibleChanged"]
  }; }
};
const PRIMARY_ACTIONS_SLOT = "primary-actions";
const SECONDARY_ACTIONS_SLOT = "secondary-actions";
DxModal.style = dxModalCss;

export { DxModal as dx_modal };
