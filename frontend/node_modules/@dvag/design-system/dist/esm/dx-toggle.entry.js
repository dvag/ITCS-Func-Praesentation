import { r as registerInstance, c as createEvent, h, H as Host } from './index-04c470ea.js';

const dxToggleCss = ":host{display:inline-block;line-height:0}:host:host([hidden]){display:none !important}:host .label{position:relative;display:inline-block;width:44px;height:24px;cursor:pointer}:host .label input{position:absolute;opacity:0;width:0;height:0;margin:0}@media not all and (pointer: coarse){:host .label input:hover+.toggle-container .slider,:host .label input:hover+.toggle-container .bubble{border-color:#00587c;--dx-icon-color:#00587c}}:host .label input:active+.toggle-container .slider,:host .label input:active+.toggle-container .bubble{border-color:#004763;--dx-icon-color:#004763}:host .label input:focus-visible+.toggle-container{outline-offset:2px;outline:2px solid #004763}:host .label .toggle-container{width:100%;height:100%;padding:2px 0;box-sizing:border-box}:host .label .slider{height:100%;background-color:#ffffff;transition:background-color 300ms, border-color 300ms;border:1px solid #337a96;box-sizing:border-box;border-radius:24px}:host .label .bubble{position:absolute;height:24px;width:24px;left:0;top:0;background-color:#ffffff;border:1px solid #337a96;box-sizing:border-box;border-radius:50%;--dx-icon-color:#337a96;transition:transform 300ms, background-color 300ms, border-color 300ms;display:flex;justify-content:center;align-items:center}:host:host(.checked) .bubble{transform:translateX(20px);background-color:#337a96;--dx-icon-color:#ffffff}:host:host(.checked) .slider{background-color:#99bdcb}@media not all and (pointer: coarse){:host:host(.checked) input:hover+.toggle-container .bubble{background-color:#00587c;--dx-icon-color:#ffffff}}:host:host(.checked) input:active+.toggle-container .bubble{background-color:#004763;--dx-icon-color:#ffffff}:host:host(.disabled){pointer-events:none;opacity:0.4}";

const DxToggle = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.checkedChange = createEvent(this, "checkedChange", 7);
    /**
     * Defines if the toggle is checked or not.
     * @value true: Toggle is checked
     * @value false: Toggle is not checked
     * @example checked
     */
    this.checked = false;
    /**
     * Defines if the toggle is disabled or not.
     * @value true: Toggle is disabled
     * @value false: Toggle is not disabled
     * @example disabled
     */
    this.disabled = false;
  }
  render() {
    return (h(Host, { class: { disabled: this.disabled, checked: this.checked } }, h("label", { class: "label" }, h("input", { disabled: this.disabled, type: "checkbox", checked: this.checked, onChange: (e) => {
        this.checked = e.target.checked;
        this.checkedChange.emit(this.checked);
      } }), h("div", { class: "toggle-container" }, h("div", { class: "slider" }), h("div", { class: "bubble" }, h("dx-icon", { icon: this.checked ? "check" : "schliessen", size: 16 }))))));
  }
};
DxToggle.style = dxToggleCss;

export { DxToggle as dx_toggle };
