import { r as registerInstance, c as createEvent, g as getElement } from './index-04c470ea.js';
import { c as createMetaComponentsSlotObserver } from './slot-observer-9196738e.js';
import { e as extractHeaderActionConfigurations } from './header-action-helper-af6d9dad.js';
import { b as filterElementsByTagPrefix } from './misc-util-d3b69f2c.js';
import './query-util-02753b43.js';

const DsHeaderUser = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.signOut = createEvent(this, "signOut", 7);
    this.usernameInteraction = createEvent(this, "usernameInteraction", 7);
    this.children = [];
    /**
     * Determines whether the user name within the user menu is interactable.
     * @value true: The user name is interactable. The `usernameInteraction` event is thrown on interaction.
     * @value false: The user name is not interactable.
     */
    this.usernameinteractable = false;
  }
  /**
   * @internal
   */
  async toHeaderUserConfiguration() {
    return {
      id: this.self.id,
      name: this.name,
      imageUrl: this.imageurl,
      signOut: () => this.signOut.emit(),
      usernameInteraction: () => this.usernameInteraction.emit(),
      usernameInteractable: this.usernameinteractable,
      children: await extractHeaderActionConfigurations(this.children),
    };
  }
  connectedCallback() {
    this.childObserver = createMetaComponentsSlotObserver(this.self, ":scope > *", (nodes) => {
      this.children = filterElementsByTagPrefix(nodes, "ds-header-action").map((node) => {
        if (node.tagName.toLowerCase() === "ds-header-action") {
          return node;
        }
        else {
          return node;
        }
      });
    });
  }
  disconnectedCallback() {
    this.childObserver.disconnect();
  }
  get self() { return getElement(this); }
};

export { DsHeaderUser as ds_header_user };
