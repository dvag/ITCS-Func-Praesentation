import { r as registerInstance, h, H as Host, g as getElement } from './index-04c470ea.js';
import { v as verifyElementId, E as ElementIdGenerator } from './element-id-handling-bb37154e.js';
import { S as SlotObserver } from './slot-observer-9196738e.js';
import { i as isSlotDefined } from './render-util-1dee6655.js';
import { a as isActiveElement } from './misc-util-d3b69f2c.js';
import './value-store-f4663db1.js';
import './query-util-02753b43.js';

const dsInfoCss = ":host{display:flex;position:relative;top:0;left:0}:host:host([hidden]){display:none !important}:host:host(.center-content){align-items:center}:host:host(.center-content) .info-container{height:24px}:host:host(:not(.center-content)) .info-container{padding-top:calc(var(--ds-info-button-offset-y, 0px) + 7px);padding-left:var(--ds-info-button-offset-x, 0px)}:host .info-container{position:relative;height:max-content;--dx-popup-offset-left:6px;--dx-popup-offset-top:1px}:host .info-container .info-button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent;margin-left:8px;flex-shrink:0;cursor:pointer}:host .info-container .info-button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host .info-container .info-button:hover{--ds-icon-color:#856d30}:host .info-container .info-button.hidden{pointer-events:none;visibility:hidden}:host .content{height:max-content}:host(.full-width) .content{flex-grow:1;min-width:0}";

const DsInfo = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Defines which width the info element takes
     * @value string: max-width
     * @value string: content
     * @important
     */
    this.size = "max-width";
    /**
     * Hide the Infobutton
     * @value true: Infobutton hidden
     * @value false: Infobutton visible
     * @example hidebutton
     */
    this.hidebutton = false;
    /**
     * Manually controls the visiblity of the popup that contains
     * the explaination text.
     * @value false: Popup is not visible.
     * @value true: Popup is visible.
     * @example popupvisible
     */
    this.popupvisible = false;
    this.infoButtonOffsetX = "0px";
    this.infoButtonOffsetY = "0px";
    this.handleModalOpened = () => {
      this.popupvisible = false;
    };
  }
  /**
   * Sets a modal for the info-I
   *
   * Should not be used with the modal-slot. The slotted modal is more important.
   *
   * @example remote-modal
   */
  async setModal(modal) {
    var _a, _b;
    if (this.modal === modal) {
      return;
    }
    (_a = this.modal) === null || _a === void 0 ? void 0 : _a.removeEventListener("modalOpened", this.handleModalOpened);
    this.modal = modal;
    (_b = this.modal) === null || _b === void 0 ? void 0 : _b.addEventListener("modalOpened", this.handleModalOpened);
  }
  windowClicked(e) {
    this.closePopupOnClickOutside(e);
  }
  onWindowKeyDown() {
    var _a;
    if (this.popupvisible) {
      const isActiveElementInLightDom = ((_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest("ds-info")) === this.self;
      if (!(isActiveElementInLightDom || isActiveElement(this.self))) {
        this.popupvisible = false;
      }
    }
  }
  componentWillLoad() {
    // TODO: Watch auf hideButton to verifyElementId when hideButton is set to true?
    if (!this.hidebutton) {
      verifyElementId(this.self);
    }
    this.contentResizeObserver = new ResizeObserver(() => {
      requestAnimationFrame(() => {
        this.centerContentAndInfo = this.content.offsetHeight <= 28;
        this.computeInfoButtonOffset();
      });
    });
  }
  connectedCallback() {
    this.modalObserver = new SlotObserver(this.self, "ds-modal", async (nodes) => {
      if (nodes.length > 0) {
        await this.setModal(nodes[0]);
      }
    });
  }
  disconnectedCallback() {
    this.modalObserver.disconnect();
    this.contentResizeObserver.disconnect();
  }
  togglePopUp() {
    if (isSlotDefined(this.self, "content")) {
      this.popupvisible = !this.popupvisible;
    }
  }
  closePopupOnClickOutside(e) {
    var _a;
    if (!((_a = this.modal) === null || _a === void 0 ? void 0 : _a.visible) &&
      this.popupvisible &&
      !e.composedPath().includes(this.popup)) {
      this.popupvisible = false;
      e.stopPropagation();
    }
  }
  setContent(ref) {
    var _a, _b;
    if (ref === this.content) {
      this.computeInfoButtonOffset();
      return;
    }
    if (this.content != null) {
      (_a = this.contentResizeObserver) === null || _a === void 0 ? void 0 : _a.unobserve(this.content);
    }
    this.content = ref;
    (_b = this.contentResizeObserver) === null || _b === void 0 ? void 0 : _b.observe(this.content);
  }
  computeInfoButtonOffset() {
    let offsetX, offsetY;
    const contentSlot = this.content
      .firstElementChild;
    const slottedElements = contentSlot === null || contentSlot === void 0 ? void 0 : contentSlot.assignedElements();
    if (slottedElements != null) {
      for (let i = 0; i < slottedElements.length; ++i) {
        const computedStyle = getComputedStyle(slottedElements[i]);
        offsetX = computedStyle.getPropertyValue("--ds-info-button-offset-x");
        offsetY = computedStyle.getPropertyValue("--ds-info-button-offset-y");
        if (offsetX || offsetY) {
          break;
        }
      }
    }
    this.infoButtonOffsetX = offsetX || "0px";
    this.infoButtonOffsetY = offsetY || "0px";
  }
  render() {
    return (h(Host, { class: {
        "full-width": this.size === "max-width",
        "content-width": this.size === "content",
        "center-content": this.centerContentAndInfo,
      }, style: {
        "--ds-info-button-offset-x": this.infoButtonOffsetX,
        "--ds-info-button-offset-y": this.infoButtonOffsetY,
      } }, h("div", { class: "content", ref: (ref) => this.setContent(ref) }, h("slot", null)), h("div", { class: {
        "info-container": true,
      } }, h("button", { id: ElementIdGenerator.createId(this.self, "info-icon"), onClick: () => this.togglePopUp(), class: {
        "info-button": true,
        hidden: this.hidebutton,
      } }, h("ds-icon", { icon: "info", size: 24 })), h("dx-popup", { dstheme: true, ref: (r) => (this.popup = r), arrowposition: "left", show: this.popupvisible, contentwidth: "unconstrained" }, h("slot", { name: "content" }))), h("slot", { name: "modal" })));
  }
  get self() { return getElement(this); }
};
DsInfo.style = dsInfoCss;

export { DsInfo as ds_info };
