'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const breakpointAware = require('./breakpoint-aware-cc9d0ee6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const renderUtil = require('./render-util-6b278c0d.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const headerService = require('./header-service-a7ed7acc.js');
require('./value-store-f683b26f.js');
require('./query-util-8642f149.js');
require('./multicast-observable-e5c008e1.js');

function isValueInEnum(enumeration, value) {
  return Object.values(enumeration).includes(value);
}

const dxHeaderCss = ":host{--dx-header-hide-animation-duration:300ms;display:block;position:sticky;z-index:900;left:0;width:100%;transition:top 300ms ease-in-out;--dx-text-color-transition:color 300ms ease-in-out}:host:host([hidden]){display:none !important}:host .header-bar{height:56px;background-color:var(--dx-header-background-color, #ffffff);transition:background-color 300ms ease-in-out;--dx-icon-transition-duration:300ms}:host .header-bar .content{max-width:1460px;padding:0 16px;box-sizing:border-box;height:100%;display:flex;align-items:center;justify-content:space-between}@media (min-width: 1460px){:host .header-bar .content{margin:auto}}@media (min-width: 476px){:host .header-bar .content{padding:0 24px}}@media (min-width: 760px){:host .header-bar .content{padding:0 32px}}@media (min-width: 1280px){:host .header-bar .content{padding:0 40px}}:host .header-bar .content .application-logo{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;height:max-content;flex-shrink:0;flex-grow:0;padding:0;margin-right:12px}:host .header-bar .content .application-logo[disabled]{cursor:unset}:host .header-bar .content .application-logo.icon-right{flex-direction:row-reverse}:host .header-bar .content .application-logo:focus-visible{outline:2px solid #004763}:host .header-bar .content .application-logo.text{align-self:center}:host .header-bar .content .application-logo.image{align-self:flex-start;outline-offset:-2px}:host .header-bar .content .application-logo .logo{height:max-content}@media (min-width: 760px){:host .header-bar .content .application-logo{margin-right:24px}}:host .header-bar .content .application-name-container{flex:1;overflow:hidden;height:100%}:host .announcement-grow-box{position:relative;z-index:1002}:host .spacer{background-color:#ededed}:host .info-wrapper{background-color:var(--dx-header-info-container-color, #f7f7f7);transition:background-color 300ms ease-in-out}:host .info-wrapper .info-container{--dx-page-padding:16px;max-width:1460px;display:flex;box-sizing:border-box;gap:0;flex-direction:column-reverse;align-items:center;padding:8px var(--dx-page-padding) 0 var(--dx-page-padding)}@media (min-width: 476px){:host .info-wrapper .info-container{--dx-page-padding:24px}}@media (min-width: 760px){:host .info-wrapper .info-container{--dx-page-padding:32px}}@media (min-width: 1280px){:host .info-wrapper .info-container{--dx-page-padding:40px}}@media (min-width: 1460px){:host .info-wrapper .info-container{margin:auto}}:host .info-wrapper .info-container .breadcrumb-container{width:100%}:host .info-wrapper .info-container .representative-container{margin-left:auto;flex-shrink:0}@media (min-width: 760px){:host .info-wrapper .info-container{justify-content:space-between;flex-direction:row;gap:32px;padding-top:0;padding-left:calc(\n          var(--dx-page-padding) + 64px + 24px\n        );padding-right:var(--dx-page-padding)}:host .info-wrapper .info-container.text-logo{padding-left:var(--dx-page-padding)}:host .info-wrapper .info-container .breadcrumb-container{flex-shrink:1;width:100%;overflow:hidden}:host .info-wrapper .info-container .representative-container{flex-shrink:0;margin-left:auto;margin-top:0;margin-bottom:0}}@media (min-width: 1280px){:host .info-wrapper .info-container.text-logo{padding-left:var(--dx-page-padding)}}:host(.show-shadow){box-shadow:0 0 8px rgba(0, 0, 0, 0.16)}:host(.golden-theme){--dx-logo-fill-color:#ffffff;--dx-header-background-color:#c8aa22;--dx-header-info-container-color:#c8aa22;--dx-header-text-icon-theme-color:#ffffff;--dx-header-text-icon-theme-hover-color:#ffffff;--dx-header-text-icon-theme-active-color:#ffffff;--dx-header-menu-link-text-icon-theme-color:#ffffff;--dx-header-breadcrumb-text-icon-hover-color:#ffffff;--dx-header-breadcrumb-text-icon-active-color:#ffffff;--dx-header-breadcrumb-background-hover-color:rgba(0, 0, 0, 0.1);--dx-header-breadcrumb-background-active-color:rgba(0, 0, 0, 0.2)}:host(.golden-theme):host(:not(.sidebar-open)){--dx-header-menu-item-selected-state-line-color:#ffffff;--dx-header-menu-item-hover-color:#b4991f;--dx-header-menu-item-active-color:#a0881b;--dx-header-menu-item-text-icon-theme-color:#ffffff;--dx-notification-indicator-background-color:#c8aa22}";

const DxHeader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.navigateHome = index.createEvent(this, "navigateHome", 7);
    this.lastScrollPositionY = 0;
    this.elevated = false;
    this.hideHeaderBar = false;
    this.sidebarOpen = false;
    /**
     * The theme of the header defines the color palette which is used for it's sub-elements.
     *
     * @value white: The default theme displays the header with a white background.
     * @value gold: The golden theme which is implemented for "meine.dvag".
     * @warning This property must not be used by other projects than "meine.dvag".
     */
    this.theme = "white";
    /**
     * The logo which is displayed in the left corner of the header.
     *
     * @value text: Brand Logo with the company's name. The `applicationname` will not be displayed.
     * @value image: Brand Logo without a name. The `applicationname` will be displayed next to the logo.
     */
    this.logo = "image";
    /**
     * Defines the brand appearance of header internal branding elements (e.g. the logo image).
     *
     * @value default: The default brand of the DVAG is used.
     */
    this.brand = "default";
    /**
     * Whether to show the current announcement bar or not.
     *
     * @value true: Shows an announcement in case the "announcement-bar" slot is defined.
     * @value false: Hides the announcement.
     */
    this.showannouncement = true;
    this.allow = false;
  }
  onThemeChanged() {
    if (this.theme === "white") {
      this.internalTheme = "white";
    }
    this.setupIntersectionObserver();
  }
  onShowAnnouncementChanged() {
    if (this.showannouncement) {
      // Show header bar when announcement is shown
      this.hideHeaderBar = false;
    }
  }
  componentDidLoad() {
    renderUtil.onNextFrame(() => {
      this.updateMenuBar();
    });
  }
  connectedCallback() {
    this.breakpointAware = new breakpointAware.BreakpointAware(() => index.forceUpdate(this), true);
    const headerService$1 = headerService.HeaderService.instance();
    const currentRegisteredHeader = headerService$1.header;
    assert.assert(currentRegisteredHeader == null || currentRegisteredHeader === this.self, () => 'There is already a <dx-header> element registered.\n\n"There can be only one".\n- Connor MacLeod', this.self);
    headerService$1.header = this.self;
    headerService$1.isVisible = true;
    this.headerHeightSubscription = headerService.subscribeToHeaderHeight(() => {
      index.forceUpdate(this);
    });
    this.initializeSlotObserver();
    this.setupIntersectionObserver();
  }
  disconnectedCallback() {
    var _a, _b, _c, _d, _e;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.slotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.infoContainerSlotObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    (_d = this.intersectionObserver) === null || _d === void 0 ? void 0 : _d.disconnect();
    (_e = this.headerHeightSubscription) === null || _e === void 0 ? void 0 : _e.unsubscribe();
    headerService.HeaderService.instance().unsetHeaderElement(this.self);
  }
  onScroll() {
    const currentY = window.scrollY;
    const headerService$1 = headerService.HeaderService.instance();
    if (headerService$1.isScrollInteractionEnabled) {
      this.hideHeaderBar =
        this.lastScrollPositionY >= 0 && this.lastScrollPositionY < currentY;
      headerService$1.isVisible = !this.hideHeaderBar;
    }
    // We want to set the elevation to true, when the scroll position exceeds the header height.
    // We want to reset the elevation when the scroll position reaches zero again.
    this.elevated =
      (this.elevated && currentY > 0) || currentY > headerService$1.headerHeight;
    if (!this.elevated) {
      this.internalTheme = this.theme;
    }
    this.lastScrollPositionY = currentY;
  }
  onResize() {
    this.updateMenuBar();
  }
  initializeSlotObserver() {
    this.slotObserver = new slotObserver.SlotObserver(this.self, ":scope > *:not([slot])", (nodes) => {
      assert.assert(nodes.length === 0, () => "There should be no default slotted elements within a <dx-header> element. Maybe you forgot to set the 'menu' or '${value}' slot.", "\n\nAffected element:", this.self, "\n\nDefault slotted nodes:\n", ...nodes.map((node) => [node, "\n"]).flat());
    });
    this.infoContainerSlotObserver = new slotObserver.SlotObserver(this.self, `*[slot=${PREDEFINED_HEADER_SLOTS.BREADCRUMB}],*[slot=${PREDEFINED_HEADER_SLOTS.REPRESENTATIVE}]`, () => {
      index.forceUpdate(this.self);
    });
  }
  setupIntersectionObserver() {
    var _a;
    if (this.theme === "gold") {
      this.intersectionObserver = new IntersectionObserver(() => {
        this.internalTheme = this.elevated ? "white" : "gold";
      });
      this.intersectionObserver.observe(this.self);
    }
    else {
      (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
      this.intersectionObserver = null;
    }
  }
  updateMenuBar() {
    var _a, _b;
    if (this.menuBar == null) {
      return;
    }
    const contentWidth = (_b = (_a = this.contentElement) === null || _a === void 0 ? void 0 : _a.offsetWidth) !== null && _b !== void 0 ? _b : 0;
    const applicationInfoWidth = this.logoElement.offsetWidth + this.getMinimalApplicationNameWidth();
    this.menuBar
      .updateChildren(contentWidth -
      (applicationInfoWidth +
        MARGIN_BIAS_BETWEEN_APPLICATION_INFO_AND_MENU_BAR))
      .then();
  }
  getMinimalApplicationNameWidth() {
    var _a;
    return this.logo === "image" && ((_a = this.appname) === null || _a === void 0 ? void 0 : _a.length) > 0
      ? MIN_APPLICATION_NAME_WIDTH
      : 0;
  }
  getLogo() {
    if (this.logo === "image") {
      return "bildmarke";
    }
    else if (this.logo === "text") {
      return "wortmarke";
    }
  }
  obtainMenuBar(menuBar) {
    if (this.menuBar !== menuBar) {
      this.menuBar = menuBar;
      renderUtil.onNextFrame(() => {
        this.updateMenuBar();
      });
    }
  }
  renderApplicationName() {
    if (this.logo === "text") {
      return;
    }
    return (index.h("div", { class: "application-name-container" }, index.h("dx-header-application-name", { class: "application-name", appname: this.appname, onInteraction: (e) => {
        e.stopPropagation();
        this.navigateHome.emit();
      } })));
  }
  renderInfoContainer() {
    const hasBreadcrumb = renderUtil.isSlotDefined(this.self, PREDEFINED_HEADER_SLOTS.BREADCRUMB);
    const hasRepresentative = renderUtil.isSlotDefined(this.self, PREDEFINED_HEADER_SLOTS.REPRESENTATIVE);
    if (!hasBreadcrumb && !hasRepresentative) {
      return;
    }
    return (index.h("div", { class: {
        "info-wrapper": true,
      } }, index.h("div", { class: {
        "info-container": true,
        "text-logo": this.logo === "text",
      } }, hasBreadcrumb ? (index.h("div", { class: { "breadcrumb-container": true } }, index.h("slot", { name: `${PREDEFINED_HEADER_SLOTS.BREADCRUMB}` }))) : null, hasRepresentative ? (index.h("div", { class: "representative-container" }, index.h("slot", { name: `${PREDEFINED_HEADER_SLOTS.REPRESENTATIVE}` }))) : null)));
  }
  renderAnnouncement() {
    if (renderUtil.isSlotUndefined(this.self, "announcement-bar")) {
      return;
    }
    return [
      index.h("dx-simple-grow-box", { class: "announcement-grow-box", open: this.showannouncement }, index.h("slot", { name: "announcement-bar" })),
      this.showannouncement ? index.h("dx-spacer", { class: "spacer", mq1: "4v" }) : null,
    ];
  }
  getMaxTop() {
    const logoOverflow = this.logo === "image" ? 8 : 0;
    return headerService.HeaderService.instance().headerHeight + logoOverflow;
  }
  render() {
    var _a, _b, _c, _d, _e;
    const definedValueSlots = renderUtil.getDefinedSlots(this.self).filter((slot) => !isValueInEnum(PREDEFINED_HEADER_SLOTS, slot));
    // We need to offset the top at least 1px to actually get an intersection with the window
    const intersectionBias = 1;
    return (index.h(index.Host, { class: {
        "golden-theme": this.internalTheme === "gold",
        "show-shadow": this.elevated,
        "sidebar-open": this.sidebarOpen,
      }, role: "banner", style: {
        top: this.hideHeaderBar
          ? `-${this.getMaxTop() + intersectionBias}px`
          : "0",
        "--dx-header-height": `${(_a = headerService.HeaderService.instance().headerHeight) !== null && _a !== void 0 ? _a : 0}px`,
        "--dx-header-height-below": `${(_c = (_b = this.self.shadowRoot.querySelector(".info-container")) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0}px`,
        "--dx-header-height-top": `${(_e = (_d = this.self.shadowRoot.querySelector("dx-simple-grow-box")) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0}px`, // TODO: Search better solution after release
      } }, this.renderAnnouncement(), index.h("div", { class: "header-bar" }, index.h("div", { class: {
        content: true,
      }, ref: (ref) => (this.contentElement = ref) }, index.h("button", { class: {
        "application-logo": true,
        text: this.logo === "text",
        image: this.logo === "image",
      }, "aria-label": "Home", id: elementIdHandling.ElementIdGenerator.createId(this.self, "logo-control"), onClick: () => this.navigateHome.emit() }, index.h("dx-logo", { class: "logo", type: this.getLogo(), ref: (ref) => (this.logoElement = ref) })), this.renderApplicationName(), index.h("dx-header-menu-bar", { ref: (ref) => this.obtainMenuBar(ref), onSidebarOpenChange: (e) => (this.sidebarOpen = e.detail) }, index.h("slot", { name: "menu" }), index.h("slot", { slot: "navigation-header", name: "navigation-header" }), index.h("slot", { slot: "navigation-footer", name: "navigation-footer" }), definedValueSlots.map((slot) => {
      return index.h("slot", { name: slot, slot: slot });
    })))), this.renderInfoContainer()));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "theme": ["onThemeChanged"],
    "showannouncement": ["onShowAnnouncementChanged"]
  }; }
};
const MIN_APPLICATION_NAME_WIDTH = 176;
var PREDEFINED_HEADER_SLOTS;
(function (PREDEFINED_HEADER_SLOTS) {
  PREDEFINED_HEADER_SLOTS["MENU"] = "menu";
  PREDEFINED_HEADER_SLOTS["BREADCRUMB"] = "breadcrumb";
  PREDEFINED_HEADER_SLOTS["REPRESENTATIVE"] = "representative";
})(PREDEFINED_HEADER_SLOTS || (PREDEFINED_HEADER_SLOTS = {}));
const MARGIN_BIAS_BETWEEN_APPLICATION_INFO_AND_MENU_BAR = 8;
DxHeader.style = dxHeaderCss;

exports.dx_header = DxHeader;
