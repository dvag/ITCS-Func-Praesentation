'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const miscUtil = require('./misc-util-63b423bd.js');
const sizes_util = require('./sizes.util-a4bacea6.js');
const headerMenu_util = require('./header-menu.util-2740ba3a.js');
require('./assert-d8ea75c6.js');

const dxHeaderMenuGroupCss = ":host{display:block}:host:host([hidden]){display:none !important}:host ::slotted(dx-header-menu-item),:host ::slotted(dx-header-app-favorites),:host ::slotted(dx-header-user),:host ::slotted(dx-header-navigation){z-index:1}:host dx-header-menu-item,:host dx-header-app-favorites,:host dx-header-user,:host dx-header-navigation{z-index:1}";

const DxHeaderMenuGroup = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * @internal
     */
    this.internalopen = true;
  }
  /**
   * @internal
   */
  async getInnerMenuItems() {
    return Array.from(this.self.querySelectorAll(":scope > dx-header-menu-item, dx-header-user"));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    const slots = miscUtil.getSlottedContent(this.self);
    const menuEntryWidths = (await Promise.all(slots
      .filter((element) => headerMenu_util.isMenuLink(element) || headerMenu_util.isMenuItem(element))
      .map((element) => element.getDefaultWidth()))).reduce((acc, width) => acc + width, 0);
    const spacerWidths = slots
      .filter((element) => miscUtil.tagOf(element) === "dx-spacer")
      .reduce((acc, spacer) => acc + sizes_util.getSpacerWidth(spacer), 0);
    return menuEntryWidths + spacerWidths;
  }
  render() {
    return (index.h("dx-horizontal-grow-box", { open: this.internalopen }, index.h("slot", null)));
  }
  get self() { return index.getElement(this); }
};
DxHeaderMenuGroup.style = dxHeaderMenuGroupCss;

exports.dx_header_menu_group = DxHeaderMenuGroup;
