'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const renderUtil = require('./render-util-6b278c0d.js');
const miscUtil = require('./misc-util-63b423bd.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const breakpointAware = require('./breakpoint-aware-cc9d0ee6.js');
require('./query-util-8642f149.js');

const dxProcessHeaderCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .container{width:100%;padding-top:16px;padding-bottom:8px}:host .container .main-container{display:flex;align-items:flex-end}:host .container .main-container .left-side{--dx-text-color:#2b2b2b;flex:1;overflow:hidden;min-height:40px}:host .container .main-container .left-side .note-container{margin:8px 0}@media (min-width: 1280px){:host .container .main-container .left-side .note-container{margin:6px 0}}:host .container .main-container .left-side .people-display-container{text-align:left;min-height:40px;display:flex;align-items:center;justify-content:flex-start;margin-top:8px}@media (min-width: 760px){:host .container .main-container .left-side{display:flex}:host .container .main-container .left-side>.people-display-container{flex:1;text-align:right;justify-content:flex-end;margin-top:0;align-self:flex-end}:host .container .main-container .left-side>.headline-note-container{flex:1}}:host .container .main-container .context-menu-container{width:40px;margin-left:24px}";

const DxProcessHeader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  connectedCallback() {
    this.breakpointAware = new breakpointAware.BreakpointAware(() => this.updateAlignment(), true);
    this.overflowMenuSlotObserver = new slotObserver.SlotObserver(this.self, "*", (nodes) => {
      const getSlottedOverflowMenu = (slot) => {
        return nodes
          .filter((node) => miscUtil.tagOf(node) === "dx-overflow-menu")
          .find((node) => {
          const hasContextMenuSlot = (element) => element.slot === slot;
          return (hasContextMenuSlot(node) ||
            miscUtil.findUpperElementByPredicate(node, hasContextMenuSlot, (elem) => elem === this.self));
        });
      };
      this.contextMenu = getSlottedOverflowMenu("context-menu");
      this.peopleDisplay = getSlottedOverflowMenu("people-display");
      this.updateAlignment();
      renderUtil.onNextFrame(() => {
        window.forceUpdate = index.forceUpdate;
        index.forceUpdate(this);
      });
    });
  }
  disconnectedCallback() {
    var _a;
    this.breakpointAware.disconnect();
    (_a = this.overflowMenuSlotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  updateAlignment() {
    if (this.contextMenu) {
      this.contextMenu.align = "right";
    }
    if (this.peopleDisplay) {
      this.peopleDisplay.align =
        this.breakpointAware.getEffectiveValue({
          mq1: "left",
          mq3: "right",
        });
    }
  }
  renderNote() {
    if (renderUtil.isSlotUndefined(this.self, "note")) {
      return;
    }
    return (index.h("div", { class: "note-container" }, index.h("slot", { name: "note" })));
  }
  renderPeopleDisplay() {
    if (renderUtil.isSlotUndefined(this.self, "people-display")) {
      return;
    }
    return (index.h("div", { class: "people-display-container" }, index.h("slot", { name: "people-display" })));
  }
  renderContextMenu() {
    if (renderUtil.isSlotUndefined(this.self, "context-menu")) {
      return;
    }
    return (index.h("div", { class: "context-menu-container" }, index.h("slot", { name: "context-menu" })));
  }
  renderHeadlineNoteContainer() {
    return (index.h("div", { class: "headline-note-container" }, index.h("dx-text", { type: "h3" }, this.headline), this.renderNote()));
  }
  render() {
    return (index.h(index.Host, null, index.h("dx-container", { class: "container", type: "page", color: "transparent" }, index.h("div", { class: "main-container" }, index.h("div", { class: "left-side" }, this.renderHeadlineNoteContainer(), this.renderPeopleDisplay()), this.renderContextMenu()))));
  }
  get self() { return index.getElement(this); }
};
DxProcessHeader.style = dxProcessHeaderCss;

exports.dx_process_header = DxProcessHeader;
