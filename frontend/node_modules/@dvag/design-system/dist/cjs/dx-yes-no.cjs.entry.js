'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
require('./value-store-f683b26f.js');

const dxYesNoCss = ":host{display:block}:host:host([hidden]){display:none !important}.button-container{display:flex;flex-basis:50%}.button-container .button-yes-no{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;display:flex;flex:1;height:40px;padding:0;--dx-text-color:#575757}.button-container .button-yes-no[disabled]{cursor:unset}.button-container .button-yes-no.icon-right{flex-direction:row-reverse}.button-container .button-yes-no:focus-visible{outline:2px solid #004763}.button-container .button-yes-no[disabled]{cursor:unset}.button-container .button-yes-no.medium{height:48px}.button-container .button-yes-no:first-child{margin-right:16px}@media not all and (pointer: coarse){.button-container .button-yes-no:hover{background-color:#e5eef2;border-color:#00587c;--dx-text-color:#00587c}}.button-container .button-yes-no:active{border-color:#004763;--dx-text-color:#004763}.button-container .button-yes-no.selected{background-color:#ccdee5;--dx-text-color:#2b2b2b}.button-container .button-yes-no.selected .inner-container{border-color:#337a96;border-width:2px}@media not all and (pointer: coarse){.button-container .button-yes-no.selected:hover .inner-container{border-color:#00587c}}.button-container .button-yes-no.selected:active .inner-container{border-color:#004763}.button-container .button-yes-no .inner-container{display:flex;border:1px solid #337a96;justify-content:center;align-items:center;height:100%;flex:1;box-sizing:border-box}.button-container.disabled{opacity:0.4;pointer-events:none}";

const DxYesNo = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.valueChange = index.createEvent(this, "valueChange", 7);
    /**
     * The value of this component.
     * @important
     * @value yes: yes button is selected
     * @value no: no button is selected.
     * @value unset: Nothing is selected.
     * @example value
     */
    this.value = "yes";
    /**
     * Defines if the buttons are disabled or not.
     * @value true: Buttons are disabled
     * @value false: Buttons are not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Defines the height of the buttons.
     *
     * @value s: Buttons are small.
     * @value m: Buttons are a bit bigger.
     * @example size
     */
    this.size = "s";
  }
  setValue(value) {
    if (this.value === value) {
      this.value = "unset";
    }
    else {
      this.value = value;
    }
    this.valueChange.emit(this.value);
  }
  getButtonTextByType(value) {
    if (value === "yes") {
      return "Ja";
    }
    else if (value === "no") {
      return "Nein";
    }
  }
  renderButton(buttonValue) {
    return (index.h("button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, `${buttonValue}-control`), disabled: this.disabled, class: {
        "button-yes-no": true,
        small: this.size === "s",
        medium: this.size === "m",
        selected: this.value === buttonValue,
      }, onClick: () => {
        this.setValue(buttonValue);
      } }, index.h("div", { class: "inner-container" }, index.h("dx-text", { type: "ps" }, this.getButtonTextByType(buttonValue)))));
  }
  render() {
    assert.assertPropertyValue("dx-yes-no", "size", this.size, ["s", "m"]);
    return (index.h(index.Host, null, index.h("dx-form-wrapper", { errormessage: this.errormessage }, index.h("div", { class: { "button-container": true, disabled: this.disabled } }, this.renderButton("yes"), this.renderButton("no")), index.h("slot", { name: "error-message", slot: "error-message" }))));
  }
  get self() { return index.getElement(this); }
};
DxYesNo.style = dxYesNoCss;

exports.dx_yes_no = DxYesNo;
