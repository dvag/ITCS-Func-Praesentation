'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const baseElements = require('./base-elements-0dbfd791.js');
const errorPopup = require('./error-popup-9c9bd96e.js');
require('./query-util-8642f149.js');
require('./value-store-f683b26f.js');

const dsCardHeaderCss = ":host{display:block;box-sizing:border-box}:host:host([hidden]){display:none !important}:host .header-content{display:flex;justify-content:space-between;align-items:center;height:72px;box-sizing:border-box;padding:24px;--ds-text-font-weight:700}:host ds-hr{--ds-hr-opacity:var(--ds-card-header-separator-opacity, 1)}";

const DsCardHeader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  connectedCallback() {
    this.slotObserver = new slotObserver.SlotObserver(this.self, "ds-function-icon-button", async (nodes) => {
      nodes.forEach((node) => {
        node.style.marginRight = "-6px";
      });
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "header-content" }, index.h("slot", null)), index.h("ds-hr", null)));
  }
  get self() { return index.getElement(this); }
};
DsCardHeader.style = dsCardHeaderCss;

const dsCheckboxCss = ":host{display:flex}:host:host([hidden]){display:none !important}:host .container{display:inline-block}:host .container .checkbox-label-container{display:flex;align-items:flex-start;width:fit-content;width:-moz-fit-content;pointer-events:auto;position:relative;top:0;left:0}:host .container .checkbox-label-container .checkbox-input{position:absolute;cursor:pointer;left:0;top:0;width:100%;height:100%;opacity:0;margin:0;padding:0}:host:host(.read-only-container) ds-icon{margin-top:4px;margin-right:8px;flex-shrink:0}:host ds-required-hint{display:var(--ds-show-required-hint, block)}.box-container{line-height:16px;width:16px;height:16px;box-sizing:border-box;background-color:transparent;border-radius:2px;border:1px solid #a7893d;margin-top:4px}.box-container.error{border-color:#be1413}.box-container ds-icon{visibility:hidden;transform:translateX(-1px) translateY(-1px)}.box-container.has-label{margin-right:8px}.box-container.checked{background-color:#a7893d}.box-container.checked ds-icon{visibility:visible}.box-container.force-hover{border-color:#957b36}.box-container.force-hover.checked{background-color:#957b36}.box-container dx-popup{display:var(--ds-display-popup, block);--dx-popup-offset-left:-4px;white-space:break-spaces;pointer-events:none;width:100px}:host(:hover) .box-container{border-color:#957b36}:host(:hover) .box-container.checked{background-color:#957b36}:host(.has-focus){border-radius:6px}:host(.has-focus) .box-container{border-color:#4c4c4c}:host(.disabled){cursor:default;pointer-events:none;--ds-text-color:#c1c1c1}:host(.disabled) .box-container{border-color:#e3dac4}:host(.disabled) .box-container.checked{background-color:#e3dac4}";

const DsCheckBox = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.checkedChange = index.createEvent(this, "checkedChange", 7);
    /**
     * Disables the interaction with the checkbox.
     * @value false: Checkbox is interactable.
     * @value true: Checkbox is disabled.
     *
     * @example disabled
     */
    this.disabled = false;
    /**
     * The checkbox will be in read-only state.
     * Depending on the `checked`-state an icon icon is rendered.
     * @value false: Default visualization of the checkbox
     * @value true: Icon-representation of the `checked`-state
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks this checkbox as a required form element.
     * @value false: Not required
     * @value true: It is necessary to select an option to fulfill the requirement.
     * @example required
     */
    this.required = false;
    /**
     * @internal
     */
    this.requirementfulfilled = false;
    /**
     * State of the Checkbox.
     * @value false: Checkbox is not checked.
     * @value true: Checkbox is checked.
     *
     * @example checked
     */
    this.checked = false;
    /**
     * FÃ¤rbt den Rahmen der Checkbox rot ein.
     * @value true: roter Rahmen
     * @value false: goldener Rahmen
     * @example error
     */
    this.error = false;
    this.inputFocused = false;
  }
  /**
   * Sets the focus on this element.
   * @example focus
   */
  async focusControl() {
    var _a;
    (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  get showLabel() {
    var _a;
    return ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  select() {
    if (!this.disabled) {
      this.checked = !this.checked;
      this.requirementfulfilled = this.checked;
      this.checkedChange.emit(this.checked);
    }
  }
  toggle(e) {
    if (e.code === "Enter") {
      this.select();
    }
  }
  render() {
    var _a;
    const hasError = this.error || ((_a = this.errormessage) === null || _a === void 0 ? void 0 : _a.length) > 0;
    if (this.readonly) {
      if (!this.checked) {
        return;
      }
      const iconSize = 16;
      return (index.h(index.Host, { class: { "read-only-container": true } }, index.h("ds-icon", { size: iconSize, icon: "success", color: "gruen-1" }), this.renderLabel()));
    }
    return (index.h(index.Host, { class: {
        disabled: this.disabled,
        "has-focus": this.inputFocused,
      } }, index.h("div", { class: "container" }, index.h("div", { class: "checkbox-label-container" }, index.h(baseElements.BaselineElement, { screensize: "small" }), index.h("div", { class: {
        "box-container": true,
        error: hasError,
        checked: this.checked,
        "has-label": this.showLabel,
        "force-hover": this.mouseOver,
      } }, index.h("ds-icon", { icon: "check", size: 16, color: "weiss" }), index.h(errorPopup.ErrorPopup, { text: this.errormessage, show: this.inputFocused })), this.renderLabel(), index.h("input", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), type: "checkbox", onClick: () => this.select(), onMouseEnter: () => (this.mouseOver = true), onMouseLeave: () => (this.mouseOver = false), onFocus: () => (this.inputFocused = true), onBlur: () => (this.inputFocused = false), disabled: this.disabled, class: {
        "checkbox-input": true,
        "event-delegate-receiver": true,
      } })), index.h("ds-required-hint", { required: this.required, fulfilled: this.requirementfulfilled }))));
  }
  renderLabel() {
    if (this.showLabel) {
      return (index.h("ds-text", { screensize: "small", id: elementIdHandling.ElementIdGenerator.createId(this.self, "label") }, this.label));
    }
  }
  get self() { return index.getElement(this); }
};
DsCheckBox.style = dsCheckboxCss;

exports.ds_card_header = DsCardHeader;
exports.ds_checkbox = DsCheckBox;
