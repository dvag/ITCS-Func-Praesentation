'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const miscUtil = require('./misc-util-63b423bd.js');
const constants = require('./constants-0c86f3e0.js');
require('./query-util-8642f149.js');

const dxTextListCss = ":host{display:block;padding-left:var(--dx-text-list-bullet-width);--dx-text-list-bullet-width:4px;--dx-text-line-height:calc(\n    var(--dx-text-font-size) + var(--dx-text-font-size) * 0.4\n  );--dx-text-color:#2b2b2b}:host:host([hidden]){display:none !important}:host .list{display:flex;flex-direction:column}:host .list ::slotted(dx-text){margin-left:var(--dx-text-list-bullet-width);min-height:calc(var(--dx-text-font-size) * 1.3);margin-top:3px;margin-bottom:3px}:host:host(.has-text-list-parent){padding-left:16px}:host:host(.screensize-small){--dx-text-font-size:16px}:host:host(.screensize-medium){--dx-text-font-size:18px}:host:host(.screensize-large){--dx-text-font-size:20px}:host .whitespace-render{position:fixed;top:-10000px}";

const DxTextList = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.bulletWidth = 4;
    /**
     * Specifies the style all text within this text list.
     *
     * If the `type` attribute isn't set, a default style will be set, that is based on the
     * parent components.
     *
     * @value Headline-1: Shortcut is `h1`
     * @value Headline-2: Shortcut is `h2`
     * @value Headline-3: Shortcut is `h3`
     * @value Headline-4: Shortcut is `h4`
     * @value Headline-5: Shortcut is `h5`
     *
     * @value Paragraph-Big: Shortcut is `pb`
     * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
     * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
     * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
     *
     * @value Paragraph-Standard: Shortcut is `ps`
     * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
     * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
     * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
     *
     * @value Infotext-Standard: Shortcut is `it`
     * @value Infotext-Standard-Italic: Shortcut is `it-italic`
     * @value Infotext-Standard-Bold: Shortcut is `it-bold`
     * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
     *
     * @value Infotext-Small: Shortcut is `its`
     * @value Infotext-Small-Italic: Shortcut is `its-italic`
     * @value Infotext-Small-Bold: Shortcut is `its-bold`
     * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
     *
     * @example type
     */
    this.type = "auto";
  }
  onTypeChange() {
    this.updateTextTypes();
  }
  connectedCallback() {
    this.bulletResizeObserver = new ResizeObserver(() => {
      var _a;
      this.bulletWidth = Math.round((_a = this.bulletWidthReference) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width);
    });
    this.updateTextTypes();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.bulletResizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  updateTextTypes() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this.slotObserver = new slotObserver.SlotObserver(this.self, "*", (nodes) => {
      nodes.forEach((node) => {
        if (node.parentElement === this.self) {
          node.classList.add(constants.ADD_BULLET_TO_TEXT_CSS_CLASS_NAME);
          if (["dx-text", "dx-text-list"].includes(node.tagName.toLowerCase()) &&
            node["type"] ===
              "auto") {
            node["type"] =
              this.type;
          }
        }
      });
      if (this.bulletWidthReference != null) {
        this.bulletResizeObserver.observe(this.bulletWidthReference);
      }
    });
  }
  render() {
    const hasUpperTextListParent = miscUtil.findUpperElement(this.self, "dx-text-list") != null;
    return (index.h(index.Host, { style: {
        "--dx-text-list-bullet-width": this.bulletWidth + "px",
      }, class: {
        "has-text-list-parent": hasUpperTextListParent,
      } }, index.h("div", { class: {
        list: true,
      } }, index.h("slot", null)), index.h("dx-text", { ref: (ref) => (this.bulletWidthReference = ref), type: this.type, class: "whitespace-render" }, "\u2022")));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "type": ["onTypeChange"]
  }; }
};
DxTextList.style = dxTextListCss;

exports.dx_text_list = DxTextList;
