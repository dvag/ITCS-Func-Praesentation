'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
require('./value-store-f683b26f.js');

const dsButtonCss = ":host{display:inline-block;width:max-content;line-height:0;--ds-text-font-weight:500}:host:host([hidden]){display:none !important}:host:host(.disabled){pointer-events:none}:host:host(.unfocusable) button{box-shadow:none}:host:host ::slotted(*){pointer-events:none}:host>button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent}:host>button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host(.size-medium) button{height:48px;min-width:192px;padding:12px 12px;--ds-text-font-size:16px;--ds-text-letter-spacing:0.04px}:host(.size-small) button{height:38px;min-width:152px;padding:4px 12px;--ds-text-font-size:14px;--ds-text-letter-spacing:0.02px}:host(.stretch){width:100%}:host(.stretch) button{width:100%}:host(.type-primary) button{background-color:#a7893d;--ds-text-color:#ffffff}:host(.type-primary) button:hover{background-color:#957b36}:host(.type-primary) button:active{background-color:#856d30}:host(.type-primary):host(.disabled) button{background-color:#e3dac4}:host(.type-secondary) button{background-color:transparent;border:1px solid #a7893d;--ds-text-color:#a7893d}@media not all and (pointer: coarse){:host(.type-secondary) button:hover{--ds-text-color:#ffffff;background-color:#957b36}:host(.type-secondary) button:active{--ds-text-color:#ffffff;background-color:#856d30}}:host(.type-secondary):host(.disabled) button{background-color:transparent;border:1px solid #e3dac4;--ds-text-color:#e3dac4}";

const DsButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Modifies the button width behavior
     * @value false: Button width is determined by the button content
     * @value true: Button width is stretched to match the width of the host element.
     */
    this.stretch = false;
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     * @example verschiedene-stile
     */
    this.disabled = false;
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     * @example unfocusable
     */
    this.unfocusable = false;
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  render() {
    assert.assertPropertyValue("ds-button", "type", this.type, [
      "primary",
      "secondary",
    ]);
    assert.assertPropertyValue("ds-button", "size", this.size, ["medium", "small"]);
    return (index.h(index.Host, { class: {
        "type-primary": this.type === "primary",
        "type-secondary": this.type === "secondary",
        "size-medium": this.size === "medium",
        "size-small": this.size === "small",
        stretch: this.stretch,
        disabled: this.disabled,
        unfocusable: this.unfocusable,
      } }, index.h("button", { type: "button", ref: (el) => (this.buttonElement = el), id: elementIdHandling.ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabindex: this.unfocusable ? "-1" : "0" }, index.h("slot", null))));
  }
  get self() { return index.getElement(this); }
};
DsButton.style = dsButtonCss;

const dsLogoCss = ":host{display:inline-block;height:40px}:host:host([hidden]){display:none !important}";

const DsLogo = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Provides the logo in different styles.
     *
     * @value bildmarke: DVAG-Logo without word mark.
     * @value wortmarke: DVAG-Logo with word-mark.
     * @value wortmarke-allfinanz: DVAG-Logo with `Allfinanz` word mark.
     * @example logo
     */
    this.type = "bildmarke";
  }
  componentDidRender() {
    this.self.shadowRoot.querySelector("span").innerHTML = `<ds-logo-${this.type}></ds-logo-${this.type}>`;
  }
  render() {
    return (index.h(index.Host, null, index.h("span", null)));
  }
  get self() { return index.getElement(this); }
};
DsLogo.style = dsLogoCss;

const dsUserAvatarCss = ":host{display:block;border-color:#a7893d;border-style:solid;border-radius:50%;box-sizing:border-box;background-color:#ffffff;--ds-text-color:#a7893d}:host:host([hidden]){display:none !important}:host:host(.size-header){width:32px;height:32px;border-width:1px;padding:1px;--ds-text-font-size:12px;--ds-text-font-weight:400;--ds-text-letter-spacing:0.02px}:host:host(.size-content-s){width:48px;height:48px;border-width:1.5px;padding:1.5px;--ds-text-font-size:16px;--ds-text-font-weight:400;--ds-text-letter-spacing:0.02px}:host:host(.size-content-m){width:64px;height:64px;border-width:1.5px;padding:1.5px;--ds-text-font-size:20px;--ds-text-font-weight:400;--ds-text-letter-spacing:0.02px}:host:host(.size-content-l){width:72px;height:72px;border-width:2px;padding:2px;--ds-text-font-size:24px;--ds-text-font-weight:400;--ds-text-letter-spacing:0.04px}:host:host(.size-content-xl){width:144px;height:144px;border-width:2.5px;padding:2.5px;--ds-text-font-size:44px;--ds-text-font-weight:300;--ds-text-letter-spacing:0.04px}:host .image{width:100%;height:100%;overflow:hidden;border-radius:50%;background-position:center center;background-repeat:no-repeat;background-size:cover}:host .initials{width:100%;height:100%;display:flex;justify-content:center;align-items:center}";

const DsUserAvatar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    assert.assert(this.imageurl != null || this.initials != null, () => "<ds-user-avatar> Es wurde weder 'imageurl' noch 'initials' definiert. Eins von beiden muss gesetzt sein.");
    assert.assertPropertyValue("ds-user-avatar", "size", this.size, [
      "header",
      "content-s",
      "content-m",
      "content-l",
      "content-xl",
    ]);
    return (index.h(index.Host, { class: {
        "size-header": this.size === "header",
        "size-content-s": this.size === "content-s",
        "size-content-m": this.size === "content-m",
        "size-content-l": this.size === "content-l",
        "size-content-xl": this.size === "content-xl",
      } }, this.imageurl != null ? this.renderImage() : this.renderInitials()));
  }
  renderImage() {
    return (index.h("div", { class: "image", style: {
        "background-image": `url(${this.imageurl})`,
      } }));
  }
  renderInitials() {
    var _a;
    return (index.h("div", { class: "initials" }, index.h("ds-text", null, (_a = this.initials) !== null && _a !== void 0 ? _a : "")));
  }
};
DsUserAvatar.style = dsUserAvatarCss;

exports.ds_button = DsButton;
exports.ds_logo = DsLogo;
exports.ds_user_avatar = DsUserAvatar;
