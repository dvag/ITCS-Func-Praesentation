'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const renderUtil = require('./render-util-6b278c0d.js');
const miscUtil = require('./misc-util-63b423bd.js');
const table_util = require('./table.util-f374fdbd.js');
const breakpointAware = require('./breakpoint-aware-cc9d0ee6.js');

const dxTableHeaderCss = ":host{border-bottom:1px solid #c8aa22;width:var(--dx-table-row-width, 100%);display:block;order:0}:host:host([hidden]){display:none !important}:host .header-container{display:flex}:host .header-container .space-left{width:var(--dx-table-collapsable-spacing-left, 0);flex:0 0 var(--dx-table-collapsable-spacing-left, 0)}:host .header-container .header-row{display:flex;min-height:64px;width:var(--dx-table-row-width, 100%);overflow:var(--dx-table-row-overflow, hidden)}:host .header-container .header-row :nth-child(n){flex:1}:host .header-container .header-row .sticky{position:sticky;left:0;background:white;z-index:1;display:flex;width:max-content;flex:0 0 0}:host .header-container .header-row .sticky.visible{flex-basis:unset;border-right:1px solid #d6d6d6}:host .header-container .header-row .sticky .selection-column{display:var(--dx-table-selection-display, none)}:host .header-container .header-row .sticky .expand-column{display:var(--dx-table-expand-display, none)}";

const DxTableHeader = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.tableScrollChanged = (e) => {
      this.tableScrollable = e.detail;
    };
    this.showExpandColumn = false;
    this.showSelectionColumn = false;
    this.tableScrollable = false;
    this.mediaQueryAllowsStickyness = false;
    this.expansionChangedHandler = (e) => {
      this.showExpandColumn = e.detail;
    };
    this.selectionChangedHandler = (e) => {
      this.showSelectionColumn = e.detail.enabled;
    };
  }
  connectedCallback() {
    this.breakpointAware = new breakpointAware.BreakpointAware(() => this.updateMediaQueryStickyness(), true);
    this.table = miscUtil.findUpperElement(this.self, "dx-table");
    this.table.addEventListener("expansionChanged", this.expansionChangedHandler);
    this.table.addEventListener("selectionStateChanged", this.selectionChangedHandler);
    this.table.addEventListener("internalScrollChanged", this.tableScrollChanged);
    this.tableScrollable = this.table.internalScrollable;
    this.showSelectionColumn = this.table.selectionenabled;
    this.showExpandColumn = table_util.containsExpandableRows(this.table);
    this.updateMediaQueryStickyness();
  }
  disconnectedCallback() {
    this.table.removeEventListener("expansionChanged", this.expansionChangedHandler);
    this.table.removeEventListener("selectionStateChanged", this.selectionChangedHandler);
    this.table.removeEventListener("internalScrollChanged", this.tableScrollChanged);
    this.breakpointAware.disconnect();
  }
  updateMediaQueryStickyness() {
    this.mediaQueryAllowsStickyness = this.breakpointAware.getEffectiveValue({
      mq1: false,
      mq3: true,
    });
  }
  showStickyContainer() {
    return table_util.showStickyContainer(this.tableScrollable, this.showExpandColumn, this.showSelectionColumn, this.mediaQueryAllowsStickyness, () => renderUtil.isSlotDefined(this.self, "sticky"));
  }
  render() {
    return (index.h(index.Host, { role: "rowgroup" }, index.h("div", { class: "header-container" }, index.h("div", { class: "header-row", role: "row" }, index.h("div", { class: { sticky: true, visible: this.showStickyContainer() } }, index.h("dx-table-header-item", { class: "expand-column", minwidth: 64, maxwidth: 64, type: "html", label: "" }), index.h("dx-table-header-item", { class: "selection-column", minwidth: 56, maxwidth: 56, type: "html", label: "" }), this.tableScrollable && this.mediaQueryAllowsStickyness ? (index.h("slot", { name: "sticky" })) : null), !(this.tableScrollable && this.mediaQueryAllowsStickyness) ? (index.h("slot", { name: "sticky" })) : null, index.h("slot", null)))));
  }
  get self() { return index.getElement(this); }
};
DxTableHeader.style = dxTableHeaderCss;

exports.dx_table_header = DxTableHeader;
