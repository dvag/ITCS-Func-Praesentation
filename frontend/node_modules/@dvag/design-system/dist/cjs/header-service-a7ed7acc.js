'use strict';

const multicastObservable = require('./multicast-observable-e5c008e1.js');
const valueStore = require('./value-store-f683b26f.js');

const HEADER_SERVICE_KEY = "dx-header-service";
class HeaderService {
  constructor() {
    this.headerSubject = new multicastObservable.DsSubject();
    this.headerHeightSubject = new multicastObservable.DsSubject();
    this.headerVisibilitySubject = new multicastObservable.DsSubject();
    this.scrollInteractionEnabled = true;
  }
  static instance() {
    return valueStore.ValueStore.instance().getOrPut(HEADER_SERVICE_KEY, () => new HeaderService());
  }
  get header$() {
    return this.headerSubject;
  }
  get header() {
    return this.headerSubject.value;
  }
  set header(header) {
    var _a;
    if (this.headerSubject.value !== header) {
      this.headerSubject.next(header);
      if (header == null) {
        (_a = this.headerResizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        return;
      }
      this.headerResizeObserver = new ResizeObserver(() => {
        this.headerHeightSubject.next(this.headerSubject.value.offsetHeight);
      });
      this.headerResizeObserver.observe(header);
    }
  }
  unsetHeaderElement(header) {
    if (this.header === header) {
      this.header = null;
    }
  }
  get headerHeight$() {
    return this.headerHeightSubject;
  }
  get headerHeight() {
    var _a;
    return (_a = this.headerHeightSubject.value) !== null && _a !== void 0 ? _a : 0;
  }
  get isVisible() {
    return this.headerVisibilitySubject.value;
  }
  set isVisible(isVisible) {
    if (this.isVisible != isVisible) {
      this.headerVisibilitySubject.next(isVisible);
    }
  }
  get isVisible$() {
    return this.headerVisibilitySubject;
  }
  get isScrollInteractionEnabled() {
    return this.scrollInteractionEnabled;
  }
  disableScrollInteractionForMs(timeMs) {
    clearTimeout(this.disableScrollInteractionTimeoutHandle);
    return new Promise((resolve) => {
      this.scrollInteractionEnabled = false;
      this.disableScrollInteractionTimeoutHandle = setTimeout(() => {
        this.scrollInteractionEnabled = true;
        resolve();
      }, timeMs);
    });
  }
}
function subscribeToHeaderHeight(heightChangeCallback) {
  const headerServiceInstance = HeaderService.instance();
  const fireCallback = () => heightChangeCallback(headerServiceInstance.headerHeight, headerServiceInstance.isVisible);
  const isVisibleSubscription = headerServiceInstance.isVisible$.subscribe(() => fireCallback());
  const headerHeightSubscription = headerServiceInstance.headerHeight$.subscribe(() => fireCallback());
  return {
    unsubscribe: () => {
      isVisibleSubscription.unsubscribe();
      headerHeightSubscription.unsubscribe();
    },
  };
}

exports.HeaderService = HeaderService;
exports.subscribeToHeaderHeight = subscribeToHeaderHeight;
