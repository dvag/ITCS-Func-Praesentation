'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
require('./query-util-8642f149.js');

const dxCardCss = ":host{display:flex;flex-direction:column;background:#ffffff;border:1px solid #d6d6d6;box-sizing:border-box}:host:host([hidden]){display:none !important}:host:host(.contains-card-image){--dx-card-header-bottom-border-display:none}:host:host(.contains-tab-bar){border:0}:host:host(.max-content){height:max-content}";

const DxCard = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Whether the card has a max height of it's parent or it's content.
     * @internal
     */
    this.maxcontent = false;
    this.containsCardImage = false;
    this.containsTabBar = false;
  }
  connectedCallback() {
    this.cardImageSlotObserver = new slotObserver.SlotObserver(this.self, "dx-card-image", (nodes) => {
      this.containsCardImage = nodes.length > 0;
    });
    this.tabBarSlotObserver = new slotObserver.SlotObserver(this.self, slotObserver.directChildSelector("dx-tab-bar"), (nodes) => {
      this.containsTabBar = (nodes === null || nodes === void 0 ? void 0 : nodes.length) > 0;
    });
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.cardImageSlotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.tabBarSlotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  render() {
    return (index.h(index.Host, { class: {
        "max-content": this.maxcontent,
        "contains-card-image": this.containsCardImage,
        "contains-tab-bar": this.containsTabBar,
      } }, index.h("slot", { name: "header" }), index.h("slot", null)));
  }
  get self() { return index.getElement(this); }
};
DxCard.style = dxCardCss;

const dxCardContentCss = ":host{display:flex;flex-direction:column;padding:24px;flex:1}:host:host([hidden]){display:none !important}";

const DxCardContent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  render() {
    return (index.h(index.Host, null, index.h("slot", null)));
  }
};
DxCardContent.style = dxCardContentCss;

exports.dx_card = DxCard;
exports.dx_card_content = DxCardContent;
