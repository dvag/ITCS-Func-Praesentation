'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const navigation_util = require('./navigation.util-ddaead16.js');
const modalScrollHelper = require('./modal-scroll-helper-97bdd5aa.js');
const event_util = require('./event.util-7f75b6a8.js');
require('./value-store-f683b26f.js');
require('./query-util-8642f149.js');
require('./misc-util-63b423bd.js');

const dxHeaderMenuItemCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .icon{--dx-icon-color:var(--dx-header-menu-item-text-icon-theme-color, #2b2b2b)}";

const DxHeaderMenuItem = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.menuInteraction = index.createEvent(this, "menuInteraction", 7);
    /**
     * Highlights this entry
     * @value true: Entry highlighted
     * @value false: Entry not highlighted
     * @internal
     */
    this.internalactive = false;
    /**
     * @internal
     */
    this.internalopen = true;
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     * @example notifications
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications
     */
    this.notificationstheme = "system";
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  render() {
    return (index.h("dx-horizontal-grow-box", { open: this.internalopen }, index.h("dx-header-menu-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "button"), notifications: this.notifications, notificationstheme: this.notificationstheme, active: this.internalactive, onInteraction: () => this.menuInteraction.emit(this.connectedslot) }, index.h("dx-icon", { size: 24, icon: this.icon, class: "icon" }))));
  }
  get self() { return index.getElement(this); }
};
DxHeaderMenuItem.style = dxHeaderMenuItemCss;

const dxHeaderNavigationCss = ":host{display:block}:host:host([hidden]){display:none !important}";

const DxHeaderNavigation = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.menuInteraction = index.createEvent(this, "menuInteraction", 7);
    this.internalChangeSidebarVisibility = index.createEvent(this, "internalChangeSidebarVisibility", 7);
    this.internalForceSidebarContentUpdate = index.createEvent(this, "internalForceSidebarContentUpdate", 7);
    /**
     * Defines whether the sidebar closes automatically on interacting with a navigation item with no children.
     *
     * @value true: When interacting with a navigation item which has no child navigation items the sidebar closes.
     * @value false: The sidebar does not close when interacting with any navigation items.
     *
     * @example auto-close
     */
    this.autoclose = true;
    /**
     * @internal
     * We want to ensure that this component has always the highest level of priority by always keeping it at the lowest possible number because it should never be hidden by the header.
     */
    this.priority = Number.NEGATIVE_INFINITY;
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * Defines whether there is a notification within this component or not.
     * @value true: A notification indication is shown at the top right of the navigation menu item.
     * @value false: There is no notification indication on the navigation menu item.
     *
     * @example notification
     */
    this.notification = false;
    /**
     * @internal
     * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
     */
    this.internalnotification = false;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications-theme
     */
    this.notificationstheme = "system";
    /**
     * @internal
     * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
     */
    this.internalnotificationstheme = "system";
  }
  /**
   * The priority must not be changed because the navigation component should never hide.
   */
  onPriorityChange() {
    this.priority = Number.NEGATIVE_INFINITY;
  }
  onSidebarOpen(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type, { detail: e.detail }));
  }
  onSidebarClose(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  onChildMenuInteraction(e) {
    if (e.target !== this.self) {
      e.stopPropagation();
      this.menuInteraction.emit();
    }
  }
  connectedCallback() {
    this.slotObserver =
      slotObserver.createMetaComponentsSlotObserver(this.self, ":scope > dx-header-navigation-item", async (nodes) => {
        const navigationPage = {
          pageIndex: 0,
          navigationItems: [],
          previousPage: null,
        };
        nodes.sort(navigation_util.sortByNavigationItemSize);
        const page = { value: 1 };
        for (const node of nodes) {
          await node.insertNavigationTree(navigationPage, page);
        }
        this.navigationPage = navigationPage;
        this.internalForceSidebarContentUpdate.emit();
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    // We have to process the navigation items here because we cannot insert the <slot> into the dx-header-navigation-sidebar-content because it rendered elsewhere.
    return (index.h("dx-header-navigation-sidebar-content", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "sidebar-content"), rootnavigationpage: this.navigationPage, ref: (ref) => (this.sidebarContent = ref), onNavigationInteraction: () => {
        if (this.autoclose) {
          this.internalChangeSidebarVisibility.emit(false);
        }
      } }, index.h("slot", { slot: "header", name: "navigation-header" }), index.h("slot", { slot: "footer", name: "navigation-footer" })));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  computeNotificationsThemeType() {
    var _a;
    return (_a = this.internalnotificationstheme) !== null && _a !== void 0 ? _a : this.notificationstheme;
  }
  render() {
    return (index.h("dx-header-menu-item", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "menu-item"), notifications: this.notification || this.internalnotification
        ? "no-number"
        : undefined, notificationstheme: this.computeNotificationsThemeType(), icon: "hamburger-menue", internalopen: true, internalactive: this.internalactive }));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "priority": ["onPriorityChange"]
  }; }
};
DxHeaderNavigation.style = dxHeaderNavigationCss;

const dxHeaderNavigationSidebarContentCss = ":host:host([hidden]){display:none !important}:host .navigation-page{padding:0;--dx-sidebar-content-padding:0}:host .back-button-container{display:flex;align-items:center}:host .back-button-container .back-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;width:48px;flex-shrink:0;flex-grow:0}:host .back-button-container .back-button[disabled]{cursor:unset}:host .back-button-container .back-button.icon-right{flex-direction:row-reverse}:host .back-button-container .back-button:focus-visible{outline:2px solid #004763}:host .back-button-container .back-button-label{display:flex;align-items:center;height:56px;box-sizing:border-box;padding:0 16px;border-bottom:2px solid #c8aa22}:host .navigation-container.can-navigate-back{padding-left:48px}:host .navigation-container .navigation-items-container:nth-child(2){margin-top:24px}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;width:100%;position:relative;justify-content:flex-start;border-color:#c8aa22;padding-left:4px;box-sizing:border-box}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button[disabled]{cursor:unset}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button.icon-right{flex-direction:row-reverse}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button:focus-visible{outline:2px solid #004763}@media not all and (pointer: coarse){:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button:hover{background:#f7f7f7}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button:hover .line{opacity:1}}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button:active{background:#ededed}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button:active .line{opacity:1}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button .line{position:absolute;top:0;left:0;width:4px;opacity:0;height:100%;transition:opacity 150ms ease-in-out}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button .navigation-item-label{padding:0 16px 0 12px}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button .navigation-item-label.size-medium{display:flex;align-items:center;height:40px;box-sizing:border-box}:host .navigation-container .navigation-items-container .navigation-item-container .navigation-item-button .navigation-item-label.size-large{display:flex;align-items:center;height:56px;box-sizing:border-box}:host .no-navigation-text{display:block;width:272px}";

const DxHeaderNavigationSidebarContent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.navigationInteraction = index.createEvent(this, "navigationInteraction", 7);
  }
  onSidebarOpen(e) {
    var _a;
    const metaData = e.detail;
    (_a = this.contentSwitcher) === null || _a === void 0 ? void 0 : _a.showValue((metaData === null || metaData === void 0 ? void 0 : metaData.showNavigationItem)
      ? parseInt(metaData.showNavigationItem)
      : INDEX_OF_DEFAULT_NAVIGATION_ITEM, false);
  }
  spliceIntoMediumAndLargeNavigationItems(navigationItems) {
    const navigationItemsCopy = Array.from(navigationItems);
    const indexOfFirstMediumNavigationItem = navigationItemsCopy.findIndex((navigationItem) => navigationItem.size === "m");
    const largeNavigationItems = navigationItemsCopy.splice(0, indexOfFirstMediumNavigationItem);
    return {
      mediumNavigationItems: navigationItemsCopy,
      largeNavigationItems,
    };
  }
  renderNavigationItem(navigationItem) {
    return (index.h("div", { class: "navigation-item-container" }, index.h("button", { id: elementIdHandling.ElementIdGenerator.createIdFromString(navigationItem.id, "control"), class: "navigation-item-button", onClick: () => {
        if (navigationItem.refersToPage != null) {
          this.contentSwitcher.value =
            navigationItem.refersToPage.pageIndex;
        }
        else {
          this.navigationInteraction.emit(navigationItem.value);
        }
        navigationItem.interact();
      } }, index.h("div", { class: {
        "navigation-item-label": true,
        "size-medium": navigationItem.size === "m",
        "size-large": navigationItem.size === "l",
      } }, index.h("dx-text", { color: "headline", type: navigationItem.size === "l" ? "ps" : "its" }, navigationItem.label)), index.h("dx-container", { color: "gold", class: "line" }))));
  }
  renderBackButton(navigationPage) {
    if ((navigationPage === null || navigationPage === void 0 ? void 0 : navigationPage.previousPage) == null) {
      return null;
    }
    const navigationItemReferringToCurrentPage = navigationPage.previousPage.navigationItems.find((navigationItem) => navigationItem.refersToPage === navigationPage);
    return (index.h("div", { class: "back-button-container", slot: "header" }, index.h("button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "back-button-control"), class: "back-button", onClick: () => {
        this.contentSwitcher.value = navigationPage.previousPage.pageIndex;
      } }, index.h("dx-icon", { color: "headline", icon: "pfeil-links", size: 24 })), index.h("div", { class: "back-button-label" }, index.h("dx-text", { type: "ps", color: "headline" }, navigationItemReferringToCurrentPage.label))));
  }
  renderNavigationItems(navigationItems) {
    var _a;
    if (((_a = navigationItems === null || navigationItems === void 0 ? void 0 : navigationItems.length) !== null && _a !== void 0 ? _a : 0) === 0) {
      return null;
    }
    return (index.h("div", { class: {
        "navigation-items-container": true,
      } }, navigationItems.map((navigationItem) => {
      return this.renderNavigationItem(navigationItem);
    })));
  }
  renderNavigationPage(navigationPage, pages = []) {
    if (navigationPage == null) {
      return;
    }
    const { mediumNavigationItems, largeNavigationItems } = this.spliceIntoMediumAndLargeNavigationItems(navigationPage.navigationItems);
    pages.push(index.h("dx-content-switcher-item", { value: navigationPage.pageIndex }, index.h("dx-sidebar-content", { class: { "navigation-page": true } }, this.renderBackButton(navigationPage), index.h("div", { class: {
        "navigation-container": true,
        "can-navigate-back": navigationPage.previousPage != null,
      } }, [
      this.renderNavigationItems(largeNavigationItems),
      this.renderNavigationItems(mediumNavigationItems),
    ]))));
    navigationPage.navigationItems.forEach((navigationItem) => this.renderNavigationPage(navigationItem.refersToPage, pages));
  }
  renderNoNavigation() {
    return (index.h("dx-sidebar-content", null, index.h("dx-text", { class: "no-navigation-text", color: "gray-33" }, "Diese Anwendung besitzt keine Navigationsinhalte")));
  }
  renderContentSwitcherPages() {
    const pages = [];
    this.renderNavigationPage(this.rootnavigationpage, pages);
    return pages;
  }
  render() {
    var _a, _b;
    if (((_b = (_a = this.rootnavigationpage) === null || _a === void 0 ? void 0 : _a.navigationItems) === null || _b === void 0 ? void 0 : _b.length) > 0) {
      return (index.h("dx-sidebar-content", null, index.h("slot", { slot: "header", name: "header" }), index.h("dx-content-switcher", { ref: (ref) => (this.contentSwitcher = ref) }, this.renderContentSwitcherPages()), index.h("slot", { slot: "footer", name: "footer" })));
    }
    else {
      return this.renderNoNavigation();
    }
  }
  get self() { return index.getElement(this); }
};
const INDEX_OF_DEFAULT_NAVIGATION_ITEM = 0;
DxHeaderNavigationSidebarContent.style = dxHeaderNavigationSidebarContentCss;

const dxSidebarCss = ":host{pointer-events:none;position:fixed;top:0;right:0;width:100%;height:100%}:host:host([hidden]){display:none !important}:host .overlay{position:fixed;z-index:1001;left:0;top:0;bottom:0;right:0;background-color:rgba(87, 87, 87, 0.6);transition:background-color 300ms ease-in-out;background-color:rgba(87, 87, 87, 0);transition-duration:300ms}:host .on-top-of-overlay{position:fixed;z-index:1002;left:0;top:0;bottom:0;right:0;max-width:1460px;display:flex;overflow:hidden;pointer-events:none;height:100%;flex-direction:row-reverse}@media (min-width: 1460px){:host .on-top-of-overlay{margin:auto}}:host .on-top-of-overlay .side-bar{--dx-sidebar-offset-top:calc(var(--dx-header-height, $header-menu-height) - var(--dx-header-height-below, 0px) - 56px);margin-top:var(--dx-sidebar-offset-top, 0px);padding-top:56px;width:100%;height:100%;box-sizing:border-box;background:#ffffff;transform:translateX(100%);transition:transform ease-in-out;transition-duration:300ms;pointer-events:all}@media (min-width: 760px){:host .on-top-of-overlay .side-bar{width:476px}}:host .on-top-of-overlay .side-bar .side-bar-content{height:calc(100% - var(--dx-sidebar-offset-top, 0px));overflow:hidden}:host(.open){pointer-events:all}:host(.open) .overlay{position:fixed;z-index:1001;left:0;top:0;bottom:0;right:0;background-color:rgba(87, 87, 87, 0.6);transition:background-color 300ms ease-in-out;transition-duration:300ms}:host(.open) .on-top-of-overlay .side-bar{transform:translateX(0%)}";

const DxSidebar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.openChange = index.createEvent(this, "openChange", 7);
    this.transitionStartHelper = new event_util.TransitionStartHelper(this, (e) => this.handleSidebarTransitionStart(e));
    this.open = false;
  }
  componentDidRender() {
    const scrollHelper = modalScrollHelper.ModalScrollHelper.instance();
    if (this.open) {
      scrollHelper.block(this.self);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  disconnectedCallback() {
    modalScrollHelper.ModalScrollHelper.instance().unblock(this.self);
  }
  setSidebar(sidebar) {
    this.sidebar = sidebar;
    this.transitionStartHelper.on(sidebar);
  }
  handleSidebarTransitionStart(e) {
    if (!this.isSidebarOpenCloseTransition(e)) {
      return;
    }
    this.sidebar.style.setProperty("visibility", "visible");
  }
  handleSidebarTransitionEnd(e) {
    if (!this.isSidebarOpenCloseTransition(e)) {
      return;
    }
    if (!this.open) {
      this.sidebar.style.setProperty("visibility", "hidden");
    }
  }
  isSidebarOpenCloseTransition(e) {
    return e.target === this.sidebar && e.propertyName === "transform";
  }
  close() {
    this.open = false;
    this.openChange.emit(this.open);
  }
  render() {
    return (index.h(index.Host, { class: {
        open: this.open,
      } }, index.h("div", { class: { "on-top-of-overlay": true } }, index.h("div", { class: "side-bar", ref: (ref) => this.setSidebar(ref), onTransitionEnd: (e) => this.handleSidebarTransitionEnd(e) }, index.h("div", { class: { "side-bar-content": true } }, index.h("slot", null)))), index.h("div", { class: "overlay", onClick: () => {
        this.close();
      } })));
  }
  get self() { return index.getElement(this); }
};
DxSidebar.style = dxSidebarCss;

exports.dx_header_menu_item = DxHeaderMenuItem;
exports.dx_header_navigation = DxHeaderNavigation;
exports.dx_header_navigation_sidebar_content = DxHeaderNavigationSidebarContent;
exports.dx_sidebar = DxSidebar;
