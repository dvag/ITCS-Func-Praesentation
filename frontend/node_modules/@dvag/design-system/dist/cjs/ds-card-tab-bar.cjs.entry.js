'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
require('./query-util-8642f149.js');

const dsCardTabBarCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .headers{display:flex;padding-right:16px;padding-left:16px;border-bottom:1px solid #dedede}:host .headers .header-item{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent;padding:24px 8px;margin-right:16px;cursor:pointer;position:relative;top:0;left:0;border-radius:0;transition:background-color 150ms ease-in-out}:host .headers .header-item:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host .headers .header-item:focus{box-shadow:none;background-color:#f5f5f5}:host .headers .header-item .indicator{display:none}:host .headers .header-item.selected{pointer-events:none;cursor:default}:host .headers .header-item.selected .indicator{display:block;content:\" \";position:absolute;border-radius:1.5px;background-color:#a7893d;bottom:-1.5px;height:3px;width:100%;left:0}:host .headers .header-item.selected:focus{background-color:initial}:host .headers .header-item:last-child{margin-right:0}:host .pages{min-height:max-content}";

const DsCardTabBar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.showChange = index.createEvent(this, "showChange", 7);
    this.tabPages = [];
  }
  showChanged() {
    this.updateSlotVisibility();
  }
  connectedCallback() {
    this.tabPagesObserver = slotObserver.createMetaComponentsSlotObserver(this.self, "ds-card-tab-page", async (nodes) => {
      var _a;
      this.tabPages = nodes.map((node) => {
        return {
          name: node.name,
          label: node.label,
          element: node,
        };
      });
      if (this.show == undefined || this.show === "") {
        this.show = (_a = this.tabPages[0]) === null || _a === void 0 ? void 0 : _a.name;
      }
      this.updateSlotVisibility();
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.tabPagesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  updateSlotVisibility() {
    this.tabPages.forEach((tabPage) => {
      const isVisible = this.show === tabPage.name;
      tabPage.element.style.display = isVisible ? "block" : "none";
    });
  }
  setActiveTab(tabPage) {
    if (this.show !== tabPage.name) {
      this.show = tabPage.name;
      setTimeout(() => this.showChange.emit(tabPage.name));
    }
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "headers" }, this.renderHeaderItems()), index.h("div", { class: "pages" }, index.h("slot", null))));
  }
  renderHeaderItems() {
    return this.tabPages.map((tabPage) => {
      const isSelected = this.show === tabPage.name;
      return (index.h("button", { type: "button", class: {
          "header-item": true,
          selected: isSelected,
        }, disabled: isSelected, onClick: () => this.setActiveTab(tabPage), tabIndex: isSelected ? -1 : 0 }, index.h("ds-text", { type: "u5", screensize: "small", color: isSelected ? "gold" : undefined }, tabPage.label), index.h("div", { class: "indicator" })));
    });
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "show": ["showChanged"]
  }; }
};
DsCardTabBar.style = dsCardTabBarCss;

exports.ds_card_tab_bar = DsCardTabBar;
