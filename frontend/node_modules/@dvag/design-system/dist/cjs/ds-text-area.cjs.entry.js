'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const baseElements = require('./base-elements-0dbfd791.js');
const errorPopup = require('./error-popup-9c9bd96e.js');
const inputContainer = require('./input-container-9bf53d94.js');
require('./value-store-f683b26f.js');

const dsTextAreaCss = ":host{display:block}:host:host([hidden]){display:none !important}:host:host([label]:not([label=\"\"])){--ds-info-button-offset-y:24px}:host label{display:block}:host label>div.container{position:relative;top:0;left:0;display:flex;height:38px;border-radius:4px;border:1px solid #c1c1c1;background-color:#ffffff;box-sizing:border-box;align-items:center;display:block;height:auto}:host label>div.container.required-outline{border-color:#e8b50e}:host label>div.container.requirement-fulfilled{border-color:#c1c1c1}:host label>div.container.red-outline{border-color:#be1413}:host label>div.container.disabled-outline{border-color:#ebebeb}:host label>div.container.active{border-color:#4c4c4c}:host label>div.container textarea{resize:none;outline:none;scrollbar-width:none;overflow:auto;-ms-overflow-style:none;border:none;margin:8px;flex-grow:1;font-size:16px;font-weight:normal;letter-spacing:0.02px;line-height:22px;padding:0;font-family:\"Helvetica Neue\", \"Helvetica Neue LT W01\";color:#4c4c4c}:host label>div.container textarea::placeholder{color:#c1c1c1}:host label>div.container textarea:disabled{background-color:#ffffff;color:#dedede}:host label>div.container textarea::-webkit-scrollbar{display:none}:host label .remaining-letters{display:flex;justify-content:flex-end;margin-top:6px;padding-right:8px}ds-text{white-space:pre-line;word-break:break-word}";

const DsTextArea = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.valueChange = index.createEvent(this, "valueChange", 7);
    this.valueComplete = index.createEvent(this, "valueComplete", 7);
    this.inputFocused = false;
    this.internalValue = "";
    /**
     * Colors the border of the textarea red.
     * @value true: red border.
     * @value false: grey border.
     * @example error
     */
    this.error = false;
    /**
     * Number of lines shown simultaneously.
     * @value number: Number of lines.
     * @example lines
     */
    this.lines = 4;
    /**
     * Text of the textarea.
     * @important
     * @value string: Content of the textarea.
     * @example value
     */
    this.value = "";
    /**
     * Textarea is disabled and cannot be used anymore.
     * Label and border are grey.
     * @value true: Textarea is disabled
     * @value false: Textarea is not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Textarea is in read-only mode.
     * Content of the textare is displayed in a simple way.
     * @value false: Formfield
     * @value true: Shows the content only as text.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks the textarea as mandatory.
     * @value false: Not mandatory (Default).
     * @value true: mandatory field.
     * @example required
     * @example required-maxlength
     */
    this.required = false;
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  /**
   * Sets the focus to the textarea.
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
  }
  obtainValueChangesFromOutside(force = false) {
    if (force || this.value !== this.internalValue) {
      this.internalValue = this.value;
      this.lastEmittedChangeValue = this.value;
      this.lastEmittedCompleteValue = this.value;
    }
  }
  onInputFocused() {
    this.inputFocused = true;
  }
  onInputBlurred() {
    this.inputFocused = false;
    this.emitValueChange();
    this.emitValueComplete();
  }
  onInputKeyUp(event) {
    this.internalValue = event.target.value;
    this.emitValueChange();
  }
  emitValueChange() {
    this.value = this.internalValue;
    if (this.lastEmittedChangeValue !== this.value) {
      this.valueChange.emit(this.value);
      this.lastEmittedChangeValue = this.value;
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  render() {
    if (this.readonly) {
      return index.h(baseElements.ReadonlyTextElement, { text: this.value, label: this.label });
    }
    return index.h(index.Host, null, this.renderInput());
  }
  renderInput() {
    var _a, _b;
    assert.assert(this.maxlength == null || this.maxlength > 0, () => `<ds-text-area> 'maxlength' sollte nicht kleiner als 1 sein. `);
    assert.assert(this.maxlength == null || this.maxlength > this.value.length, () => `<ds-text-area> 'value' darf nicht größer als 'maxlength' sein`);
    assert.assert(this.lines > 0, () => `<ds-text-area> 'lines' muss größer als 0 sein`);
    const isErrorOutline = ((_a = this.errormessage) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.error;
    const requirementFulfilled = ((_b = this.value) === null || _b === void 0 ? void 0 : _b.length) > 0;
    return (index.h("label", null, index.h("ds-input-label", { disabled: this.disabled, label: this.label }), index.h(inputContainer.InputContainer, { active: this.inputFocused, error: isErrorOutline, required: this.required, requirementFulfilled: requirementFulfilled, disabled: this.disabled, title: this.value }, index.h("ds-scroll-container", { style: { height: `${MARGIN_PX + this.lines * LINE_PX}px` }, scrollbarspace: 8 }, index.h("textarea", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "control"), onKeyUp: (event) => this.onInputKeyUp(event), onFocus: () => this.onInputFocused(), onBlur: () => this.onInputBlurred(), ref: (el) => (this.inputElement = el), placeholder: "Bitte geben Sie hier Ihren Text ein ...", value: this.internalValue, maxLength: this.maxlength > 0 ? this.maxlength : undefined, disabled: this.disabled })), index.h(errorPopup.ErrorPopup, { text: this.errormessage, show: this.inputFocused })), this.renderRemainingLetters(), index.h("ds-required-hint", { required: this.required, fulfilled: requirementFulfilled })));
  }
  renderRemainingLetters() {
    if (this.maxlength > 0) {
      const remainingLetters = this.maxlength - this.internalValue.length;
      return (index.h("div", { class: "remaining-letters" }, index.h("ds-text", { type: "itk" }, remainingLetters, " Zeichen verbleibend")));
    }
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "value": ["valueChanged"]
  }; }
};
const MARGIN_PX = 8 + 8;
const LINE_PX = 22;
DsTextArea.style = dsTextAreaCss;

exports.ds_text_area = DsTextArea;
