'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const gridModels = require('./grid-models-cbbf414b.js');
const assert = require('./assert-d8ea75c6.js');

const dxHeroImageCss = ":host{display:block;overflow:hidden;line-height:0}:host:host([hidden]){display:none !important}:host img{width:100%;object-fit:cover;object-position:0 0;height:100%}";

const DxHeroImage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
  }
  renderSource(breakpoint, url, fallbackUrl) {
    if (url && url !== fallbackUrl) {
      return (index.h("source", { media: `(min-width: ${gridModels.getBreakpointMinWidth(breakpoint)}px)`, srcSet: url }));
    }
  }
  render() {
    const defaultSrc = this.mq1 || this.mq2 || this.mq3 || this.mq4 || this.mq5;
    assert.assert((defaultSrc === null || defaultSrc === void 0 ? void 0 : defaultSrc.length) > 0, () => "You have to define at least one image url!");
    return (index.h(index.Host, null, index.h("picture", null, [
      this.renderSource(gridModels.GridBreakpoint.MQ5, this.mq5, defaultSrc),
      this.renderSource(gridModels.GridBreakpoint.MQ4, this.mq4, defaultSrc),
      this.renderSource(gridModels.GridBreakpoint.MQ3, this.mq3, defaultSrc),
      this.renderSource(gridModels.GridBreakpoint.MQ2, this.mq2, defaultSrc),
    ], index.h("img", { src: defaultSrc, alt: "image" }))));
  }
  get self() { return index.getElement(this); }
};
DxHeroImage.style = dxHeroImageCss;

exports.dx_hero_image = DxHeroImage;
