'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const colorPalette = require('./color-palette-ed0f6557.js');
const currencyUtil = require('./currency-util-f7a65567.js');
require('./assert-d8ea75c6.js');

const dsTableCellCss = ":host{width:100%;overflow:hidden;margin-right:16px;position:relative;display:flex;align-items:center;align-self:stretch;flex:1;border-radius:6px;--ds-show-required-hint:none}:host:host([hidden]){display:none !important}:host .cell{font-family:\"Helvetica Neue\", \"Helvetica Neue LT W01\";color:#666666;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;box-sizing:border-box;padding-left:8px;padding-right:8px}:host .cell.multiple-lines{display:-webkit-box;-webkit-line-clamp:var(--ds-table-cell-lines, 1);-webkit-box-orient:vertical;white-space:break-spaces}:host .cell.align-left{text-align:start}:host .cell.align-right{text-align:end}:host .cell.align-center{text-align:center}:host .cell ds-text{overflow:hidden;text-overflow:ellipsis}:host .cell ::slotted(*){overflow:hidden;text-overflow:ellipsis}:host:host(.cell){font-family:\"Helvetica Neue\", \"Helvetica Neue LT W01\";color:#666666;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;box-sizing:border-box;padding-left:8px;padding-right:8px}:host:host(.cell).multiple-lines{display:-webkit-box;-webkit-line-clamp:var(--ds-table-cell-lines, 1);-webkit-box-orient:vertical;white-space:break-spaces}:host:host(.cell).align-left{text-align:start}:host:host(.cell).align-right{text-align:end}:host:host(.cell).align-center{text-align:center}:host:host(.cell) ds-text{overflow:hidden;text-overflow:ellipsis}:host:host(.cell) ::slotted(*){overflow:hidden;text-overflow:ellipsis}:host:first-child{padding-left:16px}:host:host(:first-child){padding-left:16px}:host:last-child{margin-right:0;padding-right:16px}:host:host(:host:last-child){margin-right:0;padding-right:16px}:host .popup-container{position:absolute;bottom:0}:host .popup-container.align-right{right:0;--dx-popup-offset-right:0px;--dx-popup-offset-left:initial}:host .popup-container.align-center{left:50%;--dx-popup-offset-left:-10px}:host .popup-container .overlay{position:fixed;z-index:1110;left:0;top:0;right:0;bottom:0;background-color:#666666;transition:opacity 300ms ease-in-out;opacity:0.6;opacity:0}@keyframes fade-in{0%{opacity:0}100%{opacity:1}}:host .popup-container dx-popup{z-index:1111;animation:fade-in 400ms ease-in-out;animation-iteration-count:1}:host .cell .html-alignment-container{display:flex}:host .cell .overflow-container{width:100%}:host .cell:not(.multiple-lines) .overflow-container{display:flex;overflow:hidden}:host .cell.align-left .html-alignment-container,:host .cell.align-left .overflow-container{justify-content:flex-start}:host .cell.align-right .html-alignment-container,:host .cell.align-right .overflow-container{justify-content:flex-end}:host .cell.align-center .html-alignment-container,:host .cell.align-center .overflow-container{justify-content:center}";

const DsTableCell = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.tooltipText = "";
    this.showTooltip = false;
  }
  /**
   * @internal
   */
  async obtainSettings(settings) {
    this.settings = settings;
  }
  getInnerElement() {
    var _a, _b, _c, _d;
    const currentType = (_a = this.type) !== null && _a !== void 0 ? _a : (_b = this.settings) === null || _b === void 0 ? void 0 : _b.type;
    if (currentType == null) {
      return index.h("div", null);
    }
    if (currentType === "html") {
      return (index.h("div", { class: "html-alignment-container" }, index.h("div", { class: "overflow-container" }, index.h("slot", null))));
    }
    if (currentType === "text") {
      return this.renderCellText(this.value);
    }
    if (currentType === "numeric") {
      const numericText = (_c = parseFloat(this.value)) === null || _c === void 0 ? void 0 : _c.toLocaleString("de-DE");
      return this.renderCellText(numericText);
    }
    if (currentType === "currency") {
      const currencyText = currencyUtil.displayNumberAsCurrency(parseFloat(this.value), 2);
      return this.renderCellText(`${currencyText} â‚¬`);
    }
    if (currentType === "date") {
      const split = (_d = this.value) === null || _d === void 0 ? void 0 : _d.split("-");
      const text = split != null ? `${split[2]}.${split[1]}.${split[0]}` : "";
      return this.renderCellText(text);
    }
  }
  renderCellText(text) {
    return (index.h("div", { class: "overflow-container" }, index.h("ds-text", null, text)));
  }
  setTooltipText(cell) {
    requestAnimationFrame(() => {
      var _a;
      this.tooltipText =
        ((_a = (cell.textContent || this.self.textContent)) === null || _a === void 0 ? void 0 : _a.trim()) || this.value;
    });
  }
  handleTouchEnd() {
    this.showTooltip = true;
  }
  onTouchEnd(e) {
    this.showTooltip =
      e
        .composedPath()
        .find((target) => { var _a; return (_a = target === null || target === void 0 ? void 0 : target.classList) === null || _a === void 0 ? void 0 : _a.contains("overlay"); }) == null;
  }
  getStyle() {
    var _a, _b;
    const style = Object.assign({}, (_a = this.settings) === null || _a === void 0 ? void 0 : _a.sizeStyle);
    if (this.color != null) {
      style["background-color"] = new colorPalette.ColorPalette().getColorCode(this.color);
    }
    const lines = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.lines;
    style["--ds-table-cell-lines"] = lines;
    if (lines > 1) {
      style["padding-top"] = "8px";
      style["padding-bottom"] = "8px";
    }
    return style;
  }
  render() {
    var _a, _b, _c;
    const alignClass = {};
    if (this.settings != null) {
      alignClass["align-" + this.settings.align] = true;
    }
    return (index.h(index.Host, { role: "cell", style: this.getStyle() }, index.h("div", { class: Object.assign({ cell: true, "multiple-lines": ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.lines) > 1 }, alignClass), title: this.tooltipText, onTouchEnd: () => this.handleTouchEnd(), ref: (ref) => this.setTooltipText(ref) }, this.getInnerElement()), index.h("div", { class: Object.assign({ "popup-container": true }, alignClass), hidden: !this.showTooltip || !(((_b = this.tooltipText) === null || _b === void 0 ? void 0 : _b.length) > 0) }, index.h("div", { class: "overlay" }), index.h("dx-popup", { dstheme: true, arrowposition: ((_c = this.settings) === null || _c === void 0 ? void 0 : _c.align) === "right" ? "right" : "left", show: true }, index.h("ds-text", null, this.tooltipText)))));
  }
  get self() { return index.getElement(this); }
};
DsTableCell.style = dsTableCellCss;

exports.ds_table_cell = DsTableCell;
