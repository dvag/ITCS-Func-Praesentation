'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const colorPalette = require('./color-palette-ed0f6557.js');
const breakpointAware = require('./breakpoint-aware-cc9d0ee6.js');
const constants = require('./constants-0c86f3e0.js');

const dsIconCss = ":host{display:inline-block;overflow:hidden;line-height:0}:host:host([hidden]){display:none !important}:host svg{fill:var(--ds-icon-color, #a7893d)}";

const DsIcon = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.previousSizeFromCssVariables = null;
  }
  componentDidRender() {
    const size = this.size != null ? this.size : this.getSizeFromCssVariables();
    const tagName = `ds-icon-${this.icon.replace(/-/g, "")}`;
    this.self.shadowRoot.querySelector("span").innerHTML = `<${tagName} size="${size}"></${tagName}>`;
  }
  onWindowChange() {
    if (this.size == null &&
      this.previousSizeFromCssVariables != null &&
      this.previousSizeFromCssVariables !== this.getSizeFromCssVariables()) {
      index.forceUpdate(this);
    }
  }
  getSizeFromCssVariables() {
    const inheritedSize = getComputedStyle(this.self).getPropertyValue("--ds-icon-attr-size");
    if (inheritedSize != null) {
      const size = parseInt(inheritedSize.trim());
      if (!isNaN(size)) {
        this.previousSizeFromCssVariables = size;
        return size;
      }
    }
    return null;
  }
  render() {
    const size = this.size != null ? this.size : this.getSizeFromCssVariables();
    assert.assert(this.icon != null, () => "Die Eigenschaft 'icon' muss gesetzt sein.");
    assert.assert(size != null, () => "Die Eigenschaft 'size' muss gesetzt sein.");
    return (index.h(index.Host, { style: generateStyleMap$1(size, this.color) }, index.h("span", null)));
  }
  get self() { return index.getElement(this); }
};
function generateStyleMap$1(size, color) {
  const map = {
    width: `${size}px`,
    height: `${size}px`,
  };
  if (color) {
    map["--ds-icon-color"] = new colorPalette.ColorPalette().getColorCode(color);
  }
  return map;
}
DsIcon.style = dsIconCss;

const dsTextCss = "@charset \"UTF-8\";:host{display:inline;font-family:\"Helvetica Neue\", \"Helvetica Neue LT W01\"}:host:host([hidden]){display:none !important}:host(.style-inherit){letter-spacing:var(--ds-text-letter-spacing, 0.02px);text-transform:var(--ds-text-text-transform, none);font-weight:var(--ds-text-font-weight, 400);color:var(--ds-text-color, #666666)}:host(.style-inherit):host(.screensize-small){font-size:var(--ds-text-font-size-small, var(--ds-text-font-size, 16px));line-height:var(--ds-text-line-height-small, var(--ds-text-line-height, 24px))}:host(.style-inherit):host(.screensize-large){font-size:var(--ds-text-font-size-large, var(--ds-text-font-size, 18px));line-height:var(--ds-text-line-height-large, var(--ds-text-line-height, 28px))}:host(.style-inherit):host(.with-bullet)::before{display:inline-block;content:\"‚óè\";white-space:nowrap;margin-right:var(--ds-text-list-bullet-width);margin-left:calc(-2 * var(--ds-text-list-bullet-width))}:host(.style-ueberschrift1),:host(.style-ueberschrift2),:host(.style-ueberschrift3),:host(.style-ueberschrift4),:host(.style-ueberschrift5){letter-spacing:0.04px;font-weight:700;color:var(--ds-text-color, #4c4c4c)}:host(.style-ueberschrift1):host(.style-ueberschrift1):host(.screensize-small),:host(.style-ueberschrift2):host(.style-ueberschrift1):host(.screensize-small),:host(.style-ueberschrift3):host(.style-ueberschrift1):host(.screensize-small),:host(.style-ueberschrift4):host(.style-ueberschrift1):host(.screensize-small),:host(.style-ueberschrift5):host(.style-ueberschrift1):host(.screensize-small){font-size:32px;line-height:40px}:host(.style-ueberschrift1):host(.style-ueberschrift1):host(.screensize-large),:host(.style-ueberschrift2):host(.style-ueberschrift1):host(.screensize-large),:host(.style-ueberschrift3):host(.style-ueberschrift1):host(.screensize-large),:host(.style-ueberschrift4):host(.style-ueberschrift1):host(.screensize-large),:host(.style-ueberschrift5):host(.style-ueberschrift1):host(.screensize-large){font-size:44px;line-height:52px}:host(.style-ueberschrift1):host(.style-ueberschrift2):host(.screensize-small),:host(.style-ueberschrift2):host(.style-ueberschrift2):host(.screensize-small),:host(.style-ueberschrift3):host(.style-ueberschrift2):host(.screensize-small),:host(.style-ueberschrift4):host(.style-ueberschrift2):host(.screensize-small),:host(.style-ueberschrift5):host(.style-ueberschrift2):host(.screensize-small){font-size:28px;line-height:36px}:host(.style-ueberschrift1):host(.style-ueberschrift2):host(.screensize-large),:host(.style-ueberschrift2):host(.style-ueberschrift2):host(.screensize-large),:host(.style-ueberschrift3):host(.style-ueberschrift2):host(.screensize-large),:host(.style-ueberschrift4):host(.style-ueberschrift2):host(.screensize-large),:host(.style-ueberschrift5):host(.style-ueberschrift2):host(.screensize-large){font-size:36px;line-height:44px}:host(.style-ueberschrift1):host(.style-ueberschrift3):host(.screensize-small),:host(.style-ueberschrift2):host(.style-ueberschrift3):host(.screensize-small),:host(.style-ueberschrift3):host(.style-ueberschrift3):host(.screensize-small),:host(.style-ueberschrift4):host(.style-ueberschrift3):host(.screensize-small),:host(.style-ueberschrift5):host(.style-ueberschrift3):host(.screensize-small){font-size:24px;line-height:32px}:host(.style-ueberschrift1):host(.style-ueberschrift3):host(.screensize-large),:host(.style-ueberschrift2):host(.style-ueberschrift3):host(.screensize-large),:host(.style-ueberschrift3):host(.style-ueberschrift3):host(.screensize-large),:host(.style-ueberschrift4):host(.style-ueberschrift3):host(.screensize-large),:host(.style-ueberschrift5):host(.style-ueberschrift3):host(.screensize-large){font-size:28px;line-height:36px}:host(.style-ueberschrift1):host(.style-ueberschrift4):host(.screensize-small),:host(.style-ueberschrift2):host(.style-ueberschrift4):host(.screensize-small),:host(.style-ueberschrift3):host(.style-ueberschrift4):host(.screensize-small),:host(.style-ueberschrift4):host(.style-ueberschrift4):host(.screensize-small),:host(.style-ueberschrift5):host(.style-ueberschrift4):host(.screensize-small){font-size:20px;line-height:28px}:host(.style-ueberschrift1):host(.style-ueberschrift4):host(.screensize-large),:host(.style-ueberschrift2):host(.style-ueberschrift4):host(.screensize-large),:host(.style-ueberschrift3):host(.style-ueberschrift4):host(.screensize-large),:host(.style-ueberschrift4):host(.style-ueberschrift4):host(.screensize-large),:host(.style-ueberschrift5):host(.style-ueberschrift4):host(.screensize-large){font-size:24px;line-height:32px}:host(.style-ueberschrift1):host(.style-ueberschrift5):host(.screensize-small),:host(.style-ueberschrift2):host(.style-ueberschrift5):host(.screensize-small),:host(.style-ueberschrift3):host(.style-ueberschrift5):host(.screensize-small),:host(.style-ueberschrift4):host(.style-ueberschrift5):host(.screensize-small),:host(.style-ueberschrift5):host(.style-ueberschrift5):host(.screensize-small){font-size:18px;line-height:24px}:host(.style-ueberschrift1):host(.style-ueberschrift5):host(.screensize-large),:host(.style-ueberschrift2):host(.style-ueberschrift5):host(.screensize-large),:host(.style-ueberschrift3):host(.style-ueberschrift5):host(.screensize-large),:host(.style-ueberschrift4):host(.style-ueberschrift5):host(.screensize-large),:host(.style-ueberschrift5):host(.style-ueberschrift5):host(.screensize-large){font-size:20px;line-height:28px}:host(.style-fliesstext-standard),:host(.style-fliesstext-gross),:host(.style-fliesstext-fett){font-weight:400;letter-spacing:0.02px;color:var(--ds-text-color, #666666)}:host(.style-fliesstext-standard):host(.style-fliesstext-standard):host(.style-fliesstext-fett),:host(.style-fliesstext-standard):host(.style-fliesstext-fett):host(.style-fliesstext-fett),:host(.style-fliesstext-gross):host(.style-fliesstext-standard):host(.style-fliesstext-fett),:host(.style-fliesstext-gross):host(.style-fliesstext-fett):host(.style-fliesstext-fett),:host(.style-fliesstext-fett):host(.style-fliesstext-standard):host(.style-fliesstext-fett),:host(.style-fliesstext-fett):host(.style-fliesstext-fett):host(.style-fliesstext-fett){font-weight:700}:host(.style-fliesstext-standard):host(.style-fliesstext-standard):host(.screensize-small),:host(.style-fliesstext-standard):host(.style-fliesstext-fett):host(.screensize-small),:host(.style-fliesstext-gross):host(.style-fliesstext-standard):host(.screensize-small),:host(.style-fliesstext-gross):host(.style-fliesstext-fett):host(.screensize-small),:host(.style-fliesstext-fett):host(.style-fliesstext-standard):host(.screensize-small),:host(.style-fliesstext-fett):host(.style-fliesstext-fett):host(.screensize-small){font-size:16px;line-height:24px}:host(.style-fliesstext-standard):host(.style-fliesstext-standard):host(.screensize-large),:host(.style-fliesstext-standard):host(.style-fliesstext-fett):host(.screensize-large),:host(.style-fliesstext-gross):host(.style-fliesstext-standard):host(.screensize-large),:host(.style-fliesstext-gross):host(.style-fliesstext-fett):host(.screensize-large),:host(.style-fliesstext-fett):host(.style-fliesstext-standard):host(.screensize-large),:host(.style-fliesstext-fett):host(.style-fliesstext-fett):host(.screensize-large){font-size:18px;line-height:28px}:host(.style-fliesstext-standard):host(.style-fliesstext-gross):host(.screensize-small),:host(.style-fliesstext-gross):host(.style-fliesstext-gross):host(.screensize-small),:host(.style-fliesstext-fett):host(.style-fliesstext-gross):host(.screensize-small){font-size:18px;line-height:28px}:host(.style-fliesstext-standard):host(.style-fliesstext-gross):host(.screensize-large),:host(.style-fliesstext-gross):host(.style-fliesstext-gross):host(.screensize-large),:host(.style-fliesstext-fett):host(.style-fliesstext-gross):host(.screensize-large){font-size:20px;line-height:32px}:host(.style-kapitelueberschrift){text-transform:uppercase;letter-spacing:0.4px;color:var(--ds-text-color, #a7893d);font-weight:600}:host(.style-kapitelueberschrift):host(.screensize-small){font-size:14px;line-height:20px}:host(.style-kapitelueberschrift):host(.screensize-large){font-size:16px;line-height:24px}:host(.style-infotext-standard),:host(.style-infotext-klein){font-weight:400;letter-spacing:0.02px;color:var(--ds-text-color, #7f7f7f)}:host(.style-infotext-standard):host(.style-infotext-standard):host(.screensize-small),:host(.style-infotext-klein):host(.style-infotext-standard):host(.screensize-small){font-size:14px;line-height:20px}:host(.style-infotext-standard):host(.style-infotext-standard):host(.screensize-large),:host(.style-infotext-klein):host(.style-infotext-standard):host(.screensize-large){font-size:16px;line-height:24px}:host(.style-infotext-standard):host(.style-infotext-klein):host(.screensize-small),:host(.style-infotext-klein):host(.style-infotext-klein):host(.screensize-small){font-size:12px;line-height:16px}:host(.style-infotext-standard):host(.style-infotext-klein):host(.screensize-large),:host(.style-infotext-klein):host(.style-infotext-klein):host(.screensize-large){font-size:14px;line-height:20px}";

const DsText = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.textStyle = TextStyle.INHERIT;
    /**
     * Specifies the style of the text.
     *
     * If the `type` attribute isn't set, a default style will be set, that is based on the
     * parent components.
     *
     * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
     * @value Ueberschrift-1: Shortcut for `u1`
     * @value Ueberschrift-2: Shortcut for `u2`
     * @value Ueberschrift-3: Shortcut for `u3`
     * @value Ueberschrift-4: Shortcut for `u4`
     * @value Ueberschrift-5: Shortcut for `u5`
     * @value Kapitelueberschrift: Shortcut for `ku`
     * @value Fliesstext-Standard: Shortcut for `ft`
     * @value Fliesstext-Fett: Shortcut for `ftf`
     * @value Fliesstext-Gross: Shortcut for `ftg`
     * @value Infotext-Standard: Shortcut for `it`
     * @value Infotext-Klein: Shortcut for `itk`
     * @important
     * @example textstile
     * @example textstile-abkuerzungen
     */
    this.type = "auto";
    /**
     * Specifies the responsiveness strategy.
     * @value auto: Text size is automatically determined by evaluating the device screen size.
     * @value small: Use text size for small device screens.
     * @value large: Use text size for large device screens.
     */
    this.screensize = "auto";
  }
  typeChanged() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  screensizeChanged() {
    index.forceUpdate(this);
  }
  componentWillLoad() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  connectedCallback() {
    this.breakpointAware = new breakpointAware.BreakpointAware(() => index.forceUpdate(this));
  }
  disconnectedCallback() {
    var _a;
    this.self.classList.remove(constants.ADD_BULLET_TO_TEXT_CSS_CLASS_NAME); // placed by parent ds-text-list
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  computeTextStyleBasedOnTypeProperty() {
    var _a;
    this.textStyle = TextStyle.INHERIT;
    let matchedStyle;
    // Use type property
    if (((_a = this.type) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      matchedStyle = TEXT_STYLE_MAPPING.find((style) => style.names.some((styleName) => this.type.toLowerCase() === styleName.toLowerCase()));
    }
    assert.assert(matchedStyle != null, () => `<ds-text> wurde mit einem ung√ºltigen type konfiguriert.\n\nM√∂gliche Werte sind: ${TEXT_STYLE_MAPPING.map((s) => `\n- ${s.names.map((n) => `"${n}"`).join(", ")}`)
      .join("")
      .toLowerCase()}\n\n Wird kein type angegeben, wird der Text-Stil automatisch ermittelt.`);
    if (matchedStyle != null) {
      this.textStyle = matchedStyle.textStyle;
    }
  }
  render() {
    assert.assertPropertyValue("ds-text", "screensize", this.screensize, [
      "auto",
      "small",
      "large",
    ]);
    return (index.h(index.Host, { class: {
        "screensize-small": this.screensize === "small" ||
          (this.screensize === "auto" && !this.breakpointAware.xl),
        "screensize-large": this.screensize === "large" ||
          (this.screensize === "auto" && this.breakpointAware.xl),
        "style-inherit": this.textStyle === TextStyle.INHERIT,
        "style-ueberschrift1": this.textStyle === TextStyle.UEBERSCHRIFT_1,
        "style-ueberschrift2": this.textStyle === TextStyle.UEBERSCHRIFT_2,
        "style-ueberschrift3": this.textStyle === TextStyle.UEBERSCHRIFT_3,
        "style-ueberschrift4": this.textStyle === TextStyle.UEBERSCHRIFT_4,
        "style-ueberschrift5": this.textStyle === TextStyle.UEBERSCHRIFT_5,
        "style-fliesstext-standard": this.textStyle === TextStyle.FLIESSTEXT_STANDARD,
        "style-fliesstext-gross": this.textStyle === TextStyle.FLIESSTEXT_GROSS,
        "style-fliesstext-fett": this.textStyle === TextStyle.FLIESSTEXT_FETT,
        "style-infotext-standard": this.textStyle === TextStyle.INFOTEXT_STANDARD,
        "style-infotext-klein": this.textStyle === TextStyle.INFOTEXT_KLEIN,
        "style-kapitelueberschrift": this.textStyle === TextStyle.KAPITELUEBERSCHRIFT,
      }, style: generateStyleMap(this.color) }, index.h("slot", null)));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "type": ["typeChanged"],
    "screensize": ["screensizeChanged"]
  }; }
};
function generateStyleMap(color) {
  if ((color === null || color === void 0 ? void 0 : color.length) > 0) {
    return { color: new colorPalette.ColorPalette().getColorCode(color) };
  }
  return {};
}
var TextStyle;
(function (TextStyle) {
  TextStyle["INHERIT"] = "INHERIT";
  TextStyle["FLIESSTEXT_STANDARD"] = "FLIESSTEXT_STANDARD";
  TextStyle["FLIESSTEXT_GROSS"] = "FLIESSTEXT_GROSS";
  TextStyle["FLIESSTEXT_FETT"] = "FLIESSTEXT_FETT";
  TextStyle["UEBERSCHRIFT_1"] = "UEBERSCHRIFT_1";
  TextStyle["UEBERSCHRIFT_2"] = "UEBERSCHRIFT_2";
  TextStyle["UEBERSCHRIFT_3"] = "UEBERSCHRIFT_3";
  TextStyle["UEBERSCHRIFT_4"] = "UEBERSCHRIFT_4";
  TextStyle["UEBERSCHRIFT_5"] = "UEBERSCHRIFT_5";
  TextStyle["INFOTEXT_STANDARD"] = "INFOTEXT_STANDARD";
  TextStyle["INFOTEXT_KLEIN"] = "INFOTEXT_KLEIN";
  TextStyle["KAPITELUEBERSCHRIFT"] = "KAPITELUEBERSCHRIFT";
})(TextStyle || (TextStyle = {}));
const TEXT_STYLE_MAPPING = [
  {
    names: ["auto"],
    textStyle: TextStyle.INHERIT,
  },
  {
    names: ["Fliesstext-Standard", "ft"],
    textStyle: TextStyle.FLIESSTEXT_STANDARD,
  },
  {
    names: ["Fliesstext-Gross", "ftg"],
    textStyle: TextStyle.FLIESSTEXT_GROSS,
  },
  {
    names: ["Fliesstext-Fett", "ftf"],
    textStyle: TextStyle.FLIESSTEXT_FETT,
  },
  {
    names: ["Ueberschrift-1", "u1"],
    textStyle: TextStyle.UEBERSCHRIFT_1,
  },
  {
    names: ["Ueberschrift-2", "u2"],
    textStyle: TextStyle.UEBERSCHRIFT_2,
  },
  {
    names: ["Ueberschrift-3", "u3"],
    textStyle: TextStyle.UEBERSCHRIFT_3,
  },
  {
    names: ["Ueberschrift-4", "u4"],
    textStyle: TextStyle.UEBERSCHRIFT_4,
  },
  {
    names: ["Ueberschrift-5", "u5"],
    textStyle: TextStyle.UEBERSCHRIFT_5,
  },
  {
    names: ["Kapitelueberschrift", "ku"],
    textStyle: TextStyle.KAPITELUEBERSCHRIFT,
  },
  {
    names: ["Infotext-Standard", "it"],
    textStyle: TextStyle.INFOTEXT_STANDARD,
  },
  {
    names: ["Infotext-Klein", "itk"],
    textStyle: TextStyle.INFOTEXT_KLEIN,
  },
];
DsText.style = dsTextCss;

exports.ds_icon = DsIcon;
exports.ds_text = DsText;
