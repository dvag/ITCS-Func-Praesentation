'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
require('./value-store-f683b26f.js');

const dxInternalWizardStepCss = ":host{flex:var(--dx-wizard-step-flex, 1)}:host:host([hidden]){display:none !important}:host .button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;padding:0;width:100%;justify-content:flex-start}:host .button[disabled]{cursor:unset}:host .button.icon-right{flex-direction:row-reverse}:host .button:focus-visible{outline:2px solid #004763}:host .button[disabled]{cursor:default;user-select:unset}:host .button[disabled] .label{cursor:text;user-select:text}:host .button:not([disabled]){--dx-text-color:#337a96}@media not all and (pointer: coarse){:host .button:not([disabled]):hover{--dx-text-color:#00587c}:host .button:not([disabled]):hover .step-container .state.interactive{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#337a96;--dx-text-color:#ffffff;--dx-icon-color:#ffffff;background-color:#00587c}:host .button:not([disabled]):hover .step-container .state.interactive:active{background-color:#004763}}:host .button:not([disabled]):active{--dx-text-color:#004763}:host .button:not([disabled]):active .step-container .state.interactive{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#337a96;--dx-text-color:#ffffff;--dx-icon-color:#ffffff;background-color:#004763}@media not all and (pointer: coarse){:host .button:not([disabled]):active .step-container .state.interactive:hover{background-color:#00587c}}:host .button .step-container{display:flex;align-items:center}:host .button .step-container .state{display:flex;flex-grow:0;flex-shrink:0;justify-content:center;align-items:center;padding:0;--dx-element-swapper-transition-duration:300ms;transition:width, height, background-color, border-color;transition-duration:300ms;transition-timing-function:ease-in-out;border-radius:100%;box-sizing:border-box;border:2px solid #808080;width:12px;height:12px}:host .button .step-container .state.interactive{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#337a96;--dx-text-color:#ffffff;--dx-icon-color:#ffffff}@media not all and (pointer: coarse){:host .button .step-container .state.interactive:hover{background-color:#00587c}}:host .button .step-container .state.interactive:active{background-color:#004763}:host .button .step-container .state.finished{width:24px;height:24px}:host .button .step-container .state.edit{border-color:transparent;background-color:#c8aa22;width:var(--dx-wizard-step-size, 24px);height:var(--dx-wizard-step-size, 24px)}:host .button .step-container .state .edit-icon{--dx-icon-attr-size:var(--dx-wizard-step-edit-icon-size, 16px)}:host .button .step-container .horizontal-line{background-color:#d6d6d6;flex:1;opacity:0}:host .button .step-container .horizontal-line.left{display:var(--dx-wizard-line-left, block)}:host .button .step-container .horizontal-line.right{display:var(--dx-wizard-line-right, block)}:host .button .step-container .horizontal-line.blue{background-color:#337a96}:host .button .step-container .horizontal-line.visible{opacity:1}:host .button .label-container{display:var(--dx-wizard-step-label-display, block);white-space:break-spaces}:host(.orientation-vertical) .button{display:flex;height:56px}:host(.orientation-vertical) .button .step-container{flex-direction:column;width:40px;flex-shrink:0;height:56px}:host(.orientation-vertical) .button .label-container{text-align:left;margin-left:8px}:host(.orientation-vertical) .button .label-container .label{display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden}:host(.orientation-vertical) .button .horizontal-line{width:2px}:host(.orientation-vertical) .button .horizontal-line.left{margin-bottom:4px}:host(.orientation-vertical) .button .horizontal-line.right{margin-top:4px}:host(.orientation-horizontal) .button{display:block}:host(.orientation-horizontal) .button .step-container{height:40px}:host(.orientation-horizontal) .button .label-container{text-align:center;margin-top:8px}:host(.orientation-horizontal) .button .horizontal-line{height:2px}:host(.orientation-horizontal) .button .horizontal-line.left{margin-right:4px}:host(.orientation-horizontal) .button .horizontal-line.right{margin-left:4px}:host(.extended-view){--dx-wizard-step-edit-icon-size:24px;--dx-wizard-step-size:40px;--dx-wizard-step-label-display:block}:host(.extended-view):host(.is-first-step),:host(.extended-view):host(.is-last-step){--dx-wizard-line-left:block;--dx-wizard-line-right:block}:host(.mobile-view){--dx-wizard-step-label-display:none;--dx-text-color:#2b2b2b;--dx-wizard-step-edit-icon-size:16px;--dx-wizard-step-size:24px}:host(.mobile-view):host(.is-first-step){--dx-wizard-line-left:none}:host(.mobile-view):host(.is-last-step){--dx-wizard-line-right:none}";

const DxInternalWizardStep = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.stateChanged = index.createEvent(this, "stateChanged", 7);
    this.interaction = index.createEvent(this, "interaction", 7);
    this.finished = false;
    this.orientation = "horizontal";
    this.state = "unvisited";
    this.neighborIsInteractive = false;
    this.isFirstStep = false;
    this.isLastStep = false;
  }
  getElementSwapperActiveSlot() {
    if (this.state === "edit") {
      return "first";
    }
    if (this.state === "finished") {
      return "second";
    }
    return "none";
  }
  isInteractive() {
    return this.state === "visited" || this.state === "finished";
  }
  renderState() {
    return (index.h("dx-element-swapper", { active: this.getElementSwapperActiveSlot() }, index.h("dx-icon", { class: "edit-icon", icon: "edit", color: "white", slot: "first" }), index.h("dx-icon", { icon: "state-success", color: "white", size: 16, slot: "second" })));
  }
  renderStepButton() {
    const isInteractive = this.isInteractive();
    return (index.h("div", { class: {
        state: true,
        interactive: isInteractive,
        finished: this.state === "finished",
        edit: this.state === "edit",
      } }, this.renderState()));
  }
  renderLabel() {
    return (index.h("div", { class: "label-container" }, index.h("dx-text", { class: { label: true, bold: this.state === "edit" } }, this.label)));
  }
  render() {
    return (index.h(index.Host, { class: {
        "orientation-horizontal": this.orientation === "horizontal",
        "orientation-vertical": this.orientation === "vertical",
        "extended-view": this.isExtendedView,
        "mobile-view": !this.isExtendedView,
        "is-first-step": this.isFirstStep,
        "is-last-step": this.isLastStep,
      } }, index.h("button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "-control"), class: "button", onClick: () => this.interaction.emit(), disabled: !this.isInteractive() }, index.h("div", { class: {
        "step-container": true,
      } }, index.h("div", { class: {
        "horizontal-line": true,
        left: true,
        blue: this.isInteractive() || this.state === "edit",
        visible: !this.isFirstStep,
      } }), this.renderStepButton(), index.h("div", { class: {
        "horizontal-line": true,
        right: true,
        blue: this.neighborIsInteractive,
        visible: !this.isLastStep,
      } })), this.renderLabel())));
  }
  get self() { return index.getElement(this); }
};
DxInternalWizardStep.style = dxInternalWizardStepCss;

exports.dx_internal_wizard_step = DxInternalWizardStep;
