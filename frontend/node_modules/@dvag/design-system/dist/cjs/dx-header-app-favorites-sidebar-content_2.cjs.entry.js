'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const renderUtil = require('./render-util-6b278c0d.js');
require('./value-store-f683b26f.js');

const dxHeaderAppFavoritesSidebarContentCss = ":host:host([hidden]){display:none !important}:host .title{display:block;height:48px}:host .list-item{--dx-list-item-icon-color-default:#c8aa22;--dx-list-item-icon-color-hover:#c8aa22;--dx-list-item-icon-color-active:rgba(200, 170, 34, 0.2);--dx-list-item-icon-color-selected:#c8aa22;--dx-list-item-text-color-default:#2b2b2b;--dx-list-item-text-color-hover:#2b2b2b;--dx-list-item-text-color-active:#2b2b2b;--dx-list-item-text-color-selected:#2b2b2b}@keyframes delete{0%{transform:translateX(0);opacity:1}100%{transform:translateX(-25%);opacity:0}}:host .list-item.delete{animation:delete 300ms ease-in-out;animation-fill-mode:forwards}";

const DxHeaderAppFavoritesSidebarContent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.internalDeleteApp = index.createEvent(this, "internalDeleteApp", 7);
    this.internalSortApps = index.createEvent(this, "internalSortApps", 7);
    this.internalAddApp = index.createEvent(this, "internalAddApp", 7);
    this.internalLaunchApp = index.createEvent(this, "internalLaunchApp", 7);
    this.internalEditApps = index.createEvent(this, "internalEditApps", 7);
    this.sideBarOpen = false;
    this.dragging = false;
    this.editMode = false;
    this.deleteArray = [];
    this.sortedAppIds = [];
  }
  onChangeEditMode() {
    this.internalEditApps.emit(this.editMode);
  }
  onSidebarClose() {
    this.editMode = false;
    this.sideBarOpen = false;
  }
  onSidebarOpen() {
    this.editMode = false;
    this.sideBarOpen = true;
  }
  onKeyDown(e) {
    if (this.sideBarOpen && !this.dragging) {
      if (e.code === "KeyE") {
        const isVisible = this.self.offsetParent != null &&
          getComputedStyle(this.self).visibility === "visible";
        if (isVisible) {
          this.editMode = !this.editMode;
        }
      }
    }
  }
  onDraggingStart() {
    this.dragging = true;
  }
  onDraggingStop() {
    this.dragging = false;
  }
  handleSort(e) {
    this.sortedAppIds = [...e.detail.sortedArray];
    this.apps = this.sortedAppIds.map((id) => this.apps.find((app) => app.id === id));
    this.internalSortApps.emit(this.sortedAppIds);
  }
  deleteItem(id) {
    this.apps = this.apps.filter((app) => app.id !== id);
    this.deleteArray = this.deleteArray.filter((appId) => appId !== id);
    this.internalDeleteApp.emit(id);
  }
  startDeleteTransition(value) {
    this.deleteArray = this.deleteArray.concat(value);
  }
  handleListItemAnimationEnd(e, value) {
    if (e.animationName !== "delete") {
      return;
    }
    this.deleteItem(value);
  }
  handleInteractionWithApp(appId) {
    this.internalLaunchApp.emit(appId);
  }
  renderSortList() {
    return (index.h("dx-list", { size: "l", class: "sort-list" }, index.h("dx-sort", { sortable: this.editMode, onSort: (e) => this.handleSort(e), class: "sort" }, this.apps.map((app) => {
      return (index.h("dx-sort-item", { value: app.id, key: app.id }, index.h("dx-list-item", { id: elementIdHandling.ElementIdGenerator.createId(this.self, `app-${app.id}`), type: this.editMode ? "default" : "clickable", icon: this.editMode ? undefined : app.icon, label: app.name, key: app.id, internalanimation: true, class: {
          "list-item": true,
          delete: this.deleteArray.includes(app.id),
        }, onListItemInteraction: () => this.handleInteractionWithApp(app.id), onAnimationEnd: (e) => this.handleListItemAnimationEnd(e, app.id) }, index.h("dx-horizontal-grow-box", { slot: "content", open: this.editMode }, index.h("dx-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, `app-${app.id}-delete`), type: "text", icon: "muell", onClick: () => this.startDeleteTransition(app.id) })))));
    }))));
  }
  renderEditModeContent() {
    return [
      this.renderTitle("Löschen oder sortieren Sie Ihre Anwendungsfavoriten:"),
      this.renderSortList(),
      index.h("div", { slot: "footer" }, index.h("dx-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "toggle-edit-mode"), label: "Bearbeiten beenden", icon: "check", type: "primary-m", stretch: true, key: "toggle-edit", onClick: () => {
          this.editMode = false;
        } })),
    ];
  }
  renderTitle(text) {
    // TODO: Talk to UX because of jumping sort-list when text is larger
    return (index.h("dx-text", { slot: "header", class: "title", key: "title" }, text));
  }
  renderDefaultContent() {
    const title = this.apps.length === 0
      ? "Sie haben noch keine Anwendungen favorisiert."
      : "Ihre favorisierten Anwendungen:";
    return [
      this.renderTitle(title),
      this.renderSortList(),
      index.h("div", { slot: "footer" }, index.h("dx-button", { label: "Favoriten hinzufügen", id: elementIdHandling.ElementIdGenerator.createId(this.self, "add-app"), icon: "plus-kreis", type: "primary-m", stretch: true, onClick: () => this.internalAddApp.emit() }), index.h("dx-spacer", { mq1: "16v" }), index.h("dx-button", { label: "Favoriten bearbeiten", id: elementIdHandling.ElementIdGenerator.createId(this.self, "toggle-edit-mode"), icon: "edit", key: "toggle-edit", type: "secondary-m", stretch: true, onClick: () => {
          this.editMode = true;
        }, disabled: this.apps.length === 0 })),
    ];
  }
  render() {
    return (index.h("dx-sidebar-content", { contentgrows: false }, this.editMode
      ? this.renderEditModeContent()
      : this.renderDefaultContent()));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "editMode": ["onChangeEditMode"]
  }; }
};
DxHeaderAppFavoritesSidebarContent.style = dxHeaderAppFavoritesSidebarContentCss;

const dxPulseIconCss = ":host:host([hidden]){display:none !important}@keyframes pulse-fade-out{0%{transform:scale(1);opacity:1}50%{transform:scale(var(--dx-pulse-scale, 2));opacity:0}100%{transform:scale(1);opacity:0}}@keyframes pulse-default{0%{transform:scale(1)}30%{transform:scale(var(--dx-pulse-default-scale, 1.2))}50%{transform:scale(1)}100%{transform:scale(1)}}:host .icon-container{position:relative}:host .icon-container.animate .default-icon{animation:pulse-default var(--dx-pulse-animation-duration, 2000ms) ease-in-out forwards}:host .icon-container.animate .animation-icon{animation:pulse-fade-out var(--dx-pulse-animation-duration, 2000ms) ease-in-out forwards}:host .icon-container .default-icon{transform-origin:50% 40%}:host .icon-container .animation-icon{position:absolute;transform-origin:50% 40%;top:0;left:0;width:100%;height:100%}";

const DxPulseIcon = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Icon subject
     * @value string: Name of the icon.
     * @example all-icons
     */
    this.icon = "placeholder";
  }
  async pulsate() {
    const iconContainer = this.self.shadowRoot.querySelector(".icon-container");
    iconContainer.classList.remove("animate");
    renderUtil.onNextFrame(() => {
      iconContainer.classList.add("animate");
    });
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "icon-container" }, index.h("dx-icon", { class: "default-icon", icon: this.icon, size: this.size, color: this.color }), index.h("dx-icon", { class: "animation-icon", icon: this.icon, size: this.size, color: this.color }))));
  }
  get self() { return index.getElement(this); }
};
DxPulseIcon.style = dxPulseIconCss;

exports.dx_header_app_favorites_sidebar_content = DxHeaderAppFavoritesSidebarContent;
exports.dx_pulse_icon = DxPulseIcon;
