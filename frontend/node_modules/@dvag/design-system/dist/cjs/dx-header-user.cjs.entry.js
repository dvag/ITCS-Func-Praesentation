'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const miscUtil = require('./misc-util-63b423bd.js');
require('./value-store-f683b26f.js');

const dxHeaderUserCss = ":host{display:block;--dx-notification-indicator-top:2px;--dx-notification-indicator-right:0px;--dx-notification-indicator-display-number-top:-2px;--dx-notification-indicator-display-number-right:-3px;--dx-notification-indicator-display-big-number-top:-2px;--dx-notification-indicator-display-big-number-right:-5.5px}:host:host([hidden]){display:none !important}";

const DxHeaderUser = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.signOut = index.createEvent(this, "signOut", 7);
    this.accountInteraction = index.createEvent(this, "accountInteraction", 7);
    this.menuInteraction = index.createEvent(this, "menuInteraction", 7);
    this.internalForceSidebarContentUpdate = index.createEvent(this, "internalForceSidebarContentUpdate", 7);
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     *
     * @example notifications
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications-theme
     */
    this.notificationstheme = "system";
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * @internal
     */
    this.internalopen = true;
    /**
     * Defines whether the account button "Benutzerkonto" is displayed or not.
     *
     * @value true: The account button is visible.
     * @value false: The account button is not visible.
     * @example account-available
     */
    this.accountavailable = true;
  }
  connectedCallback() {
    elementIdHandling.verifyElementId(this.self);
  }
  componentShouldUpdate(_, __, propName) {
    if (propName === "imageurl" || propName === "name") {
      this.internalForceSidebarContentUpdate.emit();
    }
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    return (index.h("dx-header-user-sidebar-content", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "sidebar-content"), name: this.name, imageurl: this.imageurl, accountavailable: this.accountavailable, onSignOut: () => this.signOut.emit(), onAccountInteraction: () => this.accountInteraction.emit() }));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  render() {
    return (index.h("dx-horizontal-grow-box", { open: this.internalopen }, index.h("dx-header-menu-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "button"), active: this.internalactive, notifications: this.notifications, notificationstheme: this.notificationstheme, onInteraction: () => {
        this.menuInteraction.emit();
      } }, index.h("dx-user-avatar", { class: "avatar-circle", size: "xs", imageurl: this.imageurl, initials: miscUtil.generateInitialsForName(this.name) }))));
  }
  get self() { return index.getElement(this); }
};
DxHeaderUser.style = dxHeaderUserCss;

exports.dx_header_user = DxHeaderUser;
