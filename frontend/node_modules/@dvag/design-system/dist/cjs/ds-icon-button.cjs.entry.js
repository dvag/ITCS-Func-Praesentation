'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
require('./value-store-f683b26f.js');

const dsIconButtonCss = ":host{display:inline-block;width:max-content;line-height:0;--ds-text-font-weight:500}:host:host([hidden]){display:none !important}:host:host(.disabled){pointer-events:none}:host:host(.unfocusable) button{box-shadow:none}:host:host ::slotted(*){pointer-events:none}:host:host(.color-gold){--ds-text-color:#a7893d;--ds-icon-color:#a7893d}:host:host(.color-gold):host(:hover){--ds-text-color:#957b36;--ds-icon-color:#957b36}:host:host(.color-gold):host(:active){--ds-text-color:#856d30;--ds-icon-color:#856d30}:host:host(.color-gold):host(.disabled){--ds-text-color:#e3dac4;--ds-icon-color:#e3dac4}:host:host(.color-rot){--ds-text-color:#be1413;--ds-icon-color:#be1413}:host:host(.color-rot):host(:hover){--ds-text-color:#99100f;--ds-icon-color:#99100f}:host:host(.color-rot):host(:active){--ds-text-color:#7d0d0d;--ds-icon-color:#7d0d0d}:host:host(.color-rot):host(.disabled){--ds-text-color:#f2d0cf;--ds-icon-color:#f2d0cf}:host.color-gold{--ds-text-color:#a7893d;--ds-icon-color:#a7893d}:host.color-gold:host(:hover){--ds-text-color:#957b36;--ds-icon-color:#957b36}:host.color-gold:host(:active){--ds-text-color:#856d30;--ds-icon-color:#856d30}:host.color-gold:host(.disabled){--ds-text-color:#e3dac4;--ds-icon-color:#e3dac4}:host.color-rot{--ds-text-color:#be1413;--ds-icon-color:#be1413}:host.color-rot:host(:hover){--ds-text-color:#99100f;--ds-icon-color:#99100f}:host.color-rot:host(:active){--ds-text-color:#7d0d0d;--ds-icon-color:#7d0d0d}:host.color-rot:host(.disabled){--ds-text-color:#f2d0cf;--ds-icon-color:#f2d0cf}:host button{width:fit-content;width:-moz-fit-content;cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border-radius:6px;border:none;padding:0;margin:0;background-color:transparent}:host button:focus-visible{outline:none;box-shadow:var(--ds-button-outline-box-shadow, 0 0 0 2px #7f7f7f)}:host(.backgroundcolor-hellgrau-4) button{background-color:#f5f5f5}:host(.backgroundcolor-weiss) button{background-color:#ffffff}:host(:hover) button{background-color:#ebebeb}:host(:active) button{background-color:#ebebeb}:host(.disabled):host(.backgroundcolor-hellgrau-4) button{background-color:#f5f5f5}:host(.disabled):host(.backgroundcolor-weiss) button{background-color:#ffffff}:host(.size-medium) button{min-height:48px;padding:8px;--ds-text-font-size:16px;--ds-text-letter-spacing:0.04px;--ds-icon-attr-size:32}:host(.size-small) button{min-height:38px;padding:7px;--ds-text-font-size:14px;--ds-text-letter-spacing:0.02px;--ds-icon-attr-size:24}:host(.align-row) button{flex-direction:row}:host(.align-row):host(.size-medium) ::slotted(*:not(:last-child)){margin-right:8px}:host(.align-row):host(.size-small) ::slotted(*:not(:last-child)){margin-right:6px}:host(.align-column) button{flex-direction:column}:host(.align-column):host(.size-medium) ::slotted(*:not(:last-child)){margin-bottom:4px}:host(.align-column):host(.size-small) ::slotted(*:not(:last-child)){margin-bottom:3px}";

const DsIconButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Sets the color of the button.
     * @value gold: Gold color (default value)
     * @value rot: Special case for destructive actions
     * @example color
     */
    this.color = "gold";
    /**
     * Sets the background color.
     * @value hellgrau-4: Button uses a light grey background (default value).
     * @value weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background.
     * @example backgroundcolor
     */
    this.backgroundcolor = "hellgrau-4";
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Defines the alignment of elements within the button.
     * @value row: Content elements are layouted from left to right.
     * @value column: Content elments are layouted from top to bottom.
     * @example align
     */
    this.align = "row";
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     */
    this.unfocusable = false;
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  render() {
    assert.assertPropertyValue("ds-icon-button", "size", this.size, [
      "medium",
      "small",
    ]);
    assert.assertPropertyValue("ds-icon-button", "color", this.color, ["gold", "rot"]);
    assert.assertPropertyValue("ds-icon-button", "backgroundcolor", this.backgroundcolor, ["weiss", "hellgrau-4"]);
    assert.assertPropertyValue("ds-icon-button", "align", this.align, [
      "row",
      "column",
    ]);
    return (index.h(index.Host, { class: {
        "size-medium": this.size === "medium",
        "size-small": this.size === "small",
        "color-gold": this.color === "gold",
        "color-rot": this.color === "rot",
        "backgroundcolor-hellgrau-4": this.backgroundcolor === "hellgrau-4",
        "backgroundcolor-weiss": this.backgroundcolor === "weiss",
        "align-row": this.align === "row",
        "align-column": this.align === "column",
        disabled: this.disabled,
        unfocusable: this.unfocusable,
      } }, index.h("button", { type: "button", ref: (el) => (this.buttonElement = el), id: elementIdHandling.ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabindex: this.unfocusable ? "-1" : "0" }, index.h("slot", null))));
  }
  get self() { return index.getElement(this); }
};
DsIconButton.style = dsIconButtonCss;

exports.ds_icon_button = DsIconButton;
