'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const breakpointAware = require('./breakpoint-aware-cc9d0ee6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const mathUtil = require('./math-util-a514efc6.js');
const miscUtil = require('./misc-util-63b423bd.js');
const renderUtil = require('./render-util-6b278c0d.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const swipeController = require('./swipe-controller-dd30ba97.js');
require('./value-store-f683b26f.js');
require('./query-util-8642f149.js');

const dxSlideShowCss = ":host{max-width:100%}:host:host([hidden]){display:none !important}:host:host(:hover){--dx-slideshow-slider-knob-height:8px;--dx-slideshow-slider-knob-top:-2px}:host .slide-show-container .stage{display:flex;overflow:hidden}:host .slide-show-container .stage .overflow-container{flex:1;overflow:hidden}:host .slide-show-container .stage .overflow-container .elements-container{display:flex;position:relative;box-sizing:content-box}:host .slide-show-container .stage .overflow-container .elements-container.use-transition{transition:transform 300ms ease-in-out}:host .slide-show-container .stage .overflow-container .elements-container ::slotted(*){flex:0 0 calc(100% / var(--dx-slide-show-amount, 1) - ((var(--dx-slide-show-space-between, 0)) - (var(--dx-slide-show-space-between, 0)) / (var(--dx-slide-show-amount, 1))));position:relative;top:0;box-sizing:border-box}:host .slide-show-container .stage .overflow-container .elements-container ::slotted(*).hidden{display:none}:host .slide-show-container .stage .overflow-container .elements-container ::slotted(*).disable-transition{transition:none}:host .slide-show-container .stage .overflow-container .elements-container ::slotted(*:not(:last-child)){margin-right:var(--dx-slide-show-space-between, 0)}:host .slide-show-container .stage .stage-navigation-button{display:none;align-items:center}:host .slide-show-container .stage .stage-navigation-button.left{margin-right:16px}:host .slide-show-container .stage .stage-navigation-button.right{margin-left:16px}@media (min-width: 760px){:host .slide-show-container .stage .stage-navigation-button{display:flex}}:host .slide-show-container .stage .stage-navigation-button .navigation-button{z-index:0;transition:opacity 150ms ease-in-out;opacity:0;pointer-events:none}@media (min-width: 760px){:host .slide-show-container .stage .stage-navigation-button .navigation-button.show{opacity:1;z-index:1;pointer-events:all}}:host .slide-show-container .navigation{display:flex;justify-content:center}@media (min-width: 760px){:host .slide-show-container .navigation{padding:0 56px}}:host .slide-show-container .navigation dx-slideshow-slider,:host .slide-show-container .navigation dx-paginator{margin-top:40px}";

const DxSlideShow = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.pageChange = index.createEvent(this, "pageChange", 7);
    this.useTransition = true;
    this.children = [];
    this.swipeController = new swipeController.SwipeController(() => {
      var _a;
      return {
        elementsBoundingBox: (_a = this.elementsContainer) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect(),
        startAtPercentage: ((this.page - 1) / (this.getMaxPages() - 1)) * 100,
      };
    }, () => {
      this.pageOnSwipeDetectionStart = this.page;
      this.disableTransition();
    }, (swipeDirection) => {
      this.enableTransition();
      if (swipeDirection === "left") {
        this.updateTranslationByPageNumber(this.pageOnSwipeDetectionStart - 1);
      }
      else if (swipeDirection === "right") {
        this.updateTranslationByPageNumber(this.pageOnSwipeDetectionStart + 1);
      }
      else {
        this.updateTranslationByPageNumber();
      }
    }, (updateData) => {
      var _a;
      const elementsBoundingBox = updateData.startValue.elementsBoundingBox;
      const childrenWidth = (_a = this.children[0]) === null || _a === void 0 ? void 0 : _a.offsetWidth;
      const maxX = childrenWidth * this.children.length +
        this.spacebetween * (this.children.length - 1);
      const localStartSwipePositionX = updateData.startX - elementsBoundingBox.x;
      const localStartSwipePercentage = (localStartSwipePositionX / maxX) * 100;
      const localCurrentSwipePositionX = updateData.currentX - elementsBoundingBox.x;
      const localCurrentSwipePercentage = (localCurrentSwipePositionX / maxX) * 100;
      this.updateTranslationByPercentage(updateData.startValue.startAtPercentage +
        (localStartSwipePercentage - localCurrentSwipePercentage));
    });
    this.page = 1;
    /**
     * The initial page which is displayed when loading the component.
     * @value number: The first page to show.
     */
    this.initialpage = 1;
    /**
     * The space between the slotted elements.
     * @value number: Pixel value of the space between the slotted elements.
     */
    this.spacebetween = 0;
    /**
     * Specifies which navigation element should be displayed.
     *
     * @value paginator: A paginator is displayed under the slide-show.
     * @value slider: A slider is displayed under the slide-show.
     * @example slider
     */
    this.viewmode = "paginator";
  }
  onPageChanged() {
    this.pageChange.emit(this.page);
  }
  connectedCallback() {
    var _a;
    this.breakpointAware = new breakpointAware.BreakpointAware(() => {
      this.updateTranslationByPageNumber();
      index.forceUpdate(this);
    }, true);
    this.page = (_a = this.initialpage) !== null && _a !== void 0 ? _a : 1;
    this.slotObserver = new slotObserver.SlotObserver(this.self, ":scope > *", (elements) => {
      var _a;
      if (miscUtil.sameArrayInOrder(this.children, elements)) {
        return;
      }
      this.children = elements;
      if (((_a = this.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        this.updateTranslationByPageNumber();
        index.forceUpdate(this);
      }
    });
  }
  disconnectedCallback() {
    this.slotObserver.disconnect();
    this.breakpointAware.disconnect();
  }
  /**
   * A function to programmatically transition to the specified page.
   * Returns a promise which is fulfilled after the transition is done.
   *
   * @param page The page to transition to.
   * @example set-page
   */
  setPage(page) {
    if (this.page === page) {
      return;
    }
    page = mathUtil.clamp(page, 1, this.getMaxPages());
    const duration = Math.abs(page - this.page) * 300;
    this.updateSlideTransitionDuration(duration);
    this.updateTranslationByPageNumber(page);
    return new Promise((resolve) => {
      setTimeout(() => {
        this.updateSlideTransitionDuration(300);
        resolve();
      }, duration);
    });
  }
  updateSlideTransitionDuration(durationInMs) {
    if (this.elementsContainer) {
      this.elementsContainer.style.setProperty("transition", `transform ${durationInMs}ms ease-in-out`);
    }
  }
  getAmountOfDisplayedChildren() {
    return (Math.min(this.breakpointAware.getEffectiveValue({
      mq1: this.mq1amount,
      mq2: this.mq2amount,
      mq3: this.mq3amount,
      mq4: this.mq4amount,
      mq5: this.mq5amount,
    }), this.getNumberOfChildren()) || 1);
  }
  getTransformValueByPercentage(percentage) {
    const maxPages = this.getMaxPages();
    const amountOfDisplayedChildren = this.getAmountOfDisplayedChildren();
    return `translateX(calc((-${100 / amountOfDisplayedChildren}% - ${this.spacebetween / amountOfDisplayedChildren}px) * ${((maxPages - 1) * percentage) / 100}))`;
  }
  getMaxPages() {
    var _a;
    const numberOfChildren = (_a = this.getNumberOfChildren()) !== null && _a !== void 0 ? _a : 1;
    return numberOfChildren - this.getAmountOfDisplayedChildren() + 1;
  }
  getNumberOfChildren() {
    var _a;
    return (_a = this.children) === null || _a === void 0 ? void 0 : _a.length;
  }
  updateTranslationByPageNumber(page) {
    const maxPages = this.getMaxPages();
    page = mathUtil.clamp(page !== null && page !== void 0 ? page : this.page, 1, maxPages);
    let percentage;
    if (maxPages === 1) {
      percentage = 100;
    }
    else {
      percentage = ((page - 1) / (maxPages - 1)) * 100;
    }
    this.updateTranslationByPercentage(percentage);
  }
  updateTranslationByPercentage(percentage) {
    percentage = mathUtil.clamp(percentage, 0, 100);
    if (this.elementsContainer) {
      this.elementsContainer.style.transform =
        this.getTransformValueByPercentage(percentage);
      this.page = Math.round((percentage / 100) * (this.getMaxPages() - 1)) + 1;
    }
  }
  renderNavigation() {
    if (this.getMaxPages() > 1) {
      return index.h("div", { class: "navigation" }, this.renderNavigationElement());
    }
  }
  renderNavigationElement() {
    if (this.viewmode === "paginator") {
      return (index.h("dx-paginator", { count: this.getMaxPages(), current: this.page, onPageChanged: (e) => {
          this.updateTranslationByPageNumber(e.detail);
        } }));
    }
    return (index.h("dx-slideshow-slider", { max: this.getMaxPages(), value: this.page, onValueChange: (e) => {
        if (!this.useTransition) {
          this.updateTranslationByPageNumber(e.detail); // instant
        }
        else {
          renderUtil.onNextFrame(() => this.updateTranslationByPageNumber(e.detail)); // smooth snap to grid (delayed cause wait for transition style update)
        }
      }, onDragging: (e) => {
        if (e.detail) {
          this.disableTransition();
        }
        else {
          this.enableTransition();
        }
      } }));
  }
  disableTransition() {
    this.useTransition = false;
  }
  enableTransition() {
    this.useTransition = true;
  }
  renderLeftNavigationButton() {
    if (this.viewmode === "paginator") {
      return null;
    }
    return (index.h("div", { class: "stage-navigation-button left" }, index.h("dx-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "left-button"), class: {
        "navigation-button": true,
        show: this.page > 1,
      }, icon: "chevron-links", type: "primary-s", onClick: () => {
        this.updateTranslationByPageNumber(this.page - 1);
      } })));
  }
  renderRightNavigationButton() {
    if (this.viewmode === "paginator") {
      return null;
    }
    return (index.h("div", { class: "stage-navigation-button right" }, index.h("dx-button", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "right-button"), class: {
        "navigation-button": true,
        show: this.page < this.getMaxPages(),
      }, icon: "chevron-rechts", type: "primary-s", onClick: () => {
        this.updateTranslationByPageNumber(this.page + 1);
      } })));
  }
  render() {
    var _a;
    if (this.children == null || this.children.length === 0) {
      return;
    }
    return (index.h(index.Host, { style: {
        "--dx-slide-show-amount": this.getAmountOfDisplayedChildren().toString(),
        "--dx-slide-show-space-between": (_a = `${this.spacebetween}px`) !== null && _a !== void 0 ? _a : "0",
      } }, index.h("div", { class: "slide-show-container" }, index.h("div", { class: "stage" }, this.renderLeftNavigationButton(), index.h("div", { class: "overflow-container", onTouchStart: (e) => this.swipeController.onTouchStart(e) }, index.h("div", { class: {
        "elements-container": true,
        "use-transition": this.useTransition,
      }, ref: (ref) => {
        const oldElementsContainer = this.elementsContainer;
        this.elementsContainer = ref;
        if (oldElementsContainer == null) {
          this.updateTranslationByPageNumber();
        }
      } }, index.h("slot", null))), this.renderRightNavigationButton()), this.renderNavigation())));
  }
  get self() { return index.getElement(this); }
  static get watchers() { return {
    "page": ["onPageChanged"]
  }; }
};
DxSlideShow.style = dxSlideShowCss;

exports.dx_slide_show = DxSlideShow;
