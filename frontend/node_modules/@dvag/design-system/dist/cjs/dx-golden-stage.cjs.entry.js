'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const colorPalette = require('./color-palette-ed0f6557.js');
require('./assert-d8ea75c6.js');

const dxGoldenStageCss = ":host{display:block;background-color:var(--dx-golden-stage-background-color, unset)}:host:host([hidden]){display:none !important}:host .golden-stage{max-width:1460px;position:relative}@media (min-width: 1460px){:host .golden-stage{margin:auto}}:host .golden-stage .stage-layout{width:100%;position:relative}@media (min-width: 1024px){:host .golden-stage .stage-layout{position:absolute;bottom:var(--dx-golden-stage-offset);right:0}}:host .golden-stage .stage-layout.left-aligned .stage-content{--dx-content-padding-left:16px;--dx-content-padding-right:16px;--dx-content-padding-top:32px;--dx-content-padding-bottom:16px;padding:var(--dx-content-padding-top) var(--dx-content-padding-left) var(--dx-content-padding-bottom) var(--dx-content-padding-right)}@media (min-width: 476px){:host .golden-stage .stage-layout.left-aligned .stage-content{--dx-content-padding-left:24px;--dx-content-padding-right:24px}}@media (min-width: 1024px){:host .golden-stage .stage-layout.left-aligned .stage-content{--dx-content-padding-left:32px;--dx-content-padding-right:32px}}@media (min-width: 1280px){:host .golden-stage .stage-layout.left-aligned .stage-content{--dx-content-padding-left:40px;--dx-content-padding-right:40px}}:host .golden-stage .stage-layout.right-aligned .stage-content{--dx-content-padding-left:16px;--dx-content-padding-right:16px;--dx-content-padding-top:16px;--dx-content-padding-bottom:32px;padding:var(--dx-content-padding-top) var(--dx-content-padding-left) var(--dx-content-padding-bottom) var(--dx-content-padding-right)}@media (min-width: 476px){:host .golden-stage .stage-layout.right-aligned .stage-content{--dx-content-padding-left:24px;--dx-content-padding-right:24px}}@media (min-width: 1024px){:host .golden-stage .stage-layout.right-aligned .stage-content{--dx-content-padding-left:32px;--dx-content-padding-right:32px}}@media (min-width: 1280px){:host .golden-stage .stage-layout.right-aligned .stage-content{--dx-content-padding-left:40px;--dx-content-padding-right:40px}}:host .golden-stage .stage-layout .stage-content{position:relative;background-color:#c8aa22;box-sizing:border-box}:host .golden-stage .stage-layout .stage-content .separator{position:absolute;left:0}:host .golden-stage .stage-layout .stage-content .separator.over-container{bottom:100%}:host .golden-stage .stage-layout .stage-content .separator.below-container{top:100%;transform:scale(-1)}:host .golden-stage .stage-layout .stage-content .separator::after{content:\"\";width:100%;height:10px;background-color:#c8aa22;position:absolute;left:0;bottom:-6px;border-radius:50%}";

const DxGoldenStage = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * The alignment of the golden container.
     *
     * @value left: The container is left-aligned and the golden triangle is displayed below the container.
     * @value right: The container is right-aligned and the golden triangle is displayed over the container.
     *
     * @example alignment
     */
    this.alignment = "right";
    /**
     * The y-offset of the golden container.
     * @value number: The y-offset.
     *
     * @example content-offset-y
     */
    this.contentoffsety = DEFAULT_CONTAINER_OFFSET_Y;
    /**
     * The size of the golden container.
     * @value s: Small sized container occupying 4 grid columns.
     * @value m: Medium sized container occupying 6 grid columns.
     * @value l: Large sized container occupying 8 grid columns.
     *
     * @example size
     */
    this.size = "l";
  }
  getGridColumnCount() {
    switch (this.size) {
      case "s":
        return 4;
      case "m":
        return 6;
      case "l":
        return 8;
    }
  }
  getGridColumnValue() {
    const columns = this.getGridColumnCount();
    if (this.alignment === "right") {
      return `(${NUMBER_OF_GRID_COLUMNS - columns})-${columns}`;
    }
    else if (this.alignment === "left") {
      return `${columns}-(${NUMBER_OF_GRID_COLUMNS - columns})`;
    }
  }
  render() {
    var _a;
    const backgroundColor = this.backgroundcolor
      ? new colorPalette.ColorPalette(true).getColorCode(this.backgroundcolor)
      : undefined;
    const isRightAligned = this.alignment === "right";
    return (index.h(index.Host, { style: {
        "--dx-golden-stage-background-color": backgroundColor,
        "--dx-golden-stage-offset": `${((_a = this.contentoffsety) !== null && _a !== void 0 ? _a : DEFAULT_CONTAINER_OFFSET_Y) * -1}px`,
      } }, index.h("div", { class: "golden-stage" }, index.h("slot", { name: "hero-image" }), index.h("dx-grid", { class: {
        "stage-layout": true,
        "right-aligned": isRightAligned,
        "left-aligned": !isRightAligned,
      }, mq1: "12", mq4: this.getGridColumnValue() }, index.h("div", { class: "stage-content" }, index.h("dx-fd-separator", { class: {
        separator: true,
        "over-container": isRightAligned,
        "below-container": !isRightAligned,
      }, fromcolor: "transparent", tocolor: "gold" }), index.h("slot", null))))));
  }
};
const DEFAULT_CONTAINER_OFFSET_Y = 32;
const NUMBER_OF_GRID_COLUMNS = 12;
DxGoldenStage.style = dxGoldenStageCss;

exports.dx_golden_stage = DxGoldenStage;
