'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const colorPalette = require('./color-palette-ed0f6557.js');
const currencyUtil = require('./currency-util-f7a65567.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
require('./query-util-8642f149.js');
require('./assert-d8ea75c6.js');
require('./value-store-f683b26f.js');

const dsFmErgebnisuebersichtCss = ":host{display:block}:host:host([hidden]){display:none !important}:host .donut-info-container{display:none;flex-direction:column;align-items:center;position:relative}:host .donut-info-container.visible{display:flex}:host .donut-info-container .donut-content{display:flex;flex-direction:column;align-items:center;text-align:center;justify-content:center}:host .donut-info-container .donut-content .primary-label{width:130px;height:48px}:host .donut-info-container .donut-content .sum{margin-top:16px;margin-bottom:8px;white-space:nowrap;height:36px}:host .donut-info-container ds-donut-chart{margin-bottom:24px}:host .donut-info-container .contribution-container{display:flex;flex:1;justify-content:center}:host .donut-info-container .contribution-container.left{justify-content:flex-start;text-align:left}:host .donut-info-container .contribution-container.left ds-column :nth-child(n){position:relative;right:50%}:host .donut-info-container .contribution-container.right{justify-content:flex-end;text-align:right}:host .donut-info-container .contribution-container.right ds-column :nth-child(n){position:relative;left:50%}:host .donut-info-container .info{text-align:center}:host .donut-info-container .info ds-text{width:100%}:host .donut-info-container .info-center{flex-basis:224px;flex-grow:0}:host .table{display:flex;flex-direction:column}:host .table:not(:last-child){margin-bottom:32px}:host .table .row{display:flex}:host .table .row .cell{display:flex;text-align:right;justify-content:flex-end;align-items:center;flex:1.33;flex-basis:120px;flex-shrink:0;min-width:100px;padding:12px 8px}:host .table .row .cell.first{border-top-left-radius:6px;border-top-right-radius:6px}:host .table .row .cell.last{border-bottom-left-radius:6px;border-bottom-right-radius:6px}:host .table .row .cell:not(:last-child){margin-right:24px}:host .table .row .cell.label{text-align:left;justify-content:flex-start;flex:5;flex-basis:480px}:host .table .row .cell.highlight{background-color:#f5f5f5}:host .table .row .cell .value{white-space:nowrap}:host .table .row .cell ds-column{border-left:4px solid;padding-left:8px;border-color:black}";

const DsFmErgebnisuebersicht = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.colorPalette = new colorPalette.ColorPalette();
    /**
     * Indicates whether the donut chart will be displayed or not.
     *
     * @value true: The donut chart is displayed at the top of the component
     * @value false: The donut chart is not displayed.
     *
     * @example donut-visible
     */
    this.donutvisible = true;
    /**
     * Headline for the second contribution rate. Located below the chart.
     * This label is optional.
     *
     * @value string: e.g: Gesamtbeitrag / Jahr
     * @example example
     */
    this.secondcontributionlabel = null;
  }
  connectedCallback() {
    this.slotObserver =
      slotObserver.createMetaComponentsSlotObserver(this.self, "ds-fm-ergebnisuebersicht-table", (nodes) => {
        requestAnimationFrame(async () => {
          var _a;
          this.tables = await Promise.all(nodes.map((node) => node.toErgebnisUebersichtTable()));
          this.allItems = (_a = this.tables) === null || _a === void 0 ? void 0 : _a.map((table) => table.items).flat();
        });
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  showSegmentInfo(index) {
    this.selectedItem = index;
  }
  renderChartSamples() {
    var _a;
    return (_a = this.allItems) === null || _a === void 0 ? void 0 : _a.map((item, index$1) => {
      return (index.h("ds-chart-sample", { value: item.firstcolumnvalue, label: item.label, color: this.colorPalette.getWheelColorCode(index$1) }));
    });
  }
  renderDonutChartContent(sum) {
    var _a, _b, _c;
    const itemIsSelected = this.selectedItem != null;
    const donutCenterText = itemIsSelected
      ? `${currencyUtil.displayNumberAsCurrency((_a = this.allItems[this.selectedItem]) === null || _a === void 0 ? void 0 : _a.firstcolumnvalue, 2)} €`
      : this.donutcenterlabel;
    const beforeComma = (_b = Math.floor(sum)) === null || _b === void 0 ? void 0 : _b.toString();
    const sumTextType = (beforeComma === null || beforeComma === void 0 ? void 0 : beforeComma.length) > 4 ? "u3" : "u2";
    return (index.h("div", { slot: "content", class: "donut-content" }, index.h("ds-text", { class: "primary-label", screensize: "small" }, itemIsSelected ? (ellipse((_c = this.allItems) === null || _c === void 0 ? void 0 : _c[this.selectedItem].label, 20)) : (index.h("span", null, this.donutlabel))), index.h("ds-text", { screensize: "small", type: sumTextType, color: itemIsSelected
        ? this.colorPalette.getWheelColor(this.selectedItem)
        : undefined, class: "sum" }, donutCenterText), index.h("ds-text", { screensize: "small", color: "hellgrau-3" }, this.donutsublabel)));
  }
  // TODO: Add argument to generate id for cells (e.g. parent label, isFirstColumn and so on)
  renderValueCell(value, info, isFirstChild, isLastChild, highlight) {
    var _a;
    return (index.h("div", { class: {
        cell: true,
        first: isFirstChild,
        last: isLastChild,
        highlight: highlight,
      } }, 
    // TODO: Use Id generator instead of this
    index.h("ds-info", { id: ((_a = this.self.id) !== null && _a !== void 0 ? _a : "") +
        "-columninfo-" +
        (cellInfoNumber = cellInfoNumber + 1), hidebutton: !((info === null || info === void 0 ? void 0 : info.length) > 0) }, index.h("ds-text", { slot: "content", type: "ft" }, info), index.h("ds-text", { class: "value" }, isNaN(value)
      ? "unbekannt"
      : currencyUtil.displayNumberAsCurrency(value, 2) + " €"))));
  }
  renderHeaderRow(table) {
    var _a, _b, _c;
    return (index.h("div", { class: "row" }, index.h("div", { class: "cell label" }, index.h("ds-text", { type: "ftf" }, table.label)), index.h("div", { class: "cell" }, index.h("ds-info", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "first-column-info"), hidebutton: !(((_a = this.firstcolumninfo) === null || _a === void 0 ? void 0 : _a.length) > 0) }, index.h("ds-text", { slot: "content", type: "ft" }, this.firstcolumninfo), index.h("ds-text", { type: "it" }, this.firstcolumn))), ((_b = this.secondcolumn) === null || _b === void 0 ? void 0 : _b.length) > 0 ? (index.h("div", { class: "cell" }, index.h("ds-info", { id: elementIdHandling.ElementIdGenerator.createId(this.self, "second-column-info"), hidebutton: !(((_c = this.secondcolumninfo) === null || _c === void 0 ? void 0 : _c.length) > 0) }, index.h("ds-text", { slot: "content", type: "ft" }, this.secondcolumninfo), index.h("ds-text", { type: "it" }, this.secondcolumn)))) : null));
  }
  renderTable(table, colorWheelIndexOffset = 0) {
    var _a;
    return (index.h("div", { class: "table" }, [
      this.renderHeaderRow(table),
      (_a = table.items) === null || _a === void 0 ? void 0 : _a.map((item, index$1) => {
        var _a, _b;
        const isFirstChild = index$1 === 0;
        const isLastChild = index$1 === table.items.length - 1;
        return (index.h("div", { class: "row" }, index.h("div", { class: "cell label" }, index.h("ds-column", { class: "color-indicator", style: {
            "border-color": this.colorPalette.getWheelColorCode(index$1 + colorWheelIndexOffset),
          } }, index.h("ds-text", null, item.label), ((_a = item.sublabel) === null || _a === void 0 ? void 0 : _a.length) > 0 ? (index.h("ds-text", { type: "itk" }, item.sublabel)) : null)), [
          this.renderValueCell(item.firstcolumnvalue, item.firstcolumninfo, isFirstChild, isLastChild, true),
          ((_b = this.secondcolumn) === null || _b === void 0 ? void 0 : _b.length) > 0
            ? this.renderValueCell(item.secondcolumnvalue, item.secondcolumninfo, isFirstChild, isLastChild, false)
            : null,
        ]));
      }),
    ]));
  }
  render() {
    var _a, _b, _c, _d;
    const sum = (_c = (_b = (_a = this.allItems) === null || _a === void 0 ? void 0 : _a.map((item) => item.firstcolumnvalue)) === null || _b === void 0 ? void 0 : _b.reduce((previous, current) => {
      return previous + current;
    }, 0)) !== null && _c !== void 0 ? _c : 0;
    const twoPaymentMethods = !!(this.firstcontributionlabel && this.secondcontributionlabel);
    return (index.h(index.Host, null, index.h("div", { class: { "donut-info-container": true, visible: this.donutvisible } }, index.h("ds-donut-chart", { radius: 100, segmentwidth: 10, scale: 2, offset: 5, onSegmentSelect: (e) => this.showSegmentInfo(e.detail) }, this.renderDonutChartContent(sum), this.renderChartSamples()), index.h("div", { style: { display: "flex", width: "100%" } }, index.h("div", { class: {
        "contribution-container": true,
        right: twoPaymentMethods,
      } }, index.h("ds-column", { class: "info" }, index.h("ds-text", null, this.firstcontributionlabel), index.h("ds-text", { type: "ftf" }, this.firstcontributionsublabel))), twoPaymentMethods
      ? [
        index.h("div", { class: "info-center" }, "\u00A0"),
        index.h("div", { class: "contribution-container left" }, index.h("ds-column", { class: "info" }, index.h("ds-text", null, this.secondcontributionlabel), index.h("ds-text", { type: "ftf" }, this.secondcontributionsublabel))),
      ]
      : null), index.h("ds-hr", { style: {
        "margin-top": "32px",
        "margin-bottom": "24px",
      } })), (_d = this.tables) === null || _d === void 0 ? void 0 :
      _d.map((table, index) => {
        const colorWheelIndexOffset = this.tables
          .slice(0, index)
          .map((table) => table.items.length)
          .reduce((previousValue, currentValue) => previousValue + currentValue, 0);
        return this.renderTable(table, colorWheelIndexOffset);
      })));
  }
  get self() { return index.getElement(this); }
};
function ellipse(str, after) {
  // TODO auslagern?
  if (str.length <= after) {
    return str;
  }
  else {
    return `${str.substring(0, after - 3)}...`;
  }
}
let cellInfoNumber = 0;
DsFmErgebnisuebersicht.style = dsFmErgebnisuebersichtCss;

exports.ds_fm_ergebnisuebersicht = DsFmErgebnisuebersicht;
