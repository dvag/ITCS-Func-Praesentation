'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const assert = require('./assert-d8ea75c6.js');
const elementIdHandling = require('./element-id-handling-89898a1c.js');
const baseElements = require('./base-elements-f50ffdf3.js');
const renderUtil = require('./render-util-6b278c0d.js');
const mathUtil = require('./math-util-a514efc6.js');
require('./value-store-f683b26f.js');

const dxButtonCss = ":host{display:inline-block;line-height:0;width:var(--dx-button-width, unset)}:host:host([hidden]){display:none !important}:host:host(.disabled){pointer-events:none}:host:host(.unfocusable) button{box-shadow:none}:host:host ::slotted(*){pointer-events:none}:host.disabled{pointer-events:none}:host.unfocusable button{box-shadow:none}:host::slotted(*){pointer-events:none}:host:host(.stretch){width:100%}:host:host(.stretch) button{width:100%}:host>button{width:var(--dx-button-width, fit-content);width:var(--dx-button-width, -moz-fit-content);cursor:pointer;display:inline-flex;justify-content:center;align-items:center;box-sizing:border-box;white-space:nowrap;user-select:none;-webkit-user-select:none;border:none;margin:0;background-color:transparent;transition:background-color 150ms ease-in-out, border-color 150ms ease-in-out;outline-offset:2px;white-space:break-spaces}:host>button[disabled]{cursor:unset}:host>button.icon-right{flex-direction:row-reverse}:host>button:focus-visible{outline:2px solid #004763}:host>button .icon-container{width:24px;height:24px;pointer-events:none}:host>button.has-text .icon-container{width:24px;height:24px;margin-left:0px;margin-right:8px;flex-shrink:0}:host>button.has-text.icon-right .icon-container{margin-left:8px;margin-right:0px}:host>button.has-text dx-text{text-align:left}:host(:not(.type-text))>button{border-width:2px;border-style:solid}:host(.size-l) button{min-height:64px;padding:0 20px}:host(.size-l) button.has-text{padding:14px}@media (min-width: 1280px){:host(.size-l) button.has-text{padding:12px 14px}}:host(.size-m) button{min-height:48px;padding:0 10px}:host(.size-m) button.has-text{padding:10px 14px}@media (min-width: 1280px){:host(.size-m) button.has-text{padding:8px 14px}}:host(.size-s) button{min-height:40px;padding:0 6px}:host(.size-s) button.has-text{padding:6px 14px}@media (min-width: 1280px){:host(.size-s) button.has-text{padding:4px 14px}}:host(.type-primary):host(.default) button{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#337a96;--dx-text-color:#ffffff;--dx-icon-color:#ffffff}@media not all and (pointer: coarse){:host(.type-primary):host(.default) button:hover{background-color:#00587c}}:host(.type-primary):host(.default) button:active{background-color:#004763}:host(.type-primary):host(.on-gold) button{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#ffffff;--dx-text-color:#337a96;--dx-icon-color:#337a96}@media not all and (pointer: coarse){:host(.type-primary):host(.on-gold) button:hover{background-color:#e6e6e6;--dx-text-color:#00587c;--dx-icon-color:#00587c}}:host(.type-primary):host(.on-gold) button:active{background-color:#cccccc;--dx-text-color:#004763;--dx-icon-color:#004763}:host(.type-primary):host(.destructive) button{transition:background-color 150ms ease-in-out;border-color:transparent;background-color:#9d2235;--dx-text-color:#ffffff;--dx-icon-color:#ffffff}@media not all and (pointer: coarse){:host(.type-primary):host(.destructive) button:hover{background-color:#7e1b2a}}:host(.type-primary):host(.destructive) button:active{background-color:#5e141f}:host(.type-primary):host(.disabled) button{opacity:0.4}:host(.type-secondary):host(.default) button,:host(.type-text):host(.default) button{background-color:rgba(0, 88, 124, 0);border-color:#337a96;--dx-text-color:#337a96;--dx-icon-color:#337a96}@media not all and (pointer: coarse){:host(.type-secondary):host(.default) button:hover,:host(.type-text):host(.default) button:hover{background-color:rgba(0, 88, 124, 0.1);border-color:#00587c;--dx-text-color:#00587c;--dx-icon-color:#00587c}}:host(.type-secondary):host(.default) button:active,:host(.type-text):host(.default) button:active{background-color:rgba(0, 88, 124, 0.2);border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}:host(.type-secondary):host(.default):host(.simulate-hover) button,:host(.type-text):host(.default):host(.simulate-hover) button{background-color:rgba(0, 88, 124, 0);border-color:#337a96;--dx-text-color:#337a96;--dx-icon-color:#337a96;background-color:rgba(0, 88, 124, 0.1);border-color:#00587c;--dx-text-color:#00587c;--dx-icon-color:#00587c}:host(.type-secondary):host(.default):host(.simulate-hover) button:active,:host(.type-text):host(.default):host(.simulate-hover) button:active{background-color:rgba(0, 88, 124, 0.2);border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}:host(.type-secondary):host(.default):host(.simulate-active) button,:host(.type-text):host(.default):host(.simulate-active) button{background-color:rgba(0, 88, 124, 0);border-color:#337a96;--dx-text-color:#337a96;--dx-icon-color:#337a96;background-color:rgba(0, 88, 124, 0.2);border-color:#004763;--dx-text-color:#004763;--dx-icon-color:#004763}@media not all and (pointer: coarse){:host(.type-secondary):host(.default):host(.simulate-active) button:hover,:host(.type-text):host(.default):host(.simulate-active) button:hover{background-color:rgba(0, 88, 124, 0.1);border-color:#00587c;--dx-text-color:#00587c;--dx-icon-color:#00587c}}:host(.type-secondary):host(.on-gold) button,:host(.type-text):host(.on-gold) button{background-color:transparent;border-color:white;--dx-text-color:#ffffff;--dx-icon-color:#ffffff}@media not all and (pointer: coarse){:host(.type-secondary):host(.on-gold) button:hover,:host(.type-text):host(.on-gold) button:hover{background-color:rgba(0, 0, 0, 0.1)}}:host(.type-secondary):host(.on-gold) button:active,:host(.type-text):host(.on-gold) button:active{background-color:rgba(0, 0, 0, 0.2)}:host(.type-secondary):host(.on-gold):host(.simulate-hover) button,:host(.type-text):host(.on-gold):host(.simulate-hover) button{background-color:transparent;border-color:white;--dx-text-color:#ffffff;--dx-icon-color:#ffffff;background-color:rgba(0, 0, 0, 0.1)}:host(.type-secondary):host(.on-gold):host(.simulate-hover) button:active,:host(.type-text):host(.on-gold):host(.simulate-hover) button:active{background-color:rgba(0, 0, 0, 0.2)}:host(.type-secondary):host(.on-gold):host(.simulate-active) button,:host(.type-text):host(.on-gold):host(.simulate-active) button{background-color:transparent;border-color:white;--dx-text-color:#ffffff;--dx-icon-color:#ffffff;background-color:rgba(0, 0, 0, 0.2)}@media not all and (pointer: coarse){:host(.type-secondary):host(.on-gold):host(.simulate-active) button:hover,:host(.type-text):host(.on-gold):host(.simulate-active) button:hover{background-color:rgba(0, 0, 0, 0.1)}}:host(.type-secondary):host(.destructive) button,:host(.type-text):host(.destructive) button{background-color:rgba(157, 34, 53, 0);--dx-text-color:#9d2235;--dx-icon-color:#9d2235}@media not all and (pointer: coarse){:host(.type-secondary):host(.destructive) button:hover,:host(.type-text):host(.destructive) button:hover{background-color:rgba(157, 34, 53, 0.1);--dx-text-color:#7e1b2a;--dx-icon-color:#7e1b2a}}:host(.type-secondary):host(.destructive) button:active,:host(.type-text):host(.destructive) button:active{background-color:rgba(157, 34, 53, 0.2);--dx-text-color:#5e141f;--dx-icon-color:#5e141f}:host(.type-secondary):host(.destructive):host(.simulate-hover) button,:host(.type-text):host(.destructive):host(.simulate-hover) button{background-color:rgba(157, 34, 53, 0);--dx-text-color:#9d2235;--dx-icon-color:#9d2235;background-color:rgba(157, 34, 53, 0.1);--dx-text-color:#7e1b2a;--dx-icon-color:#7e1b2a}:host(.type-secondary):host(.destructive):host(.simulate-hover) button:active,:host(.type-text):host(.destructive):host(.simulate-hover) button:active{background-color:rgba(157, 34, 53, 0.2);--dx-text-color:#5e141f;--dx-icon-color:#5e141f}:host(.type-secondary):host(.destructive):host(.simulate-active) button,:host(.type-text):host(.destructive):host(.simulate-active) button{background-color:rgba(157, 34, 53, 0);--dx-text-color:#9d2235;--dx-icon-color:#9d2235;background-color:rgba(157, 34, 53, 0.2);--dx-text-color:#5e141f;--dx-icon-color:#5e141f}@media not all and (pointer: coarse){:host(.type-secondary):host(.destructive):host(.simulate-active) button:hover,:host(.type-text):host(.destructive):host(.simulate-active) button:hover{background-color:rgba(157, 34, 53, 0.1);--dx-text-color:#7e1b2a;--dx-icon-color:#7e1b2a}}:host(.type-secondary):host(.disabled) button,:host(.type-text):host(.disabled) button{opacity:0.4}:host(.type-text)>button:not(.has-text){padding:0 8px !important}:host(.type-text)>button.has-text{padding:8px 0 !important}@media (min-width: 1280px){:host(.type-text)>button.has-text{padding:6px 0 !important}}";

const DxButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Specifies whether the icon is positioned left or right of the text as long a text is defined.
     *
     * @value left: The icon is displayed left of the text.
     * @value right: The icon is displayed right of the text.
     * @example icon
     */
    this.iconposition = "left";
    /**
     * Modifies the button width behavior
     * @value false: Button width is determined by the button content
     * @value true: Button width is stretched to match the width of the host element.
     */
    this.stretch = false;
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Shows a loading spinner within the button.
     * The spinner location can be controlled with the `iconposition` property.
     * @value true: Loading spinner is visible.
     * @value false: Loading spinner is not visible.
     * @example loading-spinner
     */
    this.loading = false;
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     * @example unfocusable
     */
    this.unfocusable = false;
    /**
     * The theme of the button defines the look and feel of the button, which is dependent in which context the button is used.
     * @value default: The default button can be placed anywhere and is the main usage of a button.
     * @value on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background.
     * @value destructive: A button which implies a destructive action. (e.g deleting an item from a list)
     *
     * @example theme
     */
    this.theme = "default";
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    elementIdHandling.verifyElementId(this.self);
  }
  getStyleClasses() {
    var _a;
    const type = this.type.replace(/-[sml]/g, "");
    const classes = {};
    classes[`type-${type}`] = true;
    const size = (_a = this.type.split("-")) === null || _a === void 0 ? void 0 : _a[1];
    if (size != null) {
      classes[`size-${size}`] = true;
    }
    else if (this.type === "text") {
      classes["size-s"] = true;
    }
    classes[this.theme] = true;
    return classes;
  }
  getLoadingSpinnerTheme() {
    const useDefaultTheme = this.theme === "default";
    if (this.type.startsWith("primary")) {
      return useDefaultTheme ? "dark" : "light";
    }
    // Inverse when not using primary type
    return useDefaultTheme ? "light" : "dark";
  }
  render() {
    var _a, _b;
    assert.assertPropertyValue("dx-button", "type", this.type, [
      "primary-s",
      "primary-m",
      "primary-l",
      "secondary-s",
      "secondary-m",
      "secondary-l",
      "text",
    ]);
    assert.assert(!(this.theme === "destructive" && this.type.startsWith("secondary")), () => "The 'destructive' theme is not compatible with the 'secondary' type. Please use a primary or text type instead.", this.self);
    return (index.h(index.Host, { class: Object.assign(Object.assign({}, this.getStyleClasses()), { disabled: this.disabled, unfocusable: this.unfocusable, stretch: this.stretch }) }, index.h("button", { type: "button", class: {
        "icon-right": this.iconposition === "right",
        "has-text": ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0,
      }, ref: (el) => (this.buttonElement = el), id: elementIdHandling.ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabIndex: this.unfocusable ? -1 : 0 }, index.h(baseElements.BaselineElement, null), this.renderIconContainer(), ((_b = this.label) === null || _b === void 0 ? void 0 : _b.length) > 0 ? index.h("dx-text", null, this.label) : null)));
  }
  renderInnerIcon() {
    if (this.loading) {
      const theme = this.getLoadingSpinnerTheme();
      return index.h("dx-spinner", { class: "loading-spinner", size: "medium", theme: theme });
    }
    const icon = this.theme === "destructive" ? "muell" : this.icon;
    if ((icon === null || icon === void 0 ? void 0 : icon.length) > 0) {
      return index.h("dx-icon", { icon: icon, size: 24 });
    }
    // "icon" slot only for internal usage
    if (renderUtil.isSlotDefined(this.self, "icon")) {
      return index.h("slot", { name: "icon" });
    }
    return null;
  }
  renderIconContainer() {
    const innerIcon = this.renderInnerIcon();
    if (innerIcon == null) {
      return;
    }
    return index.h("div", { class: "icon-container" }, innerIcon);
  }
  get self() { return index.getElement(this); }
};
DxButton.style = dxButtonCss;

const dxSpinnerCss = ":host{display:inline-block;position:relative}:host:host([hidden]){display:none !important}@keyframes fade-out{0%{opacity:1}100%{opacity:0}}:host svg{position:absolute;left:0;top:0;opacity:0}@media screen and (prefers-reduced-motion: no-preference){:host svg{animation-name:fade-out;animation-timing-function:linear;animation-iteration-count:infinite;animation-duration:1500ms}}";

const DxSpinner = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.lines = [];
    this.internalAnimationDuration = 1500;
    this.counter = 0;
    this.circleWalker = 0;
    /**
     * @internal
     *
     * The number of segments in the circle.
     *
     * @value number: Number of segments.
     */
    this.segments = 12;
    /**
     * Displays the spinner in a light or dark theme.
     *
     * @value light: The segments have a dark tone to contrast a light background.
     * @value dark: The segments have a light tone to contrast a dark background.
     *
     * @example theme
     */
    this.theme = "light";
    /**
     * Specififes the size of the spinner.
     *
     * @value small: Spinner has a size of 16px.
     * @value medium: Spinner has a size of 24px.
     * @value large: Spinner has a size of 32px.
     * @value xlarge: Spinner has a size of 72px.
     *
     * @example size
     */
    this.size = "small";
  }
  onSegmentCountChange() {
    this.computeLines();
  }
  onSizeChanged() {
    this.updateStates();
  }
  componentWillLoad() {
    this.updateStates();
    this.computeLines();
  }
  disconnectedCallback() {
    this.internalAnimationDuration = 0;
  }
  updateStates() {
    this.sizeInPx = this.computeSizeInPx();
    this.strokeWidth = this.computeStrokeWidth();
  }
  computeSizeInPx() {
    if (this.size === "small") {
      return 16;
    }
    else if (this.size === "medium") {
      return 24;
    }
    else if (this.size === "large") {
      return 32;
    }
    else {
      return 72;
    }
  }
  computeStrokeWidth() {
    if (this.size === "small") {
      return 1;
    }
    else if (this.size === "medium") {
      return 2;
    }
    else if (this.size === "large") {
      return 3;
    }
    else {
      return 6;
    }
  }
  computeLines() {
    this.lines = [];
    const halfSizeInPx = this.sizeInPx * 0.5;
    for (let i = 0; i < this.segments; ++i) {
      const angle = (360 / this.segments) * i - 90;
      const innerPoint = mathUtil.getPointOnCircle(halfSizeInPx * 0.5 + this.strokeWidth * 0.5, angle);
      const outerPoint = mathUtil.getPointOnCircle(halfSizeInPx - this.strokeWidth * 0.5, angle);
      innerPoint.x += halfSizeInPx;
      innerPoint.y += halfSizeInPx;
      outerPoint.x += halfSizeInPx;
      outerPoint.y += halfSizeInPx;
      this.lines.push(createLine(innerPoint.x, innerPoint.y, outerPoint.x, outerPoint.y));
    }
  }
  renderSVGLine(line, index$1) {
    const delay = (this.internalAnimationDuration / this.segments) *
      (this.segments - index$1);
    const opacity = ((index$1 - 1 + this.segments) % this.segments) / this.segments;
    return (index.h("svg", { width: this.sizeInPx, height: this.sizeInPx, style: {
        "animation-delay": -delay + "ms",
        opacity: opacity + "",
      } }, index.h("line", { x1: line.x1, x2: line.x2, y1: line.y1, y2: line.y2, "stroke-linecap": "round", style: {
        stroke: this.theme === "light" ? "#4c4c4c" : "white",
        "stroke-width": this.strokeWidth + "px",
      } })));
  }
  render() {
    return (index.h(index.Host, { style: {
        width: this.sizeInPx + "px",
        height: this.sizeInPx + "px",
      } }, this.lines.map((line, index) => {
      return this.renderSVGLine(line, index);
    })));
  }
  static get watchers() { return {
    "segments": ["onSegmentCountChange"],
    "size": ["onSizeChanged"]
  }; }
};
function createLine(x1, y1, x2, y2) {
  return {
    x1,
    y1,
    x2,
    y2,
  };
}
DxSpinner.style = dxSpinnerCss;

exports.dx_button = DxButton;
exports.dx_spinner = DxSpinner;
