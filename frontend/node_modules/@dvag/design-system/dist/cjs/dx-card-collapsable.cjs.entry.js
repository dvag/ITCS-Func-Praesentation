'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const miscUtil = require('./misc-util-63b423bd.js');
require('./query-util-8642f149.js');

const dxCardCollapsableCss = ":host{display:block;--dx-card-header-bottom-border-transform:scaleX(0);--dx-card-header-bottom-border-transition:opacity 300ms ease-in-out, transform 300ms cubic-bezier(1, 0, 0, 1)}:host:host([hidden]){display:none !important}:host(.state-closing),:host(.state-closed){--dx-card-header-bottom-border-opacity:0}:host(.state-opening),:host(.state-opened){--dx-card-header-bottom-border-transform:scaleX(1)}";

const DxCardCollapsable = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * The current collapse state.
     *
     * @value false: The card is collapsed.
     * @value true: The card is unfolded.
     *
     * @example open
     */
    this.open = false;
    this.animationState = "closed";
  }
  connectedCallback() {
    this.cardHeaderSlotObserver = new slotObserver.SlotObserver(this.self, "dx-card-header", (nodes) => {
      const header = nodes[0];
      if (header) {
        header.collapsable = true;
        header.collapsed = this.open;
      }
    });
    // The card stretches it's content to fit the parent container. This should not happen when a collapsable is within the card.
    const card = this.self.closest("dx-card");
    if (card) {
      card.maxcontent = true;
    }
  }
  disconnectedCallback() {
    this.cardHeaderSlotObserver.disconnect();
  }
  componentWillLoad() {
    this.animationState = this.open ? "opened" : "closed";
  }
  onCardHeaderInteracted(e) {
    const element = e.target;
    if (miscUtil.tagOf(element) === "dx-card-header") {
      const upperCardCollapsable = miscUtil.findUpperElement(element, "dx-card-collapsable");
      if (upperCardCollapsable === this.self) {
        this.open = !this.open;
        element.collapsed = this.open;
      }
    }
  }
  renderContent() {
    return (index.h("dx-simple-grow-box", { slidecontent: true, class: {
        content: true,
      }, ref: (ref) => (this.growBox = ref), open: this.open, onGrowBoxStateChange: (event) => {
        if (event.target === this.growBox) {
          this.animationState = event.detail;
        }
      } }, index.h("slot", null)));
  }
  render() {
    return (index.h(index.Host, { class: {
        "state-closed": this.animationState === "closed",
        "state-closing": this.animationState === "closing",
        "state-opened": this.animationState === "opened",
        "state-opening": this.animationState === "opening",
      } }, index.h("slot", { name: "header" }), this.renderContent()));
  }
  get self() { return index.getElement(this); }
};
DxCardCollapsable.style = dxCardCollapsableCss;

exports.dx_card_collapsable = DxCardCollapsable;
