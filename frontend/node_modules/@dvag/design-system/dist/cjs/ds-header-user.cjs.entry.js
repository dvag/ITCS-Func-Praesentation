'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-2f41386b.js');
const slotObserver = require('./slot-observer-2e83212e.js');
const headerActionHelper = require('./header-action-helper-195b9f78.js');
const miscUtil = require('./misc-util-63b423bd.js');
require('./query-util-8642f149.js');

const DsHeaderUser = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.signOut = index.createEvent(this, "signOut", 7);
    this.usernameInteraction = index.createEvent(this, "usernameInteraction", 7);
    this.children = [];
    /**
     * Determines whether the user name within the user menu is interactable.
     * @value true: The user name is interactable. The `usernameInteraction` event is thrown on interaction.
     * @value false: The user name is not interactable.
     */
    this.usernameinteractable = false;
  }
  /**
   * @internal
   */
  async toHeaderUserConfiguration() {
    return {
      id: this.self.id,
      name: this.name,
      imageUrl: this.imageurl,
      signOut: () => this.signOut.emit(),
      usernameInteraction: () => this.usernameInteraction.emit(),
      usernameInteractable: this.usernameinteractable,
      children: await headerActionHelper.extractHeaderActionConfigurations(this.children),
    };
  }
  connectedCallback() {
    this.childObserver = slotObserver.createMetaComponentsSlotObserver(this.self, ":scope > *", (nodes) => {
      this.children = miscUtil.filterElementsByTagPrefix(nodes, "ds-header-action").map((node) => {
        if (node.tagName.toLowerCase() === "ds-header-action") {
          return node;
        }
        else {
          return node;
        }
      });
    });
  }
  disconnectedCallback() {
    this.childObserver.disconnect();
  }
  get self() { return index.getElement(this); }
};

exports.ds_header_user = DsHeaderUser;
