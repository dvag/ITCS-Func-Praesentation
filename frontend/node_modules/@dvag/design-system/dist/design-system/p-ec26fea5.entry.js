import{r as t,c as s,h as e,H as i,g as n}from"./p-c66bef8d.js";import{d as h}from"./p-dc250dcd.js";import{c as r}from"./p-968cb048.js";import{b as o,g as l}from"./p-e0194d22.js";import"./p-fabbcf47.js";const a=class{constructor(e){t(this,e),this.valueChange=s(this,"valueChange",7)}onValueChange(t,s){t!==s&&this.valueChange.emit(this.value)}async toChartSample(){h("ds-chart-sample","color",this.color,"Every chart sample must have a unique color.");const t=Math.max(this.value,0)||0;return{label:this.label,value:t,formattedValue:this.formattedValue||t.toString(),color:this.color}}componentShouldUpdate(){if(isNaN(this.value))return!1}static get watchers(){return{value:["onValueChange"]}}},c=class{constructor(e){t(this,e),this.segmentSelect=s(this,"segmentSelect",7),this.mouseMoveHandler=t=>{this.handleMouseMove(t)},this.chartInput=[],this.selected=null,this.radius=50,this.segmentwidth=10,this.offset=5,this.scale=1.5,this.startangle=0}connectedCallback(){this.slotObserver=r(this.self,"ds-chart-sample",(t=>this.collectSamplesFromChildren(t)))}disconnectedCallback(){var t;null===(t=this.slotObserver)||void 0===t||t.disconnect()}async collectSamplesFromChildren(t){this.chartInput=await Promise.all(t.map((t=>t.toChartSample())))}getHitAngle(t,s){const e=this.self.getBoundingClientRect(),i=this.circleOrigin,n=i.y+e.y,h=s,r=t-(i.x+e.x),l=h-n,a=r*r+l*l,c=this.getScaledOuterRadius(),u=c-this.segmentwidth*this.scale*2;if(a>=u*u&&a<=c*c){let t=180*Math.acos(r/Math.sqrt(r*r+l*l))/o;return h<n&&(t=360-t),(t-(this.startangle-90)+360)%360}return null}handleMouseMove(t){const s=this.getHitAngle(t.clientX,t.clientY);null!=s?this.selectSegmentByAngle(s):this.selectSegment(null)}selectSegmentByAngle(t){const s=this.chartInput.map((t=>t.value)).reduce(((t,s)=>t+s),0);let e=0;const i=this.chartInput.findIndex((i=>{const n=e;return e+=i.value,t>=n/s*360&&t<=e/s*360}));return-1!==i&&(this.selectSegment(i),!0)}selectSegment(t){this.selected!==t&&(this.selected=t,this.segmentSelect.emit(t))}addWindowHandler(){window.addEventListener("mousemove",this.mouseMoveHandler)}removeWindowHandler(){window.removeEventListener("mousemove",this.mouseMoveHandler)}getCircleSegmentPoints(t,s,e,i,n){const h=[],r=-90+this.startangle,o=3.6*(i+e)+r,a=s+.5*n,c=a-n;let u=0;for(let t=3.6*i+r;t<o;t+=5){t>o&&(t=o);const s=l(a,t);h.push(s),u=t}if(o-u>0){const t=l(a,o);h.push(t)}for(let t=h.length-1;t>=0;--t)h.push({x:c*(h[t].x/a),y:c*(h[t].y/a)});return h.map((s=>(s.x+=t.x,s.y+=t.y,s.x+","+s.y))).join(" ")}generateDonutCreateData(){return this.chartInput.reduce(((t,s,e)=>({segments:[...t.segments,{input:s,offset:0==e?0:t.segments[e-1].offset+t.segments[e-1].input.value}],sum:t.sum+s.value})),{segments:[],sum:0})}get maxSize(){return 2*this.getScaledOuterRadius()}get circleOrigin(){return{x:.5*this.maxSize,y:.5*this.maxSize}}getScaledOuterRadius(){return this.radius+this.segmentwidth*this.scale*.5}render(){if(null==this.chartInput)return e(i,null,e("slot",{name:"content"}));const t=.5*this.maxSize,s=2*(this.getScaledOuterRadius()-this.segmentwidth*this.scale);return e(i,{onMouseEnter:()=>{this.addWindowHandler()},onMouseLeave:()=>{this.removeWindowHandler(),this.selectSegment(null)}},this.renderDonutChart(),e("div",{class:"center",style:{top:t+"px",left:t+"px",width:s+"px",height:s+"px"}},e("slot",{name:"content"})),e("slot",null))}renderDonutChart(){const t=this.generateDonutCreateData(),s=this.maxSize+"px";return e("svg",{style:{width:s,height:s}},this.renderSegments(t))}renderSegment(t,s,i,n,h,r,o){if(!(i<=0))return e("polygon",{class:"segment",points:this.getCircleSegmentPoints(t,s,i,n,h),style:{fill:r,stroke:"white",strokeWidth:o}})}renderSegments(t){if(0===t.sum)return null;const s=this.circleOrigin,e=t.segments.map(((e,i)=>{if(i!=this.selected)return this.renderSegment(s,this.radius,100*e.input.value/t.sum,100*e.offset/t.sum,this.segmentwidth+this.offset,e.input.color,`${this.offset}`)})).filter((t=>void 0!==t));if(null!=this.selected){const i=t.segments[this.selected];e.push(this.renderSegment(s,this.radius,100*i.input.value/t.sum,100*i.offset/t.sum,this.segmentwidth*this.scale+this.offset,i.input.color,`${this.offset}`))}return e}get self(){return n(this)}};c.style=":host{display:block;position:relative}:host:host([hidden]){display:none !important}.center{display:flex;justify-content:center;align-items:center;position:absolute;transform:translateX(-50%) translateY(-50%)}";export{a as ds_chart_sample,c as ds_donut_chart}