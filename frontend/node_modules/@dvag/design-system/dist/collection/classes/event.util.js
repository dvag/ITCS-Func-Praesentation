/**
 * Diese Funktion extrahiert den Path aus einem Event.
 * Da es in Chrome und Firefox diesbezüglich Unterschiede gibt, wird
 * diese Funktion zur Verfügung gestellt.
 */
export function extractPath(event) {
  return event.path || (event.composedPath && event.composedPath());
}
export function isDigit(event) {
  const c = event.key.charAt(0);
  return c >= "0" && c <= "9";
}
export function isLetter(event) {
  const key = event.key.toLowerCase();
  return (key.length === 1 &&
    ((key >= "a" && key <= "z") || key == "ä" || key == "ö" || key == "ü"));
}
export function isSpace(event) {
  return event.code === "Space";
}
export class TransitionStartHelper {
  /**
   * A class which manages registration and unregistration to the currently JSX unsupported "onTransitionStart" event.
   *
   * @param context: The `this` context which should be used within the handle function.
   * @param handle The events and their corresponding handle functions.
   */
  constructor(context, handle) {
    this.context = context;
    this.handle = handle;
    this.handle = handle === null || handle === void 0 ? void 0 : handle.bind(context);
  }
  on(element) {
    if (this.context == null ||
      this.handle == null ||
      element === this.registeredOnElement) {
      return;
    }
    this.disconnect();
    this.registeredOnElement = element;
    element === null || element === void 0 ? void 0 : element.addEventListener(TRANSITION_START_EVENT_NAME, this.handle);
  }
  disconnect() {
    var _a;
    (_a = this.registeredOnElement) === null || _a === void 0 ? void 0 : _a.removeEventListener(TRANSITION_START_EVENT_NAME, this.handle);
    this.registeredOnElement = null;
  }
}
const TRANSITION_START_EVENT_NAME = "transitionstart";
