import { h, Host } from "@stencil/core";
import { isSlotDefined } from "../../../classes/render-util";
import { findUpperElement } from "../../../classes/misc-util";
import { containsExpandableRows, showStickyContainer } from "../table.util";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * This component holds `dx-table-header-item` components and positions them within a row.
 *
 * @path /Table
 * @name Table Header
 * @shortname Header
 * @icon heading
 * @stable
 */
export class DxTableHeader {
  constructor() {
    this.tableScrollChanged = (e) => {
      this.tableScrollable = e.detail;
    };
    this.showExpandColumn = false;
    this.showSelectionColumn = false;
    this.tableScrollable = false;
    this.mediaQueryAllowsStickyness = false;
    this.expansionChangedHandler = (e) => {
      this.showExpandColumn = e.detail;
    };
    this.selectionChangedHandler = (e) => {
      this.showSelectionColumn = e.detail.enabled;
    };
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => this.updateMediaQueryStickyness(), true);
    this.table = findUpperElement(this.self, "dx-table");
    this.table.addEventListener("expansionChanged", this.expansionChangedHandler);
    this.table.addEventListener("selectionStateChanged", this.selectionChangedHandler);
    this.table.addEventListener("internalScrollChanged", this.tableScrollChanged);
    this.tableScrollable = this.table.internalScrollable;
    this.showSelectionColumn = this.table.selectionenabled;
    this.showExpandColumn = containsExpandableRows(this.table);
    this.updateMediaQueryStickyness();
  }
  disconnectedCallback() {
    this.table.removeEventListener("expansionChanged", this.expansionChangedHandler);
    this.table.removeEventListener("selectionStateChanged", this.selectionChangedHandler);
    this.table.removeEventListener("internalScrollChanged", this.tableScrollChanged);
    this.breakpointAware.disconnect();
  }
  updateMediaQueryStickyness() {
    this.mediaQueryAllowsStickyness = this.breakpointAware.getEffectiveValue({
      mq1: false,
      mq3: true,
    });
  }
  showStickyContainer() {
    return showStickyContainer(this.tableScrollable, this.showExpandColumn, this.showSelectionColumn, this.mediaQueryAllowsStickyness, () => isSlotDefined(this.self, "sticky"));
  }
  render() {
    return (h(Host, { role: "rowgroup" }, h("div", { class: "header-container" }, h("div", { class: "header-row", role: "row" }, h("div", { class: { sticky: true, visible: this.showStickyContainer() } }, h("dx-table-header-item", { class: "expand-column", minwidth: 64, maxwidth: 64, type: "html", label: "" }), h("dx-table-header-item", { class: "selection-column", minwidth: 56, maxwidth: 56, type: "html", label: "" }), this.tableScrollable && this.mediaQueryAllowsStickyness ? (h("slot", { name: "sticky" })) : null), !(this.tableScrollable && this.mediaQueryAllowsStickyness) ? (h("slot", { name: "sticky" })) : null, h("slot", null)))));
  }
  static get is() { return "dx-table-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-table-header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-table-header.css"]
    };
  }
  static get states() {
    return {
      "showExpandColumn": {},
      "showSelectionColumn": {},
      "tableScrollable": {},
      "mediaQueryAllowsStickyness": {}
    };
  }
  static get elementRef() { return "self"; }
}
