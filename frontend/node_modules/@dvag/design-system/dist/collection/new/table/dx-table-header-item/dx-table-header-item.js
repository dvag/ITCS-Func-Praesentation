import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { findUpperElement } from "../../../classes/misc-util";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * @path /Table
 * @name Table Column
 * @shortname Column
 * @stable
 *
 */
export class DxTableHeaderItem {
  constructor() {
    this.tableScrollChanged = (e) => {
      this.tableScrollable = e.detail;
    };
    /**
     * Allows the table to sort this column.
     *
     * @value true: The column is sortable.
     * @value false: The column is not sortable.
     */
    this.sortable = false;
    /**
     * The alignment of the title text and the cell contents within this column.
     * **Warning:** The default alignment which is defined by the `type` property will be overriden.
     *
     * @value left: Child elements are left-aligned.
     * @value right: Child elements right-aligned.
     * @value center: Child elements are centered.
     */
    this.align = null;
    /**
     * Specifies the priority of this column which is considered in the table's secondary sorting.
     *
     * @value number: Priority. The lower this number the higher the chance this column will be considered first
     * in the secondary sorting of the table.
     *
     */
    this.sortpriority = null;
    /**
     * Specifies the number of rows within an column.
     *
     * @value s: Table cells have only 1 text row
     * @value m: Table cells have up to 2 text rows.
     * @value l: Table cell have up to 3 text rows.
     */
    this.linesize = "s";
    /**
     * @internal
     */
    this.usemaxwidth = false;
    /**
     * Whether this column is sticky or not.
     * @value true: The column and the corresponding cells are sticky and cannot be scrolled
     * @value false: The column can be scrolled away.
     */
    this.sticky = false;
    this.sortState = "neutral";
    this.internAlign = null;
    this.tableScrollable = false;
    this.mediaQueryAllowsStickyness = false;
  }
  onSortableChange() {
    if (this.sortable) {
      verifyElementId(this.self);
    }
  }
  onCustomSortChanged() {
    if (this.sortState !== "neutral") {
      this.invokeSort(this.sortState);
    }
  }
  onChangeAlign() {
    this.internAlign = this.getAlignment();
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => this.updateMediaQueryStickyness(), true);
    this.table = findUpperElement(this.self, "dx-table");
    this.table.addEventListener("internalScrollChanged", this.tableScrollChanged);
    this.tableScrollable = this.table.internalScrollable;
    this.updateMediaQueryStickyness();
  }
  disconnectedCallback() {
    this.table.removeEventListener("internalScrollChanged", this.tableScrollChanged);
    this.table = null;
    this.breakpointAware.disconnect();
  }
  componentWillLoad() {
    this.internAlign = this.getAlignment();
    assert(!!(this.label || this.columnid) || !this.sortable, () => "Sortable columns should define 'columnid' or 'label' properties. This is important for the table to differentiate between the columns.", this.self);
    if (this.sortable) {
      verifyElementId(this.self);
    }
  }
  /**
   * @internal
   */
  async setSortDirection(state) {
    this.invokeSort(state);
  }
  /**
   * @internal
   */
  async toColumnSettings() {
    return {
      type: this.type,
      align: this.internAlign,
      lines: this.getCellLines(),
      sizeStyle: this.buildStyle(),
      sticky: this.sticky,
    };
  }
  async getMinWidth() {
    return this.internalGetMinWidth();
  }
  async getMaxWidth() {
    return this.internalGetMaxWidth();
  }
  updateMediaQueryStickyness() {
    this.mediaQueryAllowsStickyness = this.breakpointAware.getEffectiveValue({
      mq1: false,
      mq3: true,
    });
  }
  getCellLines() {
    var _a;
    return {
      s: 1,
      m: 2,
      l: 3,
    }[(_a = this.linesize) !== null && _a !== void 0 ? _a : "s"];
  }
  buildStyle() {
    const minWidth = this.internalGetMinWidth();
    const maxWidth = this.internalGetMaxWidth();
    const style = {
      "max-width": isNaN(maxWidth) ? "100%" : maxWidth + "px",
      "min-width": minWidth + "px",
    };
    if (this.usemaxwidth) {
      const width = this.internalGetMaxWidth();
      style["width"] = width;
      style["flex"] = `0 0 ${width}`;
    }
    return style;
  }
  internalGetMinWidth() {
    return this.minwidth || this.maxwidth || 0;
  }
  internalGetMaxWidth() {
    if (this.isSticky()) {
      return this.internalGetMinWidth();
    }
    if (this.maxwidth != null) {
      return this.maxwidth;
    }
    if (this.usemaxwidth) {
      return this.internalGetMinWidth();
    }
    return NaN;
  }
  getAlignment() {
    var _a;
    return ((_a = this.align) !== null && _a !== void 0 ? _a : (this.type === "currency" || this.type === "numeric" ? "right" : "left"));
  }
  getSortIcon() {
    if (this.sortState === "neutral") {
      return "verteilen-vertik";
    }
    else if (this.sortState === "asc") {
      return "pfeil-hoch";
    }
    else {
      return "pfeil-runter";
    }
  }
  getHeaderCellLines() {
    return this.useMultipleLines() ? 2 : 1;
  }
  useMultipleLines() {
    return /\s|\xAD/.test(this.label); // &shy;
  }
  isSticky() {
    return (this.sticky && this.tableScrollable && this.mediaQueryAllowsStickyness);
  }
  render() {
    const alignClass = {};
    alignClass["align-" + this.internAlign] = true;
    return (h(Host, { slot: this.sticky ? "sticky" : undefined, style: this.buildStyle(), class: alignClass, role: "columnheader" }, h("button", { id: ElementIdGenerator.createId(this.self, "sort-button"), type: "button", disabled: !this.sortable, onClick: () => this.invokeSort(), class: "header" }, h("div", { class: Object.assign({ cell: true }, alignClass) }, h("div", { class: "label-container" }, h("div", { class: {
        label: true,
        "multiple-lines": this.useMultipleLines(),
      }, style: {
        "-webkit-line-clamp": `${this.getHeaderCellLines()}`,
      } }, this.renderLabel(), h("slot", null)), this.renderSortButton())))));
  }
  renderLabel() {
    if (this.label != null) {
      return (h("dx-text", { type: "ps", color: this.sortState !== "neutral" ? "default" : "gray-50" }, this.label));
    }
  }
  renderSortButton() {
    if (this.sortable) {
      return (h("dx-icon", { class: "sort-icon", icon: this.getSortIcon(), color: "default", size: 16 }));
    }
  }
  getNextSortState() {
    if (this.sortState == "neutral") {
      return "asc";
    }
    return this.sortState === "asc" ? "desc" : "asc";
  }
  invokeSort(state = undefined) {
    if (this.sortable) {
      this.sortState = state !== null && state !== void 0 ? state : this.getNextSortState();
      if (this.sortState !== "neutral") {
        const table = this.getParentTable();
        table.invokeSort(this.self, this.sortState === "desc").then();
      }
    }
  }
  getParentTable() {
    return this.self.closest("dx-table");
  }
  static get is() { return "dx-table-header-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-table-header-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-table-header-item.css"]
    };
  }
  static get properties() {
    return {
      "sortable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The column is sortable."
            }, {
              "name": "value",
              "text": "false: The column is not sortable."
            }],
          "text": "Allows the table to sort this column."
        },
        "attribute": "sortable",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The title text."
            }],
          "text": "The title text of this column. This value represents the column identificator if there is no `columnid` specified."
        },
        "attribute": "label",
        "reflect": false
      },
      "columnid": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: An unique identifikation for this column."
            }],
          "text": "This property will be used to distinguish every column in the table. If specified the 'tableStateChanged' event delegates the value of this property. Otherwise the `label` property will be send."
        },
        "attribute": "columnid",
        "reflect": false
      },
      "align": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"left\" | \"right\" | \"center\"",
          "resolved": "\"center\" | \"left\" | \"right\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: Child elements are left-aligned."
            }, {
              "name": "value",
              "text": "right: Child elements right-aligned."
            }, {
              "name": "value",
              "text": "center: Child elements are centered."
            }],
          "text": "The alignment of the title text and the cell contents within this column.\n**Warning:** The default alignment which is defined by the `type` property will be overriden."
        },
        "attribute": "align",
        "reflect": false,
        "defaultValue": "null"
      },
      "sortpriority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Priority. The lower this number the higher the chance this column will be considered first\nin the secondary sorting of the table."
            }],
          "text": "Specifies the priority of this column which is considered in the table's secondary sorting."
        },
        "attribute": "sortpriority",
        "reflect": false,
        "defaultValue": "null"
      },
      "customSort": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(\n    firstCell: HTMLDxTableCellElement,\n    secondCell: HTMLDxTableCellElement\n  ) => number",
          "resolved": "(firstCell: HTMLDxTableCellElement, secondCell: HTMLDxTableCellElement) => number",
          "references": {
            "HTMLDxTableCellElement": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "function: The sort function."
            }],
          "text": "Declare your own sorting function for this column. This enables you to sort your own objects."
        }
      },
      "minwidth": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The minimal width in pixels."
            }],
          "text": "Define the minimal width of the table in pixels."
        },
        "attribute": "minwidth",
        "reflect": false
      },
      "maxwidth": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The maximal width in pixels."
            }],
          "text": "Define the maximum width of the table in pixels."
        },
        "attribute": "maxwidth",
        "reflect": false
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ColumnType",
          "resolved": "\"currency\" | \"date\" | \"html\" | \"numeric\" | \"text\"",
          "references": {
            "ColumnType": {
              "location": "import",
              "path": "../table-common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "text: Renders the provided `value` property of an `<dx-table-cell>` as a left aligned text."
            }, {
              "name": "value",
              "text": "numeric: Renders the provided `number` value of an `<dx-table-cell>` as a right aligned text."
            }, {
              "name": "value",
              "text": "date: Renders the provided string ('YYYY-mm-dd') of an `<dx-table-cell>` as a left aligned text."
            }, {
              "name": "value",
              "text": "currency: Renders the provided `number` of an `<dx-table-cell>` as right aligned text with attached currency icon."
            }, {
              "name": "value",
              "text": "html: Renders the provided html elements."
            }],
          "text": "Defines a type for the whole column."
        },
        "attribute": "type",
        "reflect": false
      },
      "linesize": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"s\" | \"m\" | \"l\"",
          "resolved": "\"l\" | \"m\" | \"s\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: Table cells have only 1 text row"
            }, {
              "name": "value",
              "text": "m: Table cells have up to 2 text rows."
            }, {
              "name": "value",
              "text": "l: Table cell have up to 3 text rows."
            }],
          "text": "Specifies the number of rows within an column."
        },
        "attribute": "linesize",
        "reflect": false,
        "defaultValue": "\"s\""
      },
      "usemaxwidth": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "usemaxwidth",
        "reflect": false,
        "defaultValue": "false"
      },
      "sticky": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The column and the corresponding cells are sticky and cannot be scrolled"
            }, {
              "name": "value",
              "text": "false: The column can be scrolled away."
            }],
          "text": "Whether this column is sticky or not."
        },
        "attribute": "sticky",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "sortState": {},
      "internAlign": {},
      "tableScrollable": {},
      "mediaQueryAllowsStickyness": {}
    };
  }
  static get methods() {
    return {
      "setSortDirection": {
        "complexType": {
          "signature": "(state: SortDirection) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "SortDirection": {
              "location": "import",
              "path": "../table-common-types"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "toColumnSettings": {
        "complexType": {
          "signature": "() => Promise<ColumnSettings>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ColumnSettings": {
              "location": "import",
              "path": "../table-common-types"
            }
          },
          "return": "Promise<ColumnSettings>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "getMinWidth": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "getMaxWidth": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "sortable",
        "methodName": "onSortableChange"
      }, {
        "propName": "customSort",
        "methodName": "onCustomSortChanged"
      }, {
        "propName": "align",
        "methodName": "onChangeAlign"
      }];
  }
}
