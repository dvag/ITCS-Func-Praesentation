import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { isSlotUndefined } from "../../../classes/render-util";
/**
 * Header element for cards.
 *
 * @path /Card
 * @name Card Header
 * @shortname Header
 * @icon heading
 * @stable
 *
 * @slot - Elements within the header. If not explicitly defined all text elements are displayed bold within this header.
 * The slot automatically aligns the content by defining a space between all elements.
 * @slot action - An action slot which can be used to insert a `<dx-checkbox>`, `<dx-toggle>` or any other action into.
 *
 * @slot-example content
 */
export class DxCardHeader {
  constructor() {
    /**
     * If true, the header is clickable and shows a chevron icon on the left side.
     * @internal
     */
    this.collapsable = false;
    /**
     * Whether the header chevron points down or up.
     * @internal
     */
    this.collapsed = false;
  }
  componentDidRender() {
    if (this.collapsable) {
      verifyElementId(this.self);
    }
  }
  renderIcon() {
    if (this.icon == null || this.icon.length === 0) {
      return;
    }
    return (h("dx-icon", { class: "icon", icon: this.icon, size: 24, color: this.iconcolor }));
  }
  renderButtonOverlay() {
    if (!this.collapsable) {
      return;
    }
    return (h("button", { id: ElementIdGenerator.createId(this.self, "-control"), class: "header-button-overlay", onClick: () => this.cardHeaderInteract.emit() }));
  }
  renderChevron() {
    if (!this.collapsable) {
      return;
    }
    return h("dx-chevron", { class: "chevron", directiontop: this.collapsed });
  }
  renderActionSlot() {
    if (isSlotUndefined(this.self, "action")) {
      return;
    }
    return (h("div", { class: "action-container" }, h("slot", { name: "action" })));
  }
  render() {
    var _a;
    return (h(Host, null, h("div", { class: "header" }, h("div", { class: "header-content" }, h("div", { class: "icon-label-container" }, this.renderChevron(), this.renderIcon(), h("dx-text", { type: "ps", class: "label", color: "black" }, (_a = this.label) !== null && _a !== void 0 ? _a : "")), h("div", { class: "slot-container" }, h("slot", null)), this.renderActionSlot(), this.renderButtonOverlay()), h("div", { class: {
        "header-bottom-border": true,
      } }))));
  }
  static get is() { return "dx-card-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-card-header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-card-header.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The label text."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "The label which is displayed on the left side."
        },
        "attribute": "label",
        "reflect": false
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The icon name."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The icon which is displayed left of the label."
        },
        "attribute": "icon",
        "reflect": false
      },
      "iconcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color from the color palette."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The color of the icon. This has only an effect when the `icon` property is defined."
        },
        "attribute": "iconcolor",
        "reflect": false
      },
      "collapsable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "If true, the header is clickable and shows a chevron icon on the left side."
        },
        "attribute": "collapsable",
        "reflect": false,
        "defaultValue": "false"
      },
      "collapsed": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "Whether the header chevron points down or up."
        },
        "attribute": "collapsed",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "cardHeaderInteract",
        "name": "cardHeaderInteract",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "Triggers when clicking on the header."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
