import { h, Host } from "@stencil/core";
import { directChildSelector, SlotObserver, } from "../../../classes/slot-observer";
/**
 * Base card component.
 *
 * @path /
 * @name Card
 * @icon address-card
 * @stable
 * @slot - Elements which are displayed within the card.
 * @slot header - The `<dx-card-header>` element within this card.
 * @slot-example example
 */
export class DxCard {
  constructor() {
    /**
     * Whether the card has a max height of it's parent or it's content.
     * @internal
     */
    this.maxcontent = false;
    this.containsCardImage = false;
    this.containsTabBar = false;
  }
  connectedCallback() {
    this.cardImageSlotObserver = new SlotObserver(this.self, "dx-card-image", (nodes) => {
      this.containsCardImage = nodes.length > 0;
    });
    this.tabBarSlotObserver = new SlotObserver(this.self, directChildSelector("dx-tab-bar"), (nodes) => {
      this.containsTabBar = (nodes === null || nodes === void 0 ? void 0 : nodes.length) > 0;
    });
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.cardImageSlotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.tabBarSlotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  render() {
    return (h(Host, { class: {
        "max-content": this.maxcontent,
        "contains-card-image": this.containsCardImage,
        "contains-tab-bar": this.containsTabBar,
      } }, h("slot", { name: "header" }), h("slot", null)));
  }
  static get is() { return "dx-card"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-card.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-card.css"]
    };
  }
  static get properties() {
    return {
      "maxcontent": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "Whether the card has a max height of it's parent or it's content."
        },
        "attribute": "maxcontent",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "containsCardImage": {},
      "containsTabBar": {}
    };
  }
  static get elementRef() { return "self"; }
}
