import { h, Host, } from "@stencil/core";
import { sleep, unawaited } from "../../../classes/async";
/**
 * A scope tags a set of elements as associated to a certain menu item.
 * The menu item and this scope need to share the same `value` property.
 * For examples see: [Site Navigation](#/component/dx-site-navigation)
 * @name Navigation Scope
 * @shortname Scope
 * @path /Scaffold/Site Navigation
 * @icon map-marked
 * @stable
 */
export class DxSiteNavigationScope {
  connectedCallback() {
    this.menu().then((menu) => unawaited(menu.addScope(this.self)));
  }
  disconnectedCallback() {
    this.menu().then((menu) => unawaited(menu.removeScope(this.self)));
  }
  async menu() {
    var _a, _b;
    // we could not be sure whether menu or scopes are hydrated first
    // so we add some tolerance in finding the "control center" ;-)
    let menu;
    while (!menu) {
      menu = (_b = (_a = this.self) === null || _a === void 0 ? void 0 : _a.closest("dx-site-navigation")) === null || _b === void 0 ? void 0 : _b.querySelector("dx-site-navigation-menu");
      if (!menu) {
        await sleep(PERFECT_AMOUNT_OF_TIME_FOR_A_GOOD_SLEEP);
      }
    }
    return menu;
  }
  render() {
    return (h(Host, null, h("slot", null)));
  }
  static get is() { return "dx-site-navigation-scope"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-site-navigation-scope.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-site-navigation-scope.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: identifier matching the associated menu item"
            }],
          "text": "Unique value to identify this section scope."
        },
        "attribute": "value",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
const PERFECT_AMOUNT_OF_TIME_FOR_A_GOOD_SLEEP = 100;
