import { h, Host, } from "@stencil/core";
import { ColorPalette } from "../../../classes/color-palette";
import { assert } from "../../../classes/assert";
import { ADD_BULLET_TO_TEXT_CSS_CLASS_NAME } from "../../../classes/constants";
/**
 * Displays text content in different text styles.
 * @path /Basics
 * @name Text
 * @icon font
 * @stable
 * @slot - Contains just plain text nodes. It may not have further HTML elements.
 */
export class DxText {
  constructor() {
    this.textStyle = TextStyle.INHERIT;
    /**
     * Specifies the style of the text.
     *
     * If the `type` attribute isn't set, a default style will be set, that is based on the
     * parent components.
     *
     * @value auto: The style is determined automatically based on the position the `<dx-text>` in the element tree.
     *
     * @value Headline-1: Shortcut is `h1`
     * @value Headline-2: Shortcut is `h2`
     * @value Headline-3: Shortcut is `h3`
     * @value Headline-4: Shortcut is `h4`
     * @value Headline-5: Shortcut is `h5`
     *
     * @value Paragraph-Big: Shortcut is `pb`
     * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
     * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
     * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
     *
     * @value Paragraph-Standard: Shortcut is `ps`
     * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
     * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
     * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
     *
     * @value Infotext-Standard: Shortcut is `it`
     * @value Infotext-Standard-Italic: Shortcut is `it-italic`
     * @value Infotext-Standard-Bold: Shortcut is `it-bold`
     * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
     *
     * @value Infotext-Small: Shortcut is `its`
     * @value Infotext-Small-Italic: Shortcut is `its-italic`
     * @value Infotext-Small-Bold: Shortcut is `its-bold`
     * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
     *
     * @important
     * @example text-styles
     * @example text-styles-shortcuts
     */
    this.type = "auto";
  }
  typeChanged() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  componentWillLoad() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  disconnectedCallback() {
    this.self.classList.remove(ADD_BULLET_TO_TEXT_CSS_CLASS_NAME); // placed by parent dx-text-list
  }
  computeTextStyleBasedOnTypeProperty() {
    var _a, _b;
    this.textStyle = TextStyle.INHERIT;
    let matchedStyle;
    // Use type property
    if (((_a = this.type) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      matchedStyle = TEXT_STYLE_MAPPING.find((style) => style.names.some((styleName) => this.type.toLowerCase() === styleName.toLowerCase()));
    }
    assert(matchedStyle != null, () => `<dx-text> type has an invalid value: ${this.type}.\n\nPossible values are: ${TEXT_STYLE_MAPPING.map((s) => `\n- ${s.names
      .map((n) => `"${n}"` +
      " (deprecated)".repeat(s.deprecated.includes(n) ? 1 : 0))
      .join(", ")}`)
      .join("")
      .toLowerCase()}\n\n Wird kein type angegeben, wird der Text-Stil automatisch ermittelt.`);
    assert(!((_b = matchedStyle === null || matchedStyle === void 0 ? void 0 : matchedStyle.deprecated) === null || _b === void 0 ? void 0 : _b.includes(this.type)), () => `Found deprecated type ${this.type}! Please use ${matchedStyle.names
      .filter((name) => !matchedStyle.deprecated.includes(name))
      .join(" or ")} instead.`);
    if (matchedStyle != null) {
      this.textStyle = matchedStyle.textStyle;
    }
  }
  getStyleClasses() {
    const currentStyle = this.textStyle.toLowerCase().replace(/_/g, "-");
    const isBold = currentStyle.includes("bold");
    const isItalic = currentStyle.includes("italic");
    // Remove secondary formatting styles from string
    const primaryStyle = currentStyle.replace(/(-?(bold|italic)-?)/g, "");
    const classes = {};
    classes[`style-${primaryStyle}`] = true;
    classes["bold"] = isBold && !isItalic;
    classes["italic"] = isItalic && !isBold;
    classes["bold-italic"] = isBold && isItalic;
    return classes;
  }
  render() {
    const styleClasses = this.getStyleClasses();
    return (h(Host, { class: Object.assign({}, styleClasses), style: generateStyleMap(this.color) }, h("slot", null)));
  }
  static get is() { return "dx-text"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-text.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-text.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "auto: The style is determined automatically based on the position the `<dx-text>` in the element tree."
            }, {
              "name": "value",
              "text": "Headline-1: Shortcut is `h1`"
            }, {
              "name": "value",
              "text": "Headline-2: Shortcut is `h2`"
            }, {
              "name": "value",
              "text": "Headline-3: Shortcut is `h3`"
            }, {
              "name": "value",
              "text": "Headline-4: Shortcut is `h4`"
            }, {
              "name": "value",
              "text": "Headline-5: Shortcut is `h5`"
            }, {
              "name": "value",
              "text": "Paragraph-Big: Shortcut is `pb`"
            }, {
              "name": "value",
              "text": "Paragraph-Big-Italic: Shortcut is `pb-italic`"
            }, {
              "name": "value",
              "text": "Paragraph-Big-Bold: Shortcut is `pb-bold`"
            }, {
              "name": "value",
              "text": "Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`"
            }, {
              "name": "value",
              "text": "Paragraph-Standard: Shortcut is `ps`"
            }, {
              "name": "value",
              "text": "Paragraph-Standard-Italic: Shortcut is `ps-italic`"
            }, {
              "name": "value",
              "text": "Paragraph-Standard-Bold: Shortcut is `ps-bold`"
            }, {
              "name": "value",
              "text": "Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`"
            }, {
              "name": "value",
              "text": "Infotext-Standard: Shortcut is `it`"
            }, {
              "name": "value",
              "text": "Infotext-Standard-Italic: Shortcut is `it-italic`"
            }, {
              "name": "value",
              "text": "Infotext-Standard-Bold: Shortcut is `it-bold`"
            }, {
              "name": "value",
              "text": "Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`"
            }, {
              "name": "value",
              "text": "Infotext-Small: Shortcut is `its`"
            }, {
              "name": "value",
              "text": "Infotext-Small-Italic: Shortcut is `its-italic`"
            }, {
              "name": "value",
              "text": "Infotext-Small-Bold: Shortcut is `its-bold`"
            }, {
              "name": "value",
              "text": "Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`"
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "text-styles"
            }, {
              "name": "example",
              "text": "text-styles-shortcuts"
            }],
          "text": "Specifies the style of the text.\n\nIf the `type` attribute isn't set, a default style will be set, that is based on the\nparent components."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color (see example for references)"
            }, {
              "name": "example",
              "text": "colors"
            }],
          "text": "Defines the text color."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "textStyle": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "type",
        "methodName": "typeChanged"
      }];
  }
}
function generateStyleMap(color) {
  if ((color === null || color === void 0 ? void 0 : color.length) > 0) {
    const hexColor = new ColorPalette(true).getColorCode(color);
    return { color: hexColor, "--dx-text-color": hexColor };
  }
  return {};
}
var TextStyle;
(function (TextStyle) {
  TextStyle["INHERIT"] = "INHERIT";
  TextStyle["HEADLINE_1"] = "HEADLINE_1";
  TextStyle["HEADLINE_2"] = "HEADLINE_2";
  TextStyle["HEADLINE_3"] = "HEADLINE_3";
  TextStyle["HEADLINE_4"] = "HEADLINE_4";
  TextStyle["HEADLINE_5"] = "HEADLINE_5";
  TextStyle["PARAGRAPH_STANDARD"] = "PARAGRAPH_STANDARD";
  TextStyle["PARAGRAPH_STANDARD_BOLD"] = "PARAGRAPH_STANDARD_BOLD";
  TextStyle["PARAGRAPH_STANDARD_ITALIC"] = "PARAGRAPH_STANDARD_ITALIC";
  TextStyle["PARAGRAPH_STANDARD_BOLD_ITALIC"] = "PARAGRAPH_STANDARD_BOLD_ITALIC";
  TextStyle["PARAGRAPH_BIG"] = "PARAGRAPH_BIG";
  TextStyle["PARAGRAPH_BIG_BOLD"] = "PARAGRAPH_BIG_BOLD";
  TextStyle["PARAGRAPH_BIG_ITALIC"] = "PARAGRAPH_BIG_ITALIC";
  TextStyle["PARAGRAPH_BIG_BOLD_ITALIC"] = "PARAGRAPH_BIG_BOLD_ITALIC";
  TextStyle["INFOTEXT_STANDARD"] = "INFOTEXT_STANDARD";
  TextStyle["INFOTEXT_STANDARD_BOLD"] = "INFOTEXT_STANDARD_BOLD";
  TextStyle["INFOTEXT_STANDARD_ITALIC"] = "INFOTEXT_STANDARD_ITALIC";
  TextStyle["INFOTEXT_STANDARD_BOLD_ITALIC"] = "INFOTEXT_STANDARD_BOLD_ITALIC";
  TextStyle["INFOTEXT_SMALL"] = "INFOTEXT_SMALL";
  TextStyle["INFOTEXT_SMALL_BOLD"] = "INFOTEXT_SMALL_BOLD";
  TextStyle["INFOTEXT_SMALL_ITALIC"] = "INFOTEXT_SMALL_ITALIC";
  TextStyle["INFOTEXT_SMALL_BOLD_ITALIC"] = "INFOTEXT_SMALL_BOLD_ITALIC";
})(TextStyle || (TextStyle = {}));
/**
 * @value Headline-1: Shortcut is `h1`
 * @value Headline-2: Shortcut is `h2`
 * @value Headline-3: Shortcut is `h3`
 * @value Headline-4: Shortcut is `h4`
 * @value Headline-5: Shortcut is `h5`
 *
 * @value Paragraph-Big: Shortcut is `pb`
 * @value Paragraph-Big-Italic: Shortcut is `pb-italic`
 * @value Paragraph-Big-Bold: Shortcut is `pb-bold`
 * @value Paragraph-Big-Bold-Italic: Shortcut is `pb-bold-italic`
 *
 * @value Paragraph-Standard: Shortcut is `ps`
 * @value Paragraph-Standard-Italic: Shortcut is `ps-italic`
 * @value Paragraph-Standard-Bold: Shortcut is `ps-bold`
 * @value Paragraph-Standard-Bold-Italic: Shortcut is `ps-bold-italic`
 *
 * @value Infotext-Standard: Shortcut is `it`
 * @value Infotext-Standard-Italic: Shortcut is `it-italic`
 * @value Infotext-Standard-Bold: Shortcut is `it-bold`
 * @value Infotext-Standard-Bold-Italic: Shortcut is `it-bold-italic`
 *
 * @value Infotext-Small: Shortcut is `its`
 * @value Infotext-Small-Italic: Shortcut is `its-italic`
 * @value Infotext-Small-Bold: Shortcut is `its-bold`
 * @value Infotext-Small-Bold-Italic: Shortcut is `its-bold-italic`
 */
const TEXT_STYLE_MAPPING = [
  {
    names: ["auto"],
    deprecated: [],
    textStyle: TextStyle.INHERIT,
  },
  {
    names: ["Paragraph-Standard", "ps"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD,
  },
  {
    names: ["Paragraph-Standard-Bold", "ps-bold"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_BOLD,
  },
  {
    names: ["Paragraph-Standard-Italic", "ps-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_ITALIC,
  },
  {
    names: ["Paragraph-Standard-Bold-Italic", "ps-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_STANDARD_BOLD_ITALIC,
  },
  {
    names: ["Paragraph-Big", "pb"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG,
  },
  {
    names: ["Paragraph-Big-Bold", "pb-bold"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_BOLD,
  },
  {
    names: ["Paragraph-Big-Italic", "pb-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_ITALIC,
  },
  {
    names: ["Paragraph-Big-Bold-Italic", "pb-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.PARAGRAPH_BIG_BOLD_ITALIC,
  },
  {
    names: ["Headline-1", "h1"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_1,
  },
  {
    names: ["Headline-2", "h2"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_2,
  },
  {
    names: ["Headline-3", "h3"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_3,
  },
  {
    names: ["Headline-4", "h4"],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_4,
  },
  {
    names: [
      "Headline-5",
      "h5",
    ],
    deprecated: [],
    textStyle: TextStyle.HEADLINE_5,
  },
  {
    names: ["Infotext-Standard", "it"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD,
  },
  {
    names: ["Infotext-Standard-Bold", "it-bold"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_BOLD,
  },
  {
    names: ["Infotext-Standard-Italic", "it-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_ITALIC,
  },
  {
    names: ["Infotext-Standard-Bold-Italic", "it-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_STANDARD_BOLD_ITALIC,
  },
  {
    names: ["Infotext-Small", "its"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL,
  },
  {
    names: ["Infotext-Small-Bold", "its-bold"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_BOLD,
  },
  {
    names: ["Infotext-Small-Italic", "its-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_ITALIC,
  },
  {
    names: ["Infotext-Small-Bold-Italic", "its-bold-italic"],
    deprecated: [],
    textStyle: TextStyle.INFOTEXT_SMALL_BOLD_ITALIC,
  },
];
