import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ColorPalette } from "../../../classes/color-palette";
/**
 * Displays an icon of the DVAG icon collection.
 *
 * @path /Basics
 * @name Icon
 * @icon icons
 * @stable
 */
export class DxIcon {
  constructor() {
    /**
     * Icon subject
     * @value string: Name of the icon.
     * @example all-icons
     */
    this.icon = "placeholder";
  }
  onIconChanged() {
    this.icon = this.icon || "placeholder";
  }
  componentDidRender() {
    let size = this.size != null ? this.size : this.getSizeFromCssVariables();
    const possibleSizes = [16, 24, 32, 48, 64, 72];
    assert(possibleSizes.includes(size), () => {
      const message = `Invalid size: ${size}!\nPossible sizes ${possibleSizes.join(", ")}`;
      size = 0;
      return message;
    }, this.self);
  }
  getSizeFromCssVariables() {
    const inheritedSize = getComputedStyle(this.self).getPropertyValue("--dx-icon-attr-size");
    if (inheritedSize != null) {
      const size = parseInt(inheritedSize.trim());
      if (!isNaN(size)) {
        return size;
      }
    }
    return null;
  }
  renderExternalIcon(size) {
    return (h("object", { data: this.icon, type: "image/svg+xml", width: this.size, height: this.size }, h("dx-icon-placeholder", { size: size })));
  }
  renderIcon(size) {
    const pathEndsWithDotSVGRegEx = /.*.svg/;
    if (pathEndsWithDotSVGRegEx.test(this.icon)) {
      return this.renderExternalIcon(size);
    }
    const IconTag = `dx-icon-${this.icon.replace(/-/g, "")}`;
    return h(IconTag, null);
  }
  render() {
    assert(this.icon != null, () => "The property 'icon' has to be defined.");
    return (h(Host, { style: generateStyleMap(this.size, this.color) }, this.renderIcon(this.size)));
  }
  static get is() { return "dx-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-icon.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-icon.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the icon."
            }, {
              "name": "example",
              "text": "all-icons"
            }],
          "text": "Icon subject"
        },
        "attribute": "icon",
        "reflect": false,
        "defaultValue": "\"placeholder\""
      },
      "size": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "16: Icon optimized for 16x16"
            }, {
              "name": "value",
              "text": "24: Icon optimized for 24x24"
            }, {
              "name": "value",
              "text": "32: Icon optimized for 32x32"
            }, {
              "name": "value",
              "text": "48: Icon optimized for 48x48"
            }, {
              "name": "value",
              "text": "64: Icon optimized for 64x64"
            }, {
              "name": "value",
              "text": "72: Icon optimized for 72x72"
            }, {
              "name": "example",
              "text": "sizes"
            }],
          "text": "Defines the size of the icon. Most icons are available in different sizes and with different line widths.\n\nIf a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases."
        },
        "attribute": "size",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color (see example for references)"
            }, {
              "name": "example",
              "text": "colors"
            }],
          "text": "Overrides the color of an icon. By default a `grey` (`icons`) color is used."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "icon",
        "methodName": "onIconChanged"
      }];
  }
}
function generateStyleMap(size, color) {
  const map = {};
  if (size != null && !isNaN(size)) {
    map["--dx-icon-attr-size"] = `${size}px`;
  }
  if (color) {
    map["--dx-icon-color"] = new ColorPalette(true).getColorCode(color);
  }
  return map;
}
