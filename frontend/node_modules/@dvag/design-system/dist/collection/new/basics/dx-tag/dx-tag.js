import { h, } from "@stencil/core";
import { assertPropertyNotEmpty } from "../../../classes/assert";
import { ColorPalette } from "../../../classes/color-palette";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
/**
 * Displays a small tag / chip.
 * A tag can be a static text display or an interactive element.
 * @path /Form/Other
 * @name Tag
 * @new
 * @icon tag
 * @stable
 */
export class DxTag {
  constructor() {
    /**
     * Defines the type of tag.
     * @value static: Tag is not interactable by the user. The tag only shows its given label.
     * @value interactive: Tag is interactable by the user.
     */
    this.type = "static";
    /**
     * Defines if the interactive tag displays a remove button.
     * Only works in comination with the `type` property set to `interactive` and the tag is not `selectable`.
     * @value true: tag shows button.
     * @value false: tag does not show button.
     * @example remove-event
     */
    this.removeable = false;
    /**
     * Defines whether the tag is selectable or not.
     * @value true: tag is selectable .
     * @value false: tag is not selectable.
     * @example select-event
     */
    this.selectable = false;
    /**
     * Defines if the tag is selected.
     * When the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired.
     * @value true: tag is selected.
     * @value false: tag is not selected.
     */
    this.selected = false;
  }
  controlSelectedStatus() {
    if (!this.selectable) {
      this.selected = false;
    }
  }
  connectedCallback() {
    if (this.type === "static" &&
      this.theme == null &&
      this.color == null &&
      this.textcolor == null) {
      assertPropertyNotEmpty("dx-tag", "theme", this.theme, "Please specify a theme or use the textcolor and color attribute of this element");
    }
    this.controlSelectedStatus();
  }
  removeButtonClicked(e) {
    e.stopImmediatePropagation();
    this.remove.emit();
  }
  toggleSelected() {
    if (!this.selectable || this.removeable) {
      return;
    }
    this.selected = !this.selected;
    this.selectChange.emit(this.selected);
  }
  render() {
    if (this.type === "static") {
      return this.renderStatic();
    }
    else {
      return this.renderInteractive();
    }
  }
  renderCloseButton() {
    if (!this.removeable) {
      return;
    }
    return (h("button", { onClick: (e) => {
        this.removeButtonClicked(e);
      }, class: "close-button" }, h("dx-icon", { icon: "schliessen", size: 16, color: "default" }), h("div", { class: "extended-click-area" })));
  }
  renderLabel() {
    const textType = this.theme === "gold" || this.selected ? "it-bold" : "it";
    const dataLabelContent = this.selectable ? this.label : null;
    return (h("dx-text", { class: { label: this.selectable }, "data-label": dataLabelContent, type: textType }, this.label));
  }
  renderInteractive() {
    return (h("button", { onClick: () => this.toggleSelected(), id: ElementIdGenerator.createId(this.self, "control"), class: {
        interactive: true,
        removeable: this.removeable,
        selected: this.selected,
      } }, this.renderLabel(), this.renderCloseButton()));
  }
  renderStatic() {
    const colorPalette = new ColorPalette(true);
    const backgroundHexColor = this.color
      ? colorPalette.getColorCode(this.color)
      : null;
    const textHexColor = this.textcolor
      ? colorPalette.getColorCode(this.textcolor)
      : null;
    return (h("div", { class: {
        static: true,
        "gray-theme": this.theme === "gray",
        "gold-theme": this.theme === "gold",
        "green-theme": this.theme === "green",
        "red-theme": this.theme === "red",
        "orange-theme": this.theme === "orange",
        "purple-theme": this.theme === "purple",
        "turquoise-theme": this.theme === "turquoise",
      }, style: {
        "background-color": backgroundHexColor,
        "--dx-text-color": textHexColor,
      } }, this.renderLabel()));
  }
  static get is() { return "dx-tag"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-tag.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-tag.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"static\" | \"interactive\"",
          "resolved": "\"interactive\" | \"static\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "static: Tag is not interactable by the user. The tag only shows its given label."
            }, {
              "name": "value",
              "text": "interactive: Tag is interactable by the user."
            }],
          "text": "Defines the type of tag."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"static\""
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "TagThemeChoices",
          "resolved": "\"gold\" | \"gray\" | \"green\" | \"orange\" | \"purple\" | \"red\" | \"turquoise\"",
          "references": {
            "TagThemeChoices": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "gray: Gray theme"
            }, {
              "name": "value",
              "text": "gold: Gold theme"
            }, {
              "name": "value",
              "text": "green: Green theme"
            }, {
              "name": "value",
              "text": "red: Red theme"
            }, {
              "name": "value",
              "text": "orange: Orange theme"
            }, {
              "name": "value",
              "text": "purple: Purple theme"
            }, {
              "name": "value",
              "text": "turquoise: Turquoise theme"
            }, {
              "name": "example",
              "text": "themes"
            }, {
              "name": "important",
              "text": undefined
            }],
          "text": "Defines the theme for this tag. The theme tag only works in combination with `static` tag type."
        },
        "attribute": "theme",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A color from the color palette"
            }, {
              "name": "example",
              "text": "custom-colors"
            }],
          "text": "Colors the background in the given color from the color palette.\nOnly works for the `static` tag type."
        },
        "attribute": "color",
        "reflect": false
      },
      "textcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A color from the color palette"
            }, {
              "name": "example",
              "text": "custom-colors"
            }],
          "text": "Colors the tag text in the given color from the color palette.\nOnly works for the `static` tag type."
        },
        "attribute": "textcolor",
        "reflect": false
      },
      "removeable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: tag shows button."
            }, {
              "name": "value",
              "text": "false: tag does not show button."
            }, {
              "name": "example",
              "text": "remove-event"
            }],
          "text": "Defines if the interactive tag displays a remove button.\nOnly works in comination with the `type` property set to `interactive` and the tag is not `selectable`."
        },
        "attribute": "removeable",
        "reflect": false,
        "defaultValue": "false"
      },
      "selectable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: tag is selectable ."
            }, {
              "name": "value",
              "text": "false: tag is not selectable."
            }, {
              "name": "example",
              "text": "select-event"
            }],
          "text": "Defines whether the tag is selectable or not."
        },
        "attribute": "selectable",
        "reflect": false,
        "defaultValue": "false"
      },
      "selected": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: tag is selected."
            }, {
              "name": "value",
              "text": "false: tag is not selected."
            }],
          "text": "Defines if the tag is selected.\nWhen the user clicks on the selectable tag, the tag changes its appearance and the `selectChange` event is fired."
        },
        "attribute": "selected",
        "reflect": true,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A text to display."
            }],
          "text": "Displays the given value"
        },
        "attribute": "label",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "remove",
        "name": "remove",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "remove-event"
            }],
          "text": "Is fired when the user interacts with the remove button."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "selectChange",
        "name": "selectChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "select-event"
            }],
          "text": "Is fired when the user interacts with a selectable tag."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "selected",
        "methodName": "controlSelectedStatus"
      }];
  }
}
