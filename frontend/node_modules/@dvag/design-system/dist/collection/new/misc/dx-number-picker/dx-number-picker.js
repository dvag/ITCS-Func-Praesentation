import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
/**
 * A helper component which provides multiple numbers to pick from.
 *
 * @name Number-Picker
 * @path /Miscellaneous
 * @icon crosshairs
 * @stable
 */
export class DxNumberPicker {
  constructor() {
    /**
     * Defines whether the numbers are displayed from left to right, right to left or centered.
     *
     * @value left: The numbers will be displayed from left to right.
     * @value right: The numbers will be displayed from right to left.
     * @value center: The numbers will are centered.
     */
    this.align = "left";
  }
  onValueChange() {
    var _a;
    this.setValue((_a = this.value) !== null && _a !== void 0 ? _a : this.getValuesArray()[0]);
  }
  componentWillRender() {
    verifyElementId(this.self);
    const valuesArray = this.getValuesArray();
    if (!valuesArray.includes(this.value)) {
      this.setValue(valuesArray[0]);
    }
  }
  setValue(newValue) {
    if (newValue !== this.value) {
      this.value = newValue;
      this.valueChange.emit(this.value);
    }
  }
  getValuesArray() {
    const valuesArray = Array.isArray(this.values)
      ? this.values
      : JSON.parse(this.values);
    const isValidNumberArray = Array.isArray(valuesArray) &&
      valuesArray.every((value) => !isNaN(+value));
    assert(isValidNumberArray, () => {
      return "Found error parsing 'values' property.";
    }, this.self);
    return valuesArray;
  }
  renderValues() {
    const valuesArray = this.getValuesArray();
    return valuesArray.map((value) => {
      const active = this.value === value;
      return (h("button", { id: ElementIdGenerator.createId(this.self, `${value}-control`), class: { button: true, active: active }, onClick: () => this.setValue(value), disabled: active }, h("dx-text", null, value)));
    });
  }
  render() {
    return (h(Host, { class: {
        "align-left": this.align === "left",
        "align-right": this.align === "right",
        "align-center": this.align === "center",
      } }, this.renderValues()));
  }
  static get is() { return "dx-number-picker"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-number-picker.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-number-picker.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": ": One of the numbers provided in the `values` array."
            }],
          "text": "The current selected value. It has to be within the provided `values` array."
        },
        "attribute": "value",
        "reflect": false
      },
      "align": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"left\" | \"right\" | \"center\"",
          "resolved": "\"center\" | \"left\" | \"right\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: The numbers will be displayed from left to right."
            }, {
              "name": "value",
              "text": "right: The numbers will be displayed from right to left."
            }, {
              "name": "value",
              "text": "center: The numbers will are centered."
            }],
          "text": "Defines whether the numbers are displayed from left to right, right to left or centered."
        },
        "attribute": "align",
        "reflect": false,
        "defaultValue": "\"left\""
      },
      "values": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ArrayStringOrArray",
          "resolved": "number[] | string",
          "references": {
            "ArrayStringOrArray": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "ArrayString: Comma separated List of values in JSON-format e.g.: \"[5,10,25]\""
            }, {
              "name": "value",
              "text": "number[]: Array of numbers."
            }],
          "text": "The possible values to pick from."
        },
        "attribute": "values",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
