import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * A component which changes the value of it's parent component for a specific breakpoint change.
 *
 * @path /Miscellaneous
 * @name Media-Query-Value
 * @shortname MQ-Value
 * @icon dice-d20
 * @stable
 */
export class DxMediaQueryValue {
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => this.updateParentValue(), true);
    this.updateParentValue();
  }
  disconnectedCallback() {
    this.breakpointAware.disconnect();
  }
  componentShouldUpdate() {
    this.updateParentValue();
  }
  updateParentValue() {
    var _a;
    (_a = this.self.parentElement) === null || _a === void 0 ? void 0 : _a.setAttribute(this.property, this.breakpointAware.getEffectiveValue({
      mq1: this.mq1,
      mq2: this.mq2,
      mq3: this.mq3,
      mq4: this.mq4,
      mq5: this.mq5,
    }));
  }
  static get is() { return "dx-media-query-value"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "mq1": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "any: Any value the property can be overriden with."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The value of the property when the current breakpoint is MQ1."
        },
        "attribute": "mq1",
        "reflect": false
      },
      "mq2": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "any: Any value the property can be overriden with."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The value of the property when the current breakpoint is MQ2."
        },
        "attribute": "mq2",
        "reflect": false
      },
      "mq3": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "any: Any value the property can be overriden with."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The value of the property when the current breakpoint is MQ3."
        },
        "attribute": "mq3",
        "reflect": false
      },
      "mq4": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "any: Any value the property can be overriden with."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The value of the property when the current breakpoint is MQ4."
        },
        "attribute": "mq4",
        "reflect": false
      },
      "mq5": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "any: Any value the property can be overriden with."
            }],
          "text": "The value of the property when the current breakpoint is MQ5."
        },
        "attribute": "mq5",
        "reflect": false
      },
      "property": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the parent property."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The name of the property which should be changed."
        },
        "attribute": "property",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
