import { h, Host, } from "@stencil/core";
import { assert, assertPropertyValue } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { BaselineElement } from "../../functional/base-elements";
import { isSlotDefined } from "../../../classes/render-util";
/**
 * Displays a primary or secondary button.
 *
 * @path /Buttons
 * @name Button
 * @icon minus-square
 * @stable
 */
export class DxButton {
  constructor() {
    /**
     * Specifies whether the icon is positioned left or right of the text as long a text is defined.
     *
     * @value left: The icon is displayed left of the text.
     * @value right: The icon is displayed right of the text.
     * @example icon
     */
    this.iconposition = "left";
    /**
     * Modifies the button width behavior
     * @value false: Button width is determined by the button content
     * @value true: Button width is stretched to match the width of the host element.
     */
    this.stretch = false;
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Shows a loading spinner within the button.
     * The spinner location can be controlled with the `iconposition` property.
     * @value true: Loading spinner is visible.
     * @value false: Loading spinner is not visible.
     * @example loading-spinner
     */
    this.loading = false;
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     * @example unfocusable
     */
    this.unfocusable = false;
    /**
     * The theme of the button defines the look and feel of the button, which is dependent in which context the button is used.
     * @value default: The default button can be placed anywhere and is the main usage of a button.
     * @value on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background.
     * @value destructive: A button which implies a destructive action. (e.g deleting an item from a list)
     *
     * @example theme
     */
    this.theme = "default";
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  getStyleClasses() {
    var _a;
    const type = this.type.replace(/-[sml]/g, "");
    const classes = {};
    classes[`type-${type}`] = true;
    const size = (_a = this.type.split("-")) === null || _a === void 0 ? void 0 : _a[1];
    if (size != null) {
      classes[`size-${size}`] = true;
    }
    else if (this.type === "text") {
      classes["size-s"] = true;
    }
    classes[this.theme] = true;
    return classes;
  }
  getLoadingSpinnerTheme() {
    const useDefaultTheme = this.theme === "default";
    if (this.type.startsWith("primary")) {
      return useDefaultTheme ? "dark" : "light";
    }
    // Inverse when not using primary type
    return useDefaultTheme ? "light" : "dark";
  }
  render() {
    var _a, _b;
    assertPropertyValue("dx-button", "type", this.type, [
      "primary-s",
      "primary-m",
      "primary-l",
      "secondary-s",
      "secondary-m",
      "secondary-l",
      "text",
    ]);
    assert(!(this.theme === "destructive" && this.type.startsWith("secondary")), () => "The 'destructive' theme is not compatible with the 'secondary' type. Please use a primary or text type instead.", this.self);
    return (h(Host, { class: Object.assign(Object.assign({}, this.getStyleClasses()), { disabled: this.disabled, unfocusable: this.unfocusable, stretch: this.stretch }) }, h("button", { type: "button", class: {
        "icon-right": this.iconposition === "right",
        "has-text": ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0,
      }, ref: (el) => (this.buttonElement = el), id: ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabIndex: this.unfocusable ? -1 : 0 }, h(BaselineElement, null), this.renderIconContainer(), ((_b = this.label) === null || _b === void 0 ? void 0 : _b.length) > 0 ? h("dx-text", null, this.label) : null)));
  }
  renderInnerIcon() {
    if (this.loading) {
      const theme = this.getLoadingSpinnerTheme();
      return h("dx-spinner", { class: "loading-spinner", size: "medium", theme: theme });
    }
    const icon = this.theme === "destructive" ? "muell" : this.icon;
    if ((icon === null || icon === void 0 ? void 0 : icon.length) > 0) {
      return h("dx-icon", { icon: icon, size: 24 });
    }
    // "icon" slot only for internal usage
    if (isSlotDefined(this.self, "icon")) {
      return h("slot", { name: "icon" });
    }
    return null;
  }
  renderIconContainer() {
    const innerIcon = this.renderInnerIcon();
    if (innerIcon == null) {
      return;
    }
    return h("div", { class: "icon-container" }, innerIcon);
  }
  static get is() { return "dx-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-button.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonType",
          "resolved": "\"primary-l\" | \"primary-m\" | \"primary-s\" | \"secondary-l\" | \"secondary-m\" | \"secondary-s\" | \"text\"",
          "references": {
            "ButtonType": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "primary-s: Small flat colored button to indicate an important action."
            }, {
              "name": "value",
              "text": "primary-m: Medium sized flat colored button to indicate an important action."
            }, {
              "name": "value",
              "text": "primary-l: Large flat colored button to indicate an important action."
            }, {
              "name": "value",
              "text": "secondary-s: Small outlined transparent button for less important actions."
            }, {
              "name": "value",
              "text": "secondary-m: Medium sized outlined transparent button for less important actions."
            }, {
              "name": "value",
              "text": "secondary-l: Large outlined transparent button for less important actions."
            }, {
              "name": "value",
              "text": "text: Small button with no default background color."
            }, {
              "name": "example",
              "text": "type"
            }],
          "text": "Defines the visual representation of the button."
        },
        "attribute": "type",
        "reflect": false
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A valid icon name."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "Specifies the icon which will be shown beside the text."
        },
        "attribute": "icon",
        "reflect": false
      },
      "iconposition": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HorizontalDirection",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "HorizontalDirection": {
              "location": "import",
              "path": "../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: The icon is displayed left of the text."
            }, {
              "name": "value",
              "text": "right: The icon is displayed right of the text."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "Specifies whether the icon is positioned left or right of the text as long a text is defined."
        },
        "attribute": "iconposition",
        "reflect": false,
        "defaultValue": "\"left\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The text."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "The text which is displayed within the button."
        },
        "attribute": "label",
        "reflect": false
      },
      "stretch": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Button width is determined by the button content"
            }, {
              "name": "value",
              "text": "true: Button width is stretched to match the width of the host element."
            }],
          "text": "Modifies the button width behavior"
        },
        "attribute": "stretch",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: User can interaction with the button."
            }, {
              "name": "value",
              "text": "true: User can not interaction with the button."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Disables user interaction on the button."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "loading": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Loading spinner is visible."
            }, {
              "name": "value",
              "text": "false: Loading spinner is not visible."
            }, {
              "name": "example",
              "text": "loading-spinner"
            }],
          "text": "Shows a loading spinner within the button.\nThe spinner location can be controlled with the `iconposition` property."
        },
        "attribute": "loading",
        "reflect": false,
        "defaultValue": "false"
      },
      "unfocusable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Button is reachable via tab navigation."
            }, {
              "name": "value",
              "text": "true: Button is ignored when using tab navigation."
            }, {
              "name": "example",
              "text": "unfocusable"
            }],
          "text": "Disables the ability to focus the button via tabulator navigation."
        },
        "attribute": "unfocusable",
        "reflect": false,
        "defaultValue": "false"
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonTheme",
          "resolved": "\"default\" | \"destructive\" | \"on-gold\"",
          "references": {
            "ButtonTheme": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "default: The default button can be placed anywhere and is the main usage of a button."
            }, {
              "name": "value",
              "text": "on-gold: This variant displays the primary, secondary and text buttons in a white color so that it can be placed on gold background."
            }, {
              "name": "value",
              "text": "destructive: A button which implies a destructive action. (e.g deleting an item from a list)"
            }, {
              "name": "example",
              "text": "theme"
            }],
          "text": "The theme of the button defines the look and feel of the button, which is dependent in which context the button is used."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"default\""
      }
    };
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focuses this element.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
