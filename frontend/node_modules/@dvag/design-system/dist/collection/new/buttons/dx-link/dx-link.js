import { h } from "@stencil/core";
/**
 * Link element which can be placed within a text.
 * It can be used to redirect to another page or to trigger an action within the current page itself.
 *
 * @path /Buttons
 * @name Link
 * @icon link
 * @stable
 * @slot - An element or text which serves as a link or button.
 */
export class DxLink {
  render() {
    return (h("a", { href: this.url, target: this.target, rel: "noreferrer noopener", tabIndex: 0 }, h("slot", null)));
  }
  static get is() { return "dx-link"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-link.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-link.css"]
    };
  }
  static get properties() {
    return {
      "url": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The URL or anchor the link refers to."
            }],
          "text": "The URL of the page the link goes to. If undefined the component serves as a button."
        },
        "attribute": "url",
        "reflect": false
      },
      "target": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"_blank\" | \"_self\" | \"_parent\" | \"_top\" | string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: value delegated to target element"
            }],
          "text": "Specifies where to open the linked document.\nThis is delegated to the underlying `<a>` element.\nFor more information:\nhttps://www.w3schools.com/tags/att_a_target.asp"
        },
        "attribute": "target",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
