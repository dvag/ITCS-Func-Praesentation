import { h, } from "@stencil/core";
import { ElementIdGenerator } from "../../../../../classes/element-id-handling";
/**
 * @internal
 */
export class DxHeaderNavigationSidebarContent {
  onSidebarOpen(e) {
    var _a;
    const metaData = e.detail;
    (_a = this.contentSwitcher) === null || _a === void 0 ? void 0 : _a.showValue((metaData === null || metaData === void 0 ? void 0 : metaData.showNavigationItem)
      ? parseInt(metaData.showNavigationItem)
      : INDEX_OF_DEFAULT_NAVIGATION_ITEM, false);
  }
  spliceIntoMediumAndLargeNavigationItems(navigationItems) {
    const navigationItemsCopy = Array.from(navigationItems);
    const indexOfFirstMediumNavigationItem = navigationItemsCopy.findIndex((navigationItem) => navigationItem.size === "m");
    const largeNavigationItems = navigationItemsCopy.splice(0, indexOfFirstMediumNavigationItem);
    return {
      mediumNavigationItems: navigationItemsCopy,
      largeNavigationItems,
    };
  }
  renderNavigationItem(navigationItem) {
    return (h("div", { class: "navigation-item-container" }, h("button", { id: ElementIdGenerator.createIdFromString(navigationItem.id, "control"), class: "navigation-item-button", onClick: () => {
        if (navigationItem.refersToPage != null) {
          this.contentSwitcher.value =
            navigationItem.refersToPage.pageIndex;
        }
        else {
          this.navigationInteraction.emit(navigationItem.value);
        }
        navigationItem.interact();
      } }, h("div", { class: {
        "navigation-item-label": true,
        "size-medium": navigationItem.size === "m",
        "size-large": navigationItem.size === "l",
      } }, h("dx-text", { color: "headline", type: navigationItem.size === "l" ? "ps" : "its" }, navigationItem.label)), h("dx-container", { color: "gold", class: "line" }))));
  }
  renderBackButton(navigationPage) {
    if ((navigationPage === null || navigationPage === void 0 ? void 0 : navigationPage.previousPage) == null) {
      return null;
    }
    const navigationItemReferringToCurrentPage = navigationPage.previousPage.navigationItems.find((navigationItem) => navigationItem.refersToPage === navigationPage);
    return (h("div", { class: "back-button-container", slot: "header" }, h("button", { id: ElementIdGenerator.createId(this.self, "back-button-control"), class: "back-button", onClick: () => {
        this.contentSwitcher.value = navigationPage.previousPage.pageIndex;
      } }, h("dx-icon", { color: "headline", icon: "pfeil-links", size: 24 })), h("div", { class: "back-button-label" }, h("dx-text", { type: "ps", color: "headline" }, navigationItemReferringToCurrentPage.label))));
  }
  renderNavigationItems(navigationItems) {
    var _a;
    if (((_a = navigationItems === null || navigationItems === void 0 ? void 0 : navigationItems.length) !== null && _a !== void 0 ? _a : 0) === 0) {
      return null;
    }
    return (h("div", { class: {
        "navigation-items-container": true,
      } }, navigationItems.map((navigationItem) => {
      return this.renderNavigationItem(navigationItem);
    })));
  }
  renderNavigationPage(navigationPage, pages = []) {
    if (navigationPage == null) {
      return;
    }
    const { mediumNavigationItems, largeNavigationItems } = this.spliceIntoMediumAndLargeNavigationItems(navigationPage.navigationItems);
    pages.push(h("dx-content-switcher-item", { value: navigationPage.pageIndex }, h("dx-sidebar-content", { class: { "navigation-page": true } }, this.renderBackButton(navigationPage), h("div", { class: {
        "navigation-container": true,
        "can-navigate-back": navigationPage.previousPage != null,
      } }, [
      this.renderNavigationItems(largeNavigationItems),
      this.renderNavigationItems(mediumNavigationItems),
    ]))));
    navigationPage.navigationItems.forEach((navigationItem) => this.renderNavigationPage(navigationItem.refersToPage, pages));
  }
  renderNoNavigation() {
    return (h("dx-sidebar-content", null, h("dx-text", { class: "no-navigation-text", color: "gray-33" }, "Diese Anwendung besitzt keine Navigationsinhalte")));
  }
  renderContentSwitcherPages() {
    const pages = [];
    this.renderNavigationPage(this.rootnavigationpage, pages);
    return pages;
  }
  render() {
    var _a, _b;
    if (((_b = (_a = this.rootnavigationpage) === null || _a === void 0 ? void 0 : _a.navigationItems) === null || _b === void 0 ? void 0 : _b.length) > 0) {
      return (h("dx-sidebar-content", null, h("slot", { slot: "header", name: "header" }), h("dx-content-switcher", { ref: (ref) => (this.contentSwitcher = ref) }, this.renderContentSwitcherPages()), h("slot", { slot: "footer", name: "footer" })));
    }
    else {
      return this.renderNoNavigation();
    }
  }
  static get is() { return "dx-header-navigation-sidebar-content"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-navigation-sidebar-content.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-navigation-sidebar-content.css"]
    };
  }
  static get properties() {
    return {
      "rootnavigationpage": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "NavigationPage",
          "resolved": "NavigationPage",
          "references": {
            "NavigationPage": {
              "location": "import",
              "path": "../dx-header-navigation-item/dx-header-navigation-item"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Generated navigation page tree which is needed to construct the visual navigation tree."
        }
      }
    };
  }
  static get events() {
    return [{
        "method": "navigationInteraction",
        "name": "navigationInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "TODO: Check if this should be part of the API"
            }],
          "text": ""
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "sidebarOpen",
        "method": "onSidebarOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
const INDEX_OF_DEFAULT_NAVIGATION_ITEM = 0;
