import { h, } from "@stencil/core";
import { generateInitialsForName } from "../../../../../classes/misc-util";
import { ElementIdGenerator } from "../../../../../classes/element-id-handling";
/**
 * @internal
 */
export class DxHeaderUserSidebarContent {
  constructor() {
    /**
     * Defines whether the account button "Benutzerkonto" is displayed or not.
     *
     * @value true: The account button is visible.
     * @value false: The account button is not visible.
     */
    this.accountavailable = true;
  }
  renderAccountButton() {
    if (!this.accountavailable) {
      return;
    }
    return (h("dx-button", { id: ElementIdGenerator.createId(this.self, "account"), type: "text", label: "Benutzerkonto", onClick: () => this.accountInteraction.emit() }));
  }
  renderLogoutButton() {
    return (h("dx-button", { id: ElementIdGenerator.createId(this.self, "sign-out"), type: "text", label: "Abmelden", onClick: () => this.signOut.emit() }));
  }
  render() {
    return (h("dx-sidebar-content", { class: "container" }, h("dx-user-avatar", { imageurl: this.imageurl, initials: generateInitialsForName(this.name), size: "xl" }), h("dx-spacer", { mq1: "24v" }), h("dx-text", { type: "its", color: "tags" }, "Angemeldete Person"), h("dx-spacer", { mq1: "8v" }), h("dx-text", { type: "ps", color: "headline" }, this.name), h("dx-spacer", { mq1: "32v" }), this.renderAccountButton(), this.renderLogoutButton()));
  }
  static get is() { return "dx-header-user-sidebar-content"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-user-sidebar-content.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-user-sidebar-content.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Firstname, middle names and lastname separated by spaces."
            }, {
              "name": "example",
              "text": "name"
            }],
          "text": "The full name of the user."
        },
        "attribute": "name",
        "reflect": false
      },
      "imageurl": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: URL"
            }],
          "text": "URL zum Foto des Benutzers"
        },
        "attribute": "imageurl",
        "reflect": false
      },
      "accountavailable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The account button is visible."
            }, {
              "name": "value",
              "text": "false: The account button is not visible."
            }],
          "text": "Defines whether the account button \"Benutzerkonto\" is displayed or not."
        },
        "attribute": "accountavailable",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get events() {
    return [{
        "method": "signOut",
        "name": "signOut",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fired when the sign-out button (\"Abmelden\") is clicked in the user's sidebar content."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "accountInteraction",
        "name": "accountInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fired when the account button (\"Benutzerkonto\") is clicked in the user's sidebar content."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
