import { h, Host, } from "@stencil/core";
import { onNextFrame } from "../../../../classes/render-util";
/**
 * @internal
 */
export class DxHorizontalGrowBox {
  constructor() {
    this.overflowHidden = true;
    this.visible = true;
    this.transitionEnabled = false;
    /**
     * Whether the container is open or not. When changed the container transitions smoothly to the correct width.
     *
     * @value true: The container displays it's content.
     * @value false: The container hides it's content.
     */
    this.open = true;
    /**
     * Disconnects the resizeObserver after
     */
    this.limitresizes = -1;
    this.animationmode = "open-from-right";
  }
  onForceWidthChanged() {
    var _a;
    if (this.forcewidth == null) {
      this.initializeResizeObserver();
    }
    else {
      (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
      this.resizeObserver = null;
      this.updateWidth();
    }
  }
  onOpenChanged() {
    this.updateWidth();
  }
  connectedCallback() {
    if (this.forcewidth == null) {
      this.initializeResizeObserver();
    }
    else {
      this.updateWidth();
    }
  }
  componentDidLoad() {
    onNextFrame(() => {
      this.transitionEnabled = true;
      this.overflowHidden = !this.open;
      this.visible = this.open;
    });
  }
  onTransitionStart(e) {
    if (e.target !== this.self) {
      return;
    }
    this.overflowHidden = true;
    this.visible = true;
  }
  onTransitionEnd(e) {
    if (e.target !== this.self) {
      return;
    }
    this.overflowHidden = !this.open;
    this.visible = this.open;
  }
  getWidthOfContent() {
    var _a, _b, _c;
    if (!this.open) {
      return 0;
    }
    return (_c = (_a = this.forcewidth) !== null && _a !== void 0 ? _a : (_b = this.slotContainer) === null || _b === void 0 ? void 0 : _b.scrollWidth) !== null && _c !== void 0 ? _c : 0;
  }
  initializeResizeObserver() {
    this.resizeObserver = new ResizeObserver(() => {
      onNextFrame(() => this.updateWidth());
    });
  }
  updateWidth() {
    // Immediately update width on self
    this.self.style.width = this.getWidthOfContent() + "px";
  }
  setSlotContainer(slotContainer) {
    if (this.forcewidth != null) {
      return;
    }
    if (this.slotContainer !== slotContainer) {
      this.resizeObserver.disconnect();
    }
    this.slotContainer = slotContainer;
    this.resizeObserver.observe(this.slotContainer);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    return (h(Host, { class: {
        "animate-from-left": this.animationmode === "open-from-left",
        "overflow-hidden": this.overflowHidden,
        visible: this.visible,
        "transition-enabled": this.transitionEnabled,
      } }, h("div", { class: "slot-container", ref: (ref) => this.setSlotContainer(ref) }, h("slot", null))));
  }
  static get is() { return "dx-horizontal-grow-box"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-horizontal-grow-box.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-horizontal-grow-box.css"]
    };
  }
  static get properties() {
    return {
      "open": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The container displays it's content."
            }, {
              "name": "value",
              "text": "false: The container hides it's content."
            }],
          "text": "Whether the container is open or not. When changed the container transitions smoothly to the correct width."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "true"
      },
      "limitresizes": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disconnects the resizeObserver after"
        },
        "attribute": "limitresizes",
        "reflect": false,
        "defaultValue": "-1"
      },
      "forcewidth": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "forcewidth",
        "reflect": false
      },
      "animationmode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"open-from-left\" | \"open-from-right\"",
          "resolved": "\"open-from-left\" | \"open-from-right\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "animationmode",
        "reflect": false,
        "defaultValue": "\"open-from-right\""
      }
    };
  }
  static get states() {
    return {
      "overflowHidden": {},
      "visible": {},
      "transitionEnabled": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "forcewidth",
        "methodName": "onForceWidthChanged"
      }, {
        "propName": "open",
        "methodName": "onOpenChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "transitionstart",
        "method": "onTransitionStart",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "transitionend",
        "method": "onTransitionEnd",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
