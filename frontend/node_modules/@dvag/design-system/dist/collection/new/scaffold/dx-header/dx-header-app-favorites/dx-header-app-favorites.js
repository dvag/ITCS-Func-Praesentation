import { h, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { sameArrayIgnoreOrder } from "../../../../classes/misc-util";
import { unawaited } from "../../../../classes/async";
/**
 * This component adds a navigation menu item to a `<dx-header>` element. It is able to contain multiple `<dx-header-navigation-item>`
 * to generate navigation content for the sidebar.
 *
 * @name Header App Favorites
 * @shortname App Favorites
 * @path /Scaffold/Header
 * @icon stars
 * @stable
 */
export class DxHeaderAppFavorites {
  constructor() {
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     */
    this.notificationstheme = "system";
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     */
    this.notifications = undefined;
    /**
     * @internal
     */
    this.internalopen = true;
  }
  onAppsChanged() {
    this.internalForceSidebarContentUpdate.emit();
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, "dx-header-app-favorites-app", async (nodes) => {
        const newApps = await Promise.all(nodes.map((node) => node.toAppFavoritesApp()));
        // Do not pulsate the first time the slotObserver is called.
        if (this.apps != null && !sameArrayIgnoreOrder(this.apps, newApps)) {
          this.pulsate();
        }
        this.apps = newApps;
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  onSidebarOpen(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  onSidebarClose(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    const closeSidebar = () => {
      this.internalChangeSidebarVisibility.emit(false);
    };
    // We have to process the navigation items here because we cannot insert the <slot> into the dx-header-navigation-sidebar-content because it rendered elsewhere.
    return (h("dx-header-app-favorites-sidebar-content", { id: ElementIdGenerator.createId(this.self, "sidebar-content"), ref: (ref) => (this.sidebarContent = ref), apps: this.apps, onInternalEditApps: (e) => this.editApps.emit(e.detail), onInternalSortApps: (e) => this.sortApps.emit(e.detail), onInternalDeleteApp: (e) => this.deleteApp.emit(e.detail), onInternalAddApp: () => this.addApp.emit({
        closeSidebar,
      }), onInternalLaunchApp: (e) => this.launchApp.emit({
        appid: e.detail,
        closeSidebar,
      }) }));
  }
  pulsate() {
    var _a, _b;
    unawaited((_b = (_a = this.self.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector("dx-pulse-icon")) === null || _b === void 0 ? void 0 : _b.pulsate());
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("dx-header-menu-button", { id: ElementIdGenerator.createId(this.self, "button"), notificationstheme: this.notificationstheme, notifications: this.notifications, active: this.internalactive, onInteraction: () => {
        this.menuInteraction.emit();
      } }, h("dx-pulse-icon", { class: "pulse-icon", id: ElementIdGenerator.createId(this.self, "pulse-icon"), icon: "lesezeichen-outline", size: 24 }))));
  }
  static get is() { return "dx-header-app-favorites"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-app-favorites.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-app-favorites.css"]
    };
  }
  static get properties() {
    return {
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The priority of the user menu item."
            }],
          "text": "The priority indicates the order in which the entries can be shown and hidden."
        },
        "attribute": "priority",
        "reflect": false
      },
      "internalactive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalactive",
        "reflect": false,
        "defaultValue": "false"
      },
      "notificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "system: Red badge with white border and white text."
            }, {
              "name": "value",
              "text": "user: Gray badge with white border and black text."
            }],
          "text": "Specifies the theme for the displayed notifications.\nThe \"system\" theme is used when a notification emerges from the system like a notification bell.\nThe \"user\" theme is used as a result of an user action, like adding something to the shopping cart."
        },
        "attribute": "notificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      },
      "notifications": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorType",
          "resolved": "\"no-number\" | number",
          "references": {
            "NotificationIndicatorType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero."
            }, {
              "name": "value",
              "text": "\"no-number\": Only a red circle without a number is displayed as an indicator."
            }],
          "text": "The number of notifications that are visible inside of the indicator on this item."
        },
        "attribute": "notifications",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "internalopen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalopen",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "apps": {}
    };
  }
  static get events() {
    return [{
        "method": "menuInteraction",
        "name": "menuInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "menu-interaction"
            }],
          "text": "Fired when the navigation's header menu item is interacted with."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "internalChangeSidebarVisibility",
        "name": "internalChangeSidebarVisibility",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "internalForceSidebarContentUpdate",
        "name": "internalForceSidebarContentUpdate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Force the menu bar to update the sidebar content."
            }],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "deleteApp",
        "name": "deleteApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the user deletes a favorite app. The event delegates the application id of the deleted app."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "sortApps",
        "name": "sortApps",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the user sorts his favorite apps. The event delegates the application ids dependant on the current sorting."
        },
        "complexType": {
          "original": "string[]",
          "resolved": "string[]",
          "references": {}
        }
      }, {
        "method": "addApp",
        "name": "addApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the user clicks on the \"Favoriten hinzuf\u00FCgen\" button within the sidebar content."
        },
        "complexType": {
          "original": "CloseSidebarDetail",
          "resolved": "CloseSidebarDetail",
          "references": {
            "CloseSidebarDetail": {
              "location": "import",
              "path": "./app-favorite"
            }
          }
        }
      }, {
        "method": "editApps",
        "name": "editApps",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "edit-app-event"
            }],
          "text": "Fires when toggling the edit mode within the sidebar. (e.g. by clicking the \"Favoriten bearbeiten\" button)"
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "launchApp",
        "name": "launchApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the user clicks selects an app. The event delegates the application id of the corresponding app."
        },
        "complexType": {
          "original": "LaunchAppDetail",
          "resolved": "LaunchAppDetail",
          "references": {
            "LaunchAppDetail": {
              "location": "import",
              "path": "./app-favorite"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "renderSidebarContent": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "apps",
        "methodName": "onAppsChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "sidebarOpen",
        "method": "onSidebarOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "sidebarClose",
        "method": "onSidebarClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
