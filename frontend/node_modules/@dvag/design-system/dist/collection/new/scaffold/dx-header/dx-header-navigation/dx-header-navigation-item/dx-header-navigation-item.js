import { verifyElementId } from "../../../../../classes/element-id-handling";
import { createMetaComponentsSlotObserver, } from "../../../../../classes/slot-observer";
import { sortByNavigationItemSize } from "../navigation.util";
/**
 * A navigation item which is displayed within a `<dx-header-navigation>` sidebar content.
 * It is possible to insert multiple `<dx-header-navigation-item>` elements which are displayed in the navigation sidebar content,
 * when this component is interacted with.
 *
 * @name Header Navigation Item
 * @shortname Item
 * @path /Scaffold/Header/Navigation
 * @icon map-pin
 * @stable
 */
export class DxHeaderNavigationItem {
  constructor() {
    /**
     * The size of the dropdown.
     *
     * @value m: A medium sized navigation item is displayed.
     * @value l: A large sized navigation item is displayed.
     */
    this.size = "l";
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, ":scope > dx-header-navigation-item", (nodes) => {
        this.children = nodes.sort(sortByNavigationItemSize);
      });
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  disconnectedCallback() {
    this.slotObserver.disconnect();
  }
  /**
   * @internal
   *
   * Inserts a navigationItem recursively into the tree.
   * @param belongsToPage: The page the navigation item belongs to
   * @param pageIndexCount: An iterating pageIndex reference which
   */
  async insertNavigationTree(belongsToPage, pageIndexCount) {
    if (belongsToPage == null) {
      return;
    }
    const navigationItem = this.createNavigationItem();
    // If we have any children we create a new page for them and recursively add new navigation pages and items.
    if (this.children.length > 0) {
      const refersToPage = {
        pageIndex: pageIndexCount.value,
        previousPage: belongsToPage,
        navigationItems: [],
      };
      navigationItem.refersToPage = refersToPage;
      // The pageIndexCount is a reference which tracks the recursive count. If we add a new navigation page we have to increment the count.
      pageIndexCount.value += 1;
      for (const child of this.children) {
        await child.insertNavigationTree(refersToPage, pageIndexCount);
      }
    }
    belongsToPage.navigationItems.push(navigationItem);
  }
  createNavigationItem() {
    var _a;
    const value = (_a = this.value) !== null && _a !== void 0 ? _a : this.label;
    return {
      id: this.self.id,
      size: this.size,
      label: this.label,
      value: value,
      refersToPage: null,
      interact: () => this.interaction.emit({
        value: value,
        closeSidebar: () => {
          this.internalChangeSidebarVisibility.emit(false);
        },
      }),
    };
  }
  static get is() { return "dx-header-navigation-item"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The text which is displayed inside the navigation item."
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "The displayed label."
        },
        "attribute": "label",
        "reflect": true
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Identifier"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Unique identifier of this component within a `<dx-header-navigation>` element."
        },
        "attribute": "value",
        "reflect": true
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NavigationItemSize",
          "resolved": "\"l\" | \"m\"",
          "references": {
            "NavigationItemSize": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "m: A medium sized navigation item is displayed."
            }, {
              "name": "value",
              "text": "l: A large sized navigation item is displayed."
            }],
          "text": "The size of the dropdown."
        },
        "attribute": "size",
        "reflect": true,
        "defaultValue": "\"l\""
      }
    };
  }
  static get events() {
    return [{
        "method": "interaction",
        "name": "interaction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "interaction"
            }],
          "text": "Fired when the user interacts with this item. (e.g. by clicking it)\nIt emits a navigation item payload which consists of the corresponding navigation item's `value` and a function which, when called, closes the sidebar."
        },
        "complexType": {
          "original": "NavigationItemInteractionPayload",
          "resolved": "NavigationItemInteractionPayload",
          "references": {
            "NavigationItemInteractionPayload": {
              "location": "local"
            }
          }
        }
      }, {
        "method": "internalChangeSidebarVisibility",
        "name": "internalChangeSidebarVisibility",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "insertNavigationTree": {
        "complexType": {
          "signature": "(belongsToPage: NavigationPage, pageIndexCount: Ref<number>) => Promise<void>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "belongsToPage : The page the navigation item belongs to"
                }],
              "text": ": The page the navigation item belongs to"
            }, {
              "tags": [{
                  "name": "param",
                  "text": "pageIndexCount : An iterating pageIndex reference which"
                }],
              "text": ": An iterating pageIndex reference which"
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "NavigationPage": {
              "location": "local"
            },
            "Ref": {
              "location": "import",
              "path": "../../../../../classes/misc-util"
            },
            "NavigationItem": {
              "location": "local"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": "Inserts a navigationItem recursively into the tree."
            }, {
              "name": "param",
              "text": "belongsToPage : The page the navigation item belongs to"
            }, {
              "name": "param",
              "text": "pageIndexCount : An iterating pageIndex reference which"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
