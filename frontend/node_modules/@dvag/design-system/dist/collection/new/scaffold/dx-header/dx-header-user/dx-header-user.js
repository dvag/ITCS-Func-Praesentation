import { h, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
import { generateInitialsForName } from "../../../../classes/misc-util";
/**
 * Adds a header menu item to a `<dx-header>` and a sidebar content for the sidebar when placed inside the header's `menu` slot.
 *
 * @name User menu item
 * @shortname User
 * @path /Scaffold/Header
 * @icon user
 * @stable
 */
export class DxHeaderUser {
  constructor() {
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     *
     * @example notifications
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications-theme
     */
    this.notificationstheme = "system";
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * @internal
     */
    this.internalopen = true;
    /**
     * Defines whether the account button "Benutzerkonto" is displayed or not.
     *
     * @value true: The account button is visible.
     * @value false: The account button is not visible.
     * @example account-available
     */
    this.accountavailable = true;
  }
  connectedCallback() {
    verifyElementId(this.self);
  }
  componentShouldUpdate(_, __, propName) {
    if (propName === "imageurl" || propName === "name") {
      this.internalForceSidebarContentUpdate.emit();
    }
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    return (h("dx-header-user-sidebar-content", { id: ElementIdGenerator.createId(this.self, "sidebar-content"), name: this.name, imageurl: this.imageurl, accountavailable: this.accountavailable, onSignOut: () => this.signOut.emit(), onAccountInteraction: () => this.accountInteraction.emit() }));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("dx-header-menu-button", { id: ElementIdGenerator.createId(this.self, "button"), active: this.internalactive, notifications: this.notifications, notificationstheme: this.notificationstheme, onInteraction: () => {
        this.menuInteraction.emit();
      } }, h("dx-user-avatar", { class: "avatar-circle", size: "xs", imageurl: this.imageurl, initials: generateInitialsForName(this.name) }))));
  }
  static get is() { return "dx-header-user"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-user.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-user.css"]
    };
  }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Firstname, middle names and lastname separated by spaces."
            }, {
              "name": "example",
              "text": "name"
            }],
          "text": "The full name of the user."
        },
        "attribute": "name",
        "reflect": false
      },
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The priority of the user menu item."
            }, {
              "name": "example",
              "text": "priority"
            }],
          "text": "The priority indicates the order in which the entries can be shown and hidden."
        },
        "attribute": "priority",
        "reflect": false
      },
      "imageurl": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: URL"
            }, {
              "name": "example",
              "text": "image"
            }],
          "text": "The image URL of the user."
        },
        "attribute": "imageurl",
        "reflect": false
      },
      "notifications": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorType",
          "resolved": "\"no-number\" | number",
          "references": {
            "NotificationIndicatorType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero."
            }, {
              "name": "value",
              "text": "\"no-number\": Only a red circle without a number is displayed as an indicator."
            }, {
              "name": "example",
              "text": "notifications"
            }],
          "text": "The number of notifications that are visible inside of the indicator on this item."
        },
        "attribute": "notifications",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "notificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "system: Red badge with white border and white text."
            }, {
              "name": "value",
              "text": "user: Gray badge with white border and black text."
            }, {
              "name": "example",
              "text": "notifications-theme"
            }],
          "text": "Specifies the theme for the displayed notifications.\nThe \"system\" theme is used when a notification emerges from the system like a notification bell.\nThe \"user\" theme is used as a result of an user action, like adding something to the shopping cart."
        },
        "attribute": "notificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      },
      "internalactive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalactive",
        "reflect": false,
        "defaultValue": "false"
      },
      "internalopen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalopen",
        "reflect": false,
        "defaultValue": "true"
      },
      "accountavailable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The account button is visible."
            }, {
              "name": "value",
              "text": "false: The account button is not visible."
            }, {
              "name": "example",
              "text": "account-available"
            }],
          "text": "Defines whether the account button \"Benutzerkonto\" is displayed or not."
        },
        "attribute": "accountavailable",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get events() {
    return [{
        "method": "signOut",
        "name": "signOut",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "sidebar-events"
            }],
          "text": "Fired when the sign-out button (\"Abmelden\") is clicked in the user's sidebar content."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "accountInteraction",
        "name": "accountInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "sidebar-events"
            }],
          "text": "Fired when the account button (\"Benutzerkonto\") is clicked in the user's sidebar content."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "menuInteraction",
        "name": "menuInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "menu-interaction"
            }],
          "text": "Fired when the user's header menu item is interacted with."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "internalForceSidebarContentUpdate",
        "name": "internalForceSidebarContentUpdate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Force the menu bar to update the sidebar content."
            }],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "renderSidebarContent": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
