import { h, Host } from "@stencil/core";
import { ColorPalette } from "../../../classes/color-palette";
import { throwCompileErrorIfReachable } from "../../../classes/misc-util";
/**
 * The Golden Stage consists of the hero image and a content to display information to the user.
 * It represents the main component on each application's main page.
 *
 * @path /Scaffold
 * @name Golden Stage
 * @shortname Stage
 * @stable
 * @new
 * @icon images
 *
 * @slot hero-image - The hero image used in the golden stage.
 * @slot - The content displayed in the golden container.
 * @slot-example example
 */
export class DxGoldenStage {
  constructor() {
    /**
     * The alignment of the golden container.
     *
     * @value left: The container is left-aligned and the golden triangle is displayed below the container.
     * @value right: The container is right-aligned and the golden triangle is displayed over the container.
     *
     * @example alignment
     */
    this.alignment = "right";
    /**
     * The y-offset of the golden container.
     * @value number: The y-offset.
     *
     * @example content-offset-y
     */
    this.contentoffsety = DEFAULT_CONTAINER_OFFSET_Y;
    /**
     * The size of the golden container.
     * @value s: Small sized container occupying 4 grid columns.
     * @value m: Medium sized container occupying 6 grid columns.
     * @value l: Large sized container occupying 8 grid columns.
     *
     * @example size
     */
    this.size = "l";
  }
  getGridColumnCount() {
    switch (this.size) {
      case "s":
        return 4;
      case "m":
        return 6;
      case "l":
        return 8;
      default:
        throwCompileErrorIfReachable(this.size);
    }
  }
  getGridColumnValue() {
    const columns = this.getGridColumnCount();
    if (this.alignment === "right") {
      return `(${NUMBER_OF_GRID_COLUMNS - columns})-${columns}`;
    }
    else if (this.alignment === "left") {
      return `${columns}-(${NUMBER_OF_GRID_COLUMNS - columns})`;
    }
  }
  render() {
    var _a;
    const backgroundColor = this.backgroundcolor
      ? new ColorPalette(true).getColorCode(this.backgroundcolor)
      : undefined;
    const isRightAligned = this.alignment === "right";
    return (h(Host, { style: {
        "--dx-golden-stage-background-color": backgroundColor,
        "--dx-golden-stage-offset": `${((_a = this.contentoffsety) !== null && _a !== void 0 ? _a : DEFAULT_CONTAINER_OFFSET_Y) * -1}px`,
      } }, h("div", { class: "golden-stage" }, h("slot", { name: "hero-image" }), h("dx-grid", { class: {
        "stage-layout": true,
        "right-aligned": isRightAligned,
        "left-aligned": !isRightAligned,
      }, mq1: "12", mq4: this.getGridColumnValue() }, h("div", { class: "stage-content" }, h("dx-fd-separator", { class: {
        separator: true,
        "over-container": isRightAligned,
        "below-container": !isRightAligned,
      }, fromcolor: "transparent", tocolor: "gold" }), h("slot", null))))));
  }
  static get is() { return "dx-golden-stage"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-golden-stage.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-golden-stage.css"]
    };
  }
  static get properties() {
    return {
      "backgroundcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of the color from the color palette."
            }, {
              "name": "example",
              "text": "background-color"
            }],
          "text": "The background color behind the hero image."
        },
        "attribute": "backgroundcolor",
        "reflect": false
      },
      "alignment": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HorizontalDirection",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "HorizontalDirection": {
              "location": "import",
              "path": "../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: The container is left-aligned and the golden triangle is displayed below the container."
            }, {
              "name": "value",
              "text": "right: The container is right-aligned and the golden triangle is displayed over the container."
            }, {
              "name": "example",
              "text": "alignment"
            }],
          "text": "The alignment of the golden container."
        },
        "attribute": "alignment",
        "reflect": false,
        "defaultValue": "\"right\""
      },
      "contentoffsety": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The y-offset."
            }, {
              "name": "example",
              "text": "content-offset-y"
            }],
          "text": "The y-offset of the golden container."
        },
        "attribute": "contentoffsety",
        "reflect": false,
        "defaultValue": "DEFAULT_CONTAINER_OFFSET_Y"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"s\" | \"m\" | \"l\"",
          "resolved": "\"l\" | \"m\" | \"s\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: Small sized container occupying 4 grid columns."
            }, {
              "name": "value",
              "text": "m: Medium sized container occupying 6 grid columns."
            }, {
              "name": "value",
              "text": "l: Large sized container occupying 8 grid columns."
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "The size of the golden container."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"l\""
      }
    };
  }
}
const DEFAULT_CONTAINER_OFFSET_Y = 32;
const NUMBER_OF_GRID_COLUMNS = 12;
