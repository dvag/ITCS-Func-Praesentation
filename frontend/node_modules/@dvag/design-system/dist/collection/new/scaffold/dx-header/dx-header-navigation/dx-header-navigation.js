import { h, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { sortByNavigationItemSize } from "./navigation.util";
/**
 * This component adds a navigation menu item to a `<dx-header>` element. It is able to contain multiple `<dx-header-navigation-item>`
 * to generate navigation content for the sidebar.
 *
 * @name Header Navigation
 * @shortname Navigation
 * @path /Scaffold/Header
 * @icon map
 * @stable
 */
export class DxHeaderNavigation {
  constructor() {
    /**
     * Defines whether the sidebar closes automatically on interacting with a navigation item with no children.
     *
     * @value true: When interacting with a navigation item which has no child navigation items the sidebar closes.
     * @value false: The sidebar does not close when interacting with any navigation items.
     *
     * @example auto-close
     */
    this.autoclose = true;
    /**
     * @internal
     * We want to ensure that this component has always the highest level of priority by always keeping it at the lowest possible number because it should never be hidden by the header.
     */
    this.priority = Number.NEGATIVE_INFINITY;
    /**
     * @internal
     */
    this.internalactive = false;
    /**
     * Defines whether there is a notification within this component or not.
     * @value true: A notification indication is shown at the top right of the navigation menu item.
     * @value false: There is no notification indication on the navigation menu item.
     *
     * @example notification
     */
    this.notification = false;
    /**
     * @internal
     * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
     */
    this.internalnotification = false;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications-theme
     */
    this.notificationstheme = "system";
    /**
     * @internal
     * This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications.
     */
    this.internalnotificationstheme = "system";
  }
  /**
   * The priority must not be changed because the navigation component should never hide.
   */
  onPriorityChange() {
    this.priority = Number.NEGATIVE_INFINITY;
  }
  onSidebarOpen(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type, { detail: e.detail }));
  }
  onSidebarClose(e) {
    var _a;
    (_a = this.sidebarContent) === null || _a === void 0 ? void 0 : _a.dispatchEvent(new CustomEvent(e.type));
  }
  onChildMenuInteraction(e) {
    if (e.target !== this.self) {
      e.stopPropagation();
      this.menuInteraction.emit();
    }
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, ":scope > dx-header-navigation-item", async (nodes) => {
        const navigationPage = {
          pageIndex: 0,
          navigationItems: [],
          previousPage: null,
        };
        nodes.sort(sortByNavigationItemSize);
        const page = { value: 1 };
        for (const node of nodes) {
          await node.insertNavigationTree(navigationPage, page);
        }
        this.navigationPage = navigationPage;
        this.internalForceSidebarContentUpdate.emit();
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  /**
   * @internal
   */
  async renderSidebarContent() {
    // We have to process the navigation items here because we cannot insert the <slot> into the dx-header-navigation-sidebar-content because it rendered elsewhere.
    return (h("dx-header-navigation-sidebar-content", { id: ElementIdGenerator.createId(this.self, "sidebar-content"), rootnavigationpage: this.navigationPage, ref: (ref) => (this.sidebarContent = ref), onNavigationInteraction: () => {
        if (this.autoclose) {
          this.internalChangeSidebarVisibility.emit(false);
        }
      } }, h("slot", { slot: "header", name: "navigation-header" }), h("slot", { slot: "footer", name: "navigation-footer" })));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  computeNotificationsThemeType() {
    var _a;
    return (_a = this.internalnotificationstheme) !== null && _a !== void 0 ? _a : this.notificationstheme;
  }
  render() {
    return (h("dx-header-menu-item", { id: ElementIdGenerator.createId(this.self, "menu-item"), notifications: this.notification || this.internalnotification
        ? "no-number"
        : undefined, notificationstheme: this.computeNotificationsThemeType(), icon: "hamburger-menue", internalopen: true, internalactive: this.internalactive }));
  }
  static get is() { return "dx-header-navigation"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-navigation.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-navigation.css"]
    };
  }
  static get properties() {
    return {
      "autoclose": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: When interacting with a navigation item which has no child navigation items the sidebar closes."
            }, {
              "name": "value",
              "text": "false: The sidebar does not close when interacting with any navigation items."
            }, {
              "name": "example",
              "text": "auto-close"
            }],
          "text": "Defines whether the sidebar closes automatically on interacting with a navigation item with no children."
        },
        "attribute": "autoclose",
        "reflect": false,
        "defaultValue": "true"
      },
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "We want to ensure that this component has always the highest level of priority by always keeping it at the lowest possible number because it should never be hidden by the header."
            }],
          "text": ""
        },
        "attribute": "priority",
        "reflect": false,
        "defaultValue": "Number.NEGATIVE_INFINITY"
      },
      "internalactive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalactive",
        "reflect": false,
        "defaultValue": "false"
      },
      "notification": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: A notification indication is shown at the top right of the navigation menu item."
            }, {
              "name": "value",
              "text": "false: There is no notification indication on the navigation menu item."
            }, {
              "name": "example",
              "text": "notification"
            }],
          "text": "Defines whether there is a notification within this component or not."
        },
        "attribute": "notification",
        "reflect": false,
        "defaultValue": "false"
      },
      "internalnotification": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications."
            }],
          "text": ""
        },
        "attribute": "internalnotification",
        "reflect": false,
        "defaultValue": "false"
      },
      "notificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "system: Red badge with white border and white text."
            }, {
              "name": "value",
              "text": "user: Gray badge with white border and black text."
            }, {
              "name": "example",
              "text": "notifications-theme"
            }],
          "text": "Specifies the theme for the displayed notifications.\nThe \"system\" theme is used when a notification emerges from the system like a notification bell.\nThe \"user\" theme is used as a result of an user action, like adding something to the shopping cart."
        },
        "attribute": "notificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      },
      "internalnotificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "This property is set automatically by the `<dx-header-menu-bar>` when there are hidden menu items containing notifications."
            }],
          "text": ""
        },
        "attribute": "internalnotificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      }
    };
  }
  static get states() {
    return {
      "navigationPage": {}
    };
  }
  static get events() {
    return [{
        "method": "menuInteraction",
        "name": "menuInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "menu-interaction"
            }],
          "text": "Fired when the navigation's header menu item is interacted with."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "internalChangeSidebarVisibility",
        "name": "internalChangeSidebarVisibility",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "internalForceSidebarContentUpdate",
        "name": "internalForceSidebarContentUpdate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Force the menu bar to update the sidebar content."
            }],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "renderSidebarContent": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "priority",
        "methodName": "onPriorityChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "sidebarOpen",
        "method": "onSidebarOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "sidebarClose",
        "method": "onSidebarClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "menuInteraction",
        "method": "onChildMenuInteraction",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
