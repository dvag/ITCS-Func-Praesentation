import { forceUpdate, h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
import { getDefinedSlots, isSlotDefined, isSlotUndefined, onNextFrame, } from "../../../classes/render-util";
import { SlotObserver } from "../../../classes/slot-observer";
import { HeaderService, subscribeToHeaderHeight, } from "./header-service";
import "../../../classes/extensions";
import { isValueInEnum } from "../../../classes/extensions";
/**
 * The header is positioned at the top edge of the page. It displays application information (like logo, application name, etc.) and different menu items which trigger a sidebar when interacted with.
 *
 * You can find a fully configured header in [this](assets/examples/App.html) example.
 *
 * @path /Scaffold
 * @name Header
 * @icon heading
 * @stable
 *
 * @slot menu - Header menu items (`<dx-header-menu-item>`, `<dx-header-navigation`, etc.) which are represented within a menu bar in the right corner of the header.
 * @slot ${connectedslot} - These slots represent the sidebar content of a `<dx-header-menu-item>` with the same `connectedslot` attribute as the name of the slot. (e.g. `<dx-header-menu-item connectedslot="info">` => `<dx-sidebar-content slot="info">`
 * @slot navigation-header - This slot is for content that will be displayed in the header area of the navigation sidebar.
 * @slot navigation-footer - This slot is for content that will be displayed in the footer area of the navigation sidebar.
 */
export class DxHeader {
  constructor() {
    this.lastScrollPositionY = 0;
    this.elevated = false;
    this.hideHeaderBar = false;
    this.sidebarOpen = false;
    /**
     * The theme of the header defines the color palette which is used for it's sub-elements.
     *
     * @value white: The default theme displays the header with a white background.
     * @value gold: The golden theme which is implemented for "meine.dvag".
     * @warning This property must not be used by other projects than "meine.dvag".
     */
    this.theme = "white";
    /**
     * The logo which is displayed in the left corner of the header.
     *
     * @value text: Brand Logo with the company's name. The `applicationname` will not be displayed.
     * @value image: Brand Logo without a name. The `applicationname` will be displayed next to the logo.
     */
    this.logo = "image";
    /**
     * Defines the brand appearance of header internal branding elements (e.g. the logo image).
     *
     * @value default: The default brand of the DVAG is used.
     */
    this.brand = "default";
    /**
     * Whether to show the current announcement bar or not.
     *
     * @value true: Shows an announcement in case the "announcement-bar" slot is defined.
     * @value false: Hides the announcement.
     */
    this.showannouncement = true;
    this.allow = false;
  }
  onThemeChanged() {
    if (this.theme === "white") {
      this.internalTheme = "white";
    }
    this.setupIntersectionObserver();
  }
  onShowAnnouncementChanged() {
    if (this.showannouncement) {
      // Show header bar when announcement is shown
      this.hideHeaderBar = false;
    }
  }
  componentDidLoad() {
    onNextFrame(() => {
      this.updateMenuBar();
    });
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this), true);
    const headerService = HeaderService.instance();
    const currentRegisteredHeader = headerService.header;
    assert(currentRegisteredHeader == null || currentRegisteredHeader === this.self, () => 'There is already a <dx-header> element registered.\n\n"There can be only one".\n- Connor MacLeod', this.self);
    headerService.header = this.self;
    headerService.isVisible = true;
    this.headerHeightSubscription = subscribeToHeaderHeight(() => {
      forceUpdate(this);
    });
    this.initializeSlotObserver();
    this.setupIntersectionObserver();
  }
  disconnectedCallback() {
    var _a, _b, _c, _d, _e;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.slotObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.infoContainerSlotObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    (_d = this.intersectionObserver) === null || _d === void 0 ? void 0 : _d.disconnect();
    (_e = this.headerHeightSubscription) === null || _e === void 0 ? void 0 : _e.unsubscribe();
    HeaderService.instance().unsetHeaderElement(this.self);
  }
  onScroll() {
    const currentY = window.scrollY;
    const headerService = HeaderService.instance();
    if (headerService.isScrollInteractionEnabled) {
      this.hideHeaderBar =
        this.lastScrollPositionY >= 0 && this.lastScrollPositionY < currentY;
      headerService.isVisible = !this.hideHeaderBar;
    }
    // We want to set the elevation to true, when the scroll position exceeds the header height.
    // We want to reset the elevation when the scroll position reaches zero again.
    this.elevated =
      (this.elevated && currentY > 0) || currentY > headerService.headerHeight;
    if (!this.elevated) {
      this.internalTheme = this.theme;
    }
    this.lastScrollPositionY = currentY;
  }
  onResize() {
    this.updateMenuBar();
  }
  initializeSlotObserver() {
    this.slotObserver = new SlotObserver(this.self, ":scope > *:not([slot])", (nodes) => {
      assert(nodes.length === 0, () => "There should be no default slotted elements within a <dx-header> element. Maybe you forgot to set the 'menu' or '${value}' slot.", "\n\nAffected element:", this.self, "\n\nDefault slotted nodes:\n", ...nodes.map((node) => [node, "\n"]).flat());
    });
    this.infoContainerSlotObserver = new SlotObserver(this.self, `*[slot=${PREDEFINED_HEADER_SLOTS.BREADCRUMB}],*[slot=${PREDEFINED_HEADER_SLOTS.REPRESENTATIVE}]`, () => {
      forceUpdate(this.self);
    });
  }
  setupIntersectionObserver() {
    var _a;
    if (this.theme === "gold") {
      this.intersectionObserver = new IntersectionObserver(() => {
        this.internalTheme = this.elevated ? "white" : "gold";
      });
      this.intersectionObserver.observe(this.self);
    }
    else {
      (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
      this.intersectionObserver = null;
    }
  }
  updateMenuBar() {
    var _a, _b;
    if (this.menuBar == null) {
      return;
    }
    const contentWidth = (_b = (_a = this.contentElement) === null || _a === void 0 ? void 0 : _a.offsetWidth) !== null && _b !== void 0 ? _b : 0;
    const applicationInfoWidth = this.logoElement.offsetWidth + this.getMinimalApplicationNameWidth();
    this.menuBar
      .updateChildren(contentWidth -
      (applicationInfoWidth +
        MARGIN_BIAS_BETWEEN_APPLICATION_INFO_AND_MENU_BAR))
      .then();
  }
  getMinimalApplicationNameWidth() {
    var _a;
    return this.logo === "image" && ((_a = this.appname) === null || _a === void 0 ? void 0 : _a.length) > 0
      ? MIN_APPLICATION_NAME_WIDTH
      : 0;
  }
  getLogo() {
    if (this.logo === "image") {
      return "bildmarke";
    }
    else if (this.logo === "text") {
      return "wortmarke";
    }
  }
  obtainMenuBar(menuBar) {
    if (this.menuBar !== menuBar) {
      this.menuBar = menuBar;
      onNextFrame(() => {
        this.updateMenuBar();
      });
    }
  }
  renderApplicationName() {
    if (this.logo === "text") {
      return;
    }
    return (h("div", { class: "application-name-container" }, h("dx-header-application-name", { class: "application-name", appname: this.appname, onInteraction: (e) => {
        e.stopPropagation();
        this.navigateHome.emit();
      } })));
  }
  renderInfoContainer() {
    const hasBreadcrumb = isSlotDefined(this.self, PREDEFINED_HEADER_SLOTS.BREADCRUMB);
    const hasRepresentative = isSlotDefined(this.self, PREDEFINED_HEADER_SLOTS.REPRESENTATIVE);
    if (!hasBreadcrumb && !hasRepresentative) {
      return;
    }
    return (h("div", { class: {
        "info-wrapper": true,
      } }, h("div", { class: {
        "info-container": true,
        "text-logo": this.logo === "text",
      } }, hasBreadcrumb ? (h("div", { class: { "breadcrumb-container": true } }, h("slot", { name: `${PREDEFINED_HEADER_SLOTS.BREADCRUMB}` }))) : null, hasRepresentative ? (h("div", { class: "representative-container" }, h("slot", { name: `${PREDEFINED_HEADER_SLOTS.REPRESENTATIVE}` }))) : null)));
  }
  renderAnnouncement() {
    if (isSlotUndefined(this.self, "announcement-bar")) {
      return;
    }
    return [
      h("dx-simple-grow-box", { class: "announcement-grow-box", open: this.showannouncement }, h("slot", { name: "announcement-bar" })),
      this.showannouncement ? h("dx-spacer", { class: "spacer", mq1: "4v" }) : null,
    ];
  }
  getMaxTop() {
    const logoOverflow = this.logo === "image" ? 8 : 0;
    return HeaderService.instance().headerHeight + logoOverflow;
  }
  render() {
    var _a, _b, _c, _d, _e;
    const definedValueSlots = getDefinedSlots(this.self).filter((slot) => !isValueInEnum(PREDEFINED_HEADER_SLOTS, slot));
    // We need to offset the top at least 1px to actually get an intersection with the window
    const intersectionBias = 1;
    return (h(Host, { class: {
        "golden-theme": this.internalTheme === "gold",
        "show-shadow": this.elevated,
        "sidebar-open": this.sidebarOpen,
      }, role: "banner", style: {
        top: this.hideHeaderBar
          ? `-${this.getMaxTop() + intersectionBias}px`
          : "0",
        "--dx-header-height": `${(_a = HeaderService.instance().headerHeight) !== null && _a !== void 0 ? _a : 0}px`,
        "--dx-header-height-below": `${(_c = (_b = this.self.shadowRoot.querySelector(".info-container")) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0}px`,
        "--dx-header-height-top": `${(_e = (_d = this.self.shadowRoot.querySelector("dx-simple-grow-box")) === null || _d === void 0 ? void 0 : _d.offsetHeight) !== null && _e !== void 0 ? _e : 0}px`, // TODO: Search better solution after release
      } }, this.renderAnnouncement(), h("div", { class: "header-bar" }, h("div", { class: {
        content: true,
      }, ref: (ref) => (this.contentElement = ref) }, h("button", { class: {
        "application-logo": true,
        text: this.logo === "text",
        image: this.logo === "image",
      }, "aria-label": "Home", id: ElementIdGenerator.createId(this.self, "logo-control"), onClick: () => this.navigateHome.emit() }, h("dx-logo", { class: "logo", type: this.getLogo(), ref: (ref) => (this.logoElement = ref) })), this.renderApplicationName(), h("dx-header-menu-bar", { ref: (ref) => this.obtainMenuBar(ref), onSidebarOpenChange: (e) => (this.sidebarOpen = e.detail) }, h("slot", { name: "menu" }), h("slot", { slot: "navigation-header", name: "navigation-header" }), h("slot", { slot: "navigation-footer", name: "navigation-footer" }), definedValueSlots.map((slot) => {
      return h("slot", { name: slot, slot: slot });
    })))), this.renderInfoContainer()));
  }
  static get is() { return "dx-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HeaderTheme",
          "resolved": "\"gold\" | \"white\"",
          "references": {
            "HeaderTheme": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "white: The default theme displays the header with a white background."
            }, {
              "name": "value",
              "text": "gold: The golden theme which is implemented for \"meine.dvag\"."
            }, {
              "name": "warning",
              "text": "This property must not be used by other projects than \"meine.dvag\"."
            }],
          "text": "The theme of the header defines the color palette which is used for it's sub-elements."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"white\""
      },
      "logo": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"text\" | \"image\"",
          "resolved": "\"image\" | \"text\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "text: Brand Logo with the company's name. The `applicationname` will not be displayed."
            }, {
              "name": "value",
              "text": "image: Brand Logo without a name. The `applicationname` will be displayed next to the logo."
            }],
          "text": "The logo which is displayed in the left corner of the header."
        },
        "attribute": "logo",
        "reflect": false,
        "defaultValue": "\"image\""
      },
      "brand": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"default\"",
          "resolved": "\"default\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "default: The default brand of the DVAG is used."
            }],
          "text": "Defines the brand appearance of header internal branding elements (e.g. the logo image)."
        },
        "attribute": "brand",
        "reflect": false,
        "defaultValue": "\"default\""
      },
      "appname": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of the app."
            }, {
              "name": "example",
              "text": "app-name"
            }],
          "text": "The name of the application this component runs with."
        },
        "attribute": "appname",
        "reflect": false
      },
      "showannouncement": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Shows an announcement in case the \"announcement-bar\" slot is defined."
            }, {
              "name": "value",
              "text": "false: Hides the announcement."
            }],
          "text": "Whether to show the current announcement bar or not."
        },
        "attribute": "showannouncement",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "elevated": {},
      "hideHeaderBar": {},
      "internalTheme": {},
      "sidebarOpen": {},
      "allow": {}
    };
  }
  static get events() {
    return [{
        "method": "navigateHome",
        "name": "navigateHome",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "An event which is triggered when the user clicks the logo or the application name.\nThis event should always be used to show the user the application's home page."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "theme",
        "methodName": "onThemeChanged"
      }, {
        "propName": "showannouncement",
        "methodName": "onShowAnnouncementChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "scroll",
        "method": "onScroll",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "resize",
        "method": "onResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
const MIN_APPLICATION_NAME_WIDTH = 176;
var PREDEFINED_HEADER_SLOTS;
(function (PREDEFINED_HEADER_SLOTS) {
  PREDEFINED_HEADER_SLOTS["MENU"] = "menu";
  PREDEFINED_HEADER_SLOTS["BREADCRUMB"] = "breadcrumb";
  PREDEFINED_HEADER_SLOTS["REPRESENTATIVE"] = "representative";
})(PREDEFINED_HEADER_SLOTS || (PREDEFINED_HEADER_SLOTS = {}));
const MARGIN_BIAS_BETWEEN_APPLICATION_INFO_AND_MENU_BAR = 8;
