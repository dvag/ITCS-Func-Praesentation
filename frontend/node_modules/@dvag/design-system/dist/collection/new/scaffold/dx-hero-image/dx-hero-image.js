import { h, Host } from "@stencil/core";
import { getBreakpointMinWidth, GridBreakpoint, } from "../../layout/dx-grid/grid-models";
import { assert } from "../../../classes/assert";
/**
 * Shows an image dependent on the current breakpoint.
 *
 * @path /Scaffold
 * @name Hero image
 * @shortname Hero
 * @icon image-polaroid
 * @stable
 */
export class DxHeroImage {
  renderSource(breakpoint, url, fallbackUrl) {
    if (url && url !== fallbackUrl) {
      return (h("source", { media: `(min-width: ${getBreakpointMinWidth(breakpoint)}px)`, srcSet: url }));
    }
  }
  render() {
    const defaultSrc = this.mq1 || this.mq2 || this.mq3 || this.mq4 || this.mq5;
    assert((defaultSrc === null || defaultSrc === void 0 ? void 0 : defaultSrc.length) > 0, () => "You have to define at least one image url!");
    return (h(Host, null, h("picture", null, [
      this.renderSource(GridBreakpoint.MQ5, this.mq5, defaultSrc),
      this.renderSource(GridBreakpoint.MQ4, this.mq4, defaultSrc),
      this.renderSource(GridBreakpoint.MQ3, this.mq3, defaultSrc),
      this.renderSource(GridBreakpoint.MQ2, this.mq2, defaultSrc),
    ], h("img", { src: defaultSrc, alt: "image" }))));
  }
  static get is() { return "dx-hero-image"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-hero-image.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-hero-image.css"]
    };
  }
  static get properties() {
    return {
      "mq1": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed at the mq1 stage."
        },
        "attribute": "mq1",
        "reflect": false
      },
      "mq2": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed at the mq2 stage."
        },
        "attribute": "mq2",
        "reflect": false
      },
      "mq3": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed at the mq3 stage."
        },
        "attribute": "mq3",
        "reflect": false
      },
      "mq4": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed at the mq4 stage."
        },
        "attribute": "mq4",
        "reflect": false
      },
      "mq5": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed at the mq5 stage."
        },
        "attribute": "mq5",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "currentImageUrl": {}
    };
  }
  static get elementRef() { return "self"; }
}
