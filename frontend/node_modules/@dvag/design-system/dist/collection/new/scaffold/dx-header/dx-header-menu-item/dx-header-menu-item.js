import { h, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
/**
 * A clickable item in the header menu.
 * @name Header Menu item
 * @shortname Item
 * @path /Scaffold/Header/Menu
 * @icon square
 * @stable
 */
export class DxHeaderMenuItem {
  constructor() {
    /**
     * Highlights this entry
     * @value true: Entry highlighted
     * @value false: Entry not highlighted
     * @internal
     */
    this.internalactive = false;
    /**
     * @internal
     */
    this.internalopen = true;
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     * @example notifications
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     * @example notifications
     */
    this.notificationstheme = "system";
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return 48;
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("dx-header-menu-button", { id: ElementIdGenerator.createId(this.self, "button"), notifications: this.notifications, notificationstheme: this.notificationstheme, active: this.internalactive, onInteraction: () => this.menuInteraction.emit(this.connectedslot) }, h("dx-icon", { size: 24, icon: this.icon, class: "icon" }))));
  }
  static get is() { return "dx-header-menu-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-menu-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-menu-item.css"]
    };
  }
  static get properties() {
    return {
      "internalactive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Entry highlighted"
            }, {
              "name": "value",
              "text": "false: Entry not highlighted"
            }, {
              "name": "internal",
              "text": undefined
            }],
          "text": "Highlights this entry"
        },
        "attribute": "internalactive",
        "reflect": false,
        "defaultValue": "false"
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of the icon."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The icon which is displayed in the menu item."
        },
        "attribute": "icon",
        "reflect": false
      },
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The priority of the user menu item."
            }, {
              "name": "example",
              "text": "priority"
            }],
          "text": "The priority indicates the order in which the entries can be shown and hidden.\nThis property does not have any effect when the component is not within a `<dx-header>` element."
        },
        "attribute": "priority",
        "reflect": false
      },
      "connectedslot": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of the connected slot which is displayed within the `<dx-header>` sidebar when interacted with."
            }, {
              "name": "example",
              "text": "connected-slot"
            }],
          "text": "The `<dx-header>` slot which is connected with this menu item. It also acts as an identifier which is emitted with the `menuInteraction` event payload."
        },
        "attribute": "connectedslot",
        "reflect": false
      },
      "internalopen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalopen",
        "reflect": false,
        "defaultValue": "true"
      },
      "notifications": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorType",
          "resolved": "\"no-number\" | number",
          "references": {
            "NotificationIndicatorType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero."
            }, {
              "name": "value",
              "text": "\"no-number\": Only a red circle without a number is displayed as an indicator."
            }, {
              "name": "example",
              "text": "notifications"
            }],
          "text": "The number of notifications that are visible inside of the indicator on this item."
        },
        "attribute": "notifications",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "notificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "system: Red badge with white border and white text."
            }, {
              "name": "value",
              "text": "user: Gray badge with white border and black text."
            }, {
              "name": "example",
              "text": "notifications"
            }],
          "text": "Specifies the theme for the displayed notifications.\nThe \"system\" theme is used when a notification emerges from the system like a notification bell.\nThe \"user\" theme is used as a result of an user action, like adding something to the shopping cart."
        },
        "attribute": "notificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      }
    };
  }
  static get events() {
    return [{
        "method": "menuInteraction",
        "name": "menuInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "menu-interaction"
            }],
          "text": "Fired when the header menu item is interacted with."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
