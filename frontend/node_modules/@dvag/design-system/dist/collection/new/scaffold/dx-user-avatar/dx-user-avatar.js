import { h, Host } from "@stencil/core";
import { assert, assertPropertyValue } from "../../../classes/assert";
/**
 * Displays a round user avatar.
 * When defined there is an image of the user displayed  within the avatar. Otherwise his initials will be shown.
 *
 * @name User Avatar
 * @shortname Avatar
 * @icon user-tie
 * @path /Miscellaneous
 * @stable
 */
export class DxUserAvatar {
  render() {
    assert(this.imageurl != null || this.initials != null, () => "You have to define at least the `imageurl` or the `initials` property", this.self);
    assertPropertyValue("dx-user-avatar", "size", this.size, [
      ...USER_AVATAR_SIZES,
    ]);
    return (h(Host, { class: {
        "size-xs": this.size === "xs",
        "size-s": this.size === "s",
        "size-m": this.size === "m",
        "size-l": this.size === "l",
        "size-xl": this.size === "xl",
        "size-xxl": this.size === "xxl",
      } }, this.imageurl != null ? this.renderImage() : this.renderInitials()));
  }
  renderImage() {
    return (h("div", { class: "image", style: {
        "background-image": `url(${this.imageurl})`,
      } }));
  }
  renderInitials() {
    var _a;
    return (h("div", { class: "initials" }, h("dx-text", { color: "headline" }, (_a = this.initials) !== null && _a !== void 0 ? _a : "")));
  }
  static get is() { return "dx-user-avatar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-user-avatar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-user-avatar.css"]
    };
  }
  static get properties() {
    return {
      "imageurl": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: URL"
            }, {
              "name": "example",
              "text": "image"
            }],
          "text": "The image URL of the user."
        },
        "attribute": "imageurl",
        "reflect": false
      },
      "initials": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Initials, e.g. `\"FG\"`"
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "initials"
            }],
          "text": "The initials of the user's name."
        },
        "attribute": "initials",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DxUserAvatarSize",
          "resolved": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\" | \"xxl\"",
          "references": {
            "DxUserAvatarSize": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "xs: Extra-small sized user avatar (40px)"
            }, {
              "name": "value",
              "text": "s: Small sized user avatar (56px)"
            }, {
              "name": "value",
              "text": "m: Medium sized user avatar (72px)"
            }, {
              "name": "value",
              "text": "l: Large sized user avatar (96px)"
            }, {
              "name": "value",
              "text": "xl: Extra-large sized user avatar (120px)"
            }, {
              "name": "value",
              "text": "xxl: Extra-extra-large sized user avatar (160px)"
            }],
          "text": "The size of the user avatar."
        },
        "attribute": "size",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
const USER_AVATAR_SIZES = ["xs", "s", "m", "l", "xl", "xxl"];
