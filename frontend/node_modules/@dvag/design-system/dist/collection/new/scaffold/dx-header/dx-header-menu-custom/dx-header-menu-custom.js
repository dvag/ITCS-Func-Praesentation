import { h, readTask, } from "@stencil/core";
/**
 * Wraps header item functionality around a custom element which can be placed into the header.
 *
 * @name Header Menu Custom
 * @shortname Custom
 * @path /Scaffold/Header/Menu
 * @icon swatchbook
 *
 * @stable
 */
export class DxHeaderMenuCustom {
  constructor() {
    /**
     * @internal
     */
    this.internalopen = true;
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    return new Promise((resolve) => {
      readTask(() => {
        resolve(this.self.shadowRoot.querySelector(".custom-container").offsetWidth);
      });
    });
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("div", { class: "custom-container" }, h("slot", null))));
  }
  static get is() { return "dx-header-menu-custom"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-menu-custom.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-menu-custom.css"]
    };
  }
  static get properties() {
    return {
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The priority of the user menu item."
            }, {
              "name": "example",
              "text": "priority"
            }],
          "text": "The priority indicates the order in which the entries can be shown and hidden.\nThis property does not have any effect when the component is not within a `<dx-header>` element."
        },
        "attribute": "priority",
        "reflect": false
      },
      "internalopen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalopen",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get methods() {
    return {
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<number>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLDivElement": {
              "location": "global"
            }
          },
          "return": "Promise<number>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
