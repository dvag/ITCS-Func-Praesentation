import { h, Host } from "@stencil/core";
import { isSlotUndefined } from "../../../../../classes/render-util";
/**
 * A layout component which is placed within the side-bar.
 *
 * @path /Scaffold/Header
 * @name Sidebar content
 * @icon book-open
 * @slot header - The content which is displayed at the top of the sidebar.
 * @slot - The main content which is displayed in the center of the sidebar. This content is scrollable when it needs too much space.
 * @slot footer - The content which is displayed at the bottom of the sidebar.
 * @stable
 */
export class DxSidebarContent {
  constructor() {
    /**
     * Defines if the content area should claim the available space.
     * @internal
     */
    this.contentgrows = true;
  }
  renderSlot(slot) {
    if (isSlotUndefined(this.self, slot)) {
      return;
    }
    return (h("div", { class: slot }, h("slot", { name: slot })));
  }
  render() {
    return (h(Host, null, this.renderSlot("header"), h("dx-scrollable-shadow", { showborders: true, class: {
        "scrollable-shadow-container": true,
        "content-grows": this.contentgrows,
      } }, h("div", { class: { content: true } }, h("slot", null))), this.renderSlot("footer")));
  }
  static get is() { return "dx-sidebar-content"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-sidebar-content.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-sidebar-content.css"]
    };
  }
  static get properties() {
    return {
      "contentgrows": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "Defines if the content area should claim the available space."
        },
        "attribute": "contentgrows",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get elementRef() { return "self"; }
}
