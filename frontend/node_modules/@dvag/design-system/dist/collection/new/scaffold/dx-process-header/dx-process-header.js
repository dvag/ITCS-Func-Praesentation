import { forceUpdate, h, Host } from "@stencil/core";
import { isSlotUndefined, onNextFrame } from "../../../classes/render-util";
import { findUpperElementByPredicate, tagOf } from "../../../classes/misc-util";
import { SlotObserver } from "../../../classes/slot-observer";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * @name Process Header
 * @path /Miscellaneous
 * @icon users
 * @stable
 *
 * @slot note - The note which is displayed below the headline
 * @slot people-display - A `<dx-overflow-menu>` component for selecting multiple persons or a readonly text representing the selected persons.
 * @slot context-menu - A `<dx-overflow-menu>` component which holds different context actions.
 *
 * @slot-example all-slots
 * @slot-example note
 * @slot-example people-display
 * @slot-example context-menu
 */
export class DxProcessHeader {
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => this.updateAlignment(), true);
    this.overflowMenuSlotObserver = new SlotObserver(this.self, "*", (nodes) => {
      const getSlottedOverflowMenu = (slot) => {
        return nodes
          .filter((node) => tagOf(node) === "dx-overflow-menu")
          .find((node) => {
          const hasContextMenuSlot = (element) => element.slot === slot;
          return (hasContextMenuSlot(node) ||
            findUpperElementByPredicate(node, hasContextMenuSlot, (elem) => elem === this.self));
        });
      };
      this.contextMenu = getSlottedOverflowMenu("context-menu");
      this.peopleDisplay = getSlottedOverflowMenu("people-display");
      this.updateAlignment();
      onNextFrame(() => {
        window.forceUpdate = forceUpdate;
        forceUpdate(this);
      });
    });
  }
  disconnectedCallback() {
    var _a;
    this.breakpointAware.disconnect();
    (_a = this.overflowMenuSlotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  updateAlignment() {
    if (this.contextMenu) {
      this.contextMenu.align = "right";
    }
    if (this.peopleDisplay) {
      this.peopleDisplay.align =
        this.breakpointAware.getEffectiveValue({
          mq1: "left",
          mq3: "right",
        });
    }
  }
  renderNote() {
    if (isSlotUndefined(this.self, "note")) {
      return;
    }
    return (h("div", { class: "note-container" }, h("slot", { name: "note" })));
  }
  renderPeopleDisplay() {
    if (isSlotUndefined(this.self, "people-display")) {
      return;
    }
    return (h("div", { class: "people-display-container" }, h("slot", { name: "people-display" })));
  }
  renderContextMenu() {
    if (isSlotUndefined(this.self, "context-menu")) {
      return;
    }
    return (h("div", { class: "context-menu-container" }, h("slot", { name: "context-menu" })));
  }
  renderHeadlineNoteContainer() {
    return (h("div", { class: "headline-note-container" }, h("dx-text", { type: "h3" }, this.headline), this.renderNote()));
  }
  render() {
    return (h(Host, null, h("dx-container", { class: "container", type: "page", color: "transparent" }, h("div", { class: "main-container" }, h("div", { class: "left-side" }, this.renderHeadlineNoteContainer(), this.renderPeopleDisplay()), this.renderContextMenu()))));
  }
  static get is() { return "dx-process-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-process-header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-process-header.css"]
    };
  }
  static get properties() {
    return {
      "headline": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "string",
              "text": ": A string which must not be undefined or empty."
            }, {
              "name": "example",
              "text": "headline"
            }],
          "text": "A headline text representing the name of the current page or context."
        },
        "attribute": "headline",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
const PROCESS_HEADER_SLOT_NAMES = [
  "note",
  "people-display",
  "context-menu",
];
