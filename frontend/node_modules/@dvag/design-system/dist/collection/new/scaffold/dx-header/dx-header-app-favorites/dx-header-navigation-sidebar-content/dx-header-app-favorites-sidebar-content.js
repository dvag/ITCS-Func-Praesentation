import { h, } from "@stencil/core";
import { ElementIdGenerator } from "../../../../../classes/element-id-handling";
/**
 * @internal
 */
export class DxHeaderAppFavoritesSidebarContent {
  constructor() {
    this.sideBarOpen = false;
    this.dragging = false;
    this.editMode = false;
    this.deleteArray = [];
    this.sortedAppIds = [];
  }
  onChangeEditMode() {
    this.internalEditApps.emit(this.editMode);
  }
  onSidebarClose() {
    this.editMode = false;
    this.sideBarOpen = false;
  }
  onSidebarOpen() {
    this.editMode = false;
    this.sideBarOpen = true;
  }
  onKeyDown(e) {
    if (this.sideBarOpen && !this.dragging) {
      if (e.code === "KeyE") {
        const isVisible = this.self.offsetParent != null &&
          getComputedStyle(this.self).visibility === "visible";
        if (isVisible) {
          this.editMode = !this.editMode;
        }
      }
    }
  }
  onDraggingStart() {
    this.dragging = true;
  }
  onDraggingStop() {
    this.dragging = false;
  }
  handleSort(e) {
    this.sortedAppIds = [...e.detail.sortedArray];
    this.apps = this.sortedAppIds.map((id) => this.apps.find((app) => app.id === id));
    this.internalSortApps.emit(this.sortedAppIds);
  }
  deleteItem(id) {
    this.apps = this.apps.filter((app) => app.id !== id);
    this.deleteArray = this.deleteArray.filter((appId) => appId !== id);
    this.internalDeleteApp.emit(id);
  }
  startDeleteTransition(value) {
    this.deleteArray = this.deleteArray.concat(value);
  }
  handleListItemAnimationEnd(e, value) {
    if (e.animationName !== "delete") {
      return;
    }
    this.deleteItem(value);
  }
  handleInteractionWithApp(appId) {
    this.internalLaunchApp.emit(appId);
  }
  renderSortList() {
    return (h("dx-list", { size: "l", class: "sort-list" }, h("dx-sort", { sortable: this.editMode, onSort: (e) => this.handleSort(e), class: "sort" }, this.apps.map((app) => {
      return (h("dx-sort-item", { value: app.id, key: app.id }, h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `app-${app.id}`), type: this.editMode ? "default" : "clickable", icon: this.editMode ? undefined : app.icon, label: app.name, key: app.id, internalanimation: true, class: {
          "list-item": true,
          delete: this.deleteArray.includes(app.id),
        }, onListItemInteraction: () => this.handleInteractionWithApp(app.id), onAnimationEnd: (e) => this.handleListItemAnimationEnd(e, app.id) }, h("dx-horizontal-grow-box", { slot: "content", open: this.editMode }, h("dx-button", { id: ElementIdGenerator.createId(this.self, `app-${app.id}-delete`), type: "text", icon: "muell", onClick: () => this.startDeleteTransition(app.id) })))));
    }))));
  }
  renderEditModeContent() {
    return [
      this.renderTitle("Löschen oder sortieren Sie Ihre Anwendungsfavoriten:"),
      this.renderSortList(),
      h("div", { slot: "footer" }, h("dx-button", { id: ElementIdGenerator.createId(this.self, "toggle-edit-mode"), label: "Bearbeiten beenden", icon: "check", type: "primary-m", stretch: true, key: "toggle-edit", onClick: () => {
          this.editMode = false;
        } })),
    ];
  }
  renderTitle(text) {
    // TODO: Talk to UX because of jumping sort-list when text is larger
    return (h("dx-text", { slot: "header", class: "title", key: "title" }, text));
  }
  renderDefaultContent() {
    const title = this.apps.length === 0
      ? "Sie haben noch keine Anwendungen favorisiert."
      : "Ihre favorisierten Anwendungen:";
    return [
      this.renderTitle(title),
      this.renderSortList(),
      h("div", { slot: "footer" }, h("dx-button", { label: "Favoriten hinzufügen", id: ElementIdGenerator.createId(this.self, "add-app"), icon: "plus-kreis", type: "primary-m", stretch: true, onClick: () => this.internalAddApp.emit() }), h("dx-spacer", { mq1: "16v" }), h("dx-button", { label: "Favoriten bearbeiten", id: ElementIdGenerator.createId(this.self, "toggle-edit-mode"), icon: "edit", key: "toggle-edit", type: "secondary-m", stretch: true, onClick: () => {
          this.editMode = true;
        }, disabled: this.apps.length === 0 })),
    ];
  }
  render() {
    return (h("dx-sidebar-content", { contentgrows: false }, this.editMode
      ? this.renderEditModeContent()
      : this.renderDefaultContent()));
  }
  static get is() { return "dx-header-app-favorites-sidebar-content"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-app-favorites-sidebar-content.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-app-favorites-sidebar-content.css"]
    };
  }
  static get properties() {
    return {
      "apps": {
        "type": "unknown",
        "mutable": true,
        "complexType": {
          "original": "AppFavoritesApp[]",
          "resolved": "AppFavoritesApp[]",
          "references": {
            "AppFavoritesApp": {
              "location": "import",
              "path": "../app-favorite"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get states() {
    return {
      "editMode": {},
      "deleteArray": {},
      "sortedAppIds": {}
    };
  }
  static get events() {
    return [{
        "method": "internalDeleteApp",
        "name": "internalDeleteApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "internalSortApps",
        "name": "internalSortApps",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string[]",
          "resolved": "string[]",
          "references": {}
        }
      }, {
        "method": "internalAddApp",
        "name": "internalAddApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "internalLaunchApp",
        "name": "internalLaunchApp",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "internalEditApps",
        "name": "internalEditApps",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "editMode",
        "methodName": "onChangeEditMode"
      }];
  }
  static get listeners() {
    return [{
        "name": "sidebarClose",
        "method": "onSidebarClose",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "sidebarOpen",
        "method": "onSidebarOpen",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "keydown",
        "method": "onKeyDown",
        "target": "window",
        "capture": false,
        "passive": false
      }, {
        "name": "draggingStart",
        "method": "onDraggingStart",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "draggingEnd",
        "method": "onDraggingStop",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
