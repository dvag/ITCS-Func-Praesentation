import { h, Host, } from "@stencil/core";
import { ElementIdGenerator } from "../../../../classes/element-id-handling";
/**
 * The visual representation of a `<dx-header-menu-item>`.
 *
 * @internal
 */
export class DxHeaderMenuButton {
  constructor() {
    /**
     * Displays this menu button as active.
     * @value true: The menu button displays a line at the bottom and replaces the slotted content with a close icon.
     * @value false: The menu button item displays the slotted content.
     */
    this.active = false;
    /**
     * Displays this menu button as selected.
     * @value true: The menu button displays a line under the slotted content.
     * @value false: The menu button item displays the slotted content.
     */
    this.selected = false;
    /**
     * The number of notifications that are visible inside of the indicator on this item.
     *
     * @value number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero.
     * @value "no-number": Only a red circle without a number is displayed as an indicator.
     */
    this.notifications = undefined;
    /**
     * Specifies the theme for the displayed notifications.
     * The "system" theme is used when a notification emerges from the system like a notification bell.
     * The "user" theme is used as a result of an user action, like adding something to the shopping cart.
     *
     * @value system: Red badge with white border and white text.
     * @value user: Gray badge with white border and black text.
     */
    this.notificationstheme = "system";
  }
  getNotifications() {
    if (this.active) {
      return undefined;
    }
    return this.notifications;
  }
  render() {
    return (h(Host, null, h("button", { id: ElementIdGenerator.createId(this.self, "control"), class: {
        button: true,
        active: this.active,
        selected: this.selected,
      }, onClick: () => {
        this.interaction.emit();
      } }, h("dx-notification-indicator", { theme: this.notificationstheme, notifications: this.getNotifications() }, h("dx-element-swapper", { active: this.active ? "second" : "first" }, h("slot", { slot: "first" }), h("dx-icon", { slot: "second", icon: "schliessen", color: "headline", size: 24 }))), h("div", { class: "line" }))));
  }
  static get is() { return "dx-header-menu-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-menu-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-menu-button.css"]
    };
  }
  static get properties() {
    return {
      "active": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The menu button displays a line at the bottom and replaces the slotted content with a close icon."
            }, {
              "name": "value",
              "text": "false: The menu button item displays the slotted content."
            }],
          "text": "Displays this menu button as active."
        },
        "attribute": "active",
        "reflect": false,
        "defaultValue": "false"
      },
      "selected": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The menu button displays a line under the slotted content."
            }, {
              "name": "value",
              "text": "false: The menu button item displays the slotted content."
            }],
          "text": "Displays this menu button as selected."
        },
        "attribute": "selected",
        "reflect": false,
        "defaultValue": "false"
      },
      "notifications": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorType",
          "resolved": "\"no-number\" | number",
          "references": {
            "NotificationIndicatorType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of notifications that are visible inside of the indicator. The number has to be greater than zero."
            }, {
              "name": "value",
              "text": "\"no-number\": Only a red circle without a number is displayed as an indicator."
            }],
          "text": "The number of notifications that are visible inside of the indicator on this item."
        },
        "attribute": "notifications",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "notificationstheme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "NotificationIndicatorThemeType",
          "resolved": "\"system\" | \"user\"",
          "references": {
            "NotificationIndicatorThemeType": {
              "location": "import",
              "path": "../../../internal/dx-notification-indicator/notification-indicator.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "system: Red badge with white border and white text."
            }, {
              "name": "value",
              "text": "user: Gray badge with white border and black text."
            }],
          "text": "Specifies the theme for the displayed notifications.\nThe \"system\" theme is used when a notification emerges from the system like a notification bell.\nThe \"user\" theme is used as a result of an user action, like adding something to the shopping cart."
        },
        "attribute": "notificationstheme",
        "reflect": false,
        "defaultValue": "\"system\""
      }
    };
  }
  static get events() {
    return [{
        "method": "interaction",
        "name": "interaction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fired when user interacts with this item."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
