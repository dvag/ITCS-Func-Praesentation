import { h, Host, } from "@stencil/core";
import { ElementIdGenerator } from "../../../../classes/element-id-handling";
/**
 * @internal
 */
export class DxHeaderApplicationName {
  constructor() {
    this.currentType = "Paragraph-Standard";
  }
  connectedCallback() {
    this.resizeObserver = new ResizeObserver((entries) => {
      const currentHeightOfHiddenText = entries[0].contentRect.height;
      // We want to check whether the hidden text has at least two lines of text. Therefore we factor the
      // PARAGRAPH_STANDARD_LINE_HEIGHT by 1.5 as a bias to get a middle height between one line and two lines of text.
      const biasScale = 1.5;
      if (currentHeightOfHiddenText >
        PARAGRAPH_STANDARD_LINE_HEIGHT * biasScale) {
        this.currentType = INFO_TEXT_SMALL;
      }
      else {
        this.currentType = PARAGRAPH_STANDARD;
      }
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  render() {
    return (h(Host, null, h("div", { class: "app-name-container", role: "button", id: ElementIdGenerator.createId(this.self, "control"), onClick: () => this.interaction.emit() }, h("dx-text", { class: {
        "displayed-text": true,
      }, type: this.currentType }, this.appname)), h("dx-text", { type: "ps", class: {
        "hidden-text": true,
      }, ref: (ref) => this.resizeObserver.observe(ref) }, this.appname)));
  }
  static get is() { return "dx-header-application-name"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-application-name.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-application-name.css"]
    };
  }
  static get properties() {
    return {
      "appname": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Application name."
            }, {
              "name": "important",
              "text": undefined
            }],
          "text": "The name of the application."
        },
        "attribute": "appname",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "currentType": {}
    };
  }
  static get events() {
    return [{
        "method": "interaction",
        "name": "interaction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the user interacts with this element (e.g. by clicking it)."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
const PARAGRAPH_STANDARD_LINE_HEIGHT = 24;
const PARAGRAPH_STANDARD = "Paragraph-Standard";
const INFO_TEXT_SMALL = "Infotext-Small";
