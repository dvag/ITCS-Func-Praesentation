import { h, } from "@stencil/core";
import { getSlottedContent, tagOf } from "../../../../classes/misc-util";
import { getSpacerWidth } from "../../../../classes/sizes.util";
import { isMenuItem, isMenuLink, } from "../header-menu.util";
/**
 * A component to group multiple menu items in the header menu.
 *
 * @name Header Menu Group
 * @shortname Group
 * @path /Scaffold/Header/Menu
 * @icon object-group
 * @stable
 */
export class DxHeaderMenuGroup {
  constructor() {
    /**
     * @internal
     */
    this.internalopen = true;
  }
  /**
   * @internal
   */
  async getInnerMenuItems() {
    return Array.from(this.self.querySelectorAll(":scope > dx-header-menu-item, dx-header-user"));
  }
  /**
   * @internal
   */
  async getDefaultWidth() {
    const slots = getSlottedContent(this.self);
    const menuEntryWidths = (await Promise.all(slots
      .filter((element) => isMenuLink(element) || isMenuItem(element))
      .map((element) => element.getDefaultWidth()))).reduce((acc, width) => acc + width, 0);
    const spacerWidths = slots
      .filter((element) => tagOf(element) === "dx-spacer")
      .reduce((acc, spacer) => acc + getSpacerWidth(spacer), 0);
    return menuEntryWidths + spacerWidths;
  }
  render() {
    return (h("dx-horizontal-grow-box", { open: this.internalopen }, h("slot", null)));
  }
  static get is() { return "dx-header-menu-group"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-header-menu-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-header-menu-group.css"]
    };
  }
  static get properties() {
    return {
      "priority": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The priority of the group."
            }, {
              "name": "example",
              "text": "priority"
            }],
          "text": "The priority indicates the order in which the entries inside a `<dx-header>` can be shown and hidden.\nThis property does not have any effect when the component is not within a `<dx-header>` element."
        },
        "attribute": "priority",
        "reflect": false
      },
      "internalopen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalopen",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get methods() {
    return {
      "getInnerMenuItems": {
        "complexType": {
          "signature": "() => Promise<MenuItemElement[]>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "MenuItemElement": {
              "location": "import",
              "path": "../header-menu.util"
            }
          },
          "return": "Promise<MenuItemElement[]>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "getDefaultWidth": {
        "complexType": {
          "signature": "() => Promise<any>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "MenuEntryElement": {
              "location": "import",
              "path": "../header-menu.util"
            },
            "HTMLDxSpacerElement": {
              "location": "global"
            }
          },
          "return": "Promise<any>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
