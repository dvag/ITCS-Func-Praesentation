import { h, Host, } from "@stencil/core";
import { assert } from "../../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
import { isSlotDefined } from "../../../../classes/render-util";
/**
 * A list item which is used within a dx-list element.
 *
 * @path /Layout/List
 * @name List item
 * @shortname Item
 * @icon list-ul
 * @stable
 *
 * @slot content - Content which is displayed on the right side of the item.
 * @slot-example content
 */
export class DxListItem {
  constructor() {
    /**
     * @internal
     * Defines whether the content is shown below or next to the label
     */
    this.internalcontentbelow = false;
    /**
     * @internal
     */
    this.internaldraggable = false;
    /**
     * @internal
     */
    this.internaldragging = false;
    /**
     * The type of the item.
     *
     * @value default: The item will be displayed with an optional icon and a label.
     * @value selectable: The item is displayed like the default and can be selected.
     * @value checkbox: The item displays a checkbox instead of an icon. The selection can be toggled by clicking the item.
     *
     * @example type
     */
    this.type = "default";
    /**
     * The size of this item.
     * @internal
     */
    this.internalsize = "m";
    /**
     * @internal
     */
    this.internalanimation = false;
    /**
     * Defines whether the item is disabled or not.
     *
     * @value true: The item is displayed in a gray tone and can't be interacted with
     * @value false: The item is displayed normally.
     *
     * @exmaple disabled
     */
    this.disabled = false;
    /**
     * The current selection state of this item.
     *
     * @value true: The item is selected. This state will be visualized according to the `type`.
     * @value false: The item is not selected.
     *
     * @example selected
     */
    this.selected = false;
    /**
     * Defines the text alignment.
     * @value left: Text is left aligned.
     * @value right: Text is right aligned.
     * @example text-align
     */
    this.textalign = "left";
  }
  onIconChanged(newIcon, oldIcon) {
    this.internalIcon = newIcon || oldIcon || this.internalIcon;
  }
  onSelectedChange() {
    var _a;
    if (this.selected) {
      (_a = this.queryForRadioElement()) === null || _a === void 0 ? void 0 : _a.internalSelect();
    }
  }
  onCheckedChange(e) {
    this.selected = e.detail;
  }
  componentWillLoad() {
    this.internalIcon = this.icon;
    verifyElementId(this.self);
  }
  onInteraction(e) {
    if (e.target === this.self) {
      if (this.type === "clickable") {
        return;
      }
      this.selected = !this.selected || this.type === "radio";
    }
  }
  async getRadioElement() {
    return this.queryForRadioElement();
  }
  async focusControl() {
    this.self.shadowRoot.querySelector(".item").focus({
      preventScroll: true,
    });
  }
  queryForRadioElement() {
    return this.self.shadowRoot.querySelector("dx-radio-button");
  }
  getActiveElementSwapperSlot() {
    if (this.internaldraggable) {
      return "first";
    }
    if (isValidActionIndicatorValue(this.actionindicator)) {
      return "second";
    }
    return "none";
  }
  renderLabels() {
    if (!this.label && !this.sublabel && !this.prelabel) {
      return null;
    }
    assert(!!this.label, () => "You have to define the 'label' property when defining the 'sublabel'!", this.self);
    const renderLabel = (label, type, labelType) => (label === null || label === void 0 ? void 0 : label.length) > 0 ? (h("dx-text", { type: type, class: {
        label: true,
        "sub-label": labelType === "sub-label",
        "pre-label": labelType === "pre-label",
      } }, label)) : null;
    return (h("div", { class: { labels: true, "right-align-text": this.textalign === "right" } }, renderLabel(this.prelabel, "its", "pre-label"), renderLabel(this.label, "ps", "default"), renderLabel(this.sublabel, "its", "sub-label")));
  }
  renderIcon() {
    return (h("div", { class: "icon-container" }, h("dx-icon", { icon: this.internalIcon, size: 24 })));
  }
  renderCheckbox() {
    return (h("dx-checkbox", { id: ElementIdGenerator.createId(this.self, "checkbox"), class: "interactable-element", checked: this.selected, tabIndex: -1 }));
  }
  renderRadioButton() {
    var _a;
    return (h("div", { class: "interactable-element" }, h("dx-radio-button", { id: ElementIdGenerator.createId(this.self, "radio-button"), value: (_a = this.value) === null || _a === void 0 ? void 0 : _a.toString(), disabled: this.disabled })));
  }
  renderSortHandle() {
    return (h("dx-sort-handle", { id: ElementIdGenerator.createId(this.self, "sort-handle"), internaldragging: this.internaldragging, internaldraggable: this.internaldraggable, onDragBegin: (e) => this.dragBegin.emit(e.detail), onDragUpdate: (e) => this.dragUpdate.emit(e.detail), onDragFinish: (e) => this.dragFinish.emit(e.detail) }));
  }
  renderAnimatableActionIndicator() {
    return (h("dx-horizontal-grow-box", { open: this.internaldraggable ||
        isValidActionIndicatorValue(this.actionindicator), class: {
        "action-indicator-container": true,
      } }, h("dx-spacer", { mq1: "8h" }), h("dx-element-swapper", { class: "action-indicator-wrapper", active: this.getActiveElementSwapperSlot() }, h("div", { slot: "first" }, this.renderSortHandle()), h("div", { slot: "second", class: "navigate-action-indicator" }, h("dx-spacer", { mq1: "8h" }), h("dx-icon", { icon: "chevron-rechts", size: 16, class: "action-indicator" })))));
  }
  renderActionIndicator() {
    if (!this.internaldraggable &&
      !isValidActionIndicatorValue(this.actionindicator)) {
      return;
    }
    return (h("div", { class: {
        "action-indicator-container": true,
        "margin-sides-small": this.internaldraggable,
        "margin-sides-large": !this.internaldraggable,
      }, key: "1" }, h("div", { class: "action-indicator-wrapper" }, h("div", { class: "navigate-action-indicator" }, this.internaldraggable ? (this.renderSortHandle()) : (h("dx-icon", { icon: "chevron-rechts", size: 16, class: "action-indicator" }))))));
  }
  renderLeftSide() {
    var _a;
    const typeToRenderFunction = {
      default: this.renderIcon.bind(this),
      selectable: this.renderIcon.bind(this),
      checkbox: this.renderCheckbox.bind(this),
      radio: this.renderRadioButton.bind(this),
      clickable: this.renderIcon.bind(this),
    };
    const open = ((_a = this.icon) === null || _a === void 0 ? void 0 : _a.length) > 0 ||
      this.type === "checkbox" ||
      this.type === "radio";
    const IconDrawerTag = this.internalanimation
      ? "dx-horizontal-grow-box"
      : "div";
    if (open || this.internalanimation) {
      return (h("div", { class: { "left-container": true } }, h(IconDrawerTag, { open: open, animationmode: "open-from-left", class: {
          "icon-drawer": true,
        } }, h("div", { class: "type-container" }, typeToRenderFunction[this.type]()))));
    }
  }
  renderRightSide() {
    return (h("div", { class: "right-container" }, this.internalcontentbelow ? null : this.renderContent(), this.internalanimation
      ? this.renderAnimatableActionIndicator()
      : this.renderActionIndicator()));
  }
  renderBelowContent() {
    if (!this.internalcontentbelow) {
      return;
    }
    return this.renderContent();
  }
  renderContent() {
    const isContentDefined = isSlotDefined(this.self, "content");
    if (isContentDefined) {
      return (h("div", { class: {
          "content-container": true,
          "full-width": this.internalcontentbelow,
        }, key: "content-container" }, h("div", { class: "content" }, h("slot", { name: "content" }))));
    }
  }
  render() {
    const contentSlotDefined = isSlotDefined(this.self, "content");
    const useContentBelow = contentSlotDefined && this.internalcontentbelow;
    return (h(Host, { class: {
        "size-medium": this.internalsize === "m",
        "size-large": this.internalsize === "l",
        "content-right": !useContentBelow,
        "content-below": useContentBelow,
      } }, h("button", { id: ElementIdGenerator.createId(this.self, "control"), class: {
        item: true,
        "type-checkbox": this.type === "checkbox",
        "type-selectable": this.type === "selectable",
        "type-default": this.type === "default",
        "type-clickable": this.type === "clickable",
        "type-navigatable": this.actionindicator === "navigate",
        selected: this.selected,
        disabled: this.disabled,
      }, onClick: () => this.listItemInteraction.emit(), disabled: this.disabled || this.type === "default" }, h("div", { class: "select-indicator" })), h("div", { class: {
        "label-content-container": true,
        dragging: this.internaldragging,
        disabled: this.disabled,
      } }, h("div", { class: "default-container" }, this.renderLeftSide(), this.renderLabels(), this.renderRightSide()), this.renderBelowContent()), h("div", { class: "sub-items-container" }, h("slot", null))));
  }
  static get is() { return "dx-list-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-list-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-list-item.css"]
    };
  }
  static get properties() {
    return {
      "internalcontentbelow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Defines whether the content is shown below or next to the label"
            }],
          "text": ""
        },
        "attribute": "internalcontentbelow",
        "reflect": false,
        "defaultValue": "false"
      },
      "internaldraggable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internaldraggable",
        "reflect": false,
        "defaultValue": "false"
      },
      "internaldragging": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internaldragging",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../list.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g. `Hausrat-1`"
            }, {
              "name": "value",
              "text": "object: e.g. `{id: \"hausrat\", index: 1}`"
            }, {
              "name": "example",
              "text": "radio-group"
            }],
          "text": "The internal value of this item, which is either a string or an object.\nIt will be delegated by the `itemSelectionChange` event of the upper `dx-list-flyout` element when the selection changes.\nCurrently only important for dx-dropdown and dx-multi-dropdown."
        },
        "attribute": "value",
        "reflect": true
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ListItemType",
          "resolved": "\"checkbox\" | \"clickable\" | \"default\" | \"radio\" | \"selectable\"",
          "references": {
            "ListItemType": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "default: The item will be displayed with an optional icon and a label."
            }, {
              "name": "value",
              "text": "selectable: The item is displayed like the default and can be selected."
            }, {
              "name": "value",
              "text": "checkbox: The item displays a checkbox instead of an icon. The selection can be toggled by clicking the item."
            }, {
              "name": "example",
              "text": "type"
            }],
          "text": "The type of the item."
        },
        "attribute": "type",
        "reflect": true,
        "defaultValue": "\"default\""
      },
      "internalsize": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"m\" | \"l\"",
          "resolved": "\"l\" | \"m\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "The size of this item."
        },
        "attribute": "internalsize",
        "reflect": true,
        "defaultValue": "\"m\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A text"
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "The text which is displayed within the item."
        },
        "attribute": "label",
        "reflect": true
      },
      "prelabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A text"
            }, {
              "name": "internal",
              "text": undefined
            }],
          "text": "The text which is displayed above the label."
        },
        "attribute": "prelabel",
        "reflect": true
      },
      "sublabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A text"
            }, {
              "name": "example",
              "text": "sub-label"
            }],
          "text": "The text which is displayed below the label."
        },
        "attribute": "sublabel",
        "reflect": true
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The icon name."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The icon which is displayed next to the label."
        },
        "attribute": "icon",
        "reflect": true
      },
      "actionindicator": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ActionIndicatorType",
          "resolved": "\"navigate\"",
          "references": {
            "ActionIndicatorType": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "navigate: The list item implies that another view is shown after clicking it."
            }, {
              "name": "example",
              "text": "action-indicator"
            }],
          "text": "Implies the action which is triggered when this list item is interacted with."
        },
        "attribute": "actionindicator",
        "reflect": false
      },
      "internalanimation": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internalanimation",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The item is displayed in a gray tone and can't be interacted with"
            }, {
              "name": "value",
              "text": "false: The item is displayed normally."
            }, {
              "name": "exmaple",
              "text": "disabled"
            }],
          "text": "Defines whether the item is disabled or not."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "selected": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The item is selected. This state will be visualized according to the `type`."
            }, {
              "name": "value",
              "text": "false: The item is not selected."
            }, {
              "name": "example",
              "text": "selected"
            }],
          "text": "The current selection state of this item."
        },
        "attribute": "selected",
        "reflect": true,
        "defaultValue": "false"
      },
      "textalign": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HorizontalDirection",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "HorizontalDirection": {
              "location": "import",
              "path": "../../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: Text is left aligned."
            }, {
              "name": "value",
              "text": "right: Text is right aligned."
            }, {
              "name": "example",
              "text": "text-align"
            }],
          "text": "Defines the text alignment."
        },
        "attribute": "textalign",
        "reflect": false,
        "defaultValue": "\"left\""
      }
    };
  }
  static get events() {
    return [{
        "method": "listItemInteraction",
        "name": "listItemInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "Fires when interacting with this component.\nCurrently only important for dx-list-flyout."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "dragBegin",
        "name": "dragBegin",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "Point",
          "resolved": "Point",
          "references": {
            "Point": {
              "location": "import",
              "path": "../../../../classes/math-util"
            }
          }
        }
      }, {
        "method": "dragUpdate",
        "name": "dragUpdate",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "Point",
          "resolved": "Point",
          "references": {
            "Point": {
              "location": "import",
              "path": "../../../../classes/math-util"
            }
          }
        }
      }, {
        "method": "dragFinish",
        "name": "dragFinish",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "Point",
          "resolved": "Point",
          "references": {
            "Point": {
              "location": "import",
              "path": "../../../../classes/math-util"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "getRadioElement": {
        "complexType": {
          "signature": "() => Promise<HTMLDxRadioButtonElement>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLDxRadioButtonElement": {
              "location": "global"
            }
          },
          "return": "Promise<HTMLDxRadioButtonElement>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      },
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HTMLElement": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "icon",
        "methodName": "onIconChanged"
      }, {
        "propName": "selected",
        "methodName": "onSelectedChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "internalCheckedChange",
        "method": "onCheckedChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "listItemInteraction",
        "method": "onInteraction",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
const ACTION_INDICATOR_VALUES = ["navigate"];
function isValidActionIndicatorValue(actionIndicatorType) {
  return ACTION_INDICATOR_VALUES.includes(actionIndicatorType);
}
