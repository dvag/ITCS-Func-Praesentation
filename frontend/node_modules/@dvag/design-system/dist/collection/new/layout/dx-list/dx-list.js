import { h, Host, } from "@stencil/core";
import { SlotObserver } from "../../../classes/slot-observer";
/**
 * A list which shows items among themselves.
 *
 * @path /Layout
 * @name List
 * @icon list-ul
 * @stable
 *
 * @slot - An optional number of dx-list-item elements.
 */
export class DxList {
  constructor() {
    /**
     * The default size of the underlying `dx-list-item` elements.
     * @value m: default sized list
     * @value l: large sized list
     * @example size
     */
    this.size = "m";
    /**
     * Indicates whether the list is keeping its width according to the biggest child or keeping the parent's width and wrap the inner labels of the `dx-list-item` elements.
     *
     * @value parent: The list does not overflow the parent width. The labels of the underlying `dx-list-item` elements wrap themselves.
     * @value content: The biggest `dx-list-item` element purports the width of the list.
     */
    this.width = "parent";
    /**
     * Defines whether the content of the child `<dx-list-item>` elements display their content next to or below the label.
     *
     * @value true: The content of the child `<dx-list-item>` elements is displayed below their label.
     * @value false: The content of the child `<dx-list-item>` elements is displayed next to their label.
     */
    this.contentbelow = false;
  }
  connectedCallback() {
    this.slotObserver = new SlotObserver(this.self, "*", () => {
      this.updateChildren();
    });
  }
  componentWillRender() {
    this.updateChildren();
  }
  disconnectedCallback() {
    this.slotObserver.disconnect();
  }
  updateChildren() {
    // Ignore list-items which already are in another dx-list
    const listItems = this.self.querySelectorAll("dx-list-item:not(dx-list:not(:scope) > dx-list-item)");
    listItems.forEach((listItem, index) => {
      listItem.internalcontentbelow = this.contentbelow;
      listItem.internalsize = this.size;
      if (index + 1 === listItems.length) {
        listItem.style.setProperty("--dx-list-item-border-bottom", "none");
      }
      else {
        listItem.style.removeProperty("--dx-list-item-border-bottom");
      }
    });
  }
  render() {
    return (h(Host, { class: {
        content: this.width === "content",
      } }, h("div", { class: {
        "list-container": true,
      } }, h("slot", null))));
  }
  static get is() { return "dx-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-list.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-list.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"m\" | \"l\"",
          "resolved": "\"l\" | \"m\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "m: default sized list"
            }, {
              "name": "value",
              "text": "l: large sized list"
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "The default size of the underlying `dx-list-item` elements."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"m\""
      },
      "width": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"parent\" | \"content\"",
          "resolved": "\"content\" | \"parent\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "parent: The list does not overflow the parent width. The labels of the underlying `dx-list-item` elements wrap themselves."
            }, {
              "name": "value",
              "text": "content: The biggest `dx-list-item` element purports the width of the list."
            }],
          "text": "Indicates whether the list is keeping its width according to the biggest child or keeping the parent's width and wrap the inner labels of the `dx-list-item` elements."
        },
        "attribute": "width",
        "reflect": false,
        "defaultValue": "\"parent\""
      },
      "contentbelow": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The content of the child `<dx-list-item>` elements is displayed below their label."
            }, {
              "name": "value",
              "text": "false: The content of the child `<dx-list-item>` elements is displayed next to their label."
            }],
          "text": "Defines whether the content of the child `<dx-list-item>` elements display their content next to or below the label."
        },
        "attribute": "contentbelow",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get elementRef() { return "self"; }
}
