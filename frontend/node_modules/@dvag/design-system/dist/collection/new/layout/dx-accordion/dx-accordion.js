import { h, Host } from "@stencil/core";
import { findUpperElement } from "../../../classes/misc-util";
/**
 * Displays and collapses content when clicked.
 *
 * @path /Layout/Accordion Group
 * @name Accordion
 * @stable
 * @icon chevron-down
 *
 * @slot - Content which is displayed dependant on the `open` state.
 * @slot-example example
 */
export class DxAccordion {
  constructor() {
    /**
     * Defines whether the content is visible or not.
     *
     * @value true: The content below the header is visible.
     * @value false: The content below the header is not displayed.
     * @example open
     */
    this.open = false;
  }
  connectedCallback() {
    const groupParent = findUpperElement(this.self, "dx-accordion-group");
    if (groupParent == null) {
      console.warn("<dx-accordion> elements should be wrapped inside a <dx-accordion-group> element!", this.self);
    }
  }
  handleHeaderClick() {
    this.open = !this.open;
  }
  render() {
    return (h(Host, null, h("div", { class: "accordion-container" }, h("button", { class: "header", onClick: () => this.handleHeaderClick() }, h("div", { class: "icon-container" }, h("dx-chevron", { directiontop: this.open })), h("div", { class: "label-container" }, h("dx-text", { color: "headline" }, this.label))), h("dx-simple-grow-box", { open: this.open }, h("div", { class: "content" }, h("slot", null))))));
  }
  static get is() { return "dx-accordion"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-accordion.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-accordion.css"]
    };
  }
  static get properties() {
    return {
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The content below the header is visible."
            }, {
              "name": "value",
              "text": "false: The content below the header is not displayed."
            }, {
              "name": "example",
              "text": "open"
            }],
          "text": "Defines whether the content is visible or not."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The title text."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "The text which is displayed within the header."
        },
        "attribute": "label",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
