import { forceUpdate, h, Host, } from "@stencil/core";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
import { clamp } from "../../../classes/math-util";
import { sameArrayInOrder } from "../../../classes/misc-util";
import { onNextFrame } from "../../../classes/render-util";
import { SlotObserver } from "../../../classes/slot-observer";
import { SwipeController } from "./swipe-controller";
/**
 * An element which can display multiple elements in a slide show.
 *
 * @path /Layout
 * @name Slide show
 * @icon images
 * @stable
 */
export class DxSlideShow {
  constructor() {
    this.useTransition = true;
    this.children = [];
    this.swipeController = new SwipeController(() => {
      var _a;
      return {
        elementsBoundingBox: (_a = this.elementsContainer) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect(),
        startAtPercentage: ((this.page - 1) / (this.getMaxPages() - 1)) * 100,
      };
    }, () => {
      this.pageOnSwipeDetectionStart = this.page;
      this.disableTransition();
    }, (swipeDirection) => {
      this.enableTransition();
      if (swipeDirection === "left") {
        this.updateTranslationByPageNumber(this.pageOnSwipeDetectionStart - 1);
      }
      else if (swipeDirection === "right") {
        this.updateTranslationByPageNumber(this.pageOnSwipeDetectionStart + 1);
      }
      else {
        this.updateTranslationByPageNumber();
      }
    }, (updateData) => {
      var _a;
      const elementsBoundingBox = updateData.startValue.elementsBoundingBox;
      const childrenWidth = (_a = this.children[0]) === null || _a === void 0 ? void 0 : _a.offsetWidth;
      const maxX = childrenWidth * this.children.length +
        this.spacebetween * (this.children.length - 1);
      const localStartSwipePositionX = updateData.startX - elementsBoundingBox.x;
      const localStartSwipePercentage = (localStartSwipePositionX / maxX) * 100;
      const localCurrentSwipePositionX = updateData.currentX - elementsBoundingBox.x;
      const localCurrentSwipePercentage = (localCurrentSwipePositionX / maxX) * 100;
      this.updateTranslationByPercentage(updateData.startValue.startAtPercentage +
        (localStartSwipePercentage - localCurrentSwipePercentage));
    });
    this.page = 1;
    /**
     * The initial page which is displayed when loading the component.
     * @value number: The first page to show.
     */
    this.initialpage = 1;
    /**
     * The space between the slotted elements.
     * @value number: Pixel value of the space between the slotted elements.
     */
    this.spacebetween = 0;
    /**
     * Specifies which navigation element should be displayed.
     *
     * @value paginator: A paginator is displayed under the slide-show.
     * @value slider: A slider is displayed under the slide-show.
     * @example slider
     */
    this.viewmode = "paginator";
  }
  onPageChanged() {
    this.pageChange.emit(this.page);
  }
  connectedCallback() {
    var _a;
    this.breakpointAware = new BreakpointAware(() => {
      this.updateTranslationByPageNumber();
      forceUpdate(this);
    }, true);
    this.page = (_a = this.initialpage) !== null && _a !== void 0 ? _a : 1;
    this.slotObserver = new SlotObserver(this.self, ":scope > *", (elements) => {
      var _a;
      if (sameArrayInOrder(this.children, elements)) {
        return;
      }
      this.children = elements;
      if (((_a = this.children) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        this.updateTranslationByPageNumber();
        forceUpdate(this);
      }
    });
  }
  disconnectedCallback() {
    this.slotObserver.disconnect();
    this.breakpointAware.disconnect();
  }
  /**
   * A function to programmatically transition to the specified page.
   * Returns a promise which is fulfilled after the transition is done.
   *
   * @param page The page to transition to.
   * @example set-page
   */
  setPage(page) {
    if (this.page === page) {
      return;
    }
    page = clamp(page, 1, this.getMaxPages());
    const duration = Math.abs(page - this.page) * 300;
    this.updateSlideTransitionDuration(duration);
    this.updateTranslationByPageNumber(page);
    return new Promise((resolve) => {
      setTimeout(() => {
        this.updateSlideTransitionDuration(300);
        resolve();
      }, duration);
    });
  }
  updateSlideTransitionDuration(durationInMs) {
    if (this.elementsContainer) {
      this.elementsContainer.style.setProperty("transition", `transform ${durationInMs}ms ease-in-out`);
    }
  }
  getAmountOfDisplayedChildren() {
    return (Math.min(this.breakpointAware.getEffectiveValue({
      mq1: this.mq1amount,
      mq2: this.mq2amount,
      mq3: this.mq3amount,
      mq4: this.mq4amount,
      mq5: this.mq5amount,
    }), this.getNumberOfChildren()) || 1);
  }
  getTransformValueByPercentage(percentage) {
    const maxPages = this.getMaxPages();
    const amountOfDisplayedChildren = this.getAmountOfDisplayedChildren();
    return `translateX(calc((-${100 / amountOfDisplayedChildren}% - ${this.spacebetween / amountOfDisplayedChildren}px) * ${((maxPages - 1) * percentage) / 100}))`;
  }
  getMaxPages() {
    var _a;
    const numberOfChildren = (_a = this.getNumberOfChildren()) !== null && _a !== void 0 ? _a : 1;
    return numberOfChildren - this.getAmountOfDisplayedChildren() + 1;
  }
  getNumberOfChildren() {
    var _a;
    return (_a = this.children) === null || _a === void 0 ? void 0 : _a.length;
  }
  updateTranslationByPageNumber(page) {
    const maxPages = this.getMaxPages();
    page = clamp(page !== null && page !== void 0 ? page : this.page, 1, maxPages);
    let percentage;
    if (maxPages === 1) {
      percentage = 100;
    }
    else {
      percentage = ((page - 1) / (maxPages - 1)) * 100;
    }
    this.updateTranslationByPercentage(percentage);
  }
  updateTranslationByPercentage(percentage) {
    percentage = clamp(percentage, 0, 100);
    if (this.elementsContainer) {
      this.elementsContainer.style.transform =
        this.getTransformValueByPercentage(percentage);
      this.page = Math.round((percentage / 100) * (this.getMaxPages() - 1)) + 1;
    }
  }
  renderNavigation() {
    if (this.getMaxPages() > 1) {
      return h("div", { class: "navigation" }, this.renderNavigationElement());
    }
  }
  renderNavigationElement() {
    if (this.viewmode === "paginator") {
      return (h("dx-paginator", { count: this.getMaxPages(), current: this.page, onPageChanged: (e) => {
          this.updateTranslationByPageNumber(e.detail);
        } }));
    }
    return (h("dx-slideshow-slider", { max: this.getMaxPages(), value: this.page, onValueChange: (e) => {
        if (!this.useTransition) {
          this.updateTranslationByPageNumber(e.detail); // instant
        }
        else {
          onNextFrame(() => this.updateTranslationByPageNumber(e.detail)); // smooth snap to grid (delayed cause wait for transition style update)
        }
      }, onDragging: (e) => {
        if (e.detail) {
          this.disableTransition();
        }
        else {
          this.enableTransition();
        }
      } }));
  }
  disableTransition() {
    this.useTransition = false;
  }
  enableTransition() {
    this.useTransition = true;
  }
  renderLeftNavigationButton() {
    if (this.viewmode === "paginator") {
      return null;
    }
    return (h("div", { class: "stage-navigation-button left" }, h("dx-button", { id: ElementIdGenerator.createId(this.self, "left-button"), class: {
        "navigation-button": true,
        show: this.page > 1,
      }, icon: "chevron-links", type: "primary-s", onClick: () => {
        this.updateTranslationByPageNumber(this.page - 1);
      } })));
  }
  renderRightNavigationButton() {
    if (this.viewmode === "paginator") {
      return null;
    }
    return (h("div", { class: "stage-navigation-button right" }, h("dx-button", { id: ElementIdGenerator.createId(this.self, "right-button"), class: {
        "navigation-button": true,
        show: this.page < this.getMaxPages(),
      }, icon: "chevron-rechts", type: "primary-s", onClick: () => {
        this.updateTranslationByPageNumber(this.page + 1);
      } })));
  }
  render() {
    var _a;
    if (this.children == null || this.children.length === 0) {
      return;
    }
    return (h(Host, { style: {
        "--dx-slide-show-amount": this.getAmountOfDisplayedChildren().toString(),
        "--dx-slide-show-space-between": (_a = `${this.spacebetween}px`) !== null && _a !== void 0 ? _a : "0",
      } }, h("div", { class: "slide-show-container" }, h("div", { class: "stage" }, this.renderLeftNavigationButton(), h("div", { class: "overflow-container", onTouchStart: (e) => this.swipeController.onTouchStart(e) }, h("div", { class: {
        "elements-container": true,
        "use-transition": this.useTransition,
      }, ref: (ref) => {
        const oldElementsContainer = this.elementsContainer;
        this.elementsContainer = ref;
        if (oldElementsContainer == null) {
          this.updateTranslationByPageNumber();
        }
      } }, h("slot", null))), this.renderRightNavigationButton()), this.renderNavigation())));
  }
  static get is() { return "dx-slide-show"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-slide-show.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-slide-show.css"]
    };
  }
  static get properties() {
    return {
      "mq1amount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of visible items."
            }],
          "text": "Defines the amount of items visible for the MQ1 breakpoint."
        },
        "attribute": "mq1amount",
        "reflect": false
      },
      "mq2amount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of visible items."
            }],
          "text": "Defines the amount of items visible for the MQ2 breakpoint."
        },
        "attribute": "mq2amount",
        "reflect": false
      },
      "mq3amount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of visible items."
            }],
          "text": "Defines the amount of items visible for the MQ3 breakpoint."
        },
        "attribute": "mq3amount",
        "reflect": false
      },
      "mq4amount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of visible items."
            }],
          "text": "Defines the amount of items visible for the MQ4 breakpoint."
        },
        "attribute": "mq4amount",
        "reflect": false
      },
      "mq5amount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of visible items."
            }],
          "text": "Defines the amount of items visible for the MQ5 breakpoint."
        },
        "attribute": "mq5amount",
        "reflect": false
      },
      "initialpage": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The first page to show."
            }],
          "text": "The initial page which is displayed when loading the component."
        },
        "attribute": "initialpage",
        "reflect": false,
        "defaultValue": "1"
      },
      "spacebetween": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Pixel value of the space between the slotted elements."
            }],
          "text": "The space between the slotted elements."
        },
        "attribute": "spacebetween",
        "reflect": false,
        "defaultValue": "0"
      },
      "viewmode": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"paginator\" | \"slider\"",
          "resolved": "\"paginator\" | \"slider\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "paginator: A paginator is displayed under the slide-show."
            }, {
              "name": "value",
              "text": "slider: A slider is displayed under the slide-show."
            }, {
              "name": "example",
              "text": "slider"
            }],
          "text": "Specifies which navigation element should be displayed."
        },
        "attribute": "viewmode",
        "reflect": false,
        "defaultValue": "\"paginator\""
      }
    };
  }
  static get states() {
    return {
      "useTransition": {},
      "page": {}
    };
  }
  static get events() {
    return [{
        "method": "pageChange",
        "name": "pageChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Delegates the current page when it changes."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "setPage": {
        "complexType": {
          "signature": "(page: number) => Promise<void>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "page The page to transition to."
                }],
              "text": "The page to transition to."
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "A function to programmatically transition to the specified page.\nReturns a promise which is fulfilled after the transition is done.",
          "tags": [{
              "name": "param",
              "text": "page The page to transition to."
            }, {
              "name": "example",
              "text": "set-page"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "page",
        "methodName": "onPageChanged"
      }];
  }
}
