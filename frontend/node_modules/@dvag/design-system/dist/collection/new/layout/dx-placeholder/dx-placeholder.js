import { Host, h } from "@stencil/core";
/**
 * Serves as a placeholder during UI interface development to test layout mechanisms.
 *
 * @path /Layout
 * @name Placeholder
 * @stable
 * @icon image
 * @slot - Label that is displayed inside the placeholder.
 *
 */
export class DxPlaceholder {
  render() {
    return (h(Host, { class: {
        box: this.box,
      } }, this.buildContent()));
  }
  buildContent() {
    var _a;
    if (this.box) {
      return h("slot", null);
    }
    if (this.card) {
      const slottedText = ((_a = this.self.textContent) === null || _a === void 0 ? void 0 : _a.length) > 0
        ? this.self.textContent
        : "Card Header";
      return (h("dx-card", null, h("dx-card-header", { label: slottedText }), h("dx-card-content", null, h("dx-text", null, "Placeholder lorem ipsum dolor sit amet, consectetur adipisicing elit. Architecto cupiditate distinctio doloribus."))));
    }
  }
  static get is() { return "dx-placeholder"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-placeholder.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-placeholder.css"]
    };
  }
  static get properties() {
    return {
      "box": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "boolean: Display box."
            }, {
              "name": "example",
              "text": "box"
            }],
          "text": "Displays a box."
        },
        "attribute": "box",
        "reflect": false
      },
      "card": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "boolean: Display card."
            }, {
              "name": "example",
              "text": "card"
            }],
          "text": "Displays a Card."
        },
        "attribute": "card",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
}
