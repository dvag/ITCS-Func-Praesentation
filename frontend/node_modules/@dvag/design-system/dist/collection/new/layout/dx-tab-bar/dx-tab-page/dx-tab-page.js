import { h, Host } from "@stencil/core";
import { assert } from "../../../../classes/assert";
/**
 * Represents one tab and it's content within a `<dx-tab-bar>` element.
 *
 * @path /Layout/Tabs
 * @name Tab-Page
 * @shortname Page
 * @icon file-alt
 * @stable
 *
 * @slot - The content which is displayed when this tab page is selected.
 * @slot-example page-content
 */
export class DxTabPage {
  async toTabPage() {
    return {
      value: this.value || this.label,
      label: this.label,
      element: this.self,
    };
  }
  render() {
    var _a;
    assert(((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0, () => "<dx-tab-page> needs a title by setting the 'label' property");
    return (h(Host, { key: this.value || this.label }, h("slot", null)));
  }
  static get is() { return "dx-tab-page"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-tab-page.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-tab-page.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The label"
            }],
          "text": "The text which is displayed in the tab."
        },
        "attribute": "label",
        "reflect": true
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Identifier"
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Unique identifier of this component within a `<dx-tab-bar>` element.\nThe content will be visible when the corresponding `<dx-tab-bar>` element's `show` property value equals the `name`.\n\nIf no value is specified the parent `dx-tab-bar` elements falls back on the `label` property to differentiate this page."
        },
        "attribute": "value",
        "reflect": true
      }
    };
  }
  static get methods() {
    return {
      "toTabPage": {
        "complexType": {
          "signature": "() => Promise<TabPage>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "TabPage": {
              "location": "local"
            }
          },
          "return": "Promise<TabPage>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
