import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { clamp } from "../../../classes/math-util";
import { PaginatorAnimationController } from "./paginator-animation-controller";
/**
 * A component which helps to track and visualize pagination.
 *
 * @name Paginator
 * @path /Layout
 * @icon exchange-alt
 * @stable
 *
 */
export class DxPaginator {
  constructor() {
    this.shouldInitializeAnimationController = true;
    /**
     * The first page which should be displayed.
     *
     *@value number: A number from 1 to `count`. This property is mutable and will be delegated by the `pageChanged` event.
     *
     * @example current
     */
    this.current = 1;
    this.currentPage = 1;
  }
  onCountChange() {
    if (this.shouldDisplayAnimatablePageButtons()) {
      this.definePaginatorAnimationController();
    }
    else {
      this.paginatorAnimationController = null;
    }
    this.setCurrentPage(this.currentPage);
  }
  onPageChange() {
    this.setCurrentPage(this.current, false);
  }
  componentWillLoad() {
    this.currentPage = this.current;
    verifyElementId(this.self);
    if (this.shouldDisplayAnimatablePageButtons()) {
      this.definePaginatorAnimationController();
    }
  }
  componentDidRender() {
    if (this.shouldInitializeAnimationController &&
      this.shouldDisplayAnimatablePageButtons()) {
      this.paginatorAnimationController.initialize();
      this.shouldInitializeAnimationController = false;
    }
  }
  shouldDisplayAnimatablePageButtons() {
    return this.count > 5;
  }
  definePaginatorAnimationController() {
    this.paginatorAnimationController = new PaginatorAnimationController(this.currentPage, this.count);
    this.shouldInitializeAnimationController = true;
  }
  setCurrentPage(page, emit = true) {
    var _a;
    const clampedPage = clamp(page, 1, Math.max(this.count, 1));
    if (clampedPage !== this.currentPage) {
      this.currentPage = clampedPage;
      (_a = this.paginatorAnimationController) === null || _a === void 0 ? void 0 : _a.setPage(this.currentPage);
      if (emit) {
        this.pageChanged.emit(this.currentPage);
      }
    }
  }
  renderPageButton(page) {
    const isSelected = this.currentPage === page;
    return (h("button", { id: ElementIdGenerator.createId(this.self, `page-${page}`), type: "button", class: {
        "page-button": true,
        "current-page": isSelected,
      }, disabled: isSelected, tabIndex: isSelected ? -1 : 0, onClick: () => this.setCurrentPage(page) }, h("div", { class: "dot" })));
  }
  renderMovableButtons() {
    return Array.from(new Array(9)).map((_, index) => {
      return this.renderMovablePage(index);
    });
  }
  renderMovablePage(index) {
    return (h("div", { class: {
        "movable-page": true,
        "no-animation": true,
      }, key: index, ref: (ref) => { var _a; return (_a = this.paginatorAnimationController) === null || _a === void 0 ? void 0 : _a.setIndex(index, ref); } }, h("div", { class: {
        dot: true,
      } })));
  }
  renderPageButtons() {
    if (this.count <= 1 || isNaN(this.count)) {
      return null;
    }
    if (this.count > 5) {
      return this.renderMovableButtons();
    }
    return (h("div", { class: "page-container" }, Array.from(new Array(this.count)).map((_, index) => {
      return this.renderPageButton(index + 1);
    })));
  }
  render() {
    const leftButtonIsDisabled = this.currentPage > 1;
    const rightButtonIsDisabled = this.currentPage < this.count;
    return (h(Host, { class: {
        hide: this.count <= 1,
      } }, h("dx-button", { id: ElementIdGenerator.createId(this.self, "page-down"), icon: "chevron-links", type: "text", class: {
        "page-switcher": true,
      }, disabled: !leftButtonIsDisabled, onClick: () => this.setCurrentPage(this.currentPage - 1) }), h("div", { class: {
        "pages-container": true,
        "size-small": this.shouldDisplayAnimatablePageButtons(),
      } }, this.renderPageButtons()), h("dx-button", { id: ElementIdGenerator.createId(this.self, "page-up"), icon: "chevron-rechts", type: "text", class: {
        "page-switcher": true,
      }, disabled: !rightButtonIsDisabled, onClick: () => this.setCurrentPage(this.currentPage + 1) })));
  }
  static get is() { return "dx-paginator"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-paginator.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-paginator.css"]
    };
  }
  static get properties() {
    return {
      "count": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Number of pages."
            }, {
              "name": "example",
              "text": "count"
            }],
          "text": "The number of pages."
        },
        "attribute": "count",
        "reflect": false
      },
      "current": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: A number from 1 to `count`. This property is mutable and will be delegated by the `pageChanged` event."
            }, {
              "name": "example",
              "text": "current"
            }],
          "text": "The first page which should be displayed."
        },
        "attribute": "current",
        "reflect": true,
        "defaultValue": "1"
      }
    };
  }
  static get states() {
    return {
      "paginatorItems": {},
      "currentPage": {}
    };
  }
  static get events() {
    return [{
        "method": "pageChanged",
        "name": "pageChanged",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fires when the `current` property changes."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "count",
        "methodName": "onCountChange"
      }, {
        "propName": "current",
        "methodName": "onPageChange"
      }];
  }
}
