export class GridSyntaxParser {
  parse(expression, breakpoint) {
    const splitByRows = expression.split('/');
    const result = {
      rows: splitByRows.map(row => this.parseRow(row)),
      breakpoint,
      expression,
      error: ''
    };
    const naNColumns = result.rows.filter(row => row.type === 'columns').flatMap(row => row.columns).filter(column => isNaN(column.size));
    if (naNColumns.length > 0) {
      result.error += `Fehler beim Parsen von ${breakpoint}="${expression}". Syntaxfehler.`;
    }
    return result;
  }
  parseRow(rowExpression) {
    if (rowExpression === '*') {
      return { type: 'repeat' };
    }
    const splitByMinusChar = rowExpression.split('-');
    const columns = splitByMinusChar.map(char => {
      if (WHITESPACE_MATCHER.test(char)) {
        const size = parseInt(char.match(WHITESPACE_MATCHER)[1]);
        return { type: 'whitespace', size };
      }
      else {
        return { type: 'slotelement', size: parseInt(char) };
      }
    });
    return {
      type: 'columns',
      columns,
    };
  }
}
const WHITESPACE_MATCHER = /^\((.+)\)$/i;
