import { h, Host, } from "@stencil/core";
import { ElementIdGenerator } from "../../../../classes/element-id-handling";
import { clamp } from "../../../../classes/math-util";
import { createNumberArray } from "../../../../classes/misc-util";
/**
 * @internal
 */
export class DxNumberPaginatorPageButton {
  constructor() {
    this.listOpen = false;
  }
  onStateChanged(newState, oldState) {
    if ((isGapPayload(newState) && isGapPayload(oldState)) ||
      (isPagePayload(newState) && isPagePayload(oldState))) {
      return;
    }
    this.previousState = oldState;
    this.listOpen = this.listOpen && isGapPayload(newState);
  }
  onBlur() {
    this.listOpen = false;
  }
  onItemSelectionChanged(e) {
    e.stopPropagation();
    const listItem = e
      .composedPath()
      .find((target) => target.tagName.toLowerCase() === "dx-list-item");
    if (listItem != null) {
      this.pageChange.emit(parseInt(listItem.value.toString()));
    }
  }
  handleClick() {
    this.listOpen = isGapPayload(this.state) && !this.listOpen;
    if (isPagePayload(this.state)) {
      this.pageSelect.emit(this.state.page);
    }
  }
  renderSelectableListItem(value) {
    return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `list-item-${value}`), type: "selectable", value: value.toString(), label: value.toString(), textalign: "left", selected: false }));
  }
  renderListItems(gapState) {
    return createNumberArray(gapState.from, gapState.to).map((value) => {
      return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `list-item-${value}`), type: "selectable", value: value.toString(), label: value.toString(), textalign: "left", selected: false }));
    });
  }
  renderListItemGap() {
    return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `page-gap`), type: "default", label: "..." }));
  }
  renderListItemsWithGap(gapState) {
    const range = 25;
    const firstFrom = gapState.from;
    const firstTo = gapState.from + range;
    const secondFrom = gapState.to - range;
    const secondTo = gapState.to;
    const createListItem = this.renderSelectableListItem.bind(this);
    return createNumberArray(firstFrom, firstTo)
      .map(createListItem)
      .concat(this.renderListItemGap())
      .concat(createNumberArray(secondFrom, secondTo).map(createListItem));
  }
  renderListFlyout(isGap) {
    var _a;
    if (!isGap) {
      return;
    }
    const gapState = (isGap ? this.state : (_a = this.previousState) !== null && _a !== void 0 ? _a : { from: 1, to: 1 });
    const range = gapState.to - gapState.from + 1;
    const displayedRange = clamp(range, 1, 50);
    const hasGap = displayedRange !== range;
    return (h("dx-list-flyout", { open: this.listOpen, position: "bottom", direction: "right", itemsvisible: 3.5, size: "m", selectionmode: null }, hasGap
      ? this.renderListItemsWithGap(gapState)
      : this.renderListItems(gapState)));
  }
  render() {
    const isGap = isGapPayload(this.state);
    return (h(Host, null, h("button", { id: ElementIdGenerator.createId(this.self, `control`), type: "text", class: { button: true, active: this.state.active }, onClick: () => this.handleClick() }, h("dx-text", null, isGap ? "..." : this.state.page)), this.renderListFlyout(isGap)));
  }
  static get is() { return "dx-number-paginator-page-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-number-paginator-page-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-number-paginator-page-button.css"]
    };
  }
  static get properties() {
    return {
      "state": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "PageButtonPayload",
          "resolved": "GapPayload | PagePayload",
          "references": {
            "PageButtonPayload": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        }
      }
    };
  }
  static get states() {
    return {
      "listOpen": {}
    };
  }
  static get events() {
    return [{
        "method": "pageChange",
        "name": "pageChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }, {
        "method": "pageSelect",
        "name": "pageSelect",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "state",
        "methodName": "onStateChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "blur",
        "method": "onBlur",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "listItemInteraction",
        "method": "onItemSelectionChanged",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
function isGapPayload(info) {
  return "from" in info && "to" in info;
}
function isPagePayload(info) {
  return "page" in info && "active" in info;
}
