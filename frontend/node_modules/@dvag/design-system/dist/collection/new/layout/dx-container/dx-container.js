import { h, Host } from "@stencil/core";
import { ColorPalette } from "../../../classes/color-palette";
/**
 * A container which renders content on a background color defined in the color palette.
 * The component has different types to display content in.
 *
 * @path /Layout
 * @name Container
 * @icon box
 * @stable
 */
export class DxContainer {
  constructor() {
    /**
     * The type of the container.
     *
     * @value page: The container contains paddings and margins necessary to position the content in the middle of the screen.
     * This type should only be used in a top level context.
     * @value div: The container behaves like a div.
     */
    this.type = "div";
  }
  renderDivType() {
    return h("slot", null);
  }
  renderPageContainerType() {
    return (h("div", { class: {
        container: true,
        "type-page": this.type === "page",
      } }, h("slot", null)));
  }
  render() {
    var _a;
    const hexColor = (_a = new ColorPalette(true).getColorCode(this.color)) !== null && _a !== void 0 ? _a : "white";
    return (h(Host, { style: {
        "background-color": hexColor,
      } }, this.type === "div"
      ? this.renderDivType()
      : this.renderPageContainerType()));
  }
  static get is() { return "dx-container"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-container.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-container.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"page\" | \"div\"",
          "resolved": "\"div\" | \"page\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "page: The container contains paddings and margins necessary to position the content in the middle of the screen.\nThis type should only be used in a top level context."
            }, {
              "name": "value",
              "text": "div: The container behaves like a div."
            }],
          "text": "The type of the container."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"div\""
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of a color from the color palette."
            }, {
              "name": "example",
              "text": "color"
            }],
          "text": "The background color of the container."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
}
