import { assert } from "../../../../classes/assert";
import { CONTENT_SLOT_NAME } from "../wizard.util";
import { verifyElementId } from "../../../../classes/element-id-handling";
/**
 * Definition of a step within a `<dx-wizard>` component. It contains meta-data which enables the parent wizard component to display a corresponding step.
 *
 * @name Wizard step
 * @shortname Step
 * @path /Layout/Wizard
 * @icon step-forward
 * @meta
 */
export class DxWizardStep {
  constructor() {
    /**
     * Whether this step is already finished or not.
     *
     * @value true: The step is finished. If all previous steps are finished as well the wizard automatically switches to the next page.
     * @value false: The step is not finished yet.
     *
     * @example finished
     */
    this.finished = false;
  }
  onFinishedChanged() {
    this.finishedChange.emit(this.finished);
  }
  connectedCallback() {
    verifyElementId(this.self);
    assert(this.value !== CONTENT_SLOT_NAME, () => `The value "content" should not be used because it is already reserved for the "content" slot of the <dx-wizard> element.`, this.self);
  }
  /**
   * @internal
   */
  async toWizardStep() {
    return {
      label: this.label,
      value: this.value,
      finished: this.finished,
      interact: () => this.interaction.emit(),
      metaStepComponent: this.self,
    };
  }
  static get is() { return "dx-wizard-step"; }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A non-displayed text representing this component. It also serves the purpose of identifying which slot to show when this step is currently edited."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "A unique identifier within a `<dx-wizard>` element."
        },
        "attribute": "value",
        "reflect": true
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The displayed name."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "The displayed name of this step."
        },
        "attribute": "label",
        "reflect": true
      },
      "finished": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The step is finished. If all previous steps are finished as well the wizard automatically switches to the next page."
            }, {
              "name": "value",
              "text": "false: The step is not finished yet."
            }, {
              "name": "example",
              "text": "finished"
            }],
          "text": "Whether this step is already finished or not."
        },
        "attribute": "finished",
        "reflect": true,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "finishedChange",
        "name": "finishedChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }, {
        "method": "interaction",
        "name": "interaction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "interaction"
            }],
          "text": "Fires when the user interacts with this step."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "toWizardStep": {
        "complexType": {
          "signature": "() => Promise<WizardStep>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "WizardStep": {
              "location": "local"
            }
          },
          "return": "Promise<WizardStep>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "finished",
        "methodName": "onFinishedChanged"
      }];
  }
}
