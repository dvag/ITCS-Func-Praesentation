// TODO glitch: ab 1000 kein abstÃ¤nde mehr zwischen den zahlen.
import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { clamp } from "../../../classes/math-util";
import { GAP, generatePageIndexTypes } from "./page-index-type";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
import { createNumberArray } from "../../../classes/misc-util";
import { extractPath } from "../../../classes/event.util";
/**
 * A component used for visualizing and changing pages in any context.
 *
 * @name Number Paginator
 * @shortname Number
 * @path /Layout/Paginator
 * @icon exchange-alt
 *
 * @stable
 */
export class DxNumberPaginator {
  constructor() {
    this.mode = "default";
    /**
     * The current selected page.
     *
     * @value number: The current selected page from 1 to `count`.
     *
     * @example current
     */
    this.current = 1;
  }
  componentDidLoad() {
    verifyElementId(this.self);
  }
  onCountChange() {
    this.setCurrentPage(this.current);
  }
  onPageChange(newValue, oldValue) {
    this.setCurrentPage(newValue);
    if (this.current !== oldValue) {
      this.pageChanged.emit(this.current);
    }
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => {
      this.onBreakpointChange();
    }, true);
  }
  disconnectedCallback() {
    this.breakpointAware.disconnect();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.onBreakpointChange();
  }
  async componentWillRender() {
    if (this.mode === "default") {
      this.pageIndexTypes = generatePageIndexTypes(this.current, this.count, 7);
    }
  }
  onItemSelectionChanged(e) {
    this.current = e.detail;
  }
  onDropdownClicked(event) {
    const listItem = extractPath(event).find((el) => { var _a; return ((_a = el.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "dx-list-item"; });
    if (listItem) {
      this.current = parseInt(listItem.value.toString());
    }
  }
  onBreakpointChange() {
    this.mode = this.breakpointAware.mq1 ? "dropdown" : "default";
  }
  setCurrentPage(page) {
    const clampedPage = clamp(page, 1, Math.max(this.count, 1));
    if (clampedPage !== this.current) {
      this.current = clampedPage;
    }
  }
  renderGap(from, to, idPostfix) {
    return (h("dx-number-paginator-page-button", { id: ElementIdGenerator.createId(this.self, `gap-${idPostfix}`), state: { from, to } }));
  }
  renderPageButton(page) {
    return (h("dx-number-paginator-page-button", { id: ElementIdGenerator.createId(this.self, `page-${page}`), state: { page: page, active: page === this.current }, onPageSelect: (e) => (this.current = e.detail) }));
  }
  renderPageSelection() {
    const renderHandlerOf = {
      default: this.renderPageButtons.bind(this),
      dropdown: this.renderDropdown.bind(this),
    };
    return renderHandlerOf[this.mode]();
  }
  renderDropdown() {
    const range = 25;
    const min = Math.max(2, this.current - range);
    const max = Math.min(this.count - 1, this.current + range);
    const hasMinGap = min > 2;
    const hasMaxGap = max < this.count - 1;
    const arr = createNumberArray(min, max);
    return (h("dx-dropdown", { id: ElementIdGenerator.createId(this.self, `dropdown`), value: this.current.toString(), class: "dropdown", formatter: (str) => `${str} von ${this.count}`, onValueComplete: (e) => {
        this.current = parseInt(e.detail);
      }, onClick: (e) => this.onDropdownClicked(e) }, h("dx-dropdown-option", { value: (1).toString(), label: (1).toString() }), hasMinGap ? (h("dx-dropdown-option", { label: "...", isseparator: true })) : null, arr.map((num) => {
      return (h("dx-dropdown-option", { value: num.toString(), label: num.toString() }));
    }), hasMaxGap ? (h("dx-dropdown-option", { label: "...", isseparator: true })) : null, h("dx-dropdown-option", { value: this.count.toString(), label: this.count.toString() })));
  }
  renderPageButtons() {
    return (h("div", { class: "page-container" }, this.pageIndexTypes.map((page, index) => {
      if (page === GAP) {
        const from = this.pageIndexTypes[index - 1] + 1;
        const to = this.pageIndexTypes[index + 1] - 1;
        return this.renderGap(from, to, index === 1 ? "0" : "1");
      }
      else {
        return this.renderPageButton(page);
      }
    })));
  }
  render() {
    if (this.count <= 1) {
      return null;
    }
    const leftButtonIsDisabled = this.current > 1;
    const rightButtonIsDisabled = this.current < this.count;
    return (h(Host, { class: {
        "mode-default": this.mode === "default",
        "mode-dropdown": this.mode === "dropdown",
      }, style: {
        visibility: this.count <= 1 ? "hidden" : "visible",
      } }, h("dx-button", { id: ElementIdGenerator.createId(this.self, "page-down"), icon: "chevron-links", type: "text", class: {
        "page-switcher": true,
      }, disabled: !leftButtonIsDisabled, onClick: () => this.setCurrentPage(this.current - 1) }), this.renderPageSelection(), h("dx-button", { id: ElementIdGenerator.createId(this.self, "page-up"), icon: "chevron-rechts", type: "text", class: {
        "page-switcher": true,
      }, disabled: !rightButtonIsDisabled, onClick: () => this.setCurrentPage(this.current + 1) })));
  }
  static get is() { return "dx-number-paginator"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-number-paginator.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-number-paginator.css"]
    };
  }
  static get properties() {
    return {
      "count": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of pages."
            }, {
              "name": "example",
              "text": "count"
            }],
          "text": "The number of pages which can be selected."
        },
        "attribute": "count",
        "reflect": false
      },
      "current": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The current selected page from 1 to `count`."
            }, {
              "name": "example",
              "text": "current"
            }],
          "text": "The current selected page."
        },
        "attribute": "current",
        "reflect": true,
        "defaultValue": "1"
      }
    };
  }
  static get states() {
    return {
      "mode": {}
    };
  }
  static get events() {
    return [{
        "method": "pageChanged",
        "name": "pageChanged",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "pagechange"
            }],
          "text": "Triggers when the page changes by interacting with the arrows, the page numbers or the dropdown (MQ1)."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "count",
        "methodName": "onCountChange"
      }, {
        "propName": "current",
        "methodName": "onPageChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "pageChange",
        "method": "onItemSelectionChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
