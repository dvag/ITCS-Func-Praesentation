import { Host, h, } from "@stencil/core";
import { assert } from "../../../../classes/assert";
import { ElementIdGenerator } from "../../../../classes/element-id-handling";
import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { findDuplicatedValues } from "../../../../classes/value";
/**
 * A dropdown for usage in small media queries in <dx-tab-bar>.
 * @internal
 */
export class DxTabDropdown {
  constructor() {
    this.internalOpen = false;
  }
  onItemSelectionChanged(e) {
    const option = this.options.find((option) => { var _a, _b; return option.value === ((_b = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b[0]); });
    this.selectedOption = option;
  }
  connectedCallback() {
    this.optionsObserver =
      createMetaComponentsSlotObserver(this.self, "dx-dropdown-option", async (nodes) => {
        await this.collectOptions(nodes);
        const duplicates = findDuplicatedValues(this.options.filter((option) => !option.isSeparator));
        assert(duplicates.length == 0, () => `It is not allowed for multiple 'dx-dropdown-option' elements to share the same value!\nFollowing duplicated value were found: ${duplicates.join()}`, this.self);
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.optionsObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  async collectOptions(nodes) {
    this.options = await Promise.all(nodes.map((node) => {
      return node.toOption();
    }));
  }
  /**
   * Delegates keyboard events to the underlying list element.
   * The list element itself cannot receive keyboard events because it has a tabIndex of -1.
   */
  onInputKeyDown(event) {
    const listFlyoutElement = this.self.shadowRoot.querySelector("dx-list-flyout");
    if (event.target === listFlyoutElement ||
      event.composedPath().includes(listFlyoutElement)) {
      return;
    }
    if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      event.preventDefault();
    }
    if (this.internalOpen) {
      listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.dispatchEvent(new event.constructor(event.type, event));
    }
    else if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      this.internalOpen = true;
    }
  }
  onInputKeyUp(e) {
    if (["Enter", "Escape"].includes(e.code)) {
      this.closeListAndEmitSelectedOption(this.selectedOption);
    }
  }
  closeListAndEmitSelectedOption(selectedOption) {
    this.internalOpen = false;
    this.valueComplete.emit(selectedOption);
    this.label = selectedOption.label;
  }
  renderItemList() {
    var _a;
    return (_a = this.options) === null || _a === void 0 ? void 0 : _a.map((option, index) => {
      return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `list-item-${index}`), type: "selectable", value: option.value, label: option.label, icon: option.icon, onClick: () => this.closeListAndEmitSelectedOption(option), selected: this.selectedOption === option }));
    });
  }
  renderBaseSlot() {
    return (h("button", { onClick: () => (this.internalOpen = !this.internalOpen), slot: "base", class: { "base-component": true } }, this.renderCurrentValue(), this.renderOpenListButton()));
  }
  renderOpenListButton() {
    return (h("div", { class: {
        "open-list-button": true,
        "list-open": this.internalOpen,
      } }, h("dx-chevron", { class: "chevron", directiontop: this.internalOpen })));
  }
  renderCurrentValue() {
    return (h("div", { class: { "current-value": true } }, h("dx-text", null, this.label), h("div", { class: "golden-line-container" }, h("div", { class: "golden-line" }))));
  }
  render() {
    return (h(Host, { onKeyDown: (e) => this.onInputKeyDown(e), onKeyUp: (e) => this.onInputKeyUp(e), tabIndex: 0 }, h("dx-list-flyout", { class: "list-flyout", itemsvisible: 5.5, size: "m", selectionmode: "single", open: this.internalOpen }, this.renderBaseSlot(), this.renderItemList())));
  }
  static get is() { return "dx-tab-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-tab-dropdown.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-tab-dropdown.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "label",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "internalOpen": {},
      "options": {}
    };
  }
  static get events() {
    return [{
        "method": "valueComplete",
        "name": "valueComplete",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../../dx-list/list.util"
            }
          }
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "itemSelectionChange",
        "method": "onItemSelectionChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
