import { h, Host } from "@stencil/core";
import { onNextFrame } from "../../../classes/render-util";
/**
 * @internal
 */
export class DxPulseIcon {
  constructor() {
    /**
     * Icon subject
     * @value string: Name of the icon.
     * @example all-icons
     */
    this.icon = "placeholder";
  }
  async pulsate() {
    const iconContainer = this.self.shadowRoot.querySelector(".icon-container");
    iconContainer.classList.remove("animate");
    onNextFrame(() => {
      iconContainer.classList.add("animate");
    });
  }
  render() {
    return (h(Host, null, h("div", { class: "icon-container" }, h("dx-icon", { class: "default-icon", icon: this.icon, size: this.size, color: this.color }), h("dx-icon", { class: "animation-icon", icon: this.icon, size: this.size, color: this.color }))));
  }
  static get is() { return "dx-pulse-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-pulse-icon.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-pulse-icon.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the icon."
            }, {
              "name": "example",
              "text": "all-icons"
            }],
          "text": "Icon subject"
        },
        "attribute": "icon",
        "reflect": false,
        "defaultValue": "\"placeholder\""
      },
      "size": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "16: Icon optimized for 16x16"
            }, {
              "name": "value",
              "text": "24: Icon optimized for 24x24"
            }, {
              "name": "value",
              "text": "32: Icon optimized for 32x32"
            }, {
              "name": "value",
              "text": "48: Icon optimized for 48x48"
            }, {
              "name": "value",
              "text": "64: Icon optimized for 64x64"
            }, {
              "name": "value",
              "text": "72: Icon optimized for 72x72"
            }, {
              "name": "example",
              "text": "sizes"
            }],
          "text": "Defines the size of the icon. Most icons are available in different sizes and with different line widths.\n\nIf a `<dx-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases."
        },
        "attribute": "size",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color (see example for references)"
            }, {
              "name": "example",
              "text": "colors"
            }],
          "text": "Overrides the color of an icon. By default a `grey` (`icons`) color is used."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get methods() {
    return {
      "pulsate": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
