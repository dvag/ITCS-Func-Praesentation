import { h, Host } from "@stencil/core";
/**
 * Works like a wrapper around dx-overlay.
 * @internal
 */
export class DxFlyout {
  constructor() {
    this.open = false;
    this.position = "bottom";
    this.direction = "right";
    this.offsety = 0;
    this.hideoverlay = false;
    this.disableOverlay = false;
  }
  onOpenChanged() {
    if (this.open) {
      this.disableOverlay = false;
    }
  }
  connectedCallback() {
    this.disableOverlay = !this.open;
  }
  updateAlignment() {
    this.internalAlignment = {
      alignTop: this.position === "top",
      alignRight: this.direction === "left",
    };
  }
  componentWillRender() {
    this.updateAlignment();
  }
  renderPopupContent() {
    if (this.hideoverlay) {
      return;
    }
    return (h("dx-simple-grow-box", { slot: "overlay", class: "flyout-grow-box", tabIndex: -1, open: this.open, animationmode: this.internalAlignment.alignTop ? "bottom-to-top" : "top-to-bottom", onGrowBoxStateChange: (e) => {
        this.disableOverlay = e.detail === "closed";
      }, reservespaceonopen: true }, h("slot", { name: "overlay" })));
  }
  render() {
    return (h(Host, null, h("dx-overlay", { position: this.position, anchorposition: this.direction === "left" ? "right" : "left", offsety: this.offsety, popupinteractable: this.open, disabled: this.disableOverlay }, h("slot", null), this.renderPopupContent()), " "));
  }
  static get is() { return "dx-flyout"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-flyout.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-flyout.css"]
    };
  }
  static get properties() {
    return {
      "open": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      },
      "position": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "VerticalDirection",
          "resolved": "\"bottom\" | \"top\"",
          "references": {
            "VerticalDirection": {
              "location": "import",
              "path": "../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "position",
        "reflect": false,
        "defaultValue": "\"bottom\""
      },
      "direction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HorizontalDirection",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "HorizontalDirection": {
              "location": "import",
              "path": "../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "direction",
        "reflect": false,
        "defaultValue": "\"right\""
      },
      "offsety": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "offsety",
        "reflect": false,
        "defaultValue": "0"
      },
      "hideoverlay": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "hideoverlay",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "disableOverlay": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "open",
        "methodName": "onOpenChanged"
      }];
  }
}
