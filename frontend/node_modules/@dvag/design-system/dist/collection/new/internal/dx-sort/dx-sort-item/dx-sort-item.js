import { h, Host, } from "@stencil/core";
import { Point, toPoint } from "../../../../classes/math-util";
import { findUpperElementByPredicate } from "../../../../classes/misc-util";
import { SlotObserver } from "../../../../classes/slot-observer";
import { isDraggable } from "../draggable";
/**
 * @hidden
 * A wrapper component which enables a specific element to be dragged around when it uses a `<dx-sort-handle>`.
 */
export class DxSortItem {
  onDragElementChanged() {
    var _a;
    (_a = this.draggableElements) === null || _a === void 0 ? void 0 : _a.forEach((draggableNode) => {
      draggableNode.internaldragging = this.dragElement != null;
    });
  }
  onSortableChange() {
    var _a;
    (_a = this.draggableElements) === null || _a === void 0 ? void 0 : _a.forEach((draggableNode) => {
      draggableNode.internaldraggable = this.internaldraggable;
    });
  }
  connectedCallback() {
    this.slotObserver = new SlotObserver(this.self, "*", (nodes) => {
      this.draggableElements = nodes.filter((node) => isDraggable(node));
      this.draggableElements.forEach((draggableNode) => {
        draggableNode.internaldraggable = this.internaldraggable;
        draggableNode.internaldragging = this.dragElement != null;
      });
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  onDragBegan(e) {
    var _a, _b;
    if (this.isCurrentlyDragging()) {
      return;
    }
    this.draggingStart.emit();
    this.dragElement = this.self.shadowRoot.querySelector(".slot-container");
    this.draggableElements.forEach((draggableElement) => (draggableElement.internaldragging = true));
    this.dragElementRect = this.dragElement.getBoundingClientRect();
    const selfBoundingClientRect = this.self.getBoundingClientRect();
    const offsetParentBoundingClientRect = (_b = (_a = findUpperElementByPredicate(this.self, (element) => getComputedStyle(element).transform !== "none")) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) !== null && _b !== void 0 ? _b : { x: 0, y: 0 };
    const floatingOffset = new Point(2);
    this.startDragOffset = toPoint(selfBoundingClientRect)
      .minus(e.detail)
      .minus(offsetParentBoundingClientRect)
      .minus(floatingOffset);
    this.updateDragElementPosition(e.detail);
  }
  onDragFinished() {
    if (!this.isCurrentlyDragging()) {
      return;
    }
    this.dragElement.style.transform = "translate3d(0,0,0)";
    this.dragElement = null;
    this.draggableElements.forEach((draggableElement) => (draggableElement.internaldragging = false));
    this.dragElementRect = null;
    this.startDragOffset = null;
    this.draggingEnd.emit();
  }
  onWindowMouseMove(e) {
    if (!this.isCurrentlyDragging()) {
      return;
    }
    this.updateDragElementPosition(e.detail);
  }
  isCurrentlyDragging() {
    return this.internaldraggable && this.dragElement != null;
  }
  updateDragElementPosition(position) {
    this.dragElement.style.setProperty("transform", `translate3d(${position.x + this.startDragOffset.x}px, ${position.y + this.startDragOffset.y}px, 0)`);
    this.dragging.emit(position.copy());
  }
  renderPlaceholder() {
    var _a;
    if (this.isCurrentlyDragging()) {
      return (h("div", { style: {
          width: `${this.dragElementRect.width}px`,
          height: `${(_a = this.dragElementRect) === null || _a === void 0 ? void 0 : _a.height}px`,
        } }));
    }
  }
  renderSlot(width, height) {
    return (h("div", { class: {
        "slot-container": true,
      }, style: {
        width: width != null && !isNaN(width) ? `${width}px` : "100%",
        height: height != null && !isNaN(height) ? `${height}px` : "unset",
      } }, h("slot", null)));
  }
  renderContent() {
    var _a, _b;
    if (!this.internaldraggable) {
      return this.renderSlot();
    }
    return [
      this.renderSlot((_a = this.dragElementRect) === null || _a === void 0 ? void 0 : _a.width, (_b = this.dragElementRect) === null || _b === void 0 ? void 0 : _b.height),
      this.renderPlaceholder(),
    ];
  }
  render() {
    return (h(Host, { class: { dragging: this.isCurrentlyDragging() } }, this.renderContent()));
  }
  static get is() { return "dx-sort-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-sort-item.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-sort-item.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Identificator"
            }],
          "text": "Internal representation of the sort item."
        },
        "attribute": "value",
        "reflect": false
      },
      "internaldraggable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "internaldraggable",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "dragElementRect": {},
      "dragElement": {}
    };
  }
  static get events() {
    return [{
        "method": "dragging",
        "name": "dragging",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "Point",
          "resolved": "Point",
          "references": {
            "Point": {
              "location": "import",
              "path": "../../../../classes/math-util"
            }
          }
        }
      }, {
        "method": "draggingStart",
        "name": "draggingStart",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "Point",
          "resolved": "Point",
          "references": {
            "Point": {
              "location": "import",
              "path": "../../../../classes/math-util"
            }
          }
        }
      }, {
        "method": "draggingEnd",
        "name": "draggingEnd",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "dragElement",
        "methodName": "onDragElementChanged"
      }, {
        "propName": "internaldraggable",
        "methodName": "onSortableChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "dragBegin",
        "method": "onDragBegan",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "dragFinish",
        "method": "onDragFinished",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "dragUpdate",
        "method": "onWindowMouseMove",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
