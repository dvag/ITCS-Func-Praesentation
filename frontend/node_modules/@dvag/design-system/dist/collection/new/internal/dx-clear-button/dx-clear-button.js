import { Host, h, } from "@stencil/core";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
/**
 * @internal
 */
export class DxClearButton {
  constructor() {
    this.visible = true;
    this.size = 32;
  }
  render() {
    return (h(Host, null, h("div", { class: {
        "clear-button-container": true,
        "size-24": this.size === 24,
        "size-32": this.size === 32,
        visible: this.visible,
      } }, h("button", { id: ElementIdGenerator.createId(this.self, "control"), tabIndex: -1, class: {
        "clear-button": true,
        visible: true,
      }, onPointerDown: () => this.clearInput.emit() }, h("dx-icon", { icon: "schliessen", size: 24, color: "default" })))));
  }
  static get is() { return "dx-clear-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-clear-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-clear-button.css"]
    };
  }
  static get properties() {
    return {
      "visible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "visible",
        "reflect": false,
        "defaultValue": "true"
      },
      "size": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "24 | 32",
          "resolved": "24 | 32",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "32"
      }
    };
  }
  static get events() {
    return [{
        "method": "clearInput",
        "name": "clearInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
