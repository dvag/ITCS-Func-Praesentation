import { h, Host, writeTask, } from "@stencil/core";
import { SlotObserver } from "../../../classes/slot-observer";
import { sameArrayInOrder } from "../../../classes/misc-util";
/**
 * @internal
 */
export class DxContentSwitcher {
  constructor() {
    this.skipAnimation = false;
  }
  onValueChange() {
    var _a, _b;
    const currentVisibleItemIndex = this.getCurrentVisibleItemIndex();
    const lastVisibleItemIndex = (_a = this.contentChildren) === null || _a === void 0 ? void 0 : _a.findIndex((child) => child.visible);
    (_b = this.contentChildren) === null || _b === void 0 ? void 0 : _b.forEach((element, index) => {
      element.animatable = !this.skipAnimation;
      if (index === currentVisibleItemIndex) {
        this.setVisible(element, index, lastVisibleItemIndex);
      }
      else {
        this.setInvisible(element, index, currentVisibleItemIndex);
      }
    });
    this.skipAnimation = false;
  }
  connectedCallback() {
    this.slotObserver = new SlotObserver(this.self, ":scope > dx-content-switcher-item", (nodes) => {
      if (sameArrayInOrder(nodes, this.contentChildren)) {
        return;
      }
      this.contentChildren = nodes;
      this.initializeValue();
      this.prepareContentChildren();
    });
    this.resizeObserver = new ResizeObserver((entries) => {
      this.currentWidth = entries[0].contentRect.width;
    });
    this.resizeObserver.observe(this.self);
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this.resizeObserver.disconnect();
  }
  getCurrentVisibleItemIndex() {
    var _a;
    return (_a = this.contentChildren) === null || _a === void 0 ? void 0 : _a.findIndex((child) => child.value === this.value);
  }
  initializeValue() {
    var _a, _b;
    const contentWithCurrentValue = (_a = this.contentChildren) === null || _a === void 0 ? void 0 : _a.find((child) => child.value === this.value);
    if (contentWithCurrentValue != null) {
      this.value = (_b = this.contentChildren[0]) === null || _b === void 0 ? void 0 : _b.value;
    }
  }
  prepareContentChildren() {
    var _a;
    const currentVisibleItemIndex = (_a = this.contentChildren) === null || _a === void 0 ? void 0 : _a.findIndex((child) => child.value === this.value);
    writeTask(() => {
      this.contentChildren.forEach((element, index) => {
        element.animatable = false;
        if (index === currentVisibleItemIndex) {
          this.setVisible(element, index, -1);
        }
        else {
          element.style.setProperty("visibility", "hidden");
          this.setInvisible(element, index, currentVisibleItemIndex);
        }
      });
    });
  }
  async showValue(value, animate = true) {
    if (value != null && this.value !== value) {
      this.skipAnimation = !animate;
      this.value = value;
      this.valueChange.emit(this.value);
    }
  }
  render() {
    var _a;
    return (h(Host, { style: {
        "--dx-content-switcher-width": `${(_a = this.currentWidth) !== null && _a !== void 0 ? _a : 0}px`,
      } }, h("slot", null)));
  }
  setVisible(element, index, currentVisibleIndex) {
    if (index === this.contentChildren.length - 1) {
      element.visible = true;
    }
    else if (index === 0) {
      element.visible = true;
      element.reverse = true;
    }
    else {
      element.visible = true;
      element.reverse = index < currentVisibleIndex;
    }
  }
  setInvisible(element, index, currentVisibleIndex) {
    if (index === this.contentChildren.length - 1) {
      element.visible = false;
    }
    else if (index === 0) {
      element.visible = false;
      element.reverse = true;
    }
    else {
      element.visible = false;
      element.reverse = index < currentVisibleIndex;
    }
  }
  static get is() { return "dx-content-switcher"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-content-switcher.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-content-switcher.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "any",
        "mutable": true,
        "complexType": {
          "original": "ContentSwitcherItemValue",
          "resolved": "number | string",
          "references": {
            "ContentSwitcherItemValue": {
              "location": "import",
              "path": "./dx-content-switcher-item/dx-content-switcher-item"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "value",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "currentWidth": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "ContentSwitcherItemValue",
          "resolved": "number | string",
          "references": {
            "ContentSwitcherItemValue": {
              "location": "import",
              "path": "./dx-content-switcher-item/dx-content-switcher-item"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "showValue": {
        "complexType": {
          "signature": "(value: ContentSwitcherItemValue, animate?: boolean) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }, {
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ContentSwitcherItemValue": {
              "location": "import",
              "path": "./dx-content-switcher-item/dx-content-switcher-item"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
