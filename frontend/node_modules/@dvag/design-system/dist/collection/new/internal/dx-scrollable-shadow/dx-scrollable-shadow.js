import { h, Host, } from "@stencil/core";
/**
 * @internal
 */
export class DxScrollableShadow {
  constructor() {
    this.showborders = false;
    this.showTopShadow = false;
    this.showBottomShadow = false;
  }
  connectedCallback() {
    this.updateScrollShadowVisibilities();
    this.resizeObserver = new ResizeObserver(() => {
      this.updateScrollShadowVisibilities();
    });
    this.resizeObserver.observe(this.self);
  }
  disconnectedCallback() {
    this.resizeObserver.disconnect();
  }
  onScrolling() {
    this.updateScrollShadowVisibilities();
  }
  updateScrollShadowVisibilities() {
    const slottedScrollElement = this.self.querySelector("*:not(.shadow)");
    if (slottedScrollElement) {
      this.showTopShadow = slottedScrollElement.scrollTop > 0;
      this.showBottomShadow =
        slottedScrollElement.offsetHeight + slottedScrollElement.scrollTop <
          slottedScrollElement.scrollHeight;
    }
  }
  render() {
    return (h(Host, null, h("div", { class: {
        shadow: true,
        top: true,
        visible: this.showTopShadow,
        "show-border": this.showborders,
      } }), h("div", { class: {
        shadow: true,
        bottom: true,
        visible: this.showBottomShadow,
        "show-border": this.showborders,
      } }), h("slot", null)));
  }
  static get is() { return "dx-scrollable-shadow"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-scrollable-shadow.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-scrollable-shadow.css"]
    };
  }
  static get properties() {
    return {
      "showborders": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": ""
        },
        "attribute": "showborders",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "showTopShadow": {},
      "showBottomShadow": {}
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "scroll",
        "method": "onScrolling",
        "target": undefined,
        "capture": true,
        "passive": true
      }];
  }
}
