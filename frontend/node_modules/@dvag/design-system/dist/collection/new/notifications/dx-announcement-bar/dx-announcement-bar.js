import { h } from "@stencil/core";
import { isSlotUndefined } from "../../../classes/render-util";
/**
 * The announcement bar which is placed inside a `<dx-header>` element to show the user important information.
 *
 * @path /Notifications
 * @name Announcement Bar
 * @shortname Announcement
 * @icon comment
 * @stable
 *
 * @slot - Content which contains information for the user.
 * @slot sublabel - A sublabel which is displayed below the content. (e.g. for error codes)
 */
export class DxAnnouncementBar {
  constructor() {
    /**
     * Specifies the color of the icon.
     *
     * @value string: The background color of this component.
     *
     * @example color
     */
    this.color = "white";
  }
  renderIconContainer() {
    if (!this.icon) {
      return;
    }
    return (h("div", { class: "icon-container" }, h("dx-icon", { icon: this.icon, color: this.iconcolor, size: 24 })));
  }
  renderSubLabel() {
    if (isSlotUndefined(this.self, "sublabel")) {
      return;
    }
    return (h("div", { class: "sub-label" }, h("slot", { name: "sublabel" })));
  }
  renderContent() {
    return (h("div", { class: "content-container" }, h("slot", null), this.renderSubLabel()));
  }
  render() {
    return (h("dx-container", { color: this.color, type: "page" }, h("div", { class: "announcement-content" }, this.renderIconContainer(), this.renderContent())));
  }
  static get is() { return "dx-announcement-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-announcement-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-announcement-bar.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A valid icon name."
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "Specifies the icon which will be shown beside the text."
        },
        "attribute": "icon",
        "reflect": false
      },
      "iconcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A color from the color palette. (e.g. white, default, error, ...);"
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "Specifies the color of the icon."
        },
        "attribute": "iconcolor",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The background color of this component."
            }, {
              "name": "example",
              "text": "color"
            }],
          "text": "Specifies the color of the icon."
        },
        "attribute": "color",
        "reflect": false,
        "defaultValue": "\"white\""
      }
    };
  }
  static get elementRef() { return "self"; }
}
