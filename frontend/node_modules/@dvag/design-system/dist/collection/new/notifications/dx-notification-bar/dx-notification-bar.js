import { h, Host, } from "@stencil/core";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
/**
 * Shows a notification with informations to the user.
 * It has to be closed by the user.
 * @path Notifications
 * @name Notification-Bar
 * @icon info-circle
 * @stable
 *
 * @slot content - The content of this notification.
 */
export class DxNotificationBar {
  constructor() {
    this.closedByUser = false;
    /**
     * Shows or hides the notification.
     * @value true: Notification is displayed.
     * @value false: Notification is hidden.
     * @example header-integration
     */
    this.visible = true;
    this.internalVisiblity = false;
  }
  onVisibileChange() {
    this.internalVisiblity = this.visible;
  }
  componentWillLoad() {
    if (this.visible) {
      this.openNotificationDelayed();
    }
  }
  openNotificationDelayed() {
    setTimeout(() => {
      this.internalVisiblity = true;
    }, 300);
  }
  userClosesNotification() {
    this.closedByUser = true;
    this.visible = false;
  }
  emitCloseEvent() {
    this.closeNotification.emit();
  }
  handleGrowBoxStateChanged(e) {
    if (e.detail !== "closed") {
      return;
    }
    if (!this.visible && this.closedByUser) {
      this.emitCloseEvent();
    }
    this.closedByUser = false;
  }
  renderCloseButton() {
    return (h("div", { class: "close-button-container" }, h("button", { id: ElementIdGenerator.createId(this.self, "close-button"), class: "close-button", onClick: () => this.userClosesNotification() }, h("dx-icon", { icon: "schliessen", size: 24, color: "default" }))));
  }
  render() {
    return (h(Host, null, h("dx-simple-grow-box", { open: this.internalVisiblity, onGrowBoxStateChange: (e) => this.handleGrowBoxStateChanged(e), style: {
        "--dx-simple-grow-box-animation-duration": `${ANIMATION_DURATION}ms`,
      } }, h("div", { class: { "outer-container": true, open: this.internalVisiblity } }, h("div", { class: "notification-container" }, h("div", { class: "content" }, h("slot", { name: "content" })), this.renderCloseButton())))));
  }
  static get is() { return "dx-notification-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-notification-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-notification-bar.css"]
    };
  }
  static get properties() {
    return {
      "visible": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Notification is displayed."
            }, {
              "name": "value",
              "text": "false: Notification is hidden."
            }, {
              "name": "example",
              "text": "header-integration"
            }],
          "text": "Shows or hides the notification."
        },
        "attribute": "visible",
        "reflect": true,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "internalVisiblity": {}
    };
  }
  static get events() {
    return [{
        "method": "closeNotification",
        "name": "closeNotification",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "close-notification"
            }],
          "text": "This event is fired, when the user closes the notification via the close button."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "visible",
        "methodName": "onVisibileChange"
      }];
  }
}
const ANIMATION_DURATION = 500;
