import { Host, h } from "@stencil/core";
import { getPointOnCircle } from "../../../classes/math-util";
/**
 * A spinner to indicate that something is loading.
 *
 * @name Loading indicator
 * @shortname Spinner
 * @path /Visualization
 * @icon spinner
 * @stable
 */
export class DxSpinner {
  constructor() {
    this.lines = [];
    this.internalAnimationDuration = 1500;
    this.counter = 0;
    this.circleWalker = 0;
    /**
     * @internal
     *
     * The number of segments in the circle.
     *
     * @value number: Number of segments.
     */
    this.segments = 12;
    /**
     * Displays the spinner in a light or dark theme.
     *
     * @value light: The segments have a dark tone to contrast a light background.
     * @value dark: The segments have a light tone to contrast a dark background.
     *
     * @example theme
     */
    this.theme = "light";
    /**
     * Specififes the size of the spinner.
     *
     * @value small: Spinner has a size of 16px.
     * @value medium: Spinner has a size of 24px.
     * @value large: Spinner has a size of 32px.
     * @value xlarge: Spinner has a size of 72px.
     *
     * @example size
     */
    this.size = "small";
  }
  onSegmentCountChange() {
    this.computeLines();
  }
  onSizeChanged() {
    this.updateStates();
  }
  componentWillLoad() {
    this.updateStates();
    this.computeLines();
  }
  disconnectedCallback() {
    this.internalAnimationDuration = 0;
  }
  updateStates() {
    this.sizeInPx = this.computeSizeInPx();
    this.strokeWidth = this.computeStrokeWidth();
  }
  computeSizeInPx() {
    if (this.size === "small") {
      return 16;
    }
    else if (this.size === "medium") {
      return 24;
    }
    else if (this.size === "large") {
      return 32;
    }
    else {
      return 72;
    }
  }
  computeStrokeWidth() {
    if (this.size === "small") {
      return 1;
    }
    else if (this.size === "medium") {
      return 2;
    }
    else if (this.size === "large") {
      return 3;
    }
    else {
      return 6;
    }
  }
  computeLines() {
    this.lines = [];
    const halfSizeInPx = this.sizeInPx * 0.5;
    for (let i = 0; i < this.segments; ++i) {
      const angle = (360 / this.segments) * i - 90;
      const innerPoint = getPointOnCircle(halfSizeInPx * 0.5 + this.strokeWidth * 0.5, angle);
      const outerPoint = getPointOnCircle(halfSizeInPx - this.strokeWidth * 0.5, angle);
      innerPoint.x += halfSizeInPx;
      innerPoint.y += halfSizeInPx;
      outerPoint.x += halfSizeInPx;
      outerPoint.y += halfSizeInPx;
      this.lines.push(createLine(innerPoint.x, innerPoint.y, outerPoint.x, outerPoint.y));
    }
  }
  renderSVGLine(line, index) {
    const delay = (this.internalAnimationDuration / this.segments) *
      (this.segments - index);
    const opacity = ((index - 1 + this.segments) % this.segments) / this.segments;
    return (h("svg", { width: this.sizeInPx, height: this.sizeInPx, style: {
        "animation-delay": -delay + "ms",
        opacity: opacity + "",
      } }, h("line", { x1: line.x1, x2: line.x2, y1: line.y1, y2: line.y2, "stroke-linecap": "round", style: {
        stroke: this.theme === "light" ? "#4c4c4c" : "white",
        "stroke-width": this.strokeWidth + "px",
      } })));
  }
  render() {
    return (h(Host, { style: {
        width: this.sizeInPx + "px",
        height: this.sizeInPx + "px",
      } }, this.lines.map((line, index) => {
      return this.renderSVGLine(line, index);
    })));
  }
  static get is() { return "dx-spinner"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-spinner.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-spinner.css"]
    };
  }
  static get properties() {
    return {
      "segments": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "The number of segments in the circle."
            }, {
              "name": "value",
              "text": "number: Number of segments."
            }],
          "text": ""
        },
        "attribute": "segments",
        "reflect": false,
        "defaultValue": "12"
      },
      "theme": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"light\" | \"dark\"",
          "resolved": "\"dark\" | \"light\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "light: The segments have a dark tone to contrast a light background."
            }, {
              "name": "value",
              "text": "dark: The segments have a light tone to contrast a dark background."
            }, {
              "name": "example",
              "text": "theme"
            }],
          "text": "Displays the spinner in a light or dark theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"light\""
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"small\" | \"medium\" | \"large\" | \"xlarge\"",
          "resolved": "\"large\" | \"medium\" | \"small\" | \"xlarge\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "small: Spinner has a size of 16px."
            }, {
              "name": "value",
              "text": "medium: Spinner has a size of 24px."
            }, {
              "name": "value",
              "text": "large: Spinner has a size of 32px."
            }, {
              "name": "value",
              "text": "xlarge: Spinner has a size of 72px."
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "Specififes the size of the spinner."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"small\""
      }
    };
  }
  static get states() {
    return {
      "internalAnimationDuration": {},
      "counter": {},
      "strokeWidth": {},
      "sizeInPx": {},
      "circleWalker": {}
    };
  }
  static get watchers() {
    return [{
        "propName": "segments",
        "methodName": "onSegmentCountChange"
      }, {
        "propName": "size",
        "methodName": "onSizeChanged"
      }];
  }
}
function createLine(x1, y1, x2, y2) {
  return {
    x1,
    y1,
    x2,
    y2,
  };
}
