import { h, Host, } from "@stencil/core";
import { assertPropertyValueByPredicate } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { ModalScrollHelper } from "../../../classes/modal-scroll-helper";
import { PreciseCssSetter } from "../../../classes/precise-css-setter";
import { isSlotDefined } from "../../../classes/render-util";
/**
 * Modal dialog.
 * @path /Modals
 * @name Modal
 * @icon sticky-note
 * @stable
 *
 * @slot content - The content of the modal. Is rendered in the middle of the modal.
 * @slot primary-actions - Buttons in the right lower corner of the modal.
 * @slot secondary-actions - Buttons in the left lower corner of the modal.
 */
export class DxModal {
  constructor() {
    this.state = "closed";
    /**
     * Defines the modal's width dependent on the current breakpoint.
     *
     * @value s: The modal takes up to 444 pixels width.
     * @value m: The modal takes up to 678 pixels width.
     * @value l: The modal takes up to 912 pixels width.
     * @value xl: The modal takes up to 1146 pixels width.
     * @value xxl: The modal takes up to 1380 pixels width.
     *
     * @example width
     */
    this.width = "l";
    this.scrollHandler = () => {
      this.controlOpticalHints();
    };
  }
  visibleChanged() {
    this.visibilityChanged();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.visibilityChanged();
  }
  disconnectedCallback() {
    ModalScrollHelper.instance().unblock(this.self);
  }
  componentDidRender() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.visible) {
      scrollHelper.block(this.self, this.scrollableElement);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  visibilityChanged() {
    if (this.visible && this.state !== "opening") {
      this.state = "opening";
      this.modalOpened.emit();
    }
    else if (!this.visible && this.state !== "closed") {
      // DO NOT EMIT modalClosed
      this.handleClosing();
    }
  }
  onLayoutAnimationEnd() {
    if (this.state === "opening") {
      this.state = "opened";
    }
    else if (this.state === "closing") {
      this.state = "closed";
    }
  }
  handleClosing() {
    this.visible = false;
    this.state = "closing";
  }
  closeModal(reason) {
    let shouldCloseModal = true;
    this.modalClosed.emit({
      reason: reason,
      preventCloseModal: () => {
        shouldCloseModal = false;
      },
    });
    if (shouldCloseModal) {
      this.handleClosing();
    }
  }
  closeModalOnClickOutside(e) {
    if (!e.composedPath().includes(this.modalDialog)) {
      this.closeModal("background");
    }
  }
  setScrollContainer(scrollContainer) {
    var _a, _b;
    (_a = this.scrollableElement) === null || _a === void 0 ? void 0 : _a.removeEventListener("scroll", this.scrollHandler);
    this.scrollableElement = scrollContainer;
    (_b = this.scrollableElement) === null || _b === void 0 ? void 0 : _b.addEventListener("scroll", this.scrollHandler);
  }
  controlOpticalHints() {
    if (!this.scrollableElement) {
      return;
    }
    const scrollDistance = this.scrollableElement.scrollTop;
    const maxScrollDistance = this.scrollableElement.scrollHeight - this.scrollableElement.clientHeight;
    const showHeaderShadow = scrollDistance >= maxScrollDistance || scrollDistance > 0;
    const showFooterShadow = scrollDistance == 0 || scrollDistance < maxScrollDistance;
    requestAnimationFrame(() => {
      new PreciseCssSetter(this.topShadowElement)
        .set("visible", showHeaderShadow)
        .execute();
      new PreciseCssSetter(this.bottomShadowElement)
        .set("visible", showFooterShadow)
        .execute();
    });
  }
  getDefinedHeight() {
    const num = parseInt(this.height);
    return !isNaN(num) ? `${num}px` : undefined;
  }
  render() {
    assertPropertyValueByPredicate("dx-modal", "height", this.height, () => {
      return (["fullscreen", "content", "internal-site-navigation-menu"].includes(this.height) || !isNaN(parseInt(this.height)));
    });
    const isRightContainerDefined = isSlotDefined(this.self, PRIMARY_ACTIONS_SLOT);
    const isLeftContainerDefined = isSlotDefined(this.self, SECONDARY_ACTIONS_SLOT);
    const countOfDefinedSlots = (isRightContainerDefined ? 1 : 0) + (isLeftContainerDefined ? 1 : 0);
    const definedHeight = this.getDefinedHeight();
    return (h(Host, { style: {
        "--dx-modal-height": definedHeight,
      }, class: {
        "size-fullscreen": this.height === "fullscreen",
        "size-content": this.height === "content",
        "size-site-navigation-menu": this.height === "internal-site-navigation-menu",
        "size-defined": definedHeight != undefined,
        "state-closed": this.state === "closed",
        "state-opened": this.state === "opened",
        "state-opening": this.state === "opening",
        "state-closing": this.state === "closing",
      } }, h("div", { class: "overlay" }), h("div", { class: "modal-layout", onClick: (e) => this.closeModalOnClickOutside(e), onAnimationEnd: () => this.onLayoutAnimationEnd() }, h("div", { ref: (el) => (this.modalDialog = el), class: {
        "modal-element": true,
        "width-s": this.width === "s",
        "width-m": this.width === "m",
        "width-l": this.width === "l",
        "width-xl": this.width === "xl",
        "width-xxl": this.width === "xxl",
        "width-site-navigation": this.width === "internal-site-navigation-menu",
      } }, this.renderHeader(), this.renderContent(countOfDefinedSlots), this.renderFooter(countOfDefinedSlots)))));
  }
  renderHeader() {
    return (h("div", { class: "header" }, h("div", { class: "header-content" }, h("div", null, h("dx-text", { type: "ps" }, this.label)), h("div", { class: "header-side" }, h("dx-icon", { onClick: () => this.closeModal("button"), id: ElementIdGenerator.createId(this.self, "close-button"), icon: "schliessen", size: 24, color: "default" }))), h("div", { class: "header-border" })));
  }
  renderContent(countOfDefinedSlots) {
    return (h("div", { class: "modal-content" }, h("div", { class: { topShadow: true }, ref: (ref) => (this.topShadowElement = ref) }), h("ds-scroll-container", { scrollbaroffset: 4, scrollbarwidth: 8, thumbwidth: 8, scrollbarmargin: 8, scrollbarborderradius: 0 }, h("div", { ref: (el) => {
        this.scrollableElement = el;
        this.setScrollContainer(el);
      }, class: {
        content: true,
        "no-footer": countOfDefinedSlots === 0,
      } }, h("slot", { name: "content" }))), h("div", { class: { bottomShadow: true }, ref: (ref) => (this.bottomShadowElement = ref) })));
  }
  renderFooter(countOfDefinedSlots) {
    return (h("div", { class: {
        footer: true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } }, h("div", { class: "footer-border" }), h("div", { class: "footer-content" }, h("div", { class: "footer-left-content" }, h("slot", { name: SECONDARY_ACTIONS_SLOT })), h("div", { class: "footer-right-content" }, h("slot", { name: PRIMARY_ACTIONS_SLOT })))));
  }
  static get is() { return "dx-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-modal.css"]
    };
  }
  static get properties() {
    return {
      "height": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "ModalHeight",
          "resolved": "\"content\" | \"fullscreen\" | \"internal-site-navigation-menu\" | number",
          "references": {
            "ModalHeight": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "fullscreen: The dialog is displayed in fullscreen mode."
            }, {
              "name": "value",
              "text": "content: The dialog adjusts to the content."
            }, {
              "name": "value",
              "text": "number: A custom defined max-height in pixels."
            }, {
              "name": "example",
              "text": "content-small"
            }, {
              "name": "example",
              "text": "content-large"
            }, {
              "name": "example",
              "text": "fullscreen-small"
            }, {
              "name": "example",
              "text": "fullscreen-large"
            }, {
              "name": "example",
              "text": "defined-small"
            }, {
              "name": "example",
              "text": "defined-large"
            }],
          "text": "The modal dialog component can either be displayed in fullscreen, or the dialog adjusts to the size of the content."
        },
        "attribute": "height",
        "reflect": false
      },
      "width": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "| \"s\"\n    | \"m\"\n    | \"l\"\n    | \"xl\"\n    | \"xxl\"\n    | \"internal-site-navigation-menu\"",
          "resolved": "\"internal-site-navigation-menu\" | \"l\" | \"m\" | \"s\" | \"xl\" | \"xxl\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: The modal takes up to 444 pixels width."
            }, {
              "name": "value",
              "text": "m: The modal takes up to 678 pixels width."
            }, {
              "name": "value",
              "text": "l: The modal takes up to 912 pixels width."
            }, {
              "name": "value",
              "text": "xl: The modal takes up to 1146 pixels width."
            }, {
              "name": "value",
              "text": "xxl: The modal takes up to 1380 pixels width."
            }, {
              "name": "example",
              "text": "width"
            }],
          "text": "Defines the modal's width dependent on the current breakpoint."
        },
        "attribute": "width",
        "reflect": false,
        "defaultValue": "\"l\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: the title."
            }],
          "text": "The label of the dialog."
        },
        "attribute": "label",
        "reflect": false
      },
      "visible": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Dialog is visible."
            }, {
              "name": "value",
              "text": "false: Dialog is not visible."
            }],
          "text": "Defines if the dialog is visible or not."
        },
        "attribute": "visible",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "state": {}
    };
  }
  static get events() {
    return [{
        "method": "modalOpened",
        "name": "modalOpened",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "The Event triggers as soon the dialog opens."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "modalClosed",
        "name": "modalClosed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "prevent-background-close"
            }, {
              "name": "example",
              "text": "modal-closed"
            }],
          "text": "The Event triggers, as soon the user closes the dialog via the close button or through clicking on the background behind the modal.\nIt emits an object with meta-data containing the reason the modal was closed and a function to prevent the modal from closing."
        },
        "complexType": {
          "original": "ModalClosedPayload",
          "resolved": "ModalClosedPayload",
          "references": {
            "ModalClosedPayload": {
              "location": "local"
            }
          }
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "visible",
        "methodName": "visibleChanged"
      }];
  }
}
const PRIMARY_ACTIONS_SLOT = "primary-actions";
const SECONDARY_ACTIONS_SLOT = "secondary-actions";
