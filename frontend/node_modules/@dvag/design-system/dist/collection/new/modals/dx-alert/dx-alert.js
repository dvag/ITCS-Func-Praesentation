import { h, Host, writeTask, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { isSlotDefined, isSlotUndefined } from "../../../classes/render-util";
import { SlotObserver } from "../../../classes/slot-observer";
import { ModalScrollHelper } from "../../../classes/modal-scroll-helper";
/**
 * Displays an alert in the center of the screen, blocking most user interactions on the background.
 * @path /Modals
 * @name Alert
 * @icon bell-exclamation
 *
 * @stable
 */
export class DxAlert {
  constructor() {
    /**
     * Defines the visual representation of the button.
     * @value default: Shows the titlestring and icon in a dark color.
     * @value error: Shows the titlestring and icon in a red color to imply an error.
     *
     * @example type-error
     * @example type-default
     */
    this.type = "default";
    /**
     * Defines the visibility of the alert.
     * @value true: Alert is visible.
     * @value false: Alert is not visible.
     *
     * @example visible
     */
    this.visible = false;
    /**
     * Defines in which direction the buttons should be displayed.
     *
     * @value column: The buttons will be displayed from left to right.
     * @value row: The buttons will be displayed from top to bottom.
     *
     * @example actions-direction-row
     * @example actions-direction-column
     * @default "column"
     */
    this.actionsdirection = ActionLayoutDirection.COLUMN;
  }
  componentWillLoad() {
    const exactlyTwoActions = this.self.querySelectorAll("*[slot='action']").length == 2;
    this.internalActionsDirection = exactlyTwoActions
      ? this.actionsdirection
      : ActionLayoutDirection.COLUMN;
    this.slotObserver = new SlotObserver(this.self, "dx-button[slot='action']", (nodes) => {
      nodes.forEach((node, index) => {
        const validIndex = index <= 2;
        assert(validIndex, () => "There is only a maximum of 3 actions permitted. The following element will not be rendered!", node);
        node.slot = validIndex ? node.slot : "no-valid-button";
        node.stretch =
          this.internalActionsDirection === ActionLayoutDirection.COLUMN;
      });
    });
  }
  componentDidRender() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.visible) {
      scrollHelper.block(this.modalDialog);
    }
    else {
      scrollHelper.unblock(this.modalDialog);
    }
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    ModalScrollHelper.instance().unblock(this.self);
  }
  updateShadowVisibility(scrollContainer) {
    this.shadowTopVisible = scrollContainer.scrollTop > 0;
    this.shadowBottomVisible =
      scrollContainer.scrollHeight -
        scrollContainer.scrollTop -
        scrollContainer.offsetHeight >
        0;
  }
  renderIcon(color) {
    if (!this.icon) {
      return;
    }
    return (h("div", { class: "icon-container" }, h("dx-icon", { class: "icon", icon: this.icon, color: color })));
  }
  renderContent() {
    if (this.content) {
      return (h("dx-text", { class: "content", type: "it", color: "paragraph" }, this.content));
    }
  }
  renderSublabel() {
    if (this.sublabel) {
      return (h("dx-text", { class: "sublabel", type: "it", color: "gray-50" }, this.sublabel));
    }
  }
  renderCustom() {
    if (isSlotUndefined(this.self, "custom")) {
      return;
    }
    return (h("div", { class: "custom-container" }, h("slot", { name: "custom" })));
  }
  renderActions() {
    assert(isSlotDefined(this.self, "action"), () => 'You must define at least one button within the "action" slot!');
    return (h("div", { class: {
        "actions-container": true,
        "direction-row": this.internalActionsDirection === ActionLayoutDirection.ROW,
      } }, h("slot", { name: "action" })));
  }
  render() {
    const typeColor = COLOR_FOR_TYPE[this.type];
    return (h(Host, { class: {
        "state-closed": !this.visible,
        "state-opened": this.visible,
      } }, h("div", { class: "alert-container" }, h("dx-card", { class: "alert-card", ref: (el) => (this.modalDialog = el) }, h("dx-card-content", { class: "alert-card-content" }, h("div", { class: "content-container" }, h("div", { class: {
        shadow: true,
        top: true,
        visible: this.shadowTopVisible,
      } }), h("div", { class: {
        shadow: true,
        bottom: true,
        visible: this.shadowBottomVisible,
      } }), h("div", { class: {
        "scrolling-container": true,
        "contains-icon": !!this.icon,
      }, ref: (ref) => {
        writeTask(() => {
          this.updateShadowVisibility(ref);
        });
      }, onScroll: (e) => {
        this.updateShadowVisibility(e.target);
      } }, this.renderIcon(typeColor), h("dx-text", { class: "titlestring", type: "ps", color: typeColor }, this.titlestring), this.renderContent(), this.renderSublabel(), this.renderCustom())), h("div", { class: "horizontal-line" }), this.renderActions())))));
  }
  static get is() { return "dx-alert"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-alert.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-alert.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A valid icon name."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "Specifies the icon which will be shown above the text."
        },
        "attribute": "icon",
        "reflect": false
      },
      "titlestring": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The title."
            }, {
              "name": "example",
              "text": "titlestring"
            }],
          "text": "The title of the dialog."
        },
        "attribute": "titlestring",
        "reflect": false
      },
      "content": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The content which is displayed below the title."
            }, {
              "name": "example",
              "text": "content"
            }],
          "text": "The content of the dialog."
        },
        "attribute": "content",
        "reflect": false
      },
      "sublabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The sublabel."
            }, {
              "name": "example",
              "text": "sublabel"
            }],
          "text": "The sublabel of the dialog which can be used for e.g. error codes."
        },
        "attribute": "sublabel",
        "reflect": false
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "AlertType",
          "resolved": "\"default\" | \"error\"",
          "references": {
            "AlertType": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "default: Shows the titlestring and icon in a dark color."
            }, {
              "name": "value",
              "text": "error: Shows the titlestring and icon in a red color to imply an error."
            }, {
              "name": "example",
              "text": "type-error"
            }, {
              "name": "example",
              "text": "type-default"
            }],
          "text": "Defines the visual representation of the button."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"default\""
      },
      "visible": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Alert is visible."
            }, {
              "name": "value",
              "text": "false: Alert is not visible."
            }, {
              "name": "example",
              "text": "visible"
            }],
          "text": "Defines the visibility of the alert."
        },
        "attribute": "visible",
        "reflect": true,
        "defaultValue": "false"
      },
      "actionsdirection": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ActionLayoutDirection",
          "resolved": "\"column\" | \"row\"",
          "references": {
            "ActionLayoutDirection": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "column: The buttons will be displayed from left to right."
            }, {
              "name": "value",
              "text": "row: The buttons will be displayed from top to bottom."
            }, {
              "name": "example",
              "text": "actions-direction-row"
            }, {
              "name": "example",
              "text": "actions-direction-column"
            }, {
              "name": "default",
              "text": "\"column\""
            }],
          "text": "Defines in which direction the buttons should be displayed."
        },
        "attribute": "actionsdirection",
        "reflect": false,
        "defaultValue": "ActionLayoutDirection.COLUMN"
      }
    };
  }
  static get states() {
    return {
      "internalActionsDirection": {},
      "shadowTopVisible": {},
      "shadowBottomVisible": {}
    };
  }
  static get elementRef() { return "self"; }
}
const COLOR_FOR_TYPE = {
  default: "headline",
  error: "error",
};
const ActionLayoutDirection = {
  ROW: "row",
  COLUMN: "column",
};
