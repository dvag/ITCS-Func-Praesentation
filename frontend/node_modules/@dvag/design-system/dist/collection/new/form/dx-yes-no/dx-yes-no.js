import { Host, h, } from "@stencil/core";
import { assertPropertyValue } from "../../../classes/assert";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
/**
 * Form element that let the user answer yes or no questions.
 *
 * @path /Form
 * @name YesNo
 * @icon arrows-alt-h
 * @stable
 *
 */
export class DxYesNo {
  constructor() {
    /**
     * The value of this component.
     * @important
     * @value yes: yes button is selected
     * @value no: no button is selected.
     * @value unset: Nothing is selected.
     * @example value
     */
    this.value = "yes";
    /**
     * Defines if the buttons are disabled or not.
     * @value true: Buttons are disabled
     * @value false: Buttons are not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Defines the height of the buttons.
     *
     * @value s: Buttons are small.
     * @value m: Buttons are a bit bigger.
     * @example size
     */
    this.size = "s";
  }
  setValue(value) {
    if (this.value === value) {
      this.value = "unset";
    }
    else {
      this.value = value;
    }
    this.valueChange.emit(this.value);
  }
  getButtonTextByType(value) {
    if (value === "yes") {
      return "Ja";
    }
    else if (value === "no") {
      return "Nein";
    }
  }
  renderButton(buttonValue) {
    return (h("button", { id: ElementIdGenerator.createId(this.self, `${buttonValue}-control`), disabled: this.disabled, class: {
        "button-yes-no": true,
        small: this.size === "s",
        medium: this.size === "m",
        selected: this.value === buttonValue,
      }, onClick: () => {
        this.setValue(buttonValue);
      } }, h("div", { class: "inner-container" }, h("dx-text", { type: "ps" }, this.getButtonTextByType(buttonValue)))));
  }
  render() {
    assertPropertyValue("dx-yes-no", "size", this.size, ["s", "m"]);
    return (h(Host, null, h("dx-form-wrapper", { errormessage: this.errormessage }, h("div", { class: { "button-container": true, disabled: this.disabled } }, this.renderButton("yes"), this.renderButton("no")), h("slot", { name: "error-message", slot: "error-message" }))));
  }
  static get is() { return "dx-yes-no"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-yes-no.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-yes-no.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "ButtonValue",
          "resolved": "\"no\" | \"unset\" | \"yes\"",
          "references": {
            "ButtonValue": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "yes: yes button is selected"
            }, {
              "name": "value",
              "text": "no: no button is selected."
            }, {
              "name": "value",
              "text": "unset: Nothing is selected."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "The value of this component."
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "\"yes\""
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Buttons are disabled"
            }, {
              "name": "value",
              "text": "false: Buttons are not disabled"
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Defines if the buttons are disabled or not."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: error message"
            }, {
              "name": "example",
              "text": "error-message"
            }],
          "text": "Error text which is displayed within a red dialog below the input."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ButtonSize",
          "resolved": "\"m\" | \"s\"",
          "references": {
            "ButtonSize": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: Buttons are small."
            }, {
              "name": "value",
              "text": "m: Buttons are a bit bigger."
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "Defines the height of the buttons."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"s\""
      }
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "value-change"
            }],
          "text": "Emits this event when the user changes the value of this input."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
}
