import { Fragment, h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { onNextFrame } from "../../../classes/render-util";
import { isActiveElement } from "../../../classes/misc-util";
import { extractPath } from "../../../classes/event.util";
import { BaselineElement, ReadonlyTextElement, } from "../../functional/base-elements";
import { ErrorMessage } from "../../functional/error-elements";
import { LabeledInputContainer } from "../../functional/input-container";
import { hasError } from "../../../classes/error";
// TODO Implement color change on active
// TODO Implement color change on active
/**
 * Form element for selecting and filtering options in a list.
 *
 * @path /Form
 * @name Combobox
 * @icon caret-square-down
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export class DxCombobox {
  constructor() {
    this.preventReFocus = false;
    this.lastSelectedOption = null;
    this.inputFocused = false;
    this.internalValue = "";
    this.listOpen = false;
    this.waitForMoreInput = false;
    this.isLoading = false;
    /**
     * The maximum height the list can reach when opened.
     *
     * @value number: The height in pixels.
     * @example max-list-height
     */
    this.maxlistheight = undefined;
    /**
     * The text which is displayed within the flyout while the search is in progress.
     *
     * @value string: The loading text.
     * @example loading-text
     */
    this.loadingtext = "Suchergebnisse werden geladen";
    /**
     * The text which is displayed within the flyout when no entries are found with the input provided by the user.
     *
     * @value string: The empty search result text.
     * @example empty-search-text
     */
    this.emptysearchtext = "Keine Suchergebnisse zu Ihrer Eingabe gefunden.";
    /**
     * Defines the size of this input.
     *
     * @value m: medium size text-input
     * @value s: small sized input. Should only be used in special cases.
     * @example size
     */
    this.size = "m";
    /**
     * The value of this input.
     * @important
     * @value string: Value of this input.
     * @example value
     */
    this.value = "";
    /**
     * Placeholder for this input field.
     * @value string: The placeholder.
     * @example placeholder
     */
    this.placeholder = "Bitte eingeben ...";
    /**
     * Defines if the input field is disabled or not.
     * @value true: Input is disabled
     * @value false: Input is not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Input field is in readonly mode.
     * The value of this input is display in an simplified manner.
     * The input field is not interactable.
     * @value false: input is not editable.
     * @value true: input is read-only.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
    /**
     * The minimum number of letters before starting the search.
     * @value number: The number of letters that allow starting the search.
     * @example pre-search-letter-count
     */
    this.presearchlettercount = 0;
  }
  onSelectedOptionChanged(newOption, oldOption) {
    this.internalIcon = (newOption === null || newOption === void 0 ? void 0 : newOption.icon) || (oldOption === null || oldOption === void 0 ? void 0 : oldOption.icon) || this.internalIcon;
  }
  onIsLoadingChanged() {
    var _a;
    if (!this.inputFocused &&
      !this.isLoading &&
      ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      const option = this.findOption(this.internalValue);
      if (option) {
        if (option !== this.selectedOption) {
          this.selectedOption = option;
          if (this.selectedOption) {
            this.selectOption(this.selectedOption);
          }
          else if (!this.inputFocused) {
            this.internalErrorMessage = this.emptysearchtext;
          }
        }
      }
      else {
        this.internalErrorMessage = this.emptysearchtext;
      }
    }
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  onItemSelectionChanged(e) {
    var _a, _b;
    this.selectedOption = this.findOption((_b = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b[0]);
    if (e.detail.reason === "implicit") {
      onNextFrame(() => {
        this.focusControl();
      });
    }
    else {
      this.preventReFocus = true;
      if (isActiveElement(this.inputElement)) {
        this.inputElement.blur();
      }
      else {
        this.onBlurred();
      }
      this.selectOption(this.selectedOption);
    }
  }
  /**
   * Focuses this input field.
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
  }
  onForceUpdateOnChange(e) {
    e.detail(this.self);
  }
  obtainValueChangesFromOutside(force = false) {
    if (force || this.value !== this.internalValue) {
      if (this.value == null && this.internalValue == null) {
        return;
      }
      this.internalValue = this.value;
      this.lastEmittedChangeValue = this.value;
      this.lastEmittedCompleteValue = this.value;
      if (this.inputFocused) {
        this.startSearch(undefined);
      }
    }
  }
  findOption(value) {
    var _a, _b, _c;
    return (_c = (_b = (_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.map((category) => { var _a; return (_a = category.options) !== null && _a !== void 0 ? _a : []; })) === null || _b === void 0 ? void 0 : _b.flat()) === null || _c === void 0 ? void 0 : _c.find((option) => compareLowerCase(getOptionValue(option), value));
  }
  onFocused() {
    if (!this.inputFocused) {
      this.listOpen = true;
      this.startSearch("focus");
    }
    this.inputFocused = true;
    onNextFrame(() => {
      this.focusControl();
    });
  }
  onDocumentBlur() {
    this.preventReFocus = true;
    this.inputElement.blur();
  }
  onBlurred() {
    onNextFrame(() => {
      if (this.preventReFocus || !isActiveElement(this.self)) {
        if (!this.isLoading) {
          const option = this.findOption(this.internalValue);
          if (option) {
            this.selectedOption = option;
            this.selectOption(option);
          }
          else if (this.internalValue !== getOptionValue(this.selectedOption)) {
            // If the combobox is currently not loading check if the selected option has to be changed.
            this.selectedOption = this.internalValue
              ? this.lastSelectedOption
              : null;
            this.internalSelectOption(this.selectedOption);
          }
        }
        else if (this.selectedOption != null) {
          // If the combobox is currently loading, disabled the loading when the value is within the last provided options.
          const option = this.findOption(this.internalValue);
          this.isLoading = option !== this.selectedOption;
        }
        this.listOpen = false;
        this.inputFocused = false;
      }
      this.preventReFocus = false;
    });
  }
  onListFlyoutClicked(event) {
    const clickedOnListItem = extractPath(event).some((el) => { var _a; return ((_a = el.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "dx-list-item"; });
    if (clickedOnListItem) {
      this.emitValueComplete();
    }
  }
  internalClearInput() {
    this.inputElement.value = "";
    this.internalValue = "";
    this.selectedOption = null;
    this.lastSelectedOption = null;
    this.internalErrorMessage = "";
    this.emitValueChange();
  }
  clearInput() {
    this.internalClearInput();
    if (this.inputFocused) {
      this.startSearch("clear");
      onNextFrame(() => {
        this.focusControl();
      });
    }
  }
  onInputKeyDown(event) {
    var _a, _b;
    if (event.key == "Enter") {
      this.enterPress.emit();
      if (!this.isLoading) {
        if (((_b = (_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) === 0) {
          this.internalErrorMessage = this.emptysearchtext;
          this.lastSelectedOption = null;
          this.selectedOption = null;
          this.inputElement.blur();
          return;
        }
        else if (!this.listOpen) {
          const option = this.findOption(this.internalValue);
          if (option) {
            this.selectOption(option);
            this.inputElement.blur();
            return;
          }
        }
      }
      else if (this.isLoading) {
        this.inputElement.blur();
        return;
      }
    }
    if (this.listOpen && ["ArrowDown", "ArrowUp"].includes(event.key)) {
      event.preventDefault();
    }
    const listFlyoutElement = this.self.shadowRoot.querySelector("dx-list-flyout");
    if (event.target === listFlyoutElement) {
      return;
    }
    if (listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.open) {
      listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.dispatchEvent(new event.constructor(event.type, event));
    }
  }
  onInputInput() {
    this.internalValue = this.inputElement.value;
    this.listOpen = true;
    this.startSearch("input");
    this.emitValueChange();
  }
  internalSelectOption(option) {
    var _a;
    this.lastSelectedOption = option;
    const newValue = getOptionValue(option);
    if (newValue != null) {
      this.internalErrorMessage = "";
      this.internalValue = newValue;
    }
    else if (((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      this.internalErrorMessage = this.emptysearchtext;
    }
    else {
      this.internalErrorMessage = "";
    }
    this.emitValueChange();
    this.emitValueComplete();
  }
  selectOption(option) {
    var _a;
    this.internalSelectOption(option);
    this.selectSearchOption.emit((_a = option.data) !== null && _a !== void 0 ? _a : getOptionValue(option));
  }
  startSearch(reason) {
    var _a;
    this.waitForMoreInput =
      ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) < this.presearchlettercount;
    if (this.waitForMoreInput) {
      this.isLoading = false;
      return;
    }
    let providedValues = false;
    requestAnimationFrame(() => {
      this.isLoading = !providedValues;
    });
    this.search.emit({
      value: this.internalValue,
      reason: reason,
      provideValues: (values) => {
        providedValues = true;
        this.searchResult = values;
        this.isLoading = false;
      },
    });
  }
  emitValueChange() {
    const valueCandidate = this.internalValue;
    if (this.lastEmittedChangeValue !== valueCandidate) {
      this.value = valueCandidate;
      this.valueChange.emit(this.value);
      this.lastEmittedChangeValue = this.value;
      if (!this.value) {
        this.selectedOption = null;
      }
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  renderInputIcon() {
    var _a, _b;
    return (h("dx-horizontal-grow-box", { open: !this.inputFocused && ((_b = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.icon) === null || _b === void 0 ? void 0 : _b.length) > 0, forcewidth: 40, animationmode: "open-from-left" }, h("dx-icon", { class: "input-icon", size: 24, icon: this.internalIcon, color: "headline" })));
  }
  renderInput() {
    var _a;
    return (h("label", { class: {
        "container-size-s": this.size === "s",
        "container-size-m": this.size === "m",
      } }, h(LabeledInputContainer, { containerProperties: {
        active: this.inputFocused,
        size: this.size,
        title: this.value,
        error: hasError(this.self) || ((_a = this.internalErrorMessage) === null || _a === void 0 ? void 0 : _a.length) > 0,
      }, labelProperties: {
        disabled: this.disabled,
        label: this.label,
        required: this.required,
        kisynced: this.kisynced,
      } }, h(BaselineElement, null), this.renderInputIcon(), h("input", { enterKeyHint: "next", id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), onInput: () => this.onInputInput(), onKeyDown: (event) => this.onInputKeyDown(event), onFocus: () => this.onFocused(), onBlur: () => this.onBlurred(), type: "text", placeholder: this.placeholder, value: this.internalValue, maxLength: this.limitlength, disabled: this.disabled }), this.renderIconAndClearButton()), this.renderAutocompleteValues()));
  }
  renderDefaultContainer(content) {
    return (h("div", { class: "default-list-container", key: "default-container" }, content));
  }
  renderListContent() {
    var _a;
    if (this.waitForMoreInput) {
      return this.renderDefaultContainer(h("dx-text", null, this.presearchconditiontext ||
        `Bitte geben Sie einen Suchbegriff ein (min. ${this.presearchlettercount} Zeichen).`));
    }
    if (this.isLoading) {
      return this.renderDefaultContainer(h("div", { class: "loading-container" }, h("dx-spinner", { class: "loading-spinner", size: "medium", theme: "light" }), h("dx-text", { color: "headline" }, this.loadingtext)));
    }
    if (((_a = this.searchResult) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      return this.searchResult.map((category) => this.renderCategory(category));
    }
    else {
      return this.renderDefaultContainer(h("dx-text", { color: "headline" }, this.emptysearchtext));
    }
  }
  renderCategory(category) {
    var _a;
    return [
      category.label ? (h("div", { class: "category" }, h("dx-text", { type: "it" }, category.label))) : null,
    ].concat((_a = category.options) === null || _a === void 0 ? void 0 : _a.map((option) => {
      const value = getOptionValue(option);
      return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, value.toLowerCase().replace(" ", "-")), value: value, prelabel: option.preLabel, label: option.label, sublabel: option.subLabel, icon: option.icon, type: "selectable", selected: getOptionValue(this.selectedOption) === value }));
    }));
  }
  renderAutocompleteValues() {
    var _a;
    return (h("dx-list-flyout", { maxheight: this.maxlistheight, defaulthighlightfirst: true, preventSpaceSelection: true, selectonhighlight: false, preventArrowSelection: true, focusable: false, open: this.listOpen, position: "bottom", direction: "right", itemsvisible: 5.5, size: "m", selectionmode: "single", onClick: (event) => this.onListFlyoutClicked(event), class: {
        "respect-label-height": ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0,
      } }, h("div", { slot: "base" }), this.renderListContent()));
  }
  renderOpenListButton() {
    return (h("button", { tabIndex: -1, id: ElementIdGenerator.createId(this.self, "open-list-button"), class: {
        "open-list-button": true,
      }, onClick: () => {
        if (this.inputFocused) {
          this.listOpen = !this.listOpen;
        }
        this.focusControl();
      } }, h("dx-chevron", { directiontop: this.listOpen, active: this.inputFocused })));
  }
  renderIconAndClearButton() {
    var _a;
    const isClearButtonVisible = ((_a = this.internalValue) === null || _a === void 0 ? void 0 : _a.length) > 0;
    return (h(Fragment, null, h("dx-element-swapper", { active: isClearButtonVisible ? "second" : "first" }, h("dx-icon", { slot: "first", size: 24, icon: "lupe", color: "default", class: "display-icon" }), h("dx-element-swapper", { slot: "second", active: this.isLoading && !this.inputFocused ? "first" : "second" }, h("dx-spinner", { slot: "first", size: "medium", theme: "light" }), h("dx-clear-button", { tabIndex: -1, slot: "second", visible: true, size: 24, onClearInput: () => this.clearInput(), id: ElementIdGenerator.createId(this.self, "clear-button") }))), h("dx-spacer", { mq1: "8h" }), h("div", { class: "separator" }), h("dx-spacer", { mq1: "8h" }), this.renderOpenListButton()));
  }
  render() {
    if (this.readonly) {
      return h(ReadonlyTextElement, { text: this.value, label: this.label });
    }
    return (h(Host, { class: { disabled: this.disabled }, onBlur: () => this.onBlurred() }, this.renderInput(), h(ErrorMessage, { self: this.self, message: this.errormessage || this.internalErrorMessage, custom: {
        onFocus: () => {
          this.preventReFocus = true;
        },
        onBlur: () => {
          this.preventReFocus = false;
        },
      } })));
  }
  static get is() { return "dx-combobox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-combobox.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-combobox.css"]
    };
  }
  static get properties() {
    return {
      "maxlistheight": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The height in pixels."
            }, {
              "name": "example",
              "text": "max-list-height"
            }],
          "text": "The maximum height the list can reach when opened."
        },
        "attribute": "maxlistheight",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "loadingtext": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The loading text."
            }, {
              "name": "example",
              "text": "loading-text"
            }],
          "text": "The text which is displayed within the flyout while the search is in progress."
        },
        "attribute": "loadingtext",
        "reflect": false,
        "defaultValue": "\"Suchergebnisse werden geladen\""
      },
      "emptysearchtext": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The empty search result text."
            }, {
              "name": "example",
              "text": "empty-search-text"
            }],
          "text": "The text which is displayed within the flyout when no entries are found with the input provided by the user."
        },
        "attribute": "emptysearchtext",
        "reflect": false,
        "defaultValue": "\"Keine Suchergebnisse zu Ihrer Eingabe gefunden.\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Label e.g `first name`"
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Label which is displayed above the input field."
        },
        "attribute": "label",
        "reflect": false
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"s\" | \"m\"",
          "resolved": "\"m\" | \"s\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "m: medium size text-input"
            }, {
              "name": "value",
              "text": "s: small sized input. Should only be used in special cases."
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "Defines the size of this input."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"m\""
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: error message"
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Error text which is displayed within a red dialog beneath the input."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Value of this input."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "The value of this input."
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "\"\""
      },
      "limitlength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of possible characters."
            }, {
              "name": "example",
              "text": "limit-length"
            }],
          "text": "Limits the amount of characters a user can enter."
        },
        "attribute": "limitlength",
        "reflect": false
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The placeholder."
            }, {
              "name": "example",
              "text": "placeholder"
            }],
          "text": "Placeholder for this input field."
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "\"Bitte eingeben ...\""
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Input is disabled"
            }, {
              "name": "value",
              "text": "false: Input is not disabled"
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Defines if the input field is disabled or not."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: input is not editable."
            }, {
              "name": "value",
              "text": "true: input is read-only."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "Input field is in readonly mode.\nThe value of this input is display in an simplified manner.\nThe input field is not interactable."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not required."
            }, {
              "name": "value",
              "text": "true: Input field is required, and an icon is displayed below the input field."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Input is marked as required."
        },
        "attribute": "required",
        "reflect": false
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with the KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      },
      "presearchconditiontext": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A text describing the condition to start a search."
            }, {
              "name": "example",
              "text": "pre-search-condition-text"
            }],
          "text": "The text which is displayed when the input length is less than the `presearchlettercount`."
        },
        "attribute": "presearchconditiontext",
        "reflect": false
      },
      "presearchlettercount": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The number of letters that allow starting the search."
            }, {
              "name": "example",
              "text": "pre-search-letter-count"
            }],
          "text": "The minimum number of letters before starting the search."
        },
        "attribute": "presearchlettercount",
        "reflect": false,
        "defaultValue": "0"
      }
    };
  }
  static get states() {
    return {
      "inputFocused": {},
      "internalValue": {},
      "options": {},
      "searchResult": {},
      "listOpen": {},
      "internalErrorMessage": {},
      "waitForMoreInput": {},
      "selectedOption": {},
      "isLoading": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "Emits this event when the user changes the value of this input."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "valueComplete",
        "name": "valueComplete",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "This event is emitted when the user accepts the value.\nThe user accepts the value by pressing the Enter key or when the user leave the input."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "search",
        "name": "search",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "search"
            }, {
              "name": "example",
              "text": "select-search-option"
            }, {
              "name": "example",
              "text": "option-labels"
            }, {
              "name": "example",
              "text": "option-icons"
            }],
          "text": "This event is fired, when the user fills out this input.\nThe event paylod contains an controller which can be used to submit autocomplete options."
        },
        "complexType": {
          "original": "ComboboxSearchController",
          "resolved": "ComboboxSearchController",
          "references": {
            "ComboboxSearchController": {
              "location": "local"
            }
          }
        }
      }, {
        "method": "selectSearchOption",
        "name": "selectSearchOption",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "select-search-option"
            }],
          "text": "This event is fired when the user selects an autocomplete options from the list.\nThe event payload contains the `data` of the selected AutoCompleteOption."
        },
        "complexType": {
          "original": "any",
          "resolved": "any",
          "references": {}
        }
      }, {
        "method": "enterPress",
        "name": "enterPress",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "enter-press"
            }],
          "text": "Trigger when the user presses the \"Enter\" key while editing the input field."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focuses this input field.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "selectedOption",
        "methodName": "onSelectedOptionChanged"
      }, {
        "propName": "isLoading",
        "methodName": "onIsLoadingChanged"
      }, {
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "itemSelectionChange",
        "method": "onItemSelectionChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "forceUpdateOnChange",
        "method": "onForceUpdateOnChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "blur",
        "method": "onDocumentBlur",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
function getOptionValue(option) {
  return (option === null || option === void 0 ? void 0 : option.value) || (option === null || option === void 0 ? void 0 : option.label);
}
function compareLowerCase(first, second) {
  return ((first === null || first === void 0 ? void 0 : first.length) === (second === null || second === void 0 ? void 0 : second.length) &&
    (first === null || first === void 0 ? void 0 : first.toLowerCase()) === (second === null || second === void 0 ? void 0 : second.toLowerCase()));
}
