import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { hasError } from "../../../classes/error";
import { ReadonlyTextElement } from "../../functional/base-elements";
import { ErrorMessage } from "../../functional/error-elements";
import { LabeledInputContainer } from "../../functional/input-container";
/**
 * Form element for capturing multiline text input.
 *
 * @path /Form/Inputs
 * @name Textarea
 * @shortname Textarea
 * @icon align-justify
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export class DxTextArea {
  constructor() {
    this.inputFocused = false;
    this.internalValue = "";
    /**
     * Number of lines shown simultaneously.
     * @value number: Number of lines.
     * @example lines
     */
    this.lines = 4;
    /**
     * Placeholder for this text area.
     * @value string: The placeholder text.
     *
     * @example placeholder
     */
    this.placeholder = "Bitte geben Sie hier Ihren Text ein ...";
    /**
     * Text of the textarea.
     * @important
     * @value string: Content of the textarea.
     * @example value
     */
    this.value = "";
    /**
     * Textarea is disabled and cannot be used anymore.
     * Label and border are grey.
     * @value true: Textarea is disabled
     * @value false: Textarea is not disabled
     * @example disabled
     */
    this.disabled = false;
    /**
     * Textarea is in read-only mode.
     * Content of the textare is displayed in a simple way.
     * @value false: Formfield
     * @value true: Shows the content only as text.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks the textarea as mandatory.
     * @value false: Not mandatory (Default).
     * @value true: mandatory field.
     * @example required
     * @example required-maxlength
     */
    this.required = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  /**
   * Sets the focus to the textarea.
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
  }
  onForceUpdateOnChange(e) {
    e.detail(this.self);
  }
  obtainValueChangesFromOutside(force = false) {
    if (force || this.value !== this.internalValue) {
      this.internalValue = this.value;
      this.lastEmittedChangeValue = this.value;
      this.lastEmittedCompleteValue = this.value;
    }
  }
  onInputFocused() {
    this.inputFocused = true;
  }
  onInputBlurred() {
    this.inputFocused = false;
    this.emitValueChange();
    this.emitValueComplete();
  }
  onInputKeyUp(event) {
    this.internalValue = event.target.value;
    this.emitValueChange();
  }
  emitValueChange() {
    this.value = this.internalValue;
    if (this.lastEmittedChangeValue !== this.value) {
      this.valueChange.emit(this.value);
      this.lastEmittedChangeValue = this.value;
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  render() {
    if (this.readonly) {
      return h(ReadonlyTextElement, { text: this.value, label: this.label });
    }
    return (h(Host, { class: { disabled: this.disabled } }, this.renderInput()));
  }
  renderInput() {
    assert(this.maxlength == null || this.maxlength > 0, () => `<dx-text-area> 'maxlength' should not be smaller than 1. `);
    assert(this.maxlength == null || this.maxlength > this.value.length, () => `<dx-text-area> 'value' should not be greater than 'maxlength'`);
    assert(this.lines > 0, () => `<dx-text-area> 'lines' should be greater than 0`);
    return (h("label", null, h(LabeledInputContainer, { containerProperties: {
        active: this.inputFocused,
        size: "m",
        title: this.value,
        error: hasError(this.self),
      }, labelProperties: {
        disabled: this.disabled,
        label: this.label,
        required: this.required,
        kisynced: this.kisynced,
      }, additionalCssStyles: {
        width: "100%",
      } }, h("ds-scroll-container", { style: { height: `${MARGIN_PX + this.lines * LINE_PX}px` }, scrollbarspace: 8, scrollbarborderradius: 0 }, h("textarea", { id: ElementIdGenerator.createId(this.self, "control"), onKeyUp: (event) => this.onInputKeyUp(event), onFocus: () => this.onInputFocused(), onBlur: () => this.onInputBlurred(), ref: (el) => (this.inputElement = el), placeholder: this.placeholder, value: this.internalValue, maxLength: this.maxlength > 0 ? this.maxlength : undefined, disabled: this.disabled }))), h("div", { class: {
        "bottom-info-container": true,
        "one-item": this.maxlength > 0 && !this.errormessage,
        "two-items": this.maxlength > 0 && !!this.errormessage,
      } }, h(ErrorMessage, { self: this.self, message: this.errormessage }), this.renderRemainingLetters())));
  }
  renderRemainingLetters() {
    if (this.maxlength > 0) {
      const remainingLetters = this.maxlength - this.internalValue.length;
      return (h("div", { class: "remaining-letters" }, h("dx-text", { class: "remaining-text", type: "its" }, remainingLetters, " Zeichen verbleibend")));
    }
  }
  static get is() { return "dx-text-area"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-text-area.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-text-area.css"]
    };
  }
  static get properties() {
    return {
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Errormessage"
            }, {
              "name": "example",
              "text": "error-message"
            }],
          "text": "Text that is shown under the textarea in a red dialog."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Label e.g `Notizen`"
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Label shown above the textarea."
        },
        "attribute": "label",
        "reflect": false
      },
      "maxlength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Number of characters"
            }, {
              "name": "example",
              "text": "maxlength"
            }],
          "text": "Maximum number of characters."
        },
        "attribute": "maxlength",
        "reflect": false
      },
      "lines": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Number of lines."
            }, {
              "name": "example",
              "text": "lines"
            }],
          "text": "Number of lines shown simultaneously."
        },
        "attribute": "lines",
        "reflect": false,
        "defaultValue": "4"
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The placeholder text."
            }, {
              "name": "example",
              "text": "placeholder"
            }],
          "text": "Placeholder for this text area."
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "\"Bitte geben Sie hier Ihren Text ein ...\""
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Content of the textarea."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Text of the textarea."
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "\"\""
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Textarea is disabled"
            }, {
              "name": "value",
              "text": "false: Textarea is not disabled"
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Textarea is disabled and cannot be used anymore.\nLabel and border are grey."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Formfield"
            }, {
              "name": "value",
              "text": "true: Shows the content only as text."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "Textarea is in read-only mode.\nContent of the textare is displayed in a simple way."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not mandatory (Default)."
            }, {
              "name": "value",
              "text": "true: mandatory field."
            }, {
              "name": "example",
              "text": "required"
            }, {
              "name": "example",
              "text": "required-maxlength"
            }],
          "text": "Marks the textarea as mandatory."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with the KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "inputFocused": {},
      "internalValue": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "Event is thrown when the user changes the content of the textarea."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }, {
        "method": "valueComplete",
        "name": "valueComplete",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "Event is thrown when the user checks the input. Event is triggered when the user presses Return or\nleaves the textarea."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the focus to the textarea.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "forceUpdateOnChange",
        "method": "onForceUpdateOnChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
const MARGIN_PX = 12 + 12;
const LINE_PX = 22;
