import { Host, h } from "@stencil/core";
/**
 * A toggle is a digital on/off switch which is used to switch a single element on or off or to activate or deactivate something immediately.
 *
 * @path /Form
 * @name Toggle
 * @icon sliders-h
 * @stable
 */
export class DxToggle {
  constructor() {
    /**
     * Defines if the toggle is checked or not.
     * @value true: Toggle is checked
     * @value false: Toggle is not checked
     * @example checked
     */
    this.checked = false;
    /**
     * Defines if the toggle is disabled or not.
     * @value true: Toggle is disabled
     * @value false: Toggle is not disabled
     * @example disabled
     */
    this.disabled = false;
  }
  render() {
    return (h(Host, { class: { disabled: this.disabled, checked: this.checked } }, h("label", { class: "label" }, h("input", { disabled: this.disabled, type: "checkbox", checked: this.checked, onChange: (e) => {
        this.checked = e.target.checked;
        this.checkedChange.emit(this.checked);
      } }), h("div", { class: "toggle-container" }, h("div", { class: "slider" }), h("div", { class: "bubble" }, h("dx-icon", { icon: this.checked ? "check" : "schliessen", size: 16 }))))));
  }
  static get is() { return "dx-toggle"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-toggle.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-toggle.css"]
    };
  }
  static get properties() {
    return {
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Toggle is checked"
            }, {
              "name": "value",
              "text": "false: Toggle is not checked"
            }, {
              "name": "example",
              "text": "checked"
            }],
          "text": "Defines if the toggle is checked or not."
        },
        "attribute": "checked",
        "reflect": true,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Toggle is disabled"
            }, {
              "name": "value",
              "text": "false: Toggle is not disabled"
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Defines if the toggle is disabled or not."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "checkedChange",
        "name": "checkedChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "checked-change"
            }],
          "text": "Emits this event when the user changes the value of this input."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
}
