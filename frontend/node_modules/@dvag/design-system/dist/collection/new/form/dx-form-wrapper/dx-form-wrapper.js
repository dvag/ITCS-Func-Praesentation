import { h, Host } from "@stencil/core";
import { verifyElementId } from "../../../classes/element-id-handling";
import { hasError } from "../../../classes/error";
import { ErrorMessage } from "../../functional/error-elements";
/**
 * A form wrapper component which adds additional states to a slotted block.
 * It wraps content into a labeled container with an optional required asterisk within the label and an optional error container with a message.
 *
 * @name Form Wrapper
 * @shortname Wrapper
 * @path /Form
 * @icon align-justify
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export class DxFormWrapper {
  constructor() {
    /**
     * Indicates that the form is synced with KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
  }
  componentDidLoad() {
    verifyElementId(this.self);
  }
  onForceUpdateOnChange(e) {
    e.stopPropagation();
    e.detail(this.self);
  }
  render() {
    return (h(Host, null, h("div", { class: {
        "form-container": true,
      } }, h("dx-input-label", { type: "ps", class: "input-label", label: this.label, required: this.required, kisynced: this.kisynced, condensedlayout: true }), h("div", { class: {
        "slot-container": true,
        error: hasError(this.self),
      } }, h("slot", null)), h(ErrorMessage, { self: this.self, message: this.errormessage, forceUpdateOnChange: (e) => {
        e.detail(this.self);
      } }))));
  }
  static get is() { return "dx-form-wrapper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-form-wrapper.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-form-wrapper.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Label e.g `first name`"
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Label which is displayed above the slotted content."
        },
        "attribute": "label",
        "reflect": false
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not required."
            }, {
              "name": "value",
              "text": "true: Required."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "An asterisk next to the label indicates that the wrapped form element is required."
        },
        "attribute": "required",
        "reflect": false
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: error message"
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Error text which is displayed below the slotted content."
        },
        "attribute": "errormessage",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "forceUpdateOnChange",
        "method": "onForceUpdateOnChange",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
