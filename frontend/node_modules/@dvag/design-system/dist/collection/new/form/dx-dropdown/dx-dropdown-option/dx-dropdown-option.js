import { assert } from "../../../../classes/assert";
/**
 * Option element within a dropdown.
 *
 * @path /Form/Dropdown
 * @name Dropdown-Option
 * @shortname Option
 * @icon caret-square-down
 * @stable
 */
export class DxDropdownOption {
  /**
   * @internal
   * Extracts this element's properties into a complex javascript object.
   */
  async toOption() {
    var _a;
    assert(typeof this.value !== "number", () => `<dx-dropdown-option> Property 'value' must not be of type 'number'.`);
    return {
      icon: this.icon,
      value: (_a = this.value) !== null && _a !== void 0 ? _a : this.label,
      label: this.label,
      selected: this.selected,
      isSeparator: this.isseparator,
    };
  }
  static get is() { return "dx-dropdown-option"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The icon name."
            }],
          "text": "An icon which is displayed next to the label text."
        },
        "attribute": "icon",
        "reflect": true
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../../../layout/dx-list/list.util"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Internal value as string. (e.g. `\"apple\"`)"
            }, {
              "name": "value",
              "text": "object: Complex type e.g. `{name: \"apple\", amount: 3}`"
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported."
        },
        "attribute": "value",
        "reflect": true
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Displayed text e.g. `Apple`"
            }],
          "text": "The label which is displayed in the option list.\nIn case `value` is undefined, this `label` represents the internal value."
        },
        "attribute": "label",
        "reflect": true
      },
      "selected": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: This option is selected (Depending on the selection rule of the parent dropdown)"
            }, {
              "name": "value",
              "text": "false: This option is not selected."
            }],
          "text": "Whether this option is selected or not. In case the parent dropdown only can select one option at a time, the last\noption which selected attribute is true, will be selected."
        },
        "attribute": "selected",
        "reflect": true
      },
      "isseparator": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": "This is an experimental feature to display a dropdown option as a non-selectable separator."
        },
        "attribute": "isseparator",
        "reflect": false
      }
    };
  }
  static get methods() {
    return {
      "toOption": {
        "complexType": {
          "signature": "() => Promise<NewDropdownOption>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "NewDropdownOption": {
              "location": "local"
            }
          },
          "return": "Promise<NewDropdownOption>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": "Extracts this element's properties into a complex javascript object."
            }]
        }
      }
    };
  }
}
