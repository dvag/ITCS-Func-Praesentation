/**
 * Format a number value based on a specific pattern.
 * The pattern uses '$2' to indicate the placeholder for the number
 * and the count of decimal digits.
 */
export function formatValue(value, pattern) {
  if (pattern) {
    if (pattern.includes("$")) {
      try {
        const match = pattern.match(/(.*)(\$\d)(.*)/); // capture 3 groups: before, digits indicator, after
        const digits = parseInt(match[2].substring(1));
        const formattedNumber = value.toFixed(digits).replace(".", ",");
        return match[1] + formattedNumber + match[3];
      }
      catch (e) {
        throw new Error("Error formatting value '" +
          value +
          "' with pattern '" +
          pattern +
          "'.");
      }
    }
  }
  return value === null || value === void 0 ? void 0 : value.toString();
}
/**
 * Rounds a [relativeValue] (0.0 ... 1.0) within a range defined by [min] and [max] based
 * on a specified [step] size.
 */
export function roundByStep(relativeValue, min, max, step) {
  var _a;
  const computedValue = Math.round((min + relativeValue * (max - min)) / step) * step;
  const fractionDigits = ((_a = step.toString().split(".")[1]) === null || _a === void 0 ? void 0 : _a.length) || 0;
  return parseFloat(computedValue.toFixed(fractionDigits));
}
