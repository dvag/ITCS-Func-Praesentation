import { forceUpdate, h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { throwCompileErrorIfReachable } from "../../../classes/misc-util";
import { BaselineElement } from "../../functional/base-elements";
import { NewKiSyncIcon } from "../../functional/new-ki-snyc-icon";
/**
 * Form element which displays whether something is true or false.
 *
 * @path /Form
 * @name Checkbox
 * @icon check-square
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export class DxCheckBox {
  constructor() {
    /**
     * Disables the ability to interact with this component.
     *
     * @value false: User can interact with this component.
     * @value true: User cannot interact with this component.
     *
     * @example disabled
     */
    this.disabled = false;
    /**
     * Defines if the checkbox is in a read-only state.
     * If the `checked` property is false, the component will not be rendered.
     * @value false: The checkbox is displayed normally.
     * @value true: A success icon and the label are displayed next to each other.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Defines if the checkbox is a required form element.
     * @value false: It is not required to set the checkbox`s `checked` state to true.
     * @value true: The checkbox's `checked` state has to be true to fulfill the requirement.
     * @example required
     */
    this.required = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
    /**
     * Defines whether the checkbox is checked or not.
     * @value false: Checkbox is unchecked.
     * @value true: Checkbox is checked.
     *
     * @example checked
     */
    this.checked = false;
  }
  /**
   * Sets the focus on this component.
   * @example focus
   */
  async focusControl() {
    var _a;
    (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  check(checked) {
    if (!this.disabled) {
      this.checked = checked;
      this.checkedChange.emit(this.checked);
    }
  }
  toggle(e) {
    if (e.code === "Enter") {
      this.check(!this.checked);
    }
  }
  onForceUpdateOnChange(e) {
    e.stopPropagation();
    e.detail(this);
  }
  renderIcon(icon, color) {
    return h("dx-icon", { size: 24, icon: icon, color: color });
  }
  renderCheckboxLabelContainerIcon(type) {
    switch (type) {
      case "interactive":
        return this.renderIcon("check");
      case "readonly":
        return this.renderIcon("check", "headline");
      default:
        throwCompileErrorIfReachable(type);
    }
  }
  renderRequiredIcon() {
    if (!this.required || !this.label) {
      return;
    }
    return (h("dx-icon", { class: "required-icon", icon: "state-required", size: 16 }));
  }
  renderKiSyncIcon() {
    if (!this.kisynced) {
      return;
    }
    return (h("div", { class: {
        "ki-sync-icon-container": true,
        "two-icons-present": this.required && this.kisynced,
      } }, h(NewKiSyncIcon, null)));
  }
  renderCheckboxLabelContainer(containerType) {
    var _a;
    return (h("div", { class: {
        "checkbox-label-container": true,
        "contains-label": ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0,
        interactable: containerType === "interactive",
      } }, h("div", { class: "baseline-container" }, h(BaselineElement, null), h("div", { class: {
        checkbox: true,
        "read-only": containerType === "readonly",
        checked: this.checked,
      } }, this.renderCheckboxLabelContainerIcon(containerType))), h("div", { class: "label-and-icon-container" }, h("dx-text", { class: {
        "label-text": true,
        "margin-right": this.required || this.kisynced,
      } }, this.label), this.renderRequiredIcon(), this.renderKiSyncIcon())));
  }
  renderReadOnly() {
    if (!this.checked) {
      return;
    }
    return h(Host, null, this.renderCheckboxLabelContainer("readonly"));
  }
  render() {
    if (this.readonly) {
      return this.renderReadOnly();
    }
    const nativeInputId = ElementIdGenerator.createId(this.self, "control");
    return (h(Host, null, h("dx-form-wrapper", { id: ElementIdGenerator.createId(this.self, "error-message"), errormessage: this.errormessage, ref: (ref) => {
        if (ref) {
          forceUpdate(ref);
        }
      } }, h("div", { class: "native-input-container" }, h("input", { id: nativeInputId, type: "checkbox", class: "native-input", disabled: this.disabled, checked: this.checked, ref: (ref) => (this.inputElement = ref), onChange: (e) => {
        this.check(e.target.checked);
      } }), this.renderCheckboxLabelContainer("interactive")), h("slot", { name: "error-message", slot: "error-message" }))));
  }
  static get is() { return "dx-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-checkbox.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-checkbox.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Label text."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Text, which is displayed next to the checkbox."
        },
        "attribute": "label",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: User can interact with this component."
            }, {
              "name": "value",
              "text": "true: User cannot interact with this component."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Disables the ability to interact with this component."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: The checkbox is displayed normally."
            }, {
              "name": "value",
              "text": "true: A success icon and the label are displayed next to each other."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "Defines if the checkbox is in a read-only state.\nIf the `checked` property is false, the component will not be rendered."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: It is not required to set the checkbox`s `checked` state to true."
            }, {
              "name": "value",
              "text": "true: The checkbox's `checked` state has to be true to fulfill the requirement."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Defines if the checkbox is a required form element."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with the KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Checkbox is unchecked."
            }, {
              "name": "value",
              "text": "true: Checkbox is checked."
            }, {
              "name": "example",
              "text": "checked"
            }],
          "text": "Defines whether the checkbox is checked or not."
        },
        "attribute": "checked",
        "reflect": true,
        "defaultValue": "false"
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Error text"
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "A text which is displayed in an error popup below the component."
        },
        "attribute": "errormessage",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "checkedChange",
        "name": "checkedChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "check-event"
            }],
          "text": "Delegates the current `checked` value of this component when the user interacts with it."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the focus on this component.",
          "tags": [{
              "name": "example",
              "text": "focus"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "onkeydown",
        "method": "toggle",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "forceUpdateOnChange",
        "method": "onForceUpdateOnChange",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
