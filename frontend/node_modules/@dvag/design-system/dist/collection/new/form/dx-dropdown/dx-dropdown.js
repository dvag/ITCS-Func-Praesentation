import { forceUpdate, h, Host, readTask, writeTask, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { compareObjectsEqual } from "../../../classes/compare-objects";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { hasError } from "../../../classes/error";
import { hookToUpdateProperty, isActiveElement, } from "../../../classes/misc-util";
import { notHidden } from "../../../classes/query-util";
import { onNextFrame } from "../../../classes/render-util";
import { createMetaComponentsSlotObserver, } from "../../../classes/slot-observer";
import { findDuplicatedValues } from "../../../classes/value";
import { ReadonlyTextElement } from "../../functional/base-elements";
import { ErrorMessage } from "../../functional/error-elements";
import { LabeledInputContainer, } from "../../functional/input-container";
/**
 * Form element for selecting options in a list.
 *
 * @path /Form
 * @name Dropdown
 * @icon caret-square-down
 * @stable
 *
 * @slot error-message - This slot can be defined with a `<dx-error-message>` element.
 */
export class DxDropdown {
  constructor() {
    this.lastEmittedChangeValue = null;
    this.lastEmittedCompleteValue = null;
    this.preventReFocus = false;
    this.selectScanningEnabled = true;
    this.options = [];
    this.inputFocused = false;
    this.listOpen = false;
    this.internalValue = null;
    /**
     * The size of the dropdown.
     *
     * @value s: A small dropdown is displayed.
     * @value m: A medium sized dropdown is displayed.
     */
    this.size = "m";
    /**
     * Whether the selection is readonly or editable.
     * If true the value of this component will be visualized as a normal text.
     * @value false: Input is editable.
     * @value true: Input is read-only.
     *
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks this input field as a required form element.
     * @value false: Not required
     * @value true: It is necessary to select an option to fulfill the requirement.
     * @example required
     */
    this.required = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
    /**
     * Placeholder text which is displayed when no option is currently selected.
     * @value string: Placeholder text
     * @example placeholder
     */
    this.placeholder = "Bitte ausw√§hlen ...";
    /**
     * The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null.
     * Other by selecting an option with the mouse or keyboard, it is possible to set this property programmatically.
     *
     * @important
     * @value string: The string value of the selected option.
     * @value object: The value of the selected option in case it's a complex type.
     * @value null: No option selected.
     * @example value
     */
    this.value = null;
    /**
     * Defines the text alignment.
     * @value left: Text is left aligned.
     * @value right: Text is right aligned.
     * @example text-align
     */
    this.textalign = "left";
    /**
     * Defines the position of the dropdown list.
     * @value top: The list is displayed at the top of the input field.
     * @value bottom: The list is displayed at the bottom of the input field.
     * @example popup-position
     */
    this.popupposition = "bottom";
    /**
     * Whether it is possible to select an option which is not present in the current option list.
     *
     * @value false: The user can only select an option in the list.
     * @value true: The user is able to set a value which is not present in the option list by editing a text field under
     * the selection input field.
     * @example elseoption
     */
    this.elseoption = false;
    /**
     * The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`.
     * @value string: Button label
     * @example elseoption
     */
    this.elseoptionbuttonlabel = "Sonstige Eingabe";
    /**
     * The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`.
     * @value string: Text input label.
     * @example elseoption
     */
    this.elseoptioninputlabel = "Sonstige Eingabe";
    /**
     * Determines if the else-option input field is visible to the user. This property automatically changes
     * on user interaction or providing a value that doesn't match any dropdown options.
     * @value false: Else-option input field is not displayed.
     * @value true: Else-option input field is displayed.
     * @example elseoption-selected
     */
    this.elseoptionselected = false;
    /**
     * Defines whether the dropdown is enabled or not.
     * @value true: Dropdown is not editable.
     * @value false: Dropdown is editable.
     * @example disabled
     */
    this.disabled = false;
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
    this.internalPopupPosition = this.popupposition;
  }
  connectedCallback() {
    this.optionsObserver =
      createMetaComponentsSlotObserver(this.self, "dx-dropdown-option", async (nodes) => {
        await this.collectOptions(nodes);
        this.findSelectedOption();
        const duplicates = findDuplicatedValues(this.options.filter((option) => !option.isSeparator));
        assert(duplicates.length == 0, () => `It is not allowed for multiple 'dx-dropdown-option' elements to share the same value!\nFollowing duplicated value were found: ${duplicates.join()}`, this.self);
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.optionsObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  onForceUpdateOnChange(e) {
    e.detail(this.self);
  }
  /**
   * Sets the focus on this element.
   *
   * @example focus
   */
  async focusControl() {
    this.inputElement.focus();
  }
  /**
   * If the value changed from outside we need to check what option to use.
   * Possible cases can be:
   * - Setting value attribute
   * - Set of possible <dx-dropdown-option> changed
   * - Native <select> supervise detected a value change
   */
  findSelectedOption() {
    if (this.self.querySelectorAll(notHidden("dx-dropdown-option")).length !==
      this.options.length) {
      return; // can't decide now, cause not all option nodes are initialized
    }
    const optionMatchingValue = this.options.find((option) => option.value === this.value);
    if (!this.elseoptionselected && optionMatchingValue != null) {
      // Is there an option matching the value and our internal selectedOption is unset or set to a different option?
      if (this.selectedOption == null ||
        !compareObjectsEqual(optionMatchingValue, this.selectedOption)) {
        this.selectedOption = optionMatchingValue;
      }
    }
    else if (this.elseoption && this.internalValue !== null) {
      // Is elseoption enabled and therefore we don't need to match an option and use the value as elseoption value?
      this.elseoptionselected = true;
      this.selectedOption = null;
    }
    else {
      // We couldn't figure out an existing option => no option set
      this.selectedOption = null;
      this.elseoptionselected = false;
    }
  }
  async collectOptions(nodes) {
    const previousOptions = this.options;
    this.options = await Promise.all(nodes.map((node) => {
      return node.toOption();
    }));
    if (this.options.length > 0 && previousOptions.length > 0) {
      this.findSelectedOption();
    }
  }
  // Always keep internalValue in sync with nativeSelect value. Otherwise there could be a race condition where a selection fails.
  updateInternalValue(newValue) {
    this.internalValue = newValue;
    if (this.nativeSelect) {
      writeTask(() => {
        this.nativeSelect.value = JSON.stringify(this.internalValue);
      });
    }
  }
  obtainValueChangesFromOutside(force = false) {
    this.sanitizeValue();
    if (force || this.value !== this.internalValue) {
      this.updateInternalValue(this.value);
      this.lastEmittedChangeValue = this.value;
      this.lastEmittedCompleteValue = this.value;
      this.findSelectedOption();
    }
  }
  sanitizeValue() {
    if (this.value === undefined || this.value === NULL_STRING) {
      this.value = null;
    }
  }
  onInputFocused() {
    this.inputFocused = true;
  }
  onInputBlurred() {
    onNextFrame(() => {
      if (this.preventReFocus || !isActiveElement(this.self)) {
        this.inputFocused = false;
        this.setOpenListStatus(false);
        this.emitValueChange();
        this.emitValueComplete();
      }
      else {
        this.inputElement.focus();
      }
      this.preventReFocus = false;
    });
  }
  toggleList() {
    this.setOpenListStatus(!this.listOpen);
  }
  onInputKeyUp(event) {
    if (["Enter", "Escape"].includes(event.code)) {
      this.setOpenListStatus(false);
      this.emitValueComplete();
    }
  }
  /**
   * Delegates keyboard events to the underlying list element.
   * The list element itself cannot receive keyboard events because it has a tabIndex of -1.
   */
  onInputKeyDown(event) {
    const listFlyoutElement = this.self.shadowRoot.querySelector("dx-list-flyout");
    if (event.target === listFlyoutElement) {
      return;
    }
    if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      event.preventDefault();
    }
    if (this.listOpen) {
      listFlyoutElement === null || listFlyoutElement === void 0 ? void 0 : listFlyoutElement.dispatchEvent(new event.constructor(event.type, event));
    }
    else if (["ArrowDown", "ArrowUp", "Space"].includes(event.code)) {
      this.setOpenListStatus(true);
    }
  }
  onInputClicked() {
    if (!this.disabled) {
      this.toggleList();
    }
  }
  setOpenListStatus(isOpen) {
    this.listOpen = isOpen;
    if (this.listOpen) {
      this.inputElement.focus();
    }
  }
  /**
   * Used by the hidden native <select> to react to changes.
   */
  selectOptionsByValue(text) {
    if (text === NULL_STRING || text === "") {
      if (this.internalValue !== null) {
        this.selectedOption = null;
        this.updateInternalValue(null);
        this.emitValueChange();
      }
    }
    else {
      const optionWithValueMatchingText = this.options.find((option) => JSON.stringify(option.value) === text);
      if (optionWithValueMatchingText != null) {
        this.selectedOption = optionWithValueMatchingText;
        this.updateInternalValue(this.selectedOption.value);
        this.elseoptionselected = false;
        this.emitValueChange();
      }
      else {
        this.updateInternalValue(this.internalValue);
      }
    }
  }
  requestElseOption() {
    this.elseoptionselected = true;
    this.selectedOption = null;
    this.updateInternalValue("");
    onNextFrame(() => {
      var _a;
      (_a = this.elseOptionInput) === null || _a === void 0 ? void 0 : _a.focusControl();
    });
  }
  selectValueFromElseOption(value) {
    this.updateInternalValue(value);
    this.emitValueChange();
  }
  emitValueChange() {
    this.value = this.internalValue;
    if (this.lastEmittedChangeValue !== this.value) {
      this.valueChange.emit(this.value);
      this.lastEmittedChangeValue = this.value;
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  selectOption(option) {
    this.selectedOption = option;
    this.elseoptionselected = false;
    this.updateInternalValue(this.selectedOption.value);
    this.emitValueChange();
  }
  superviseSelectElement(el) {
    readTask(() => {
      this.nativeSelect = el;
      // When the value of the select changes we want to run the code below
      hookToUpdateProperty(el, "value", () => {
        var _a;
        const areAllOptionsScanned = () => el.querySelectorAll("option").length >= this.options.length + 1;
        if (!this.elseoptionselected &&
          this.selectScanningEnabled &&
          !this.readonly &&
          JSON.stringify((_a = this.internalValue) !== null && _a !== void 0 ? _a : "null") !== el.value &&
          areAllOptionsScanned()) {
          this.selectOptionsByValue(el.value);
        }
      });
    });
  }
  onItemSelectionChanged(e) {
    const option = this.options.find((option) => { var _a, _b; return option.value === ((_b = (_a = e.detail) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b[0]); });
    this.selectOption(option);
  }
  onPopupPositionChanged(e) {
    this.internalPopupPosition = e.detail;
  }
  isChevronRotated() {
    // If list is open rotate chevron icon
    let rotated = this.listOpen;
    // If popupposition is at the top, invert current rotation
    if (this.internalPopupPosition === "top") {
      rotated = !rotated;
    }
    return rotated;
  }
  format(str) {
    var _a, _b;
    return (_b = (_a = this.formatter) === null || _a === void 0 ? void 0 : _a.call(this, str)) !== null && _b !== void 0 ? _b : str;
  }
  renderErrorMessage() {
    if (this.elseoptionselected) {
      return;
    }
    return (h(ErrorMessage, { self: this.self, message: this.errormessage, custom: {
        onFocus: () => {
          this.preventReFocus = true;
        },
        onBlur: () => {
          this.preventReFocus = false;
        },
      } }));
  }
  render() {
    var _a, _b, _c, _d;
    if (this.readonly) {
      return (h(ReadonlyTextElement, { text: (_b = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.label) !== null && _b !== void 0 ? _b : "", label: this.label }));
    }
    return (h(Host, { class: {
        disabled: this.disabled,
      } }, " ", h("div", { class: {
        input: true,
        "size-s": this.size === "s",
        "size-m": this.size === "m",
      }, ref: (el) => (this.inputElement = el), id: ElementIdGenerator.createId(this.self, "user-interaction"), tabIndex: this.disabled ? -1 : 0, onKeyDown: (event) => this.onInputKeyDown(event), onKeyUp: (event) => this.onInputKeyUp(event), onFocus: () => this.onInputFocused(), onBlur: () => this.onInputBlurred(), onClick: () => this.onInputClicked() }, h("dx-list-flyout", { open: this.listOpen, position: this.popupposition, direction: this.textalign === "left" ? "right" : "left", itemsvisible: 5.5, size: "m", selectionmode: "single", class: {
        "respect-label-height": ((_c = this.label) === null || _c === void 0 ? void 0 : _c.length) > 0,
      } }, h(LabeledInputContainer, { slot: "base", containerProperties: {
        active: this.inputFocused,
        size: this.size,
        error: hasError(this.self),
        title: (_d = this.selectedOption) === null || _d === void 0 ? void 0 : _d.label,
      }, labelProperties: {
        label: this.label,
        disabled: this.disabled,
        required: this.required,
        kisynced: this.kisynced,
      } }, this.renderNativeSelect(), this.renderCurrentValue(), this.renderOpenListButton()), this.renderItemList())), this.renderErrorMessage(), this.renderElseOptionInput()));
  }
  renderNativeSelect() {
    // The native select can be used for test automation tools to
    // change and read values from the select box.
    let nativeOptions = [
      { label: "-", value: NULL_STRING, icon: null, selected: true },
      ...this.options,
    ];
    if (this.elseoptionselected) {
      nativeOptions = [
        {
          label: this.elseoptionbuttonlabel,
          value: "$$$ELSEOPTION$$$",
          icon: null,
          selected: true,
        },
        ...nativeOptions,
      ];
    }
    return (h("select", { id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => {
        this.superviseSelectElement(el);
      }, tabIndex: -1, onChange: (e) => {
        const value = e.target.value;
        this.selectOptionsByValue(value);
      } }, nativeOptions.map((option) => {
      return (h("option", { selected: option.value === this.internalValue ||
          (this.internalValue === null && option.value === NULL_STRING), value: JSON.stringify(option.value) }, option.label));
    })));
  }
  renderOpenListButton() {
    return (h("div", { id: ElementIdGenerator.createId(this.self, "open-list-button"), class: {
        "open-list-button": true,
      } }, h("dx-chevron", { directiontop: this.isChevronRotated(), active: this.inputFocused })));
  }
  renderItemList() {
    return [
      ...this.options.map((option, index) => {
        return (h("dx-list-item", { id: ElementIdGenerator.createId(this.self, `list-item-${index}`), type: option.isSeparator ? "default" : "selectable", value: option.value, label: option.label, icon: option.icon, textalign: this.textalign, selected: this.selectedOption === option }));
      }),
      this.renderElseOptionButton(),
    ];
  }
  renderElseOptionButton() {
    if (!this.elseoption || this.elseoptionselected) {
      return;
    }
    return (h("dx-button", { class: "else-option-button", id: ElementIdGenerator.createId(this.self, "else-option-button"), slot: "below", onClick: () => this.requestElseOption(), type: "primary-m", label: this.elseoptionbuttonlabel, stretch: true }));
  }
  renderOption(option, interactive = true, isPlaceholder = false, format = false) {
    var _a;
    return (h("div", { id: !isPlaceholder
        ? ElementIdGenerator.createId(this.self, `item-list-value-${option.value}`)
        : undefined, class: {
        item: true,
        "is-placeholder": isPlaceholder,
        right: this.textalign == "right",
        selected: option.value == ((_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.value),
        disabled: this.disabled === true,
      }, onClick: () => {
        if (interactive) {
          this.selectOption(option);
          this.inputElement.blur();
        }
      } }, option.icon != null ? h("dx-icon", { size: 24, icon: option.icon }) : null, h("dx-text", { key: option.label, class: { label: true, "align-right": this.textalign === "right" } }, format ? this.format(option.label) : option.label)));
  }
  renderCurrentValue() {
    const className = "current-value";
    if (this.elseoptionselected) {
      return (h("div", { class: className }, this.renderOption({
        label: this.elseoptionbuttonlabel,
        value: "",
        icon: null,
        selected: false,
      }, false)));
    }
    if (this.selectedOption != null) {
      return (h("div", { class: className }, this.renderOption(this.selectedOption, false, false, true)));
    }
    return (h("div", { class: className }, this.renderOption({
      label: this.placeholder,
      icon: this.icon,
      value: "",
      selected: false,
    }, false, true)));
  }
  renderElseOptionInput() {
    if (!this.elseoptionselected) {
      return;
    }
    return (h("div", { class: "else-option-input-container" }, h("dx-text-input", { class: "nested-form-element", ref: (ref) => {
        this.elseOptionInput = ref;
        if (ref != null) {
          forceUpdate(ref);
        }
      }, id: ElementIdGenerator.createId(this.self, "else-option-input"), label: this.elseoptioninputlabel, value: this.internalValue, disabled: this.disabled, required: this.required, errormessage: this.errormessage, onFocus: () => {
        this.selectScanningEnabled = false;
        this.preventReFocus = true;
      }, onBlur: () => {
        this.selectScanningEnabled = true;
        this.preventReFocus = false;
      }, onValueChange: (event) => {
        this.selectValueFromElseOption(event.detail);
        event.stopPropagation();
      } }, h("slot", { name: "error-message", slot: "error-message" }))));
  }
  static get is() { return "dx-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["dx-dropdown.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["dx-dropdown.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ContainerSize",
          "resolved": "\"m\" | \"s\"",
          "references": {
            "ContainerSize": {
              "location": "import",
              "path": "../../functional/input-container"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: A small dropdown is displayed."
            }, {
              "name": "value",
              "text": "m: A medium sized dropdown is displayed."
            }],
          "text": "The size of the dropdown."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"m\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Label text e.g. `First name`"
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Label which is displayed above the selection input field."
        },
        "attribute": "label",
        "reflect": false
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Error text."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Text, which is displayed in a red error popup at the bottom of the input field."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Input is editable."
            }, {
              "name": "value",
              "text": "true: Input is read-only."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "Whether the selection is readonly or editable.\nIf true the value of this component will be visualized as a normal text."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not required"
            }, {
              "name": "value",
              "text": "true: It is necessary to select an option to fulfill the requirement."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Marks this input field as a required form element."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with the KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Placeholder text"
            }, {
              "name": "example",
              "text": "placeholder"
            }],
          "text": "Placeholder text which is displayed when no option is currently selected."
        },
        "attribute": "placeholder",
        "reflect": false,
        "defaultValue": "\"Bitte ausw\u00E4hlen ...\""
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The name of an icon."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "An icon which is displayed next to the placeholder text."
        },
        "attribute": "icon",
        "reflect": false
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../../layout/dx-list/list.util"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: The string value of the selected option."
            }, {
              "name": "value",
              "text": "object: The value of the selected option in case it's a complex type."
            }, {
              "name": "value",
              "text": "null: No option selected."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "The current value of this element. It represents the `value` property of the current selected `<dx-dropdown-option>` or null.\nOther by selecting an option with the mouse or keyboard, it is possible to set this property programmatically."
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "null"
      },
      "formatter": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "(input: string) => string",
          "resolved": "(input: string) => string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        }
      },
      "textalign": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "HorizontalDirection",
          "resolved": "\"left\" | \"right\"",
          "references": {
            "HorizontalDirection": {
              "location": "import",
              "path": "../../../classes/common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "left: Text is left aligned."
            }, {
              "name": "value",
              "text": "right: Text is right aligned."
            }, {
              "name": "example",
              "text": "text-align"
            }],
          "text": "Defines the text alignment."
        },
        "attribute": "textalign",
        "reflect": false,
        "defaultValue": "\"left\""
      },
      "popupposition": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"top\" | \"bottom\"",
          "resolved": "\"bottom\" | \"top\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "top: The list is displayed at the top of the input field."
            }, {
              "name": "value",
              "text": "bottom: The list is displayed at the bottom of the input field."
            }, {
              "name": "example",
              "text": "popup-position"
            }],
          "text": "Defines the position of the dropdown list."
        },
        "attribute": "popupposition",
        "reflect": false,
        "defaultValue": "\"bottom\""
      },
      "elseoption": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: The user can only select an option in the list."
            }, {
              "name": "value",
              "text": "true: The user is able to set a value which is not present in the option list by editing a text field under\nthe selection input field."
            }, {
              "name": "example",
              "text": "elseoption"
            }],
          "text": "Whether it is possible to select an option which is not present in the current option list."
        },
        "attribute": "elseoption",
        "reflect": false,
        "defaultValue": "false"
      },
      "elseoptionbuttonlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Button label"
            }, {
              "name": "example",
              "text": "elseoption"
            }],
          "text": "The label of the button which activates the `elseoption` input field. The `elseoption` property has to be `true`."
        },
        "attribute": "elseoptionbuttonlabel",
        "reflect": false,
        "defaultValue": "\"Sonstige Eingabe\""
      },
      "elseoptioninputlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Text input label."
            }, {
              "name": "example",
              "text": "elseoption"
            }],
          "text": "The label of the text input field which represents the `elseoption`. The `elseoption` property has to be `true`."
        },
        "attribute": "elseoptioninputlabel",
        "reflect": false,
        "defaultValue": "\"Sonstige Eingabe\""
      },
      "elseoptionselected": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Else-option input field is not displayed."
            }, {
              "name": "value",
              "text": "true: Else-option input field is displayed."
            }, {
              "name": "example",
              "text": "elseoption-selected"
            }],
          "text": "Determines if the else-option input field is visible to the user. This property automatically changes\non user interaction or providing a value that doesn't match any dropdown options."
        },
        "attribute": "elseoptionselected",
        "reflect": true,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Dropdown is not editable."
            }, {
              "name": "value",
              "text": "false: Dropdown is editable."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Defines whether the dropdown is enabled or not."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "options": {},
      "selectedOption": {},
      "inputFocused": {},
      "listOpen": {},
      "internalValue": {},
      "internalPopupPosition": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "complex"
            }],
          "text": "Delegates the current selection or text input (`elseoption`) while the user is still editing."
        },
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../../layout/dx-list/list.util"
            }
          }
        }
      }, {
        "method": "valueComplete",
        "name": "valueComplete",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "complex"
            }],
          "text": "Delegates the final selection or text input (`elseoption`).\nThe event is fired when the dropdown loses focus or pushing the 'Enter' key."
        },
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../../layout/dx-list/list.util"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the focus on this element.",
          "tags": [{
              "name": "example",
              "text": "focus"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
  static get listeners() {
    return [{
        "name": "forceUpdateOnChange",
        "method": "onForceUpdateOnChange",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "itemSelectionChange",
        "method": "onItemSelectionChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }, {
        "name": "positionChange",
        "method": "onPopupPositionChanged",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
const NULL_STRING = "null";
