import { forceUpdate, h, Host, } from "@stencil/core";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
import { createMetaComponentsSlotObserver, } from "../../../classes/slot-observer";
import { assert } from "../../../classes/assert";
import { HeaderService } from "./header-service";
import { instanceOfDsHeaderActionConfiguration, instanceOfDsHeaderActionListConfiguration, } from "./header-action-helper";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
import { generateInitialsForName } from "../../../classes/misc-util";
/**
 * Der Header befindet sich immer am oberen Rand der Seite. Hier finden ggf. Hauptnavigation und Benutzermenü sowie das Logo Platz
 * Der Header sollte immer innerhalb einer `<ds-app>` genutzt werden.
 * Anwendungsbeispiele sind auch [hier](assets/examples/old_VSP-Seite1.html) zu finden
 *
 * @path /Scaffold
 * @name Header
 * @icon heading
 * @stable
 *
 * @slot center - Mittlerer Bereich für z.B. Navigationslinks
 * @slot right - Bereich an der rechten Seite, für z.B. Benutzermenü
 * @slot below - Weitere Sticky-Elemente unterhalb des Headers
 */
export class DsHeader {
  constructor() {
    this.userPopupOpen = false;
    this.headerActionItems = [];
    /*Switch to render action-items in header or in avatar-menu
     will be converted to a Prop when necessary*/
    this.renderActionItemsInHeader = false;
    /**
     * Whether the header is used within a fullscreen application or not.
     *
     * @value true: The header content takes the full application width into consideration.
     * @value false: The header content has a defined maximal width of 1200 pixels.
     *
     * @example fullscreen
     */
    this.fullscreen = false;
    /**
     * Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo).
     * @value default: Deutsche Vermögensberatung (Standardwert)
     * @value allfinanz: Deutsche Vermögensberatung Allfinanz
     * @example header-allfinanz
     */
    this.brand = "default";
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this));
    this.userConfigObserver =
      createMetaComponentsSlotObserver(this.self, "ds-header-user", (nodes) => {
        assert(nodes.length <= 1, () => "<ds-header> Zuviele <ds-header-user> Elemente gefunden");
        if (nodes.length > 0) {
          nodes[0].toHeaderUserConfiguration().then((config) => {
            this.userConfiguration = config;
          });
        }
      });
    this.customerConfigObserver =
      createMetaComponentsSlotObserver(this.self, "ds-header-customer", (nodes) => {
        assert(nodes.length <= 1, () => "<ds-header> Zuviele <ds-header-customer> Elemente gefunden");
        if (nodes.length > 0) {
          nodes[0]
            .toHeaderCustomerConfiguration()
            .then((config) => (this.customerConfiguration = config));
        }
      });
    const headerService = HeaderService.instance();
    const currentRegisteredHeader = headerService.header;
    if (currentRegisteredHeader && currentRegisteredHeader !== this.self) {
      console.warn('Es ist bereits ein <ds-header>-Element registriert worden.\n\n"Es kann nur einen geben".\n- Connor MacLeod');
    }
    headerService.header = this.self;
  }
  disconnectedCallback() {
    var _a, _b, _c, _d;
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.userConfigObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    (_c = this.customerConfigObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
    (_d = this.headerActionItemObserver) === null || _d === void 0 ? void 0 : _d.disconnect();
    const headerService = HeaderService.instance();
    if (headerService.header === this.self) {
      headerService.header = null;
    }
  }
  windowClicked(e) {
    // Close popup if clicked outside of avatar area
    if (this.userPopupOpen &&
      !e.composedPath().includes(this.userAvatarElement)) {
      this.toggleUserPopup();
      e.stopPropagation();
    }
  }
  getLogo() {
    if (this.breakpointAware.xs) {
      return "bildmarke";
    }
    else {
      if (this.brand === "allfinanz") {
        return "wortmarke-allfinanz";
      }
      return "wortmarke";
    }
  }
  toggleUserPopup() {
    this.userPopupOpen = !this.userPopupOpen;
  }
  render() {
    return (h(Host, null, h("div", { class: "header-bar" }, h("div", { class: {
        content: true,
        "page-wrapped-content": !this.fullscreen,
      } }, h("div", { class: "logo" }, h("ds-logo", { type: this.getLogo() })), h("div", { class: "center" }, h("slot", { name: "center" }), this.renderCustomer()), h("div", { class: "right" }, h("slot", { name: "right" }), this.renderHeaderItems()))), h("slot", { name: "below" })));
  }
  renderHeaderItems() {
    if (this.renderActionItemsInHeader) {
      return (h("div", { class: "action-items-in-header" }, this.renderHeaderMenuActionItems(this.headerActionItems)));
    }
    else {
      return this.renderHeaderMenuItems();
    }
  }
  renderCustomer() {
    if (this.customerConfiguration == null) {
      return;
    }
    const delimiter = ": ";
    return (h("ds-text", { type: "it" }, this.customerConfiguration.typeLabel, delimiter, this.customerConfiguration.name));
  }
  renderHeaderMenuItems() {
    var _a;
    if (((_a = this.userConfiguration) === null || _a === void 0 ? void 0 : _a.name) != null) {
      return (h("div", { class: "user-avatar", ref: (el) => (this.userAvatarElement = el) }, h("button", { id: ElementIdGenerator.createIdFromString(this.userConfiguration.id, "menu-control"), class: {
          "user-avatar-button": true,
          open: this.userPopupOpen,
        }, onClick: () => this.toggleUserPopup() }, h("div", { class: "filler" }), h("ds-user-avatar", { class: "avatar-circle", size: "header", imageurl: this.userConfiguration.imageUrl, initials: generateInitialsForName(this.userConfiguration.name) }), h("div", { class: "filler" }, h("ds-icon", { class: "arrow", size: 16, icon: "drop-down" }))), h("div", { class: {
          popup: true,
          open: this.userPopupOpen,
        } }, h("div", { class: "popup-inner" }, this.renderHeaderMenuActionItems(this.headerActionItems), h("button", { id: ElementIdGenerator.createIdFromString(this.userConfiguration.id, "menu-item-control"), class: {
          "popup-head": true,
          interactable: this.userConfiguration.usernameInteractable,
        }, disabled: !this.userConfiguration.usernameInteractable, onClick: () => {
          if (this.userConfiguration.usernameInteractable) {
            this.userConfiguration.usernameInteraction();
          }
        } }, h("ds-text", { type: "it", screensize: "small", color: "anthrazit" }, this.userConfiguration.name)), h("div", { class: "user-action-item-container" }, this.renderHeaderMenuActionItems(this.userConfiguration.children)), h("div", { class: "popup-action" }, h("ds-button", { id: "ds-header-btn-toggle-user-popup", size: "small", type: "secondary", onClick: () => {
          this.userConfiguration.signOut();
          this.toggleUserPopup();
        } }, h("ds-text", null, "Abmelden")))))));
    }
  }
  renderHeaderMenuActionItems(actionConfigurations) {
    return (h("div", { class: "action-item-container" }, actionConfigurations.map((item) => {
      if (instanceOfDsHeaderActionConfiguration(item)) {
        return this.renderHeaderMenuAction(item);
      }
      else if (instanceOfDsHeaderActionListConfiguration(item)) {
        return this.renderHeaderActionMenuItemsRecursiv(item);
      }
    })));
  }
  renderHeaderMenuAction(item, depth = 0) {
    var _a;
    return [
      h("button", { id: ElementIdGenerator.createIdFromString(item.id, "control"), class: {
          "header-action-item": true,
          highlight: item.highlight,
        }, onClick: () => {
          item.oninteraction();
        } }, h("ds-text", { type: "it" }, (_a = item.label) !== null && _a !== void 0 ? _a : "")),
      this.renderSeparator(depth * 25),
    ];
  }
  renderHeaderMenuActionList(item, depth = 0) {
    var _a;
    return [
      h("button", { id: ElementIdGenerator.createIdFromString(item.id, "control"), class: "header-action-item", onClick: () => {
          item.toggleOpen();
        } }, h("div", { class: "text-and-arrow" }, h("ds-text", { type: "ft" }, (_a = item.label) !== null && _a !== void 0 ? _a : ""), h("ds-icon", { class: "arrow", size: 16, icon: "drop-down" }))),
      this.renderSeparator(depth * 25),
    ];
  }
  renderHeaderActionMenuItemsRecursiv(actionListConfiguration, depth = 0) {
    var _a;
    return (h("div", { class: { "action-list": true, open: actionListConfiguration.open } }, [
      this.renderHeaderMenuActionList(actionListConfiguration, depth),
      (_a = actionListConfiguration.children) === null || _a === void 0 ? void 0 : _a.map((item) => {
        if (instanceOfDsHeaderActionConfiguration(item)) {
          return this.renderHeaderMenuAction(item, depth + 1);
        }
        else if (instanceOfDsHeaderActionListConfiguration(item)) {
          return this.renderHeaderActionMenuItemsRecursiv(item, depth + 1);
        }
      }),
    ]));
  }
  renderSeparator(subtractWidth) {
    return (h("div", { class: "separator" }, h("div", { class: "line", style: { width: `calc(100% - ${subtractWidth}px)` } })));
  }
  static get is() { return "ds-header"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-header.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-header.css"]
    };
  }
  static get properties() {
    return {
      "fullscreen": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The header content takes the full application width into consideration."
            }, {
              "name": "value",
              "text": "false: The header content has a defined maximal width of 1200 pixels."
            }, {
              "name": "example",
              "text": "fullscreen"
            }],
          "text": "Whether the header is used within a fullscreen application or not."
        },
        "attribute": "fullscreen",
        "reflect": false,
        "defaultValue": "false"
      },
      "brand": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"default\" | \"allfinanz\"",
          "resolved": "\"allfinanz\" | \"default\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "default: Deutsche Verm\u00F6gensberatung (Standardwert)"
            }, {
              "name": "value",
              "text": "allfinanz: Deutsche Verm\u00F6gensberatung Allfinanz"
            }, {
              "name": "example",
              "text": "header-allfinanz"
            }],
          "text": "Definiert den Markenauftritt verwendeter Gestaltungselemente (z.B. Logo)."
        },
        "attribute": "brand",
        "reflect": false,
        "defaultValue": "\"default\""
      }
    };
  }
  static get states() {
    return {
      "customerConfiguration": {},
      "userConfiguration": {},
      "userPopupOpen": {},
      "headerActionItems": {},
      "renderActionItemsInHeader": {}
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "click",
        "method": "windowClicked",
        "target": "window",
        "capture": true,
        "passive": false
      }];
  }
}
