import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { filterElementsByTagPrefix } from "../../../../classes/misc-util";
import { extractHeaderActionConfigurations } from "../header-action-helper";
/**
 * Configures an openable list in the user-menu.
 *
 * @name Header Action list
 * @path /Scaffold/Header/Nutzer
 */
export class DsHeaderActionList {
  constructor() {
    this.children = [];
  }
  toggleOpen() {
    this.open = !this.open;
  }
  /**
   * @internal
   */
  async toHeaderActionListConfiguration() {
    return {
      id: this.self.id,
      label: this.label,
      open: this.open,
      toggleOpen: () => this.toggleOpen(),
      children: await extractHeaderActionConfigurations(this.children),
    };
  }
  connectedCallback() {
    this.childObserver = createMetaComponentsSlotObserver(this.self, ":scope > *", (nodes) => {
      this.children = filterElementsByTagPrefix(nodes, "ds-header-action");
    });
  }
  disconnectedCallback() {
    this.childObserver.disconnect();
  }
  static get is() { return "ds-header-action-list"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: E.g: Settings"
            }],
          "text": "Label for the menu."
        },
        "attribute": "label",
        "reflect": false
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Menu is open"
            }, {
              "name": "value",
              "text": "false: Menu is closed"
            }],
          "text": "Opens and closes the menu."
        },
        "attribute": "open",
        "reflect": true
      }
    };
  }
  static get methods() {
    return {
      "toHeaderActionListConfiguration": {
        "complexType": {
          "signature": "() => Promise<HeaderActionListConfiguration>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HeaderActionListConfiguration": {
              "location": "local"
            }
          },
          "return": "Promise<HeaderActionListConfiguration>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
