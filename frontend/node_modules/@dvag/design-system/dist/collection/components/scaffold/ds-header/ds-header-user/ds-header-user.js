import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { extractHeaderActionConfigurations } from "../header-action-helper";
import { filterElementsByTagPrefix } from "../../../../classes/misc-util";
/**
 * Konfiguriert die Nutzer-Integration im Header.
 * @name Header Nutzerkonfiguration
 * @shortname Nutzer
 * @path /Scaffold/Header
 */
export class DsHeaderUser {
  constructor() {
    this.children = [];
    /**
     * Determines whether the user name within the user menu is interactable.
     * @value true: The user name is interactable. The `usernameInteraction` event is thrown on interaction.
     * @value false: The user name is not interactable.
     */
    this.usernameinteractable = false;
  }
  /**
   * @internal
   */
  async toHeaderUserConfiguration() {
    return {
      id: this.self.id,
      name: this.name,
      imageUrl: this.imageurl,
      signOut: () => this.signOut.emit(),
      usernameInteraction: () => this.usernameInteraction.emit(),
      usernameInteractable: this.usernameinteractable,
      children: await extractHeaderActionConfigurations(this.children),
    };
  }
  connectedCallback() {
    this.childObserver = createMetaComponentsSlotObserver(this.self, ":scope > *", (nodes) => {
      this.children = filterElementsByTagPrefix(nodes, "ds-header-action").map((node) => {
        if (node.tagName.toLowerCase() === "ds-header-action") {
          return node;
        }
        else {
          return node;
        }
      });
    });
  }
  disconnectedCallback() {
    this.childObserver.disconnect();
  }
  static get is() { return "ds-header-user"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Vor- und Nachname"
            }],
          "text": "Name des Benutzers."
        },
        "attribute": "name",
        "reflect": false
      },
      "imageurl": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: URL"
            }],
          "text": "URL zum Foto des Benutzers"
        },
        "attribute": "imageurl",
        "reflect": false
      },
      "usernameinteractable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The user name is interactable. The `usernameInteraction` event is thrown on interaction."
            }, {
              "name": "value",
              "text": "false: The user name is not interactable."
            }],
          "text": "Determines whether the user name within the user menu is interactable."
        },
        "attribute": "usernameinteractable",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "signOut",
        "name": "signOut",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event wird gefeuert, wenn der Nutzer sich abmelden m\u00F6chte."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "usernameInteraction",
        "name": "usernameInteraction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fired when the user interacts with the Name of the current user, within the avatar-menu."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "toHeaderUserConfiguration": {
        "complexType": {
          "signature": "() => Promise<HeaderUserConfiguration>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HeaderUserConfiguration": {
              "location": "local"
            }
          },
          "return": "Promise<HeaderUserConfiguration>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
