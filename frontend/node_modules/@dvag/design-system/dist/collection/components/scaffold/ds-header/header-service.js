import { DsSubject, } from "../../../classes/multicast-observable";
import { ValueStore } from "../../../classes/value-store";
const HEADER_SERVICE_KEY = "ds-header-service";
export class HeaderService {
  constructor() {
    this.headerSubject = new DsSubject();
    this.headerHeightSubject = new DsSubject();
    this.contentHeightBelowHeaderSubject = new DsSubject();
    this.reservedAdditionalHeightBelowHeader = new Map();
  }
  static instance() {
    return ValueStore.instance().getOrPut(HEADER_SERVICE_KEY, () => new HeaderService());
  }
  get header$() {
    return this.headerSubject;
  }
  get header() {
    return this.headerSubject.value;
  }
  set header(header) {
    var _a;
    if (this.headerSubject.value !== header) {
      this.headerSubject.next(header);
      if (header == null) {
        (_a = this.headerResizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        return;
      }
      this.headerResizeObserver = new ResizeObserver(() => {
        this.delegateHeightChange();
      });
      this.headerResizeObserver.observe(header);
    }
  }
  get headerHeight$() {
    return this.headerHeightSubject;
  }
  get headerHeight() {
    var _a;
    return (_a = this.headerHeightSubject.value) !== null && _a !== void 0 ? _a : 0;
  }
  get contentHeightBelowHeader$() {
    return this.contentHeightBelowHeaderSubject;
  }
  get contentHeightBelowHeader() {
    var _a;
    return (_a = this.contentHeightBelowHeaderSubject.value) !== null && _a !== void 0 ? _a : 0;
  }
  delegateHeightChange() {
    this.headerHeightSubject.next(this.headerSubject.value.offsetHeight);
  }
  /**
   * Reserves additional height below the header. (e.g. for other fixed or sticky elements)
   * @param ref: The reference to reserve the height for.
   * @param height: The height which should be reserved
   */
  reserveHeightFor(ref, height) {
    const oldHeight = this.reservedAdditionalHeightBelowHeader.get(ref);
    if (oldHeight !== height) {
      this.reservedAdditionalHeightBelowHeader.set(ref, height);
      this.delegateContentHeightBelowHeader();
    }
  }
  /**
   * Frees the reserved height below the header.
   * @param ref: The reference to free the height of.
   */
  freeHeightFor(ref) {
    if (this.reservedAdditionalHeightBelowHeader.delete(ref)) {
      this.delegateContentHeightBelowHeader();
    }
  }
  delegateContentHeightBelowHeader() {
    const reservedAdditionalHeight = Array.from(this.reservedAdditionalHeightBelowHeader).reduce((acc, currentValue) => {
      return acc + currentValue[1];
    }, 0);
    this.contentHeightBelowHeaderSubject.next(reservedAdditionalHeight);
  }
}
export function subscribeToHeaderHeight(heightChangeCallback) {
  return HeaderService.instance().headerHeight$.subscribe((height) => heightChangeCallback(height));
}
export function subscribeToContentHeightBelowHeader(heightChangeCallback) {
  return HeaderService.instance().contentHeightBelowHeader$.subscribe((height) => heightChangeCallback(height));
}
