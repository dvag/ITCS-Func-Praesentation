import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * Shows images below the `<ds-header>`. The component is responsive and disappears automatically when the smalles breakpoint (<= 768px) is reached.
 *
 * @path /Scaffold
 * @name Hero image
 * @shortname Hero
 * @stable
 */
export class DsHeroImage {
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => {
      this.hidden = this.breakpointAware.xs;
    });
    this.hidden = this.breakpointAware.xs;
    this.initializeResizeObserver();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.breakpointAware) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  initializeResizeObserver() {
    if (this.resizeObserver == null) {
      this.resizeObserver = new ResizeObserver(() => {
        this.currentWidth = this.self.offsetWidth;
      });
    }
    this.resizeObserver.observe(this.self);
  }
  render() {
    if (this.hidden) {
      return;
    }
    assert(this.url != null, () => "<ds-hero-image> Eigenschaft 'url' muss gesetzt sein.");
    return (h(Host, { style: {
        backgroundImage: `url(${this.url})`,
        "--ds-hero-image-width": this.currentWidth + "px",
      } }));
  }
  static get is() { return "ds-hero-image"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-hero-image.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-hero-image.css"]
    };
  }
  static get properties() {
    return {
      "url": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Image-url"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Url for the picture that should be displayed."
        },
        "attribute": "url",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "hidden": {},
      "currentWidth": {}
    };
  }
  static get elementRef() { return "self"; }
}
