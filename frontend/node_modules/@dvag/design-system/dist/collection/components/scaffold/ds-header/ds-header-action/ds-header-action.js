/**
 * A clickable item in the header menu.
 * @name Header Action
 * @shortname Action
 * @path /Scaffold/Header/Nutzer
 */
export class DsHeaderAction {
  constructor() {
    /**
     * Highlights this entry
     * @value true: Entry highlighted
     * @value false: Entry not highlighted
     */
    this.highlight = false;
  }
  emitEvent() {
    this.interaction.emit(this.label);
  }
  /**
   * @internal
   */
  async toHeaderActionConfiguration() {
    return {
      id: this.self.id,
      label: this.label,
      highlight: this.highlight,
      oninteraction: () => this.emitEvent(),
    };
  }
  static get is() { return "ds-header-action"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: E.g: settings"
            }],
          "text": "The label for this entry."
        },
        "attribute": "label",
        "reflect": false
      },
      "highlight": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Entry highlighted"
            }, {
              "name": "value",
              "text": "false: Entry not highlighted"
            }],
          "text": "Highlights this entry"
        },
        "attribute": "highlight",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "interaction",
        "name": "interaction",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Fired when user interacts with this item.\n\nEvent contains the label attribute of the action."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "toHeaderActionConfiguration": {
        "complexType": {
          "signature": "() => Promise<HeaderActionConfiguration>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "HeaderActionConfiguration": {
              "location": "local"
            }
          },
          "return": "Promise<HeaderActionConfiguration>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
