import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
/**
 * Special type of the icon button without any background and label.
 *
 * @path /Buttons
 * @name Function icon button
 * @shortname Function icon
 * @icon cog
 * @stable
 *
 * @slot - Content of the button. Use a `<ds-icon>` with the `size` attribute set.
 * @slot-example labeling
 */
export class DsFunctionIconButton {
  constructor() {
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     */
    this.unfocusable = false;
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  render() {
    return (h(Host, { class: {
        "color-gold": true,
        disabled: this.disabled,
        unfocusable: this.unfocusable,
      } }, h("button", { type: "button", ref: (el) => (this.buttonElement = el), id: ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabindex: this.unfocusable ? "-1" : "0" }, h("slot", null))));
  }
  static get is() { return "ds-function-icon-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-function-icon-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-function-icon-button.css"]
    };
  }
  static get properties() {
    return {
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: User can interaction with the button."
            }, {
              "name": "value",
              "text": "true: User can not interaction with the button."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Disables user interaction on the button."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "unfocusable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Button is reachable via tab navigation."
            }, {
              "name": "value",
              "text": "true: Button is ignored when using tab navigation."
            }],
          "text": "Disables the ability to focus the button via tabulator navigation."
        },
        "attribute": "unfocusable",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focuses this element.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
