import { h, Host, } from "@stencil/core";
import { assertPropertyValue } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
/**
 * Button used to call application-specific features. It can be used with an icon or a combination
 * of icon and text.
 *
 * @path /Buttons
 * @name Icon-Button
 * @shortname Icon
 * @icon pen-square
 * @stable
 * @slot - Content of the button. Make sure to always use a `<ds-icon>` without setting the `size` attribut. Optionally you can complement the icon with a `<ds-text>`.
 * @slot-example labeling
 */
export class DsIconButton {
  constructor() {
    /**
     * Sets the color of the button.
     * @value gold: Gold color (default value)
     * @value rot: Special case for destructive actions
     * @example color
     */
    this.color = "gold";
    /**
     * Sets the background color.
     * @value hellgrau-4: Button uses a light grey background (default value).
     * @value weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background.
     * @example backgroundcolor
     */
    this.backgroundcolor = "hellgrau-4";
    /**
     * Disables user interaction on the button.
     * @value false: User can interaction with the button.
     * @value true: User can not interaction with the button.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Defines the alignment of elements within the button.
     * @value row: Content elements are layouted from left to right.
     * @value column: Content elments are layouted from top to bottom.
     * @example align
     */
    this.align = "row";
    /**
     * Disables the ability to focus the button via tabulator navigation.
     * @value false: Button is reachable via tab navigation.
     * @value true: Button is ignored when using tab navigation.
     */
    this.unfocusable = false;
  }
  /**
   * Focuses this element.
   */
  async focusControl() {
    this.buttonElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  render() {
    assertPropertyValue("ds-icon-button", "size", this.size, [
      "medium",
      "small",
    ]);
    assertPropertyValue("ds-icon-button", "color", this.color, ["gold", "rot"]);
    assertPropertyValue("ds-icon-button", "backgroundcolor", this.backgroundcolor, ["weiss", "hellgrau-4"]);
    assertPropertyValue("ds-icon-button", "align", this.align, [
      "row",
      "column",
    ]);
    return (h(Host, { class: {
        "size-medium": this.size === "medium",
        "size-small": this.size === "small",
        "color-gold": this.color === "gold",
        "color-rot": this.color === "rot",
        "backgroundcolor-hellgrau-4": this.backgroundcolor === "hellgrau-4",
        "backgroundcolor-weiss": this.backgroundcolor === "weiss",
        "align-row": this.align === "row",
        "align-column": this.align === "column",
        disabled: this.disabled,
        unfocusable: this.unfocusable,
      } }, h("button", { type: "button", ref: (el) => (this.buttonElement = el), id: ElementIdGenerator.createId(this.self, "control"), disabled: this.disabled, tabindex: this.unfocusable ? "-1" : "0" }, h("slot", null))));
  }
  static get is() { return "ds-icon-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-icon-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-icon-button.css"]
    };
  }
  static get properties() {
    return {
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"gold\" | \"rot\"",
          "resolved": "\"gold\" | \"rot\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "gold: Gold color (default value)"
            }, {
              "name": "value",
              "text": "rot: Special case for destructive actions"
            }, {
              "name": "example",
              "text": "color"
            }],
          "text": "Sets the color of the button."
        },
        "attribute": "color",
        "reflect": false,
        "defaultValue": "\"gold\""
      },
      "backgroundcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"weiss\" | \"hellgrau-4\"",
          "resolved": "\"hellgrau-4\" | \"weiss\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "hellgrau-4: Button uses a light grey background (default value)."
            }, {
              "name": "value",
              "text": "weiss: Button uses a white background. Use this value to improve contrast, if the button is used on a grey background."
            }, {
              "name": "example",
              "text": "backgroundcolor"
            }],
          "text": "Sets the background color."
        },
        "attribute": "backgroundcolor",
        "reflect": false,
        "defaultValue": "\"hellgrau-4\""
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: User can interaction with the button."
            }, {
              "name": "value",
              "text": "true: User can not interaction with the button."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Disables user interaction on the button."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"medium\" | \"small\"",
          "resolved": "\"medium\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "medium: Medium button size"
            }, {
              "name": "value",
              "text": "small: Small button size, optimized for usage in forms"
            }, {
              "name": "example",
              "text": "size"
            }],
          "text": "Defines the size of othe button."
        },
        "attribute": "size",
        "reflect": false
      },
      "align": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"row\" | \"column\"",
          "resolved": "\"column\" | \"row\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "row: Content elements are layouted from left to right."
            }, {
              "name": "value",
              "text": "column: Content elments are layouted from top to bottom."
            }, {
              "name": "example",
              "text": "align"
            }],
          "text": "Defines the alignment of elements within the button."
        },
        "attribute": "align",
        "reflect": false,
        "defaultValue": "\"row\""
      },
      "unfocusable": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Button is reachable via tab navigation."
            }, {
              "name": "value",
              "text": "true: Button is ignored when using tab navigation."
            }],
          "text": "Disables the ability to focus the button via tabulator navigation."
        },
        "attribute": "unfocusable",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Focuses this element.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
