import { assertPropertyNotEmpty } from "../../../classes/assert";
/**
 * Data component to describe chart content.
 *
 * @name Chart-Data
 * @path /Visualization
 * @icon qrcode
 * @stable
 */
export class DsChartSample {
  onValueChange(newValue, oldValue) {
    if (newValue !== oldValue) {
      this.valueChange.emit(this.value);
    }
  }
  /**
   * Maps the component into a JS object.
   */
  async toChartSample() {
    assertPropertyNotEmpty("ds-chart-sample", "color", this.color, "Every chart sample must have a unique color.");
    const exposedValue = Math.max(this.value, 0) || 0;
    return {
      label: this.label,
      value: exposedValue,
      formattedValue: this.formattedValue || exposedValue.toString(),
      color: this.color,
    };
  }
  componentShouldUpdate() {
    if (isNaN(this.value)) {
      return false;
    }
  }
  static get is() { return "ds-chart-sample"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label of the data."
        },
        "attribute": "label",
        "reflect": false
      },
      "value": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The numeric representation."
            }],
          "text": "Numeric representation of the data value."
        },
        "attribute": "value",
        "reflect": true
      },
      "formattedValue": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Formatted value."
            }],
          "text": "Formatted representation of the value."
        },
        "attribute": "formatted-value",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The color code."
            }, {
              "name": "important",
              "text": undefined
            }],
          "text": "The color of the corresponding chart segment."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Delegates the new value."
            }],
          "text": "Triggers when value of the sample changes."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "toChartSample": {
        "complexType": {
          "signature": "() => Promise<ChartSample>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ChartSample": {
              "location": "local"
            }
          },
          "return": "Promise<ChartSample>"
        },
        "docs": {
          "text": "Maps the component into a JS object.",
          "tags": []
        }
      }
    };
  }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
