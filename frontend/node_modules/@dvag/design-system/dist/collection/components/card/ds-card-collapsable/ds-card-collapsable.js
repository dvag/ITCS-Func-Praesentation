import { h, Host, } from "@stencil/core";
import { isSlotDefined } from "../../../classes/render-util";
import { assert } from "../../../classes/assert";
// TODO remove code that was neccessary for old grow box
/**
 * Collapses and unfolds the content of a card.
 *
 * @path /Card
 * @name Card Collapsable
 * @shortname Collapsable
 * @icon hand-pointer
 * @stable
 *
 * @slot header - If the `type`-Property equals `custom`, you can define a custom `<ds-card-header>` in this slot.
 */
export class DsCardCollapsable {
  constructor() {
    /**
     * Sets the theme of the `<ds-card-header>` element within this component.
     *
     * @value arrow: Renders an arrow in the header which visualizes the current collapse state.
     * @value checkbox: Render a checkbox in the header which is checked whether the card is collapsed or not.
     * @value custom: Enables the feature to define a custom card header in the `header` slot.
     *
     * @example arrow
     * @example checkbox
     * @example custom
     */
    this.type = "arrow";
    /**
     * The current collapse state.
     *
     * @value false: The card is collapsed.
     * @value true: The card is unfolded.
     *
     * @example open
     * @example close
     */
    this.open = false;
  }
  toggleOpen() {
    this.open = !this.open;
  }
  componentWillLoad() {
    this.showBorder = this.open;
  }
  handleHeaderClick() {
    if (this.type !== "custom") {
      this.toggleOpen();
    }
  }
  render() {
    return (h(Host, { style: {
        "--ds-card-header-separator-opacity": `${this.showBorder ? 1 : 0}`,
      } }, [this.renderHeader(), this.renderContent()]));
  }
  renderToggleButton() {
    if (this.type === "checkbox") {
      return h("ds-checkbox", { checked: this.open, class: "no-id-warning" });
    }
    else if (this.type === "arrow") {
      return (h("ds-icon", { size: 24, icon: this.open ? "collapse-close" : "collapse-open" }));
    }
  }
  renderHeaderContent() {
    return (h("div", { class: {
        "header-content": true,
      } }, this.renderToggleButton(), h("ds-text", { type: "u5", screensize: "small" }, this.label)));
  }
  renderHeader() {
    assert(isSlotDefined(this.self, "header")
      ? this.type === "custom"
      : this.type !== "custom", () => "Header-Slot should be defined when type === 'custom'");
    return this.type === "custom" ? (h("slot", { name: "header" })) : (h("ds-card-header", { class: {
        header: true,
      }, onClick: () => this.handleHeaderClick() }, this.renderHeaderContent()));
  }
  renderContent() {
    return (h("dx-simple-grow-box", { slidecontent: true, class: {
        content: true,
      }, animationmode: "top-to-bottom", open: this.open, onGrowBoxStateChange: (event) => {
        this.showBorder = event.detail !== "closed";
      } }, h("slot", null)));
  }
  static get is() { return "ds-card-collapsable"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-card-collapsable.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-card-collapsable.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"checkbox\" | \"arrow\" | \"custom\"",
          "resolved": "\"arrow\" | \"checkbox\" | \"custom\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "arrow: Renders an arrow in the header which visualizes the current collapse state."
            }, {
              "name": "value",
              "text": "checkbox: Render a checkbox in the header which is checked whether the card is collapsed or not."
            }, {
              "name": "value",
              "text": "custom: Enables the feature to define a custom card header in the `header` slot."
            }, {
              "name": "example",
              "text": "arrow"
            }, {
              "name": "example",
              "text": "checkbox"
            }, {
              "name": "example",
              "text": "custom"
            }],
          "text": "Sets the theme of the `<ds-card-header>` element within this component."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"arrow\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Text"
            }],
          "text": "Title within the Header. Not used when the `type` property equals `custom`"
        },
        "attribute": "label",
        "reflect": false
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: The card is collapsed."
            }, {
              "name": "value",
              "text": "true: The card is unfolded."
            }, {
              "name": "example",
              "text": "open"
            }, {
              "name": "example",
              "text": "close"
            }],
          "text": "The current collapse state."
        },
        "attribute": "open",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "showBorder": {}
    };
  }
  static get elementRef() { return "self"; }
}
