import { h, Host, } from "@stencil/core";
import { createMetaComponentsSlotObserver, } from "../../../classes/slot-observer";
/**
 * Manages tabs within cards to display different content within a `<ds-card>` element by clicking on tabs.
 *
 * @path /Card
 * @name Card Tab-Leiste
 * @shortname Tabs
 * @icon columns
 * @stable
 *
 * @slot - `<ds-card-tab-page>` elements. A tab will be generated for each of them.
 * @slot-example simple
 */
export class DsCardTabBar {
  constructor() {
    this.tabPages = [];
  }
  showChanged() {
    this.updateSlotVisibility();
  }
  connectedCallback() {
    this.tabPagesObserver = createMetaComponentsSlotObserver(this.self, "ds-card-tab-page", async (nodes) => {
      var _a;
      this.tabPages = nodes.map((node) => {
        return {
          name: node.name,
          label: node.label,
          element: node,
        };
      });
      if (this.show == undefined || this.show === "") {
        this.show = (_a = this.tabPages[0]) === null || _a === void 0 ? void 0 : _a.name;
      }
      this.updateSlotVisibility();
    });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.tabPagesObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  updateSlotVisibility() {
    this.tabPages.forEach((tabPage) => {
      const isVisible = this.show === tabPage.name;
      tabPage.element.style.display = isVisible ? "block" : "none";
    });
  }
  setActiveTab(tabPage) {
    if (this.show !== tabPage.name) {
      this.show = tabPage.name;
      setTimeout(() => this.showChange.emit(tabPage.name));
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "headers" }, this.renderHeaderItems()), h("div", { class: "pages" }, h("slot", null))));
  }
  renderHeaderItems() {
    return this.tabPages.map((tabPage) => {
      const isSelected = this.show === tabPage.name;
      return (h("button", { type: "button", class: {
          "header-item": true,
          selected: isSelected,
        }, disabled: isSelected, onClick: () => this.setActiveTab(tabPage), tabIndex: isSelected ? -1 : 0 }, h("ds-text", { type: "u5", screensize: "small", color: isSelected ? "gold" : undefined }, tabPage.label), h("div", { class: "indicator" })));
    });
  }
  static get is() { return "ds-card-tab-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-card-tab-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-card-tab-bar.css"]
    };
  }
  static get properties() {
    return {
      "show": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: `name` of the `<ds-card-tabe-page>` to display."
            }, {
              "name": "example",
              "text": "complex"
            }],
          "text": "Displays the tab page which `name` property value corresponds to this property."
        },
        "attribute": "show",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "tabPages": {}
    };
  }
  static get events() {
    return [{
        "method": "showChange",
        "name": "showChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "show-change"
            }],
          "text": "This event will be delegated when the tab switches.\nIt contains the `name` of the current `<ds-card-tab-page>`."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "show",
        "methodName": "showChanged"
      }];
  }
}
