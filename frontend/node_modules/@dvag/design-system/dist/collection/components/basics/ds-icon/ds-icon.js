import { h, Host, forceUpdate, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ColorPalette } from "../../../classes/color-palette";
/**
 * Displays an icon of the DVAG icon collection.
 *
 * @path /Basics
 * @name Icon
 * @icon icons
 * @stable
 */
export class DsIcon {
  constructor() {
    this.previousSizeFromCssVariables = null;
  }
  componentDidRender() {
    const size = this.size != null ? this.size : this.getSizeFromCssVariables();
    const tagName = `ds-icon-${this.icon.replace(/-/g, "")}`;
    this.self.shadowRoot.querySelector("span").innerHTML = `<${tagName} size="${size}"></${tagName}>`;
  }
  onWindowChange() {
    if (this.size == null &&
      this.previousSizeFromCssVariables != null &&
      this.previousSizeFromCssVariables !== this.getSizeFromCssVariables()) {
      forceUpdate(this);
    }
  }
  getSizeFromCssVariables() {
    const inheritedSize = getComputedStyle(this.self).getPropertyValue("--ds-icon-attr-size");
    if (inheritedSize != null) {
      const size = parseInt(inheritedSize.trim());
      if (!isNaN(size)) {
        this.previousSizeFromCssVariables = size;
        return size;
      }
    }
    return null;
  }
  render() {
    const size = this.size != null ? this.size : this.getSizeFromCssVariables();
    assert(this.icon != null, () => "Die Eigenschaft 'icon' muss gesetzt sein.");
    assert(size != null, () => "Die Eigenschaft 'size' muss gesetzt sein.");
    return (h(Host, { style: generateStyleMap(size, this.color) }, h("span", null)));
  }
  static get is() { return "ds-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-icon.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-icon.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the icon."
            }, {
              "name": "example",
              "text": "alle-icons"
            }],
          "text": "Icon subject"
        },
        "attribute": "icon",
        "reflect": false
      },
      "size": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "16: Icon optimized for 16x16"
            }, {
              "name": "value",
              "text": "24: Icon optimized for 24x24"
            }, {
              "name": "value",
              "text": "32: Icon optimized for 32x32"
            }, {
              "name": "value",
              "text": "48: Icon optimized for 48x48"
            }, {
              "name": "value",
              "text": "64: Icon optimized for 64x64"
            }, {
              "name": "value",
              "text": "72: Icon optimized for 72x72"
            }, {
              "name": "example",
              "text": "groessen"
            }, {
              "name": "example",
              "text": "icon-in-kombination-mit-button"
            }],
          "text": "Defines the size of the icon. Most icons are available in different sizes and with different line widths.\n\nIf a `<ds-icon>` is used within other components (e.g. a button), the `size` is set automatically in some cases."
        },
        "attribute": "size",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color (see example for references)"
            }, {
              "name": "example",
              "text": "colors"
            }],
          "text": "Overrides the color of an icon. By default the `gold` color is used."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowChange",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
function generateStyleMap(size, color) {
  const map = {
    width: `${size}px`,
    height: `${size}px`,
  };
  if (color) {
    map["--ds-icon-color"] = new ColorPalette().getColorCode(color);
  }
  return map;
}
