import { h, Host, forceUpdate, } from "@stencil/core";
import { assert, assertPropertyValue } from "../../../classes/assert";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
import { ColorPalette } from "../../../classes/color-palette";
import { ADD_BULLET_TO_TEXT_CSS_CLASS_NAME } from "../../../classes/constants";
/**
 * Displays text content in different text styles.
 * @path /Basics
 * @name Text
 * @icon font
 * @stable
 *
 * @slot - Contains just plain text nodes. It may not have further HTML elements.
 */
export class DsText {
  constructor() {
    this.textStyle = TextStyle.INHERIT;
    /**
     * Specifies the style of the text.
     *
     * If the `type` attribute isn't set, a default style will be set, that is based on the
     * parent components.
     *
     * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
     * @value Ueberschrift-1: Shortcut for `u1`
     * @value Ueberschrift-2: Shortcut for `u2`
     * @value Ueberschrift-3: Shortcut for `u3`
     * @value Ueberschrift-4: Shortcut for `u4`
     * @value Ueberschrift-5: Shortcut for `u5`
     * @value Kapitelueberschrift: Shortcut for `ku`
     * @value Fliesstext-Standard: Shortcut for `ft`
     * @value Fliesstext-Fett: Shortcut for `ftf`
     * @value Fliesstext-Gross: Shortcut for `ftg`
     * @value Infotext-Standard: Shortcut for `it`
     * @value Infotext-Klein: Shortcut for `itk`
     * @important
     * @example textstile
     * @example textstile-abkuerzungen
     */
    this.type = "auto";
    /**
     * Specifies the responsiveness strategy.
     * @value auto: Text size is automatically determined by evaluating the device screen size.
     * @value small: Use text size for small device screens.
     * @value large: Use text size for large device screens.
     */
    this.screensize = "auto";
  }
  typeChanged() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  screensizeChanged() {
    forceUpdate(this);
  }
  componentWillLoad() {
    this.computeTextStyleBasedOnTypeProperty();
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => forceUpdate(this));
  }
  disconnectedCallback() {
    var _a;
    this.self.classList.remove(ADD_BULLET_TO_TEXT_CSS_CLASS_NAME); // placed by parent ds-text-list
    (_a = this.breakpointAware) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  computeTextStyleBasedOnTypeProperty() {
    var _a;
    this.textStyle = TextStyle.INHERIT;
    let matchedStyle;
    // Use type property
    if (((_a = this.type) === null || _a === void 0 ? void 0 : _a.length) > 0) {
      matchedStyle = TEXT_STYLE_MAPPING.find((style) => style.names.some((styleName) => this.type.toLowerCase() === styleName.toLowerCase()));
    }
    assert(matchedStyle != null, () => `<ds-text> wurde mit einem ungültigen type konfiguriert.\n\nMögliche Werte sind: ${TEXT_STYLE_MAPPING.map((s) => `\n- ${s.names.map((n) => `"${n}"`).join(", ")}`)
      .join("")
      .toLowerCase()}\n\n Wird kein type angegeben, wird der Text-Stil automatisch ermittelt.`);
    if (matchedStyle != null) {
      this.textStyle = matchedStyle.textStyle;
    }
  }
  render() {
    assertPropertyValue("ds-text", "screensize", this.screensize, [
      "auto",
      "small",
      "large",
    ]);
    return (h(Host, { class: {
        "screensize-small": this.screensize === "small" ||
          (this.screensize === "auto" && !this.breakpointAware.xl),
        "screensize-large": this.screensize === "large" ||
          (this.screensize === "auto" && this.breakpointAware.xl),
        "style-inherit": this.textStyle === TextStyle.INHERIT,
        "style-ueberschrift1": this.textStyle === TextStyle.UEBERSCHRIFT_1,
        "style-ueberschrift2": this.textStyle === TextStyle.UEBERSCHRIFT_2,
        "style-ueberschrift3": this.textStyle === TextStyle.UEBERSCHRIFT_3,
        "style-ueberschrift4": this.textStyle === TextStyle.UEBERSCHRIFT_4,
        "style-ueberschrift5": this.textStyle === TextStyle.UEBERSCHRIFT_5,
        "style-fliesstext-standard": this.textStyle === TextStyle.FLIESSTEXT_STANDARD,
        "style-fliesstext-gross": this.textStyle === TextStyle.FLIESSTEXT_GROSS,
        "style-fliesstext-fett": this.textStyle === TextStyle.FLIESSTEXT_FETT,
        "style-infotext-standard": this.textStyle === TextStyle.INFOTEXT_STANDARD,
        "style-infotext-klein": this.textStyle === TextStyle.INFOTEXT_KLEIN,
        "style-kapitelueberschrift": this.textStyle === TextStyle.KAPITELUEBERSCHRIFT,
      }, style: generateStyleMap(this.color) }, h("slot", null)));
  }
  static get is() { return "ds-text"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-text.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-text.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "auto: The style is determined automatically based on the position the `<ds-text>` in the element tree."
            }, {
              "name": "value",
              "text": "Ueberschrift-1: Shortcut for `u1`"
            }, {
              "name": "value",
              "text": "Ueberschrift-2: Shortcut for `u2`"
            }, {
              "name": "value",
              "text": "Ueberschrift-3: Shortcut for `u3`"
            }, {
              "name": "value",
              "text": "Ueberschrift-4: Shortcut for `u4`"
            }, {
              "name": "value",
              "text": "Ueberschrift-5: Shortcut for `u5`"
            }, {
              "name": "value",
              "text": "Kapitelueberschrift: Shortcut for `ku`"
            }, {
              "name": "value",
              "text": "Fliesstext-Standard: Shortcut for `ft`"
            }, {
              "name": "value",
              "text": "Fliesstext-Fett: Shortcut for `ftf`"
            }, {
              "name": "value",
              "text": "Fliesstext-Gross: Shortcut for `ftg`"
            }, {
              "name": "value",
              "text": "Infotext-Standard: Shortcut for `it`"
            }, {
              "name": "value",
              "text": "Infotext-Klein: Shortcut for `itk`"
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "textstile"
            }, {
              "name": "example",
              "text": "textstile-abkuerzungen"
            }],
          "text": "Specifies the style of the text.\n\nIf the `type` attribute isn't set, a default style will be set, that is based on the\nparent components."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "screensize": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"small\" | \"large\" | \"auto\"",
          "resolved": "\"auto\" | \"large\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "auto: Text size is automatically determined by evaluating the device screen size."
            }, {
              "name": "value",
              "text": "small: Use text size for small device screens."
            }, {
              "name": "value",
              "text": "large: Use text size for large device screens."
            }],
          "text": "Specifies the responsiveness strategy."
        },
        "attribute": "screensize",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the color (see example for references)"
            }, {
              "name": "example",
              "text": "colors"
            }],
          "text": "Defines the text color."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "textStyle": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "type",
        "methodName": "typeChanged"
      }, {
        "propName": "screensize",
        "methodName": "screensizeChanged"
      }];
  }
}
function generateStyleMap(color) {
  if ((color === null || color === void 0 ? void 0 : color.length) > 0) {
    return { color: new ColorPalette().getColorCode(color) };
  }
  return {};
}
var TextStyle;
(function (TextStyle) {
  TextStyle["INHERIT"] = "INHERIT";
  TextStyle["FLIESSTEXT_STANDARD"] = "FLIESSTEXT_STANDARD";
  TextStyle["FLIESSTEXT_GROSS"] = "FLIESSTEXT_GROSS";
  TextStyle["FLIESSTEXT_FETT"] = "FLIESSTEXT_FETT";
  TextStyle["UEBERSCHRIFT_1"] = "UEBERSCHRIFT_1";
  TextStyle["UEBERSCHRIFT_2"] = "UEBERSCHRIFT_2";
  TextStyle["UEBERSCHRIFT_3"] = "UEBERSCHRIFT_3";
  TextStyle["UEBERSCHRIFT_4"] = "UEBERSCHRIFT_4";
  TextStyle["UEBERSCHRIFT_5"] = "UEBERSCHRIFT_5";
  TextStyle["INFOTEXT_STANDARD"] = "INFOTEXT_STANDARD";
  TextStyle["INFOTEXT_KLEIN"] = "INFOTEXT_KLEIN";
  TextStyle["KAPITELUEBERSCHRIFT"] = "KAPITELUEBERSCHRIFT";
})(TextStyle || (TextStyle = {}));
const TEXT_STYLE_MAPPING = [
  {
    names: ["auto"],
    textStyle: TextStyle.INHERIT,
  },
  {
    names: ["Fliesstext-Standard", "ft"],
    textStyle: TextStyle.FLIESSTEXT_STANDARD,
  },
  {
    names: ["Fliesstext-Gross", "ftg"],
    textStyle: TextStyle.FLIESSTEXT_GROSS,
  },
  {
    names: ["Fliesstext-Fett", "ftf"],
    textStyle: TextStyle.FLIESSTEXT_FETT,
  },
  {
    names: ["Ueberschrift-1", "u1"],
    textStyle: TextStyle.UEBERSCHRIFT_1,
  },
  {
    names: ["Ueberschrift-2", "u2"],
    textStyle: TextStyle.UEBERSCHRIFT_2,
  },
  {
    names: ["Ueberschrift-3", "u3"],
    textStyle: TextStyle.UEBERSCHRIFT_3,
  },
  {
    names: ["Ueberschrift-4", "u4"],
    textStyle: TextStyle.UEBERSCHRIFT_4,
  },
  {
    names: ["Ueberschrift-5", "u5"],
    textStyle: TextStyle.UEBERSCHRIFT_5,
  },
  {
    names: ["Kapitelueberschrift", "ku"],
    textStyle: TextStyle.KAPITELUEBERSCHRIFT,
  },
  {
    names: ["Infotext-Standard", "it"],
    textStyle: TextStyle.INFOTEXT_STANDARD,
  },
  {
    names: ["Infotext-Klein", "itk"],
    textStyle: TextStyle.INFOTEXT_KLEIN,
  },
];
