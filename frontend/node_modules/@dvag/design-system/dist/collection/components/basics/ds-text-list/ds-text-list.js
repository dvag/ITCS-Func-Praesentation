import { h, Host, } from "@stencil/core";
import { ADD_BULLET_TO_TEXT_CSS_CLASS_NAME } from "../../../classes/constants";
import { SlotObserver } from "../../../classes/slot-observer";
/**
 *
 * An enumerated list that displays `<ds-text>` items as a bullet point list.
 *
 * In addition to `<ds-text>`, other `<ds-text-list>` elements can be placed,
 * to implement further indentation.
 *
 * @path /Basics
 * @name Text list
 * @icon tasks
 * @stable
 */
export class DsTextList {
  constructor() {
    this.bulletWidth = 4;
    /**
     * Defines the style of the text, that is propagated to the `<ds-text>` child elements,
     * if they have `type` attribute set to `"auto"`.
     *
     * @value auto: The style is determined automatically based on the position the `<ds-text>` in the element tree.
     * @value Ueberschrift-1: Shortcut for `u1`
     * @value Ueberschrift-2: Shortcut for `u2`
     * @value Ueberschrift-3: Shortcut for `u3`
     * @value Ueberschrift-4: Shortcut for `u4`
     * @value Ueberschrift-5: Shortcut for `u5`
     * @value Kapitelueberschrift: Shortcut for `ku`
     * @value Fliesstext-Standard: Shortcut for `ft`
     * @value Fliesstext-Fett: Shortcut for `ftf`
     * @value Fliesstext-Gross: Shortcut for `ftg`
     * @value Infotext-Standard: Shortcut for `it`
     * @value Infotext-Klein: Shortcut for `itk`
     * @important
     * @example type
     */
    this.type = "auto";
  }
  onTypeChange() {
    this.updateTextTypes();
  }
  connectedCallback() {
    this.bulletResizeObserver = new ResizeObserver(() => {
      var _a;
      this.bulletWidth = Math.round((_a = this.bulletWidthReference) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().width);
    });
    this.updateTextTypes();
  }
  disconnectedCallback() {
    var _a, _b;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.bulletResizeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
  }
  updateTextTypes() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    this.slotObserver = new SlotObserver(this.self, "*", (nodes) => {
      nodes.forEach((node) => {
        if (node.parentElement === this.self) {
          node.classList.add(ADD_BULLET_TO_TEXT_CSS_CLASS_NAME);
          if (["ds-text", "ds-text-list"].includes(node.tagName.toLowerCase()) &&
            node["type"] ===
              "auto") {
            node["type"] =
              this.type;
          }
        }
      });
      if (this.bulletWidthReference != null) {
        this.bulletResizeObserver.observe(this.bulletWidthReference);
      }
    });
  }
  render() {
    return (h(Host, { style: {
        "--ds-text-list-bullet-width": this.bulletWidth + "px",
      } }, h("div", { class: {
        list: true,
      } }, h("slot", null)), h("ds-text", { ref: (ref) => (this.bulletWidthReference = ref), type: this.type, class: "whitespace-render" }, "\u25CF")));
  }
  static get is() { return "ds-text-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-text-list.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-text-list.css"]
    };
  }
  static get properties() {
    return {
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "auto: The style is determined automatically based on the position the `<ds-text>` in the element tree."
            }, {
              "name": "value",
              "text": "Ueberschrift-1: Shortcut for `u1`"
            }, {
              "name": "value",
              "text": "Ueberschrift-2: Shortcut for `u2`"
            }, {
              "name": "value",
              "text": "Ueberschrift-3: Shortcut for `u3`"
            }, {
              "name": "value",
              "text": "Ueberschrift-4: Shortcut for `u4`"
            }, {
              "name": "value",
              "text": "Ueberschrift-5: Shortcut for `u5`"
            }, {
              "name": "value",
              "text": "Kapitelueberschrift: Shortcut for `ku`"
            }, {
              "name": "value",
              "text": "Fliesstext-Standard: Shortcut for `ft`"
            }, {
              "name": "value",
              "text": "Fliesstext-Fett: Shortcut for `ftf`"
            }, {
              "name": "value",
              "text": "Fliesstext-Gross: Shortcut for `ftg`"
            }, {
              "name": "value",
              "text": "Infotext-Standard: Shortcut for `it`"
            }, {
              "name": "value",
              "text": "Infotext-Klein: Shortcut for `itk`"
            }, {
              "name": "important",
              "text": undefined
            }, {
              "name": "example",
              "text": "type"
            }],
          "text": "Defines the style of the text, that is propagated to the `<ds-text>` child elements,\nif they have `type` attribute set to `\"auto\"`."
        },
        "attribute": "type",
        "reflect": false,
        "defaultValue": "\"auto\""
      }
    };
  }
  static get states() {
    return {
      "bulletWidth": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "type",
        "methodName": "onTypeChange"
      }];
  }
}
