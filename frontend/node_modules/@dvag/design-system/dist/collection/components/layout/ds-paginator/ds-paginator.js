import { h, Host, } from "@stencil/core";
import { clamp } from "../../../classes/math-util";
import { GAP, generatePageIndexTypes } from "./page-index-type";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
// TODO bug: 4 in der mitte ausgewählt, 4 wird aktiv, aber der graue kreis hängt an der 5.
// TODO bug: ab 1000 kein abstände mehr zwischen den zahlen / kreis defekt
/**
 * Eine Komponente, die zum Visualisieren und Interagieren von Seitenwechsel genutzt werden kann.
 *
 * @name Paginator
 * @path /Layout
 * @icon exchange-alt
 * @stable
 */
export class DsPaginator {
  constructor() {
    /**
     * Gibt an wie viele Seiten links und rechts von der aktuellen Seite angezeigt werden sollen.
     *
     * @value number: Die Anzahl an Seiten links und rechts der aktuellen Seite.
     * @example range
     */
    this.range = 1;
    /**
     * Die Seite, die beim Initialisieren ausgewählt sein soll.
     *
     * @value number: Die initiale Seite. Dieser Wert ändert sich während der Laufzeit abhängig von der aktuell
     * ausgewählten Seite.
     *
     * @example current
     */
    this.current = 1;
  }
  onCountChange() {
    this.setCurrentPage(this.current);
  }
  onPageChange(newValue, oldValue) {
    this.setCurrentPage(newValue);
    if (this.current !== oldValue) {
      this.pageChanged.emit(this.current);
    }
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  setCurrentPage(page) {
    const clampedPage = clamp(page, 1, Math.max(this.count, 1));
    if (clampedPage !== this.current) {
      this.current = clampedPage;
    }
  }
  renderGap() {
    return h("ds-text", null, "...");
  }
  renderPageButton(page) {
    return (h("button", { type: "button", id: ElementIdGenerator.createId(this.self, `page-${page}`), class: {
        "page-button": true,
        "current-page": this.current === page,
      }, onClick: () => this.setCurrentPage(page) }, h("ds-text", null, page)));
  }
  renderPageButtons() {
    if (this.count <= 1) {
      return null;
    }
    const pageIndexTypes = generatePageIndexTypes(this.current, this.count, this.range);
    return (h("div", { class: "page-container" }, pageIndexTypes.map((page) => {
      if (page === GAP) {
        return this.renderGap();
      }
      else {
        return this.renderPageButton(page);
      }
    })));
  }
  render() {
    return (h(Host, { style: {
        visibility: this.count <= 1 ? "hidden" : "visible",
      } }, h("ds-icon-button", { class: "page-down", size: "small", id: ElementIdGenerator.createId(this.self, "page-down"), onClick: () => this.setCurrentPage(this.current - 1) }, h("ds-icon", { icon: "drop-down", style: {
        transform: "rotate(90deg)",
      } })), this.renderPageButtons(), h("ds-icon-button", { class: "page-up", size: "small", id: ElementIdGenerator.createId(this.self, "page-up"), onClick: () => this.setCurrentPage(this.current + 1) }, h("ds-icon", { style: {
        transform: "rotate(-90deg)",
      }, icon: "drop-down" }))));
  }
  static get is() { return "ds-paginator"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-paginator.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-paginator.css"]
    };
  }
  static get properties() {
    return {
      "count": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Der Wert der letzte Seite."
            }, {
              "name": "example",
              "text": "count"
            }],
          "text": "Die Anzahl an Seiten, die angezeigt werden sollen."
        },
        "attribute": "count",
        "reflect": false
      },
      "range": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Die Anzahl an Seiten links und rechts der aktuellen Seite."
            }, {
              "name": "example",
              "text": "range"
            }],
          "text": "Gibt an wie viele Seiten links und rechts von der aktuellen Seite angezeigt werden sollen."
        },
        "attribute": "range",
        "reflect": false,
        "defaultValue": "1"
      },
      "current": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Die initiale Seite. Dieser Wert \u00E4ndert sich w\u00E4hrend der Laufzeit abh\u00E4ngig von der aktuell\nausgew\u00E4hlten Seite."
            }, {
              "name": "example",
              "text": "current"
            }],
          "text": "Die Seite, die beim Initialisieren ausgew\u00E4hlt sein soll."
        },
        "attribute": "current",
        "reflect": true,
        "defaultValue": "1"
      }
    };
  }
  static get events() {
    return [{
        "method": "pageChanged",
        "name": "pageChanged",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event wird gefeuert, wenn die Seite, durch Klicken der Pfeile oder der Seitenzahlen, ge\u00E4ndert wird.\nDer delegierte Wert, reflektiert das `current`-Attribut."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "count",
        "methodName": "onCountChange"
      }, {
        "propName": "current",
        "methodName": "onPageChange"
      }];
  }
}
