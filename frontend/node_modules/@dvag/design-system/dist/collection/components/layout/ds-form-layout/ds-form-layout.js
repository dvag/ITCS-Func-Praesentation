import { h, Host } from "@stencil/core";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
/**
 * A layout component that can render a form element within a one, two or three column grid.
 * It's mainly used within a `<ds-card>` component.
 *
 * @path /Layout
 * @name Form-Layout
 *
 * @slot label - Area for the form label.
 * @slot interaction - Area for the form control.
 *
 * @example example
 */
export class DsFormLayout {
  constructor() {
    /**
     * Amount of white space (%) on the right side.
     * Has no impact if `size` is set to `xl`.
     */
    this.whitespace = 10;
    /**
     * Amount of space (%) of interaction area. From this value the whitespace value is subtracted.
     * Has no impact if `size` is `l` or `xl`.
     */
    this.interaction = 35;
  }
  onSizeChange() {
    this.internalSize = this.computeInternalSize();
  }
  connectedCallback() {
    this.breakpointAware = new BreakpointAware(() => {
      this.internalSize = this.computeInternalSize();
    });
  }
  disconnectedCallback() {
    this.breakpointAware.disconnect();
  }
  componentWillLoad() {
    this.internalSize = this.computeInternalSize();
  }
  computeInternalSize() {
    if (this.size === "s" && this.breakpointAware.xs) {
      return "l";
    }
    return this.size;
  }
  getGridColumn(num, unit) {
    return num > 0 ? `${num}${unit}` : "";
  }
  buildCssGridStyle() {
    if (this.internalSize === "s") {
      return {
        "grid-template-columns": `${this.getGridColumn(100 - this.interaction, "fr")} ${this.getGridColumn(this.interaction, "fr")} ${this.getGridColumn(this.whitespace, "%")}`,
      };
    }
    else if (this.internalSize === "l") {
      return {
        "grid-template-columns": `1fr ${this.getGridColumn(this.whitespace, "%")}`,
      };
    }
    else if (this.internalSize === "xl") {
      return {
        "grid-template-columns": "1fr",
      };
    }
  }
  renderSlotDependantOfSize() {
    const namedSlots = [
      h("div", { class: "label" }, this.renderLabelSlot()),
      h("div", { class: "interaction" }, this.renderInteractionSlot()),
    ];
    if (this.internalSize === "l") {
      return h("div", { class: "column" }, namedSlots);
    }
    return namedSlots;
  }
  renderInteractionSlot() {
    var _a, _b;
    const usesDsInfoInsideInteractionSlot = ((_b = (_a = this.self
      .querySelector('*[slot="interaction"]')) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === "ds-info";
    const size = this.computeInternalSize();
    if (!usesDsInfoInsideInteractionSlot && size !== "xl") {
      return (h("ds-info", { hidebutton: true }, h("slot", { name: "interaction" })));
    }
    else {
      return h("slot", { name: "interaction" });
    }
  }
  renderLabelSlot() {
    var _a, _b;
    const usesDsInfoInsideLabelSlot = ((_b = (_a = this.self.querySelector('*[slot="label"]')) === null || _a === void 0 ? void 0 : _a.tagName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) ===
      "ds-info";
    const size = this.computeInternalSize();
    if (!usesDsInfoInsideLabelSlot && size === "l") {
      return (h("ds-info", { hidebutton: true }, h("slot", { name: "label" })));
    }
    else {
      return h("slot", { name: "label" });
    }
  }
  render() {
    return (h(Host, null, h("div", { class: "layout", style: Object.assign({}, this.buildCssGridStyle()) }, this.renderSlotDependantOfSize())));
  }
  static get is() { return "ds-form-layout"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-form-layout.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-form-layout.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "GridSize",
          "resolved": "\"l\" | \"s\" | \"xl\"",
          "references": {
            "GridSize": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "s: Small elements in a three column layout."
            }, {
              "name": "value",
              "text": "l: Medium-sized elements in a two column layout."
            }, {
              "name": "value",
              "text": "xl: A large element in a single column layout."
            }, {
              "name": "example",
              "text": "size-s"
            }, {
              "name": "example",
              "text": "size-l"
            }, {
              "name": "example",
              "text": "size-xl"
            }],
          "text": "Defines the size layout of the shown elements."
        },
        "attribute": "size",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "internalSize": {}
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "size",
        "methodName": "onSizeChange"
      }];
  }
}
