import { h, Host, } from "@stencil/core";
import { createMetaComponentsSlotObserver, } from "../../../../classes/slot-observer";
import { ColorPalette } from "../../../../classes/color-palette";
import { displayNumberAsCurrency } from "../../../../classes/currency-util";
import { ElementIdGenerator } from "../../../../classes/element-id-handling";
/**
 * Results overview of calculated insurance contributions.
 * @path /Specialized
 * @name Ergebnisübersicht
 * @shortname Erg.-Übersicht
 * @icon calculator
 *
 */
export class DsFmErgebnisuebersicht {
  constructor() {
    this.colorPalette = new ColorPalette();
    /**
     * Indicates whether the donut chart will be displayed or not.
     *
     * @value true: The donut chart is displayed at the top of the component
     * @value false: The donut chart is not displayed.
     *
     * @example donut-visible
     */
    this.donutvisible = true;
    /**
     * Headline for the second contribution rate. Located below the chart.
     * This label is optional.
     *
     * @value string: e.g: Gesamtbeitrag / Jahr
     * @example example
     */
    this.secondcontributionlabel = null;
  }
  connectedCallback() {
    this.slotObserver =
      createMetaComponentsSlotObserver(this.self, "ds-fm-ergebnisuebersicht-table", (nodes) => {
        requestAnimationFrame(async () => {
          var _a;
          this.tables = await Promise.all(nodes.map((node) => node.toErgebnisUebersichtTable()));
          this.allItems = (_a = this.tables) === null || _a === void 0 ? void 0 : _a.map((table) => table.items).flat();
        });
      });
  }
  disconnectedCallback() {
    var _a;
    (_a = this.slotObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
  }
  showSegmentInfo(index) {
    this.selectedItem = index;
  }
  renderChartSamples() {
    var _a;
    return (_a = this.allItems) === null || _a === void 0 ? void 0 : _a.map((item, index) => {
      return (h("ds-chart-sample", { value: item.firstcolumnvalue, label: item.label, color: this.colorPalette.getWheelColorCode(index) }));
    });
  }
  renderDonutChartContent(sum) {
    var _a, _b, _c;
    const itemIsSelected = this.selectedItem != null;
    const donutCenterText = itemIsSelected
      ? `${displayNumberAsCurrency((_a = this.allItems[this.selectedItem]) === null || _a === void 0 ? void 0 : _a.firstcolumnvalue, 2)} €`
      : this.donutcenterlabel;
    const beforeComma = (_b = Math.floor(sum)) === null || _b === void 0 ? void 0 : _b.toString();
    const sumTextType = (beforeComma === null || beforeComma === void 0 ? void 0 : beforeComma.length) > 4 ? "u3" : "u2";
    return (h("div", { slot: "content", class: "donut-content" }, h("ds-text", { class: "primary-label", screensize: "small" }, itemIsSelected ? (ellipse((_c = this.allItems) === null || _c === void 0 ? void 0 : _c[this.selectedItem].label, 20)) : (h("span", null, this.donutlabel))), h("ds-text", { screensize: "small", type: sumTextType, color: itemIsSelected
        ? this.colorPalette.getWheelColor(this.selectedItem)
        : undefined, class: "sum" }, donutCenterText), h("ds-text", { screensize: "small", color: "hellgrau-3" }, this.donutsublabel)));
  }
  // TODO: Add argument to generate id for cells (e.g. parent label, isFirstColumn and so on)
  renderValueCell(value, info, isFirstChild, isLastChild, highlight) {
    var _a;
    return (h("div", { class: {
        cell: true,
        first: isFirstChild,
        last: isLastChild,
        highlight: highlight,
      } }, 
    // TODO: Use Id generator instead of this
    h("ds-info", { id: ((_a = this.self.id) !== null && _a !== void 0 ? _a : "") +
        "-columninfo-" +
        (cellInfoNumber = cellInfoNumber + 1), hidebutton: !((info === null || info === void 0 ? void 0 : info.length) > 0) }, h("ds-text", { slot: "content", type: "ft" }, info), h("ds-text", { class: "value" }, isNaN(value)
      ? "unbekannt"
      : displayNumberAsCurrency(value, 2) + " €"))));
  }
  renderHeaderRow(table) {
    var _a, _b, _c;
    return (h("div", { class: "row" }, h("div", { class: "cell label" }, h("ds-text", { type: "ftf" }, table.label)), h("div", { class: "cell" }, h("ds-info", { id: ElementIdGenerator.createId(this.self, "first-column-info"), hidebutton: !(((_a = this.firstcolumninfo) === null || _a === void 0 ? void 0 : _a.length) > 0) }, h("ds-text", { slot: "content", type: "ft" }, this.firstcolumninfo), h("ds-text", { type: "it" }, this.firstcolumn))), ((_b = this.secondcolumn) === null || _b === void 0 ? void 0 : _b.length) > 0 ? (h("div", { class: "cell" }, h("ds-info", { id: ElementIdGenerator.createId(this.self, "second-column-info"), hidebutton: !(((_c = this.secondcolumninfo) === null || _c === void 0 ? void 0 : _c.length) > 0) }, h("ds-text", { slot: "content", type: "ft" }, this.secondcolumninfo), h("ds-text", { type: "it" }, this.secondcolumn)))) : null));
  }
  renderTable(table, colorWheelIndexOffset = 0) {
    var _a;
    return (h("div", { class: "table" }, [
      this.renderHeaderRow(table),
      (_a = table.items) === null || _a === void 0 ? void 0 : _a.map((item, index) => {
        var _a, _b;
        const isFirstChild = index === 0;
        const isLastChild = index === table.items.length - 1;
        return (h("div", { class: "row" }, h("div", { class: "cell label" }, h("ds-column", { class: "color-indicator", style: {
            "border-color": this.colorPalette.getWheelColorCode(index + colorWheelIndexOffset),
          } }, h("ds-text", null, item.label), ((_a = item.sublabel) === null || _a === void 0 ? void 0 : _a.length) > 0 ? (h("ds-text", { type: "itk" }, item.sublabel)) : null)), [
          this.renderValueCell(item.firstcolumnvalue, item.firstcolumninfo, isFirstChild, isLastChild, true),
          ((_b = this.secondcolumn) === null || _b === void 0 ? void 0 : _b.length) > 0
            ? this.renderValueCell(item.secondcolumnvalue, item.secondcolumninfo, isFirstChild, isLastChild, false)
            : null,
        ]));
      }),
    ]));
  }
  render() {
    var _a, _b, _c, _d;
    const sum = (_c = (_b = (_a = this.allItems) === null || _a === void 0 ? void 0 : _a.map((item) => item.firstcolumnvalue)) === null || _b === void 0 ? void 0 : _b.reduce((previous, current) => {
      return previous + current;
    }, 0)) !== null && _c !== void 0 ? _c : 0;
    const twoPaymentMethods = !!(this.firstcontributionlabel && this.secondcontributionlabel);
    return (h(Host, null, h("div", { class: { "donut-info-container": true, visible: this.donutvisible } }, h("ds-donut-chart", { radius: 100, segmentwidth: 10, scale: 2, offset: 5, onSegmentSelect: (e) => this.showSegmentInfo(e.detail) }, this.renderDonutChartContent(sum), this.renderChartSamples()), h("div", { style: { display: "flex", width: "100%" } }, h("div", { class: {
        "contribution-container": true,
        right: twoPaymentMethods,
      } }, h("ds-column", { class: "info" }, h("ds-text", null, this.firstcontributionlabel), h("ds-text", { type: "ftf" }, this.firstcontributionsublabel))), twoPaymentMethods
      ? [
        h("div", { class: "info-center" }, "\u00A0"),
        h("div", { class: "contribution-container left" }, h("ds-column", { class: "info" }, h("ds-text", null, this.secondcontributionlabel), h("ds-text", { type: "ftf" }, this.secondcontributionsublabel))),
      ]
      : null), h("ds-hr", { style: {
        "margin-top": "32px",
        "margin-bottom": "24px",
      } })), (_d = this.tables) === null || _d === void 0 ? void 0 :
      _d.map((table, index) => {
        const colorWheelIndexOffset = this.tables
          .slice(0, index)
          .map((table) => table.items.length)
          .reduce((previousValue, currentValue) => previousValue + currentValue, 0);
        return this.renderTable(table, colorWheelIndexOffset);
      })));
  }
  static get is() { return "ds-fm-ergebnisuebersicht"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-fm-ergebnisuebersicht.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-fm-ergebnisuebersicht.css"]
    };
  }
  static get properties() {
    return {
      "donutvisible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: The donut chart is displayed at the top of the component"
            }, {
              "name": "value",
              "text": "false: The donut chart is not displayed."
            }, {
              "name": "example",
              "text": "donut-visible"
            }],
          "text": "Indicates whether the donut chart will be displayed or not."
        },
        "attribute": "donutvisible",
        "reflect": false,
        "defaultValue": "true"
      },
      "donutlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g: J\u00E4hrlich"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "This label is located above the main contribution rate."
        },
        "attribute": "donutlabel",
        "reflect": false
      },
      "donutcenterlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: e.g: contribution rate"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Dislpayed in the center of the chart."
        },
        "attribute": "donutcenterlabel",
        "reflect": false
      },
      "donutsublabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g: J\u00E4hrlich"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "This label is located below the center label."
        },
        "attribute": "donutsublabel",
        "reflect": false
      },
      "firstcontributionlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g:  Gesamtbeitrag \u00D8 Monat"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Headline for the first contribution rate. Located below the chart."
        },
        "attribute": "firstcontributionlabel",
        "reflect": false
      },
      "firstcontributionsublabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: 770\u20AC"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Displays the first contribution rate summary. Located below the chart."
        },
        "attribute": "firstcontributionsublabel",
        "reflect": false
      },
      "secondcontributionlabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g: Gesamtbeitrag / Jahr"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Headline for the second contribution rate. Located below the chart.\nThis label is optional."
        },
        "attribute": "secondcontributionlabel",
        "reflect": false,
        "defaultValue": "null"
      },
      "secondcontributionsublabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g 9.240\u20AC"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Displays the second contribution rate summary. Located below the chart."
        },
        "attribute": "secondcontributionsublabel",
        "reflect": false
      },
      "firstcolumn": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g: Aktuell"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Displays the name of the first column."
        },
        "attribute": "firstcolumn",
        "reflect": false
      },
      "firstcolumninfo": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A short description"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Contains the information text for the first column.\nAutomatically adds an `<ds-info>` to the column to display the information text."
        },
        "attribute": "firstcolumninfo",
        "reflect": false
      },
      "secondcolumn": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: e.g: Vollschutz"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Displays the name of the second column."
        },
        "attribute": "secondcolumn",
        "reflect": false
      },
      "secondcolumninfo": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A short description"
            }, {
              "name": "example",
              "text": "example"
            }],
          "text": "Contains the information text for the second column.\nAutomatically adds an `<ds-info>` to the column to display the information text."
        },
        "attribute": "secondcolumninfo",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "selectedItem": {},
      "tables": {},
      "allItems": {}
    };
  }
  static get elementRef() { return "self"; }
}
function ellipse(str, after) {
  // TODO auslagern?
  if (str.length <= after) {
    return str;
  }
  else {
    return `${str.substring(0, after - 3)}...`;
  }
}
let cellInfoNumber = 0;
