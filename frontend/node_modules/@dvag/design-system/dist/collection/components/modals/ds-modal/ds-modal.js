import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { isSlotDefined } from "../../../classes/render-util";
import { assertPropertyValue } from "../../../classes/assert";
import { ModalScrollHelper } from "../../../classes/modal-scroll-helper";
/**
 * A modal dialog element which overlays the page when opened.
 * @path /Modals
 * @name Modal
 * @stable
 *
 * @slot content - Inhalt, der in der Mitte des Modals angezeigt wird
 * @slot right-button - Rechter Button im Footer
 * @slot left-button - Linker Button im Footer
 */
export class DsModal {
  constructor() {
    this.state = "closed";
    /**
     * Defines whether a click outside the modal will close the modal or not.
     *
     * @value true: A click on the background causes the modal to close.
     * @value false: A click on the background does nothing.
     *
     * @example allow-background-close
     */
    this.allowbackgroundclose = true;
    /**
     * Hintergrundfarbe für den Content-Bereich
     * @value weiss: weißer Hintergrund
     * @value grau: gräulicher Hintergrund
     * @example contentcolor
     */
    this.contentcolor = "weiss";
  }
  visibleChanged() {
    this.visibilityChanged();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.visibilityChanged();
  }
  disconnectedCallback() {
    ModalScrollHelper.instance().unblock(this.self);
  }
  componentDidRender() {
    const scrollHelper = ModalScrollHelper.instance();
    if (this.visible) {
      scrollHelper.block(this.self, this.scrollableElement);
    }
    else {
      scrollHelper.unblock(this.self);
    }
  }
  visibilityChanged() {
    if (this.visible && this.state !== "opening") {
      this.state = "opening";
      this.modalOpened.emit();
    }
    else if (!this.visible && this.state !== "closed") {
      // DO NOT EMIT modalClosed
      this.handleClosing();
    }
  }
  layoutAnimationEnd() {
    if (this.state === "opening") {
      this.state = "opened";
    }
    else if (this.state === "closing") {
      this.state = "closed";
    }
  }
  handleClosing() {
    this.visible = false;
    this.state = "closing";
  }
  closeModal() {
    this.handleClosing();
    this.modalClosed.emit();
  }
  closeModalOnClickOutside(e) {
    if (this.allowbackgroundclose &&
      !e.composedPath().includes(this.modalDialog)) {
      this.closeModal();
    }
  }
  render() {
    assertPropertyValue("ds-modal", "size", this.size, [
      "fullscreen",
      "content",
    ]);
    assertPropertyValue("ds-modal", "contentcolor", this.contentcolor, [
      "weiss",
      "grau",
    ]);
    const isRightButtonDefined = isSlotDefined(this.self, RIGHT_BUTTON);
    const isLeftButtonDefined = isSlotDefined(this.self, LEFT_BUTTON);
    const countOfDefinedSlots = (isRightButtonDefined ? 1 : 0) + (isLeftButtonDefined ? 1 : 0);
    return (h(Host, { class: {
        "size-fullscreen": this.size === "fullscreen",
        "size-content": this.size === "content",
        "state-closed": this.state === "closed",
        "state-opened": this.state === "opened",
        "state-opening": this.state === "opening",
        "state-closing": this.state === "closing",
      } }, h("div", { class: "overlay" }), h("div", { class: "modal-layout", onClick: (e) => this.closeModalOnClickOutside(e), onAnimationEnd: () => this.layoutAnimationEnd() }, h("div", { ref: (el) => (this.modalDialog = el), class: "modal-element" }, this.renderHeader(), this.renderContent(countOfDefinedSlots), this.renderFooter(countOfDefinedSlots), h("div", { class: "header-shadow" }), h("div", { class: {
        "footer-shadow": true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } })))));
  }
  renderHeader() {
    if (this.state === "closed") {
      return;
    }
    return (h("div", { class: "header" }, h("div", { class: "header-side" }), h("div", { class: "header-label" }, h("ds-text", { type: "ftf" }, this.label)), h("div", { class: "header-side" }, h("ds-function-icon-button", { id: ElementIdGenerator.createId(this.self, "close-button"), onClick: () => this.closeModal() }, h("ds-icon", { id: ElementIdGenerator.createId(this.self, "close-button"), icon: "schliessen-dialog", size: 32 })))));
  }
  renderContent(countOfDefinedSlots) {
    return (h("div", { ref: (el) => (this.scrollableElement = el), class: {
        content: true,
        "color-white": this.contentcolor == "weiss",
        "color-grey": this.contentcolor == "grau",
        "no-footer": countOfDefinedSlots === 0,
      } }, h("slot", { name: "content" })));
  }
  renderFooter(countOfDefinedSlots) {
    if (this.state === "closed") {
      return;
    }
    return (h("div", { class: {
        footer: true,
        visible: countOfDefinedSlots > 0,
        "one-slot": countOfDefinedSlots === 1,
        "two-slots": countOfDefinedSlots === 2,
      } }, h("div", { class: "footer-left-button" }, h("slot", { name: "left-button" })), h("div", null, h("slot", { name: "right-button" }))));
  }
  static get is() { return "ds-modal"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-modal.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-modal.css"]
    };
  }
  static get properties() {
    return {
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"fullscreen\" | \"content\"",
          "resolved": "\"content\" | \"fullscreen\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "fullscreen: Vollbild"
            }, {
              "name": "value",
              "text": "content: Angepasst an die Gr\u00F6\u00DFe des Inhalts"
            }],
          "text": "Die Modale-Dialog-Komponente kann entweder im Vollbild angezeigt werden, oder der Dialog passt sich der Gr\u00F6\u00DFe des Inhalts an."
        },
        "attribute": "size",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: der Titel"
            }],
          "text": "Titel, der oben im Modal angezeigt wird."
        },
        "attribute": "label",
        "reflect": false
      },
      "visible": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Modal ge\u00F6ffnet"
            }, {
              "name": "value",
              "text": "false: Modal geschlossen"
            }],
          "text": "Steuert die Sichtbarkeit des Modals."
        },
        "attribute": "visible",
        "reflect": false
      },
      "allowbackgroundclose": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: A click on the background causes the modal to close."
            }, {
              "name": "value",
              "text": "false: A click on the background does nothing."
            }, {
              "name": "example",
              "text": "allow-background-close"
            }],
          "text": "Defines whether a click outside the modal will close the modal or not."
        },
        "attribute": "allowbackgroundclose",
        "reflect": false,
        "defaultValue": "true"
      },
      "contentcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"weiss\" | \"grau\"",
          "resolved": "\"grau\" | \"weiss\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "weiss: wei\u00DFer Hintergrund"
            }, {
              "name": "value",
              "text": "grau: gr\u00E4ulicher Hintergrund"
            }, {
              "name": "example",
              "text": "contentcolor"
            }],
          "text": "Hintergrundfarbe f\u00FCr den Content-Bereich"
        },
        "attribute": "contentcolor",
        "reflect": false,
        "defaultValue": "\"weiss\""
      }
    };
  }
  static get states() {
    return {
      "state": {}
    };
  }
  static get events() {
    return [{
        "method": "modalOpened",
        "name": "modalOpened",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Wird gefeuert, wenn der Dialog ge\u00F6ffnet wird."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }, {
        "method": "modalClosed",
        "name": "modalClosed",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Wird gefeuert, wenn der Dialog vom Nutzer geschlossen wird. (Schlie\u00DFen-Button/Hintergrund klicken)"
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "visible",
        "methodName": "visibleChanged"
      }];
  }
}
const RIGHT_BUTTON = "right-button";
const LEFT_BUTTON = "left-button";
