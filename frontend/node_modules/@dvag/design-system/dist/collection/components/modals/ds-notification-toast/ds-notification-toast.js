import { h, Host, } from "@stencil/core";
import { ElementIdGenerator } from "../../../classes/element-id-handling";
import { waitAnimationFrames } from "../../../classes/misc-util";
import { NotificationService } from "./notification-service";
/**
 * A notification toast to visualize specific events like successes, errors, warnings etc.
 * The notification automatically renders under any other visible notifications.
 *
 * @name Notification Toast
 * @shortname Toast
 * @path /Modals
 * @icon bell
 *
 * @slot - Content within the notification which is displayed under the title
 */
export class DsNotificationToast {
  constructor() {
    this.show = false;
  }
  onVisibleChanged() {
    if (this.visible) {
      clearTimeout(this.closeHandle);
      NotificationService.instance().addNotificationToast(this.self);
      waitAnimationFrames(2).then(() => {
        this.show = this.visible;
      });
    }
  }
  connectedCallback() {
    if (this.visible) {
      NotificationService.instance().addNotificationToast(this.self);
    }
  }
  componentDidLoad() {
    requestAnimationFrame(() => {
      this.show = this.visible;
    });
  }
  closeImmediately() {
    this.closeNotification.emit();
    this.visible = false;
  }
  handleTransitionEnd(e) {
    // handleTransitionEnd is called twice because two different properties transition (opacity and transform)
    if (e.propertyName === "opacity") {
      return;
    }
    if (this.show) {
      if (Number.isInteger(this.closeafter) && this.closeafter > 0) {
        clearTimeout(this.closeHandle);
        this.closeHandle = setTimeout(() => {
          this.show = false;
        }, this.closeafter * 1000);
      }
    }
    else {
      clearTimeout(this.closeHandle);
      this.closeImmediately();
    }
  }
  renderTitle() {
    return (h("ds-text", { class: "title", type: "ftf" }, this.titlestring));
  }
  renderSubContent() {
    if (!this.subcontent) {
      return;
    }
    return (h("ds-text", { class: "subcontent", type: "itk" }, this.subcontent));
  }
  renderIcon() {
    if (!this.icon) {
      return;
    }
    return (h("div", { class: "icon-container" }, h("ds-icon", { size: 72, icon: this.icon, color: this.iconcolor })));
  }
  renderCloseButton() {
    return (h("div", { class: "close-icon-container" }, h("ds-function-icon-button", { id: ElementIdGenerator.createId(this.self, "close-button"), onClick: () => (this.show = false) }, h("ds-icon", { icon: "schliessen-dialog", size: 16 }))));
  }
  render() {
    return (h(Host, { class: { visible: this.visible } }, h("div", { class: {
        flyout: true,
        show: this.show,
        "page-wrapped-content": true,
      }, onTransitionEnd: (e) => this.handleTransitionEnd(e) }, h("div", { class: "content-container" }, this.renderIcon(), h("div", { class: "text-container" }, this.renderTitle(), h("slot", null), this.renderSubContent())), this.renderCloseButton())));
  }
  static get is() { return "ds-notification-toast"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-notification-toast.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-notification-toast.css"]
    };
  }
  static get properties() {
    return {
      "titlestring": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The title."
            }, {
              "name": "example",
              "text": "default"
            }],
          "text": "The title of the notification."
        },
        "attribute": "titlestring",
        "reflect": false
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A valid icon name."
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The icon which is rendered at the left side of the notification."
        },
        "attribute": "icon",
        "reflect": false
      },
      "iconcolor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)"
            }, {
              "name": "example",
              "text": "icon"
            }],
          "text": "The color of the icon."
        },
        "attribute": "iconcolor",
        "reflect": false
      },
      "subcontent": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Displayed text under the content."
            }, {
              "name": "example",
              "text": "sub-content"
            }],
          "text": "Text under the content. (e.g. for displaying error codes)"
        },
        "attribute": "subcontent",
        "reflect": false
      },
      "closeafter": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: A time in seconds. Any number below zero is considered as infinite."
            }, {
              "name": "value",
              "text": "undefined The notification stays visible until it's closed by clicking on the close button on the\ntop right corner."
            }, {
              "name": "example",
              "text": "close-after"
            }],
          "text": "Specifies the time in seconds the notification is visible before it's closed automatically."
        },
        "attribute": "closeafter",
        "reflect": false
      },
      "visible": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Toast will be displayed under the header."
            }, {
              "name": "value",
              "text": "false: Toast is invisible."
            }, {
              "name": "example",
              "text": "default"
            }],
          "text": "Specifies the visibility. If the notification closes automatically or by clicking on the close button\nthis attribute will be set to false."
        },
        "attribute": "visible",
        "reflect": true
      }
    };
  }
  static get states() {
    return {
      "show": {}
    };
  }
  static get events() {
    return [{
        "method": "closeNotification",
        "name": "closeNotification",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "close-notification"
            }],
          "text": "Fires when the notification closes automatically or by clicking on the close button."
        },
        "complexType": {
          "original": "void",
          "resolved": "void",
          "references": {}
        }
      }];
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "visible",
        "methodName": "onVisibleChanged"
      }];
  }
}
