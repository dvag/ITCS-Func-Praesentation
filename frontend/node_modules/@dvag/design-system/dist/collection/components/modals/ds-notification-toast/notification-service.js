import { HeaderService } from "../../scaffold/ds-header/header-service";
import { ValueStore } from "../../../classes/value-store";
import { BreakpointAware } from "../../../classes/breakpoint-aware";
const NOTIFICATION_SERVICE_KEY = "ds-notification-service";
export class NotificationService {
  constructor() {
    this.currentNotificationToasts = [];
    this.notificationCloseHandle = (e) => this.internalCloseNotification(e.target);
  }
  static instance() {
    return ValueStore.instance().getOrPut(NOTIFICATION_SERVICE_KEY, () => new NotificationService());
  }
  connect() {
    this.resizeObserver = new ResizeObserver(() => {
      this.updatePositions();
    });
    this.breakpointAware = new BreakpointAware(() => {
      this.updatePositions();
    });
    this.subscribeToHeaderChanges();
  }
  disconnect() {
    var _a, _b;
    (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    (_b = this.breakpointAware) === null || _b === void 0 ? void 0 : _b.disconnect();
    this.headerHeightSubscription.unsubscribe();
    this.headerHeightSubscription = null;
  }
  addNotificationToast(notification) {
    if (this.currentNotificationToasts.includes(notification)) {
      return;
    }
    if (this.resizeObserver == null || this.breakpointAware == null) {
      this.connect();
    }
    this.currentNotificationToasts.push(notification);
    notification.addEventListener("closeNotification", this.notificationCloseHandle);
    this.resizeObserver.observe(notification);
    this.updatePositions();
  }
  internalCloseNotification(notificationToClose) {
    this.currentNotificationToasts = this.currentNotificationToasts.filter((notification) => {
      return notificationToClose !== notification;
    });
    notificationToClose.removeEventListener("closeNotification", this.notificationCloseHandle);
    this.resizeObserver.unobserve(notificationToClose);
    if (this.currentNotificationToasts.length === 0) {
      this.disconnect();
    }
    else {
      this.updatePositions();
    }
  }
  getMargin() {
    return this.breakpointAware.xs ? 16 : 24;
  }
  updatePositions() {
    const currentMargin = this.getMargin();
    let referencePositionY = this.currentHeaderHeight + currentMargin;
    this.currentNotificationToasts.forEach((notification) => {
      notification.style.top = referencePositionY + "px";
      referencePositionY += notification.offsetHeight + currentMargin;
    });
  }
  setNotificationsTransition(transitionValue) {
    this.currentNotificationToasts.forEach((notification) => {
      notification.style.transition = transitionValue;
    });
  }
  subscribeToHeaderChanges() {
    const headerService = HeaderService.instance();
    this.headerHeightSubscription = headerService.headerHeight$.subscribe((value) => {
      this.currentHeaderHeight = value;
      // While header moves we dont want to allow any 'top' transitions for notifications
      this.setNotificationsTransition("none");
      this.updatePositions();
      // Reset transition
      this.setNotificationsTransition("top 500ms ease-in-out");
    });
    this.currentHeaderHeight = headerService.headerHeight;
  }
}
