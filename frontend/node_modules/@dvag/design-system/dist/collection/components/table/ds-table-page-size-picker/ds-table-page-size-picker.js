import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
/**
 * TODO Englisch
 * @internal
 */
export class DsTablePageSizePicker {
  onValueChange() {
    var _a;
    this.setValue((_a = this.value) !== null && _a !== void 0 ? _a : this.getPageSizeArray()[0]);
  }
  componentWillRender() {
    return new Promise((resolve) => {
      const pageSizes = this.getPageSizeArray();
      assert(Array.isArray(pageSizes), () => {
        return "Fehler beim Parsen des 'pagesizes'-Properties entdeckt.";
      });
      this.setValue(pageSizes.includes(this.value) ? this.value : pageSizes[0]);
      resolve();
    });
  }
  setValue(newPageSize) {
    if (newPageSize !== this.value) {
      this.value = newPageSize;
      this.pageSizeChanged.emit(this.value);
    }
  }
  getPageSizeArray() {
    return JSON.parse(this.pagesizes);
  }
  renderPages() {
    const pageSizes = this.getPageSizeArray();
    return pageSizes.map((pageSize) => {
      return (h("button", { type: "button", class: {
          "current-page-size": this.value === pageSize,
        }, onClick: () => this.setValue(pageSize) }, h("div", { class: "page-container" }, h("ds-text", { class: "page-text", type: "ftg" }, pageSize))));
    });
  }
  render() {
    return h(Host, null, this.renderPages());
  }
  static get is() { return "ds-table-page-size-picker"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-table-page-size-picker.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-table-page-size-picker.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": ": Eine Zahl, die einen Wert im `pagesizes`-Array widerspiegelt."
            }],
          "text": "Der vorausgew\u00E4hlte Seiten-Wert. Dieser muss innerhalb, des, in `pagesizes` definierten, Arrays liegen."
        },
        "attribute": "value",
        "reflect": false
      },
      "pagesizes": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "ArrayString",
          "resolved": "string",
          "references": {
            "ArrayString": {
              "location": "local"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "ArrayString: Komma separierte Zahlen in der Array-Schreibweise z.B: [25,50,100]"
            }],
          "text": "Einstellbare Anzahl der Eintr\u00E4ge, die vom Benutzer gleichzeitig sichtbar gemacht werden k\u00F6nnen."
        },
        "attribute": "pagesizes",
        "reflect": false
      }
    };
  }
  static get events() {
    return [{
        "method": "pageSizeChanged",
        "name": "pageSizeChanged",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": ""
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "onValueChange"
      }];
  }
}
