import { h, Host, } from "@stencil/core";
import { ColorPalette } from "../../../classes/color-palette";
import { displayNumberAsCurrency } from "../../../classes/currency-util";
/**
 * @path /Table
 * @name Table Cell
 * @shortname Cell
 * @icon border-all
 * @stable
 */
export class DsTableCell {
  constructor() {
    this.tooltipText = "";
    this.showTooltip = false;
  }
  /**
   * @internal
   */
  async obtainSettings(settings) {
    this.settings = settings;
  }
  getInnerElement() {
    var _a, _b, _c, _d;
    const currentType = (_a = this.type) !== null && _a !== void 0 ? _a : (_b = this.settings) === null || _b === void 0 ? void 0 : _b.type;
    if (currentType == null) {
      return h("div", null);
    }
    if (currentType === "html") {
      return (h("div", { class: "html-alignment-container" }, h("div", { class: "overflow-container" }, h("slot", null))));
    }
    if (currentType === "text") {
      return this.renderCellText(this.value);
    }
    if (currentType === "numeric") {
      const numericText = (_c = parseFloat(this.value)) === null || _c === void 0 ? void 0 : _c.toLocaleString("de-DE");
      return this.renderCellText(numericText);
    }
    if (currentType === "currency") {
      const currencyText = displayNumberAsCurrency(parseFloat(this.value), 2);
      return this.renderCellText(`${currencyText} â‚¬`);
    }
    if (currentType === "date") {
      const split = (_d = this.value) === null || _d === void 0 ? void 0 : _d.split("-");
      const text = split != null ? `${split[2]}.${split[1]}.${split[0]}` : "";
      return this.renderCellText(text);
    }
  }
  renderCellText(text) {
    return (h("div", { class: "overflow-container" }, h("ds-text", null, text)));
  }
  setTooltipText(cell) {
    requestAnimationFrame(() => {
      var _a;
      this.tooltipText =
        ((_a = (cell.textContent || this.self.textContent)) === null || _a === void 0 ? void 0 : _a.trim()) || this.value;
    });
  }
  handleTouchEnd() {
    this.showTooltip = true;
  }
  onTouchEnd(e) {
    this.showTooltip =
      e
        .composedPath()
        .find((target) => { var _a; return (_a = target === null || target === void 0 ? void 0 : target.classList) === null || _a === void 0 ? void 0 : _a.contains("overlay"); }) == null;
  }
  getStyle() {
    var _a, _b;
    const style = Object.assign({}, (_a = this.settings) === null || _a === void 0 ? void 0 : _a.sizeStyle);
    if (this.color != null) {
      style["background-color"] = new ColorPalette().getColorCode(this.color);
    }
    const lines = (_b = this.settings) === null || _b === void 0 ? void 0 : _b.lines;
    style["--ds-table-cell-lines"] = lines;
    if (lines > 1) {
      style["padding-top"] = "8px";
      style["padding-bottom"] = "8px";
    }
    return style;
  }
  render() {
    var _a, _b, _c;
    const alignClass = {};
    if (this.settings != null) {
      alignClass["align-" + this.settings.align] = true;
    }
    return (h(Host, { role: "cell", style: this.getStyle() }, h("div", { class: Object.assign({ cell: true, "multiple-lines": ((_a = this.settings) === null || _a === void 0 ? void 0 : _a.lines) > 1 }, alignClass), title: this.tooltipText, onTouchEnd: () => this.handleTouchEnd(), ref: (ref) => this.setTooltipText(ref) }, this.getInnerElement()), h("div", { class: Object.assign({ "popup-container": true }, alignClass), hidden: !this.showTooltip || !(((_b = this.tooltipText) === null || _b === void 0 ? void 0 : _b.length) > 0) }, h("div", { class: "overlay" }), h("dx-popup", { dstheme: true, arrowposition: ((_c = this.settings) === null || _c === void 0 ? void 0 : _c.align) === "right" ? "right" : "left", show: true }, h("ds-text", null, this.tooltipText)))));
  }
  static get is() { return "ds-table-cell"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-table-cell.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-table-cell.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Ein beliebiger Wert"
            }],
          "text": "The value of this cell. It will be formatted depending the cell `type`."
        },
        "attribute": "value",
        "reflect": true
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "text: The `value` is a string which will be rendered as text.\nIt is defaultly left aligned."
            }, {
              "name": "value",
              "text": "numeric: The `value` is a number which will be rendered as text.\nIt is defaultly right aligned."
            }, {
              "name": "value",
              "text": "date:  The `value` is a string ('YYYY-mm-dd') which will be formatted as a date string.\nIt is defaultly left aligned."
            }, {
              "name": "value",
              "text": "currency: The `value` is a number which will be formatted as a currency string (e.g: 1.120,00 \u20AC).\nThe currency itself is rendered as an icon.\nIt is defaultly right aligned."
            }, {
              "name": "value",
              "text": "html: The default slot will be rendered in place of the `value`."
            }],
          "text": "The type of this cell.\nIf not explicity set the cell inherits the type by the corresponding `<ds-table-header-item>`."
        },
        "attribute": "type",
        "reflect": false
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: A color which has to be defined within the color palette of the design system. (e.g.: dunkelblau-4)"
            }],
          "text": "The background color."
        },
        "attribute": "color",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "settings": {},
      "tooltipText": {},
      "showTooltip": {}
    };
  }
  static get methods() {
    return {
      "obtainSettings": {
        "complexType": {
          "signature": "(settings: ColumnSettings) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "ColumnSettings": {
              "location": "import",
              "path": "../table-common-types"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "touchend",
        "method": "onTouchEnd",
        "target": undefined,
        "capture": false,
        "passive": true
      }];
  }
}
