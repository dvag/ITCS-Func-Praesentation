import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
/**
 * Element to determine if a question is answered with yes or no.
 *
 * @path /Form
 * @name Yes-No-Selection
 * @shortname Yes-No
 * @icon check
 * @stable
 */
export class DsYesNo {
  constructor() {
    /**
     * State of the yes/no-selection
     *
     * @value "yes": yes is selected
     * @value "no": no is selected
     * @value "unset": nothing is selected
     * @example value
     */
    this.value = "unset";
    /**
     * Colors the border of the element red.
     * @value true: red border.
     * @value false: grey border.
     * @example error
     */
    this.error = false;
    /**
     * Deactivates the Radio-Button.
     * @value false: The Radio-Button is interactable.
     * @value true: The Radio-Button is deactivated.
     *
     * @example value-disabled
     */
    this.disabled = false;
    /**
     * The yes/no component is in read-only mode.
     * A text is rendered that shown the `label`-value of the selected Radio-Button.
     * @value false: Default mode.
     * @value true: Text of the `value`-attribute is shown.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks the element as mandarory.
     * @value false: Not mandatory. (Default)
     * @value true: Mandatory field.
     * @example required
     */
    this.required = false;
    /**
     * How the width of the child elements is determined.
     *
     * @value parent: The Parent element determines the width.
     * @value max-content: The widest child element determines the width of all child elements.
     *
     * @example size-parent
     */
    this.size = "max-content";
    this.handleRadioGroupValueChange = (event) => {
      event.stopPropagation();
      const value = event.detail;
      if (["yes", "no"].includes(value) && this.value !== value) {
        this.value = value;
        this.valueChange.emit(this.value);
      }
    };
  }
  /**
   * Sets the tab-focus to the element.
   * @example focus
   */
  async focusControl() {
    this.radioGroupElement.focusControl().then();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  radioGroupValue() {
    if (["yes", "no"].includes(this.value)) {
      return this.value;
    }
    else {
      return undefined;
    }
  }
  render() {
    return (h(Host, { class: {
        disabled: this.disabled,
      } }, h("ds-radio-button-group", { required: this.required, readonly: this.readonly, ref: (el) => (this.radioGroupElement = el), error: this.error, errormessage: this.errormessage, id: ElementIdGenerator.createId(this.self, "group"), value: this.radioGroupValue(), onValueChange: (e) => this.handleRadioGroupValueChange(e) }, h("ds-bordered-form-group", { key: "" + this.required, direction: "row", size: this.size }, h("ds-bordered-form-item", null, h("ds-radio-button", { id: ElementIdGenerator.createId(this.self, "yes"), value: "yes", label: "Ja", disabled: this.disabled })), h("ds-bordered-form-item", null, h("ds-radio-button", { id: ElementIdGenerator.createId(this.self, "no"), value: "no", label: "Nein", disabled: this.disabled }))))));
  }
  static get is() { return "ds-yes-no"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-yes-no.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-yes-no.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "\"yes\" | \"no\" | \"unset\"",
          "resolved": "\"no\" | \"unset\" | \"yes\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "\"yes\": yes is selected"
            }, {
              "name": "value",
              "text": "\"no\": no is selected"
            }, {
              "name": "value",
              "text": "\"unset\": nothing is selected"
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "State of the yes/no-selection"
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "\"unset\""
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Errormessage."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Text under the element showed in a red dialog."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "error": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: red border."
            }, {
              "name": "value",
              "text": "false: grey border."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Colors the border of the element red."
        },
        "attribute": "error",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: The Radio-Button is interactable."
            }, {
              "name": "value",
              "text": "true: The Radio-Button is deactivated."
            }, {
              "name": "example",
              "text": "value-disabled"
            }],
          "text": "Deactivates the Radio-Button."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Default mode."
            }, {
              "name": "value",
              "text": "true: Text of the `value`-attribute is shown."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "The yes/no component is in read-only mode.\nA text is rendered that shown the `label`-value of the selected Radio-Button."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not mandatory. (Default)"
            }, {
              "name": "value",
              "text": "true: Mandatory field."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Marks the element as mandarory."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"parent\" | \"max-content\"",
          "resolved": "\"max-content\" | \"parent\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "parent: The Parent element determines the width."
            }, {
              "name": "value",
              "text": "max-content: The widest child element determines the width of all child elements."
            }, {
              "name": "example",
              "text": "size-parent"
            }],
          "text": "How the width of the child elements is determined."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"max-content\""
      }
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "event"
            }],
          "text": "Event contains `\"yes\"`, when Ja or `\"no\"` when Nein was selected.\nThe user can't unselect the value."
        },
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the tab-focus to the element.",
          "tags": [{
              "name": "example",
              "text": "focus"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
