export const numberMaskIndicator = "#";
export const characterMaskIndicator = "ยง";
export class InputGroup {
  constructor() {
    this.pattern = "";
  }
}
export class Delimiter {
}
export function computeGroups(mask) {
  const chars = [...mask];
  const groups = [];
  let groupSize = 0;
  let group = new InputGroup();
  let delimiter = new Delimiter();
  let lastGroupCharacter = "";
  chars.forEach((c, i) => {
    if (c.match(inputGroupExp)) {
      //update new or current group
      if (lastGroupCharacter == "" || c == lastGroupCharacter) {
        ++groupSize;
        group.pattern = group.pattern + c;
        lastGroupCharacter = c;
        //handle single character
      }
      else if (lastGroupCharacter != c && groupSize === 0) {
        ++groupSize;
        lastGroupCharacter = c;
        group.pattern = group.pattern + c;
        //complete group and start new
      }
      else {
        group.width = groupSize;
        groups.push(group);
        group = new InputGroup();
        groupSize = 1;
        group.pattern = group.pattern + c;
        lastGroupCharacter = c;
      }
    }
    else if (c.match(delimiterExp)) {
      if (groupSize > 0) {
        group.width = groupSize;
        groups.push(group);
        group = new InputGroup();
      }
      delimiter.delimiter = c;
      groups.push(delimiter);
      delimiter = new Delimiter();
      groupSize = 0;
    }
    if (i == chars.length - 1) {
      if (groupSize > 0) {
        group.width = groupSize;
        groups.push(group);
      }
      group = new InputGroup();
    }
  });
  return groups;
}
export const inputGroupExp = /[#ยง]/;
export const delimiterExp = /[^ยง#]+/;
