import { assert } from "../../../../classes/assert";
/**
 * Option element within a dropdown.
 *
 * @path /Form/Dropdown
 * @name Dropdown-Option
 * @shortname Option
 * @icon caret-square-down
 * @stable
 */
export class DsDropdownOption {
  /**
   * @internal
   * Extracts this element's properties into a complex javascript object.
   */
  async toOption() {
    var _a;
    assert(typeof this.value !== "number", () => `<ds-dropdown-option> Property 'value' must not be of type 'number'.`);
    return {
      icon: this.icon,
      value: (_a = this.value) !== null && _a !== void 0 ? _a : this.label,
      label: this.label,
      secondaryLabel: this.secondarylabel,
      tertiaryLabel: this.tertiarylabel,
    };
  }
  static get is() { return "ds-dropdown-option"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-dropdown-option.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-dropdown-option.css"]
    };
  }
  static get properties() {
    return {
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The icon name."
            }],
          "text": "An icon which is displayed next to the label text."
        },
        "attribute": "icon",
        "reflect": true
      },
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "StringOrObject",
          "resolved": "string | { [key: string]: any; }",
          "references": {
            "StringOrObject": {
              "location": "import",
              "path": "../ds-dropdown"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Internal value as string. (e.g. `\"apple\"`)"
            }, {
              "name": "value",
              "text": "object: Complex type e.g. `{name: \"apple\", amount: 3}`"
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Internal value of this option. Only `string` and `object` types are supported. The `number` type is explicitly not supported."
        },
        "attribute": "value",
        "reflect": true
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Displayed text e.g. `Apple`"
            }],
          "text": "The label which is displayed in the option list.\nIn case `value` is undefined, this `label` represents the internal value."
        },
        "attribute": "label",
        "reflect": true
      },
      "secondarylabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Text (e.g. description, information)"
            }],
          "text": "Text which is displayed below the label."
        },
        "attribute": "secondarylabel",
        "reflect": true
      },
      "tertiarylabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Text (e.g. description, information)"
            }],
          "text": "Text which is displayed below the sublabel."
        },
        "attribute": "tertiarylabel",
        "reflect": true
      }
    };
  }
  static get methods() {
    return {
      "toOption": {
        "complexType": {
          "signature": "() => Promise<DropdownOption>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            },
            "DropdownOption": {
              "location": "local"
            }
          },
          "return": "Promise<DropdownOption>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": "Extracts this element's properties into a complex javascript object."
            }]
        }
      }
    };
  }
}
