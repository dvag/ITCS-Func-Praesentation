import { h, Host, } from "@stencil/core";
import { assert } from "../../../classes/assert";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { BaselineElement } from "../../functional/base-elements";
/**
 * A radio button representing an option inside a `<ds-radio-button-group>` element.
 *
 * @path /Form/Radio
 * @name Radio-Button
 * @shortname Button
 * @icon check-circle
 * @stable
 *
 */
export class DsRadioButton {
  constructor() {
    /**
     * Disables the ability to interact with this component.
     *
     * @value false: User can interact with this component.
     * @value true: User cannot interact with this component.
     *
     * @example modes
     */
    this.disabled = false;
    /**
     * Sets the error state on the group.
     *
     * @value true: An error exists.
     * @value false: No error exists.
     */
    this.error = false;
    this.checked = false;
    this.hasFocus = false;
  }
  /**
   * @internal
   */
  async internalSetChecked(checked) {
    this.checked = checked;
  }
  /**
   * Sets the focus on this component.
   * @example focus
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  get showLabel() {
    var _a;
    return ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  select() {
    if (!this.disabled) {
      const radioButtonGroup = this.group();
      radioButtonGroup.select(this.value).then();
    }
  }
  group() {
    const radioButtonGroup = this.self.closest("ds-radio-button-group");
    assert(radioButtonGroup != null, () => "<ds-radio-button> has to be within a <ds-radio-button-group>.", this.self);
    return radioButtonGroup;
  }
  render() {
    const radioButtonGroup = this.group();
    const groupId = radioButtonGroup.getAttribute("radiogroupid");
    return (h(Host, { class: {
        disabled: this.disabled,
        "force-hover": this.mouseOver,
        "has-focus": this.hasFocus,
      } }, h("div", { class: "dot-baseline-container" }, h(BaselineElement, null), h("div", { class: {
        "dot-container": true,
        "margin-right": this.showLabel,
        checked: this.checked,
      } }, h("div", { class: {
        "dot-focus-border": true,
      } }))), h("input", { id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), name: `form-ds-radio-button-group-${groupId}`, type: "radio", onMouseEnter: () => (this.mouseOver = true), onMouseLeave: () => (this.mouseOver = false), onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false), onChange: () => this.select(), disabled: this.disabled, class: {
        "radio-input": true,
        "event-delegate-receiver": true,
      }, checked: this.checked }), this.renderLabel()));
  }
  renderLabel() {
    if (this.showLabel) {
      return (h("ds-text", { id: ElementIdGenerator.createId(this.self, "label"), screensize: "small" }, this.label));
    }
  }
  static get is() { return "ds-radio-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-radio-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-radio-button.css"]
    };
  }
  static get properties() {
    return {
      "value": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: The identifier of this option."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Identifier of this option. When selected this value overwrites the `<ds-radio-button-group>`'s value."
        },
        "attribute": "value",
        "reflect": true
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: User can interact with this component."
            }, {
              "name": "value",
              "text": "true: User cannot interact with this component."
            }, {
              "name": "example",
              "text": "modes"
            }],
          "text": "Disables the ability to interact with this component."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Error text"
            }, {
              "name": "important",
              "text": undefined
            }],
          "text": "A text which is displayed in an error popup below the component."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "error": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: An error exists."
            }, {
              "name": "value",
              "text": "false: No error exists."
            }],
          "text": "Sets the error state on the group."
        },
        "attribute": "error",
        "reflect": true,
        "defaultValue": "false"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Label text."
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Text, which is displayed next to the radio button."
        },
        "attribute": "label",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "checked": {},
      "mouseOver": {},
      "hasFocus": {}
    };
  }
  static get methods() {
    return {
      "internalSetChecked": {
        "complexType": {
          "signature": "(checked: boolean) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "",
          "tags": [{
              "name": "internal",
              "text": undefined
            }]
        }
      },
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the focus on this component.",
          "tags": [{
              "name": "example",
              "text": "focus"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
}
