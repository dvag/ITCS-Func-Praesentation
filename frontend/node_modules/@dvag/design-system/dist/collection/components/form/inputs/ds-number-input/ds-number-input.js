import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../../classes/element-id-handling";
import { clamp } from "../../../../classes/math-util";
import { displayNumberAsCurrency } from "../../../../classes/currency-util";
import { ReadonlyIconElement, ReadonlyTextElement, } from "../../../functional/base-elements";
import { InputContainer } from "../../../functional/input-container";
import { ErrorPopup } from "../../../functional/error-popup";
/**
 * Form element for number-input.
 *
 * @path /Form/Textfeld
 * @name Number-Input
 * @shortname Numbers
 * @icon square-root-alt
 * @stable
 */
export class DsNumberInput {
  constructor() {
    this.formattedValue = undefined;
    this.preventObtainValueChanges = false;
    this.lastUnpreventedInputElementValue = null;
    this.inputFocused = false;
    this.active = false;
    /**
     * Colors the border of the element red.
     * @value true: red border.
     * @value false: grey border.
     * @example error
     */
    this.error = false;
    /**
     * Value of the input field.
     * @important
     * @value string: Value of the input.
     * @example value
     */
    this.value = null;
    /**
     * Determines the amount of pre-decimal numbers.
     * The element prevents all inputs higher than this value.
     *
     * @value number: Maximum amount of pre-decimal numbers.
     * @example limit-length
     */
    this.limitlength = null;
    /**
     * Determines the minimal value. The minimal value is **within** the possible input.
     * @value number: The minimal value the input field can have.
     */
    this.min = Number.MIN_SAFE_INTEGER;
    /**
     * Determines the maximum value. The maximum value is **within** the possible input.
     * @value number: The maximum value the input field can have.
     */
    this.max = Number.MAX_SAFE_INTEGER;
    /**
     * Input is not interactable.
     * Label and border are grey.
     * @value true: Input is disabled.
     * @value false: Input is not disabled.
     * @example disabled
     */
    this.disabled = false;
    /**
     * Input is in read only mode.
     * The content of the input is displayed in a simple way. The input is not interactable.
     * @value false: Formfield.
     * @value true: Text of the value.
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks the formfield as mandatory.
     * @value false: Not mandatory (default).
     * @value true: Mandatory.
     * @example required
     */
    this.required = false;
    /**
     * Indicates that the form is synced with the KI.
     * @value true: Synchronized.
     * @value false: Not synchronized.
     * @example kisynced
     */
    this.kisynced = false;
  }
  valueChanged() {
    this.obtainValueChangesFromOutside();
  }
  /**
   * Sets the tab-focus to the form element.
   */
  async focusControl() {
    this.inputElement.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
    this.obtainValueChangesFromOutside(true);
  }
  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
  componentShouldUpdate(_, __, propName) {
    if (["min", "max"].includes(propName)) {
      this.obtainValueChangesFromOutside();
    }
  }
  getUnformattedValue() {
    return this.formattedValue
      ? parseFloat(this.formattedValue.replace(/\./g, "").replace(",", "."))
      : null;
  }
  obtainValueChangesFromOutside(force = false) {
    if (!this.preventObtainValueChanges) {
      this.value = this.sanitizeValue(this.value);
      if (force || this.value !== this.getUnformattedValue()) {
        this.formattedValue = this.getDisplayValue();
        this.lastEmittedChangeValue = this.value;
        this.lastEmittedCompleteValue = this.value;
      }
    }
    this.preventObtainValueChanges = false;
  }
  sanitizeValue(value) {
    if (isNaN(value) || value == null) {
      return null;
    }
    const scale = Math.pow(10, this.inputTypeDefinition.decimalDigits);
    const bias = 1 / (scale * 100);
    value = Math.floor((value + bias) * scale) / scale;
    return clamp(value, this.min, this.max);
  }
  onInputFocused() {
    this.inputFocused = true;
  }
  onInputBlurred() {
    this.inputFocused = false;
    this.setValueInternal(this.sanitizeValue(this.value));
    this.emitValueChange();
    this.emitValueComplete();
  }
  clearInput() {
    this.inputElement.value = "";
    this.setValueInternal(null);
    this.formattedValue = null;
    this.lastUnpreventedInputElementValue = "";
    this.emitValueChange();
  }
  setValueInternal(newValue) {
    if (isNaN(newValue)) {
      newValue = null;
    }
    if (this.value !== newValue) {
      this.preventObtainValueChanges = true;
      this.formattedValue = this.getDisplayValue(newValue);
      this.value = newValue;
    }
  }
  onInputKeyUp(event) {
    if (event.key === "Enter") {
      this.inputElement.blur();
    }
  }
  preventInput() {
    var _a;
    if (!this.inputElement.value || this.inputElement.value === "-") {
      return false;
    }
    const inputTypeDefinition = this.inputTypeDefinition;
    const zeroPrecision = inputTypeDefinition.decimalDigits === 0;
    const stripTooManyDigits = new RegExp(zeroPrecision
      ? `^-?[\\d]+$`
      : `^-?[\\d]+[\,|\.]?[\\d]{0,${inputTypeDefinition.decimalDigits}}$`);
    if (!stripTooManyDigits.test(this.inputElement.value)) {
      return true;
    }
    if (this.limitlength > 0) {
      const stripPreCommaDigits = new RegExp(`^-?([\\d]+)([,.][\\d]*)?$`);
      const preCommaDigits = (_a = this.inputElement.value) === null || _a === void 0 ? void 0 : _a.match(stripPreCommaDigits)[1];
      if (preCommaDigits.length > this.limitlength) {
        return true;
      }
    }
    return false;
  }
  onInput() {
    if (this.preventInput()) {
      const cursorPosition = this.inputElement.selectionStart - 1;
      this.inputElement.value = this.lastUnpreventedInputElementValue;
      this.inputElement.selectionStart = cursorPosition;
      this.inputElement.selectionEnd = cursorPosition;
      return;
    }
    this.lastUnpreventedInputElementValue = this.inputElement.value;
    this.setValueInternal(parseFloat(this.inputElement.value.replace(",", ".")));
    this.formattedValue = this.getDisplayValue();
    this.emitValueChange();
  }
  emitValueChange() {
    if (this.value !== this.lastEmittedChangeValue) {
      this.setValueInternal(this.getUnformattedValue());
      this.lastEmittedChangeValue = this.value;
      this.valueChange.emit(this.value);
    }
  }
  emitValueComplete() {
    if (this.lastEmittedCompleteValue !== this.value) {
      this.valueComplete.emit(this.value);
      this.lastEmittedCompleteValue = this.value;
    }
  }
  get inputTypeDefinition() {
    let icon = null;
    let decimalDigits = 0;
    let placeholder = "0";
    let thousandsSeparator = true;
    if (this.profile === "currency-euro") {
      icon = "eurozeichen";
      decimalDigits = 2;
    }
    else if (this.profile === "percent") {
      icon = "prozent";
      decimalDigits = 0;
    }
    if (this.precision != null) {
      decimalDigits = this.precision;
    }
    if (decimalDigits > 0) {
      placeholder += ",";
      for (let i = 0; i < decimalDigits; i++) {
        placeholder += "0";
      }
    }
    if (this.placeholder != null) {
      placeholder = this.placeholder;
    }
    if (this.uniticon != null) {
      icon = this.uniticon;
    }
    if (this.thousandseparator != null) {
      thousandsSeparator = this.thousandseparator;
    }
    return { icon, placeholder, decimalDigits, thousandsSeparator };
  }
  getDisplayValue(value = null) {
    return displayNumberAsCurrency(value !== null && value !== void 0 ? value : this.value, this.inputTypeDefinition.decimalDigits, this.inputTypeDefinition.thousandsSeparator);
  }
  isClearButtonVisible() {
    return this.inputFocused && this.formattedValue != null;
  }
  render() {
    if (this.readonly) {
      return (h("div", null, h(ReadonlyTextElement, { text: this.formattedValue, label: this.label, kisynced: this.kisynced }), h(ReadonlyIconElement, { icon: this.inputTypeDefinition.icon })));
    }
    return h(Host, null, this.renderInput());
  }
  renderInput() {
    var _a, _b, _c, _d;
    const isErrorOutline = ((_a = this.errormessage) === null || _a === void 0 ? void 0 : _a.length) > 0 || this.error;
    const inputTypeDefinition = this.inputTypeDefinition;
    const requirementFulfilled = this.value != null && !isNaN(this.value);
    return (h("label", null, h("ds-input-label", { disabled: this.disabled, label: this.label, kisynced: this.kisynced }), h(InputContainer, { active: this.inputFocused, error: isErrorOutline, required: this.required, requirementFulfilled: requirementFulfilled, disabled: this.disabled, title: (_b = this.value) === null || _b === void 0 ? void 0 : _b.toString() }, h("div", { class: "input-container" }, h("input", { id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), onKeyUp: (event) => this.onInputKeyUp(event), onInput: () => this.onInput(), onFocus: () => this.onInputFocused(), onBlur: () => this.onInputBlurred(), type: "text", inputMode: "numeric", pattern: "[0-9]*", value: this.inputFocused
        ? (_d = (_c = this.value) === null || _c === void 0 ? void 0 : _c.toString()) === null || _d === void 0 ? void 0 : _d.replace(".", ",")
        : this.formattedValue, placeholder: inputTypeDefinition.placeholder, class: {
        animatable: inputTypeDefinition.icon == null,
        "clear-button-visible": this.isClearButtonVisible(),
      }, lang: "de-DE", disabled: this.disabled }), this.renderIcon()), h(ErrorPopup, { text: this.errormessage, show: this.inputFocused, rightAligned: true })), h("ds-required-hint", { required: this.required, fulfilled: requirementFulfilled })));
  }
  renderNoIconSpecified() {
    return (h("ds-function-icon-button", { id: ElementIdGenerator.createId(this.self, "clear-button"), unfocusable: true, class: {
        "clear-button": true,
        animatable: true,
        visible: true,
        "transition-show": this.isClearButtonVisible(),
      }, onPointerDown: () => this.clearInput() }, h("ds-icon", { icon: "schliessen-input", size: 16 })));
  }
  renderIconSpecified() {
    const icon = this.inputTypeDefinition.icon;
    return (h("div", { class: "right-icon" }, this.isClearButtonVisible() ? (h("ds-function-icon-button", { id: ElementIdGenerator.createId(this.self, "clear-button"), unfocusable: true, class: {
        "clear-button": true,
        visible: true,
      }, onPointerDown: () => this.clearInput() }, h("ds-icon", { icon: "schliessen-input", size: 16 }))) : icon != "" ? (h("ds-icon", { class: { "type-icon": true }, icon: icon, color: "gold", size: 16 })) : null));
  }
  renderIcon() {
    return this.inputTypeDefinition.icon == null
      ? this.renderNoIconSpecified()
      : this.renderIconSpecified();
  }
  static get is() { return "ds-number-input"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-number-input.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-number-input.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: description e.g `Vorname`"
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Text on top of the input field."
        },
        "attribute": "label",
        "reflect": false
      },
      "profile": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"currency-euro\" | \"percent\"",
          "resolved": "\"currency-euro\" | \"percent\"",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "currency-euro: Euro"
            }, {
              "name": "value",
              "text": "percent: percent value"
            }, {
              "name": "example",
              "text": "profile"
            }],
          "text": "Formatting templates for number inputs. Profiles can be personalised by changing the properties `precision`\n`placeholder` or `uniticon`"
        },
        "attribute": "profile",
        "reflect": false
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Errormessage."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Text under the input field, that is shown in a red dialog."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "error": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: red border."
            }, {
              "name": "value",
              "text": "false: grey border."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Colors the border of the element red."
        },
        "attribute": "error",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: Value of the input."
            }, {
              "name": "example",
              "text": "value"
            }],
          "text": "Value of the input field."
        },
        "attribute": "value",
        "reflect": true,
        "defaultValue": "null"
      },
      "limitlength": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Maximum amount of pre-decimal numbers."
            }, {
              "name": "example",
              "text": "limit-length"
            }],
          "text": "Determines the amount of pre-decimal numbers.\nThe element prevents all inputs higher than this value."
        },
        "attribute": "limitlength",
        "reflect": false,
        "defaultValue": "null"
      },
      "min": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The minimal value the input field can have."
            }],
          "text": "Determines the minimal value. The minimal value is **within** the possible input."
        },
        "attribute": "min",
        "reflect": false,
        "defaultValue": "Number.MIN_SAFE_INTEGER"
      },
      "max": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: The maximum value the input field can have."
            }],
          "text": "Determines the maximum value. The maximum value is **within** the possible input."
        },
        "attribute": "max",
        "reflect": false,
        "defaultValue": "Number.MAX_SAFE_INTEGER"
      },
      "precision": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "number: Amount of decimal values (e.g. 2 => xx,00 or 3 => xx,000)"
            }, {
              "name": "example",
              "text": "custom"
            }],
          "text": "Determines the amount of decimal numbers."
        },
        "attribute": "precision",
        "reflect": false
      },
      "uniticon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Name of the icon."
            }, {
              "name": "example",
              "text": "custom"
            }],
          "text": "Sets the icon for the unit."
        },
        "attribute": "uniticon",
        "reflect": false
      },
      "thousandseparator": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Usses thousandseparator (default)."
            }, {
              "name": "value",
              "text": "false: No grouping."
            }, {
              "name": "example",
              "text": "thousandseparator"
            }],
          "text": "Controls the visualization of the pre-deciaml thousandseparator."
        },
        "attribute": "thousandseparator",
        "reflect": false
      },
      "placeholder": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Placeholder."
            }, {
              "name": "example",
              "text": "custom"
            }],
          "text": "Placeholder that is shown, when the input is empty."
        },
        "attribute": "placeholder",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Input is disabled."
            }, {
              "name": "value",
              "text": "false: Input is not disabled."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Input is not interactable.\nLabel and border are grey."
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Formfield."
            }, {
              "name": "value",
              "text": "true: Text of the value."
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "Input is in read only mode.\nThe content of the input is displayed in a simple way. The input is not interactable."
        },
        "attribute": "readonly",
        "reflect": false,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not mandatory (default)."
            }, {
              "name": "value",
              "text": "true: Mandatory."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Marks the formfield as mandatory."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "kisynced": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: Synchronized."
            }, {
              "name": "value",
              "text": "false: Not synchronized."
            }, {
              "name": "example",
              "text": "kisynced"
            }],
          "text": "Indicates that the form is synced with the KI."
        },
        "attribute": "kisynced",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "inputFocused": {},
      "active": {}
    };
  }
  static get events() {
    return [{
        "method": "valueChange",
        "name": "valueChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "Changes of the input value during the input of the user."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }, {
        "method": "valueComplete",
        "name": "valueComplete",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "change-events"
            }],
          "text": "Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field."
        },
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the tab-focus to the form element.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get watchers() {
    return [{
        "propName": "value",
        "methodName": "valueChanged"
      }];
  }
}
