import { h, Host, } from "@stencil/core";
import { ElementIdGenerator, verifyElementId, } from "../../../classes/element-id-handling";
import { BaselineElement } from "../../functional/base-elements";
import { ErrorPopup } from "../../functional/error-popup";
/**
 * Form-element to select multiple options.
 *
 * @path /Form
 * @name Checkbox
 * @icon check-square
 * @stable
 */
export class DsCheckBox {
  constructor() {
    /**
     * Disables the interaction with the checkbox.
     * @value false: Checkbox is interactable.
     * @value true: Checkbox is disabled.
     *
     * @example disabled
     */
    this.disabled = false;
    /**
     * The checkbox will be in read-only state.
     * Depending on the `checked`-state an icon icon is rendered.
     * @value false: Default visualization of the checkbox
     * @value true: Icon-representation of the `checked`-state
     * @example readonly
     */
    this.readonly = false;
    /**
     * Marks this checkbox as a required form element.
     * @value false: Not required
     * @value true: It is necessary to select an option to fulfill the requirement.
     * @example required
     */
    this.required = false;
    /**
     * @internal
     */
    this.requirementfulfilled = false;
    /**
     * State of the Checkbox.
     * @value false: Checkbox is not checked.
     * @value true: Checkbox is checked.
     *
     * @example checked
     */
    this.checked = false;
    /**
     * FÃ¤rbt den Rahmen der Checkbox rot ein.
     * @value true: roter Rahmen
     * @value false: goldener Rahmen
     * @example error
     */
    this.error = false;
    this.inputFocused = false;
  }
  /**
   * Sets the focus on this element.
   * @example focus
   */
  async focusControl() {
    var _a;
    (_a = this.inputElement) === null || _a === void 0 ? void 0 : _a.focus();
  }
  componentWillLoad() {
    verifyElementId(this.self);
  }
  get showLabel() {
    var _a;
    return ((_a = this.label) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  select() {
    if (!this.disabled) {
      this.checked = !this.checked;
      this.requirementfulfilled = this.checked;
      this.checkedChange.emit(this.checked);
    }
  }
  toggle(e) {
    if (e.code === "Enter") {
      this.select();
    }
  }
  render() {
    var _a;
    const hasError = this.error || ((_a = this.errormessage) === null || _a === void 0 ? void 0 : _a.length) > 0;
    if (this.readonly) {
      if (!this.checked) {
        return;
      }
      const iconSize = 16;
      return (h(Host, { class: { "read-only-container": true } }, h("ds-icon", { size: iconSize, icon: "success", color: "gruen-1" }), this.renderLabel()));
    }
    return (h(Host, { class: {
        disabled: this.disabled,
        "has-focus": this.inputFocused,
      } }, h("div", { class: "container" }, h("div", { class: "checkbox-label-container" }, h(BaselineElement, { screensize: "small" }), h("div", { class: {
        "box-container": true,
        error: hasError,
        checked: this.checked,
        "has-label": this.showLabel,
        "force-hover": this.mouseOver,
      } }, h("ds-icon", { icon: "check", size: 16, color: "weiss" }), h(ErrorPopup, { text: this.errormessage, show: this.inputFocused })), this.renderLabel(), h("input", { id: ElementIdGenerator.createId(this.self, "control"), ref: (el) => (this.inputElement = el), type: "checkbox", onClick: () => this.select(), onMouseEnter: () => (this.mouseOver = true), onMouseLeave: () => (this.mouseOver = false), onFocus: () => (this.inputFocused = true), onBlur: () => (this.inputFocused = false), disabled: this.disabled, class: {
        "checkbox-input": true,
        "event-delegate-receiver": true,
      } })), h("ds-required-hint", { required: this.required, fulfilled: this.requirementfulfilled }))));
  }
  renderLabel() {
    if (this.showLabel) {
      return (h("ds-text", { screensize: "small", id: ElementIdGenerator.createId(this.self, "label") }, this.label));
    }
  }
  static get is() { return "ds-checkbox"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["ds-checkbox.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["ds-checkbox.css"]
    };
  }
  static get properties() {
    return {
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "important",
              "text": undefined
            }, {
              "name": "value",
              "text": "string: name of the option e.g. `Ausdruck gew\u00FCnscht`"
            }, {
              "name": "example",
              "text": "label"
            }],
          "text": "Text, Label which is displayed next to the checkbox.\nIf there is no `label` set, only the checkbox is displayed."
        },
        "attribute": "label",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Checkbox is interactable."
            }, {
              "name": "value",
              "text": "true: Checkbox is disabled."
            }, {
              "name": "example",
              "text": "disabled"
            }],
          "text": "Disables the interaction with the checkbox."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "readonly": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Default visualization of the checkbox"
            }, {
              "name": "value",
              "text": "true: Icon-representation of the `checked`-state"
            }, {
              "name": "example",
              "text": "readonly"
            }],
          "text": "The checkbox will be in read-only state.\nDepending on the `checked`-state an icon icon is rendered."
        },
        "attribute": "readonly",
        "reflect": true,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Not required"
            }, {
              "name": "value",
              "text": "true: It is necessary to select an option to fulfill the requirement."
            }, {
              "name": "example",
              "text": "required"
            }],
          "text": "Marks this checkbox as a required form element."
        },
        "attribute": "required",
        "reflect": true,
        "defaultValue": "false"
      },
      "requirementfulfilled": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": undefined
            }],
          "text": ""
        },
        "attribute": "requirementfulfilled",
        "reflect": false,
        "defaultValue": "false"
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "false: Checkbox is not checked."
            }, {
              "name": "value",
              "text": "true: Checkbox is checked."
            }, {
              "name": "example",
              "text": "checked"
            }],
          "text": "State of the Checkbox."
        },
        "attribute": "checked",
        "reflect": true,
        "defaultValue": "false"
      },
      "errormessage": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "string: Error text."
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "Text, which is displayed in a red error popup at the bottom of the checkbox."
        },
        "attribute": "errormessage",
        "reflect": false
      },
      "error": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "value",
              "text": "true: roter Rahmen"
            }, {
              "name": "value",
              "text": "false: goldener Rahmen"
            }, {
              "name": "example",
              "text": "error"
            }],
          "text": "F\u00E4rbt den Rahmen der Checkbox rot ein."
        },
        "attribute": "error",
        "reflect": true,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "mouseOver": {},
      "inputFocused": {}
    };
  }
  static get events() {
    return [{
        "method": "checkedChange",
        "name": "checkedChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [{
              "name": "example",
              "text": "check-event"
            }],
          "text": "Indicates that an error exist within the checkbox. Colors the border in red."
        },
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        }
      }];
  }
  static get methods() {
    return {
      "focusControl": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets the focus on this element.",
          "tags": [{
              "name": "example",
              "text": "focus"
            }]
        }
      }
    };
  }
  static get elementRef() { return "self"; }
  static get listeners() {
    return [{
        "name": "onkeydown",
        "method": "toggle",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
