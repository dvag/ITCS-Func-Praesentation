[{"title":"Getting started","markdown":"The **DVAG design system** is component library for web application. It provides custom components that can be used in any browser environments.\n\nTo access the web components you can use our deployed **NPM packages**.\\\nFor a quick showcase, rapid prototyping or issue reports you can use the **hosted solution**.\n\n## Important note on font licensing\n\nCurrently the design system loads the Helvetica Neue font family for the \"old component style\".\nBy embedding the design system CSS file a fonts.com tracking request is triggered.\n\nThe license agreement also requires you to register the productive app url at fonts.com if it doesn't use `*.dvag` top-level-domain.\n\n## NPM packages\n\nUsing NPM packages is the best way to access the design system for web projects and advanced web developers.\n\nThe design system files will be deployed with your application. Therefore it's perfect for offline use-cases.\n\n### Usage\n\nThe NPM packages are located in a private NPM repository in GitHub. Make sure to be [authenticated to GitHub package registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry#authenticating-to-github-packages).\n\nThose steps are basically:\n\n- Create a personal access token (PAT) with **packages read permission** at the [token page](https://github.com/settings/tokens) and press the **Enable SSO** button for the generated token.\n\n- Create a `.npmrc` file in your OS user directory (`~/.npmrc`) containing these two lines:\n\n```bash\n@dvag:registry=https://npm.pkg.github.com\n//npm.pkg.github.com/:_authToken=GENERATED_TOKEN_HERE\n```\n\nMake sure to replace _GENERATED_TOKEN_HERE_ with your generated PAT.\n**Warning: Do not check-in the .npmrc file in your Github repository**.\n\nNow you are able to add the design system npm package to your node project.\n\n```bash\nnpm i @dvag/design-system@0.53.0\n```\n\nYou can find other guides with framework specific instructions.\n\n## Hosted solution\n\nThis option is the easiest way to get in touch with the design system. Hosted versions are available for each stable version.\\\nThe hosted solution is the way to go if your project is not using npm. You also can use it for easy prototyping and issue reporting.\n\n**Note:** The user of your application needs internet access to load the centralized sources.\n\n### Usage\n\nAdd two elements to your HTML file:\n\n```html\n<script\n  type=\"module\"\n  src=\"https://ase-designsystem-prd-01.azurewebsites.net/0.53.0/js/design-system.esm.js\"\n></script>\n<link\n  rel=\"stylesheet\"\n  href=\"https://ase-designsystem-prd-01.azurewebsites.net/0.53.0/css/design-system.css\"\n/>\n```\n\nNow can you start using any component:\n\n```html\n<dx-text>Hello world!</ds-text>\n```"},{"title":"Use NPM package in Angular projects","markdown":"**Note:** Before you continue, please make sure you authenticated `npm` for the GitHub package registry of the `@dvag` scope. Look into the [Getting started guide](#/guides/Getting_started) for further instructions.\n\nFor Angular projects we provide an additional wrapper package. It's designed to encapsulate the *web components* into *Angular components*. It also adds *Angular forms* support and basic auto-completion to your IDE.\n\n## Integration\n\nAdd the generic design system package along with the specific wrapper package to your project:\n\n```bash\nnpm install @dvag/design-system@0.53.0 @dvag/design-system-angular@0.53.0\n```\n\nNow import the `DesignSystemModule` into your Angular `AppModule` (`src/app/app.module.ts`):\n\n```typescript\nimport {DesignSystemModule} from '@dvag/design-system-angular';\n\n@NgModule({\n  // ...\n  imports: [\n    // ...\n    DesignSystemModule\n  ],\n})\nexport class AppModule { }\n```\n### CSS assets\n\nThe design system requires you to add a *CSS and font files* to your application. Copy over the `node_modules/@dvag/design-system/css/` to your Angular `assets` directory.\n\nYou can automate this by customizing your `angular.json`: \n```json\n \"architect\": {\n        \"build\": {\n          \"options\": {\n            ...\n            \"assets\": [\n              ...\n              {\n                \"glob\": \"**/*\",\n                \"input\": \"./node_modules/@dvag/design-system/css/\",\n                \"output\": \"/design-system-css/\"\n              }\n            ],\n            ...\n          }\n        ...\n        }\n      }\n```\n\nThen add the following line into the `<head>` of your `index.html`: \n```html\n<link rel=\"stylesheet\" href=\"/design-system-css/design-system.css\" />\n```\n \n### Ready to go\n\nNow you can use the design system components everywhere in your Angular application:\n\n```html\n<dx-text type=\"h1\">My headline</dx-text>\n```\n\nIf the font is looking wrong, please verify if the CSS file loaded correctly."},{"title":"Use NPM package in React projects","markdown":"**Note:** Before you continue, please make sure you authenticated `npm` for the GitHub package registry of the `@dvag` scope. Look into the [Getting started guide](#/guides/Getting_started) for further instructions.\n\nFor React projects we provide an additional wrapper package. It's designed to encapsulate the _web components_ into _React components_.\n\n## Integration\n\nAdd the generic design system package along with the specific wrapper package to your project:\n\n```bash\nnpm install @dvag/design-system@0.53.0 @dvag/design-system-react@0.53.0\n```\n\nAdd the following code to `src/index.js`:\n\n```typescript\n// ... (Other imports) ...\n\nimport {\n  applyPolyfills as designSystemApplyPolyfills,\n  defineCustomElements as designSystemDefineElements,\n} from \"@dvag/design-system/loader\";\n\n// ... (ReactDOM.render(...)) ...\n\ndesignSystemApplyPolyfills().then(() => {\n  designSystemDefineElements();\n});\n```\n\n### CSS assets\n\nThe design system requires you to add a _CSS and font files_ to your application. Copy over the `node_modules/@dvag/design-system/css/` to your React `public` directory. We recommend to automate this step with a technology of your choice.\n\nThen add the following line into the `<head>` of your `index.html`:\n\n```html\n<link rel=\"stylesheet\" href=\"/path/to/that/css-directory/design-system.css\" />\n```\n\nMake sure to adapt the path of the `href` attribute.\n\n### Ready to go\n\nNow you can use the design system components everywhere in your React application:\n\n```js\nimport { DxText } from \"@dvag/design-system-react\";\n\nfunction SomeReactComponent() {\n  return <DxText type={\"h1\"}>Headline in DesignSystem</DxText>;\n}\n```\n\nThe naming scheme of React wrapper components behave like this: `<ds-my-component>` becomes `<DsMyComponent>`."},{"title":"Use NPM package in Webpack or custom bundler projects","markdown":"**Note:** Before you continue, please make sure you authenticated `npm` for the GitHub package registry of the `@dvag` scope. Look into the [Getting started guide](#/guides/Getting_started) for further instructions.\n\n## Option 1: Integrate into project bundle\n\nAdd the generic design system package to your project:\n\n```bash\nnpm install @dvag/design-system@0.53.0\n```\n\nAdd the following code to your entry file (e.g. `src/index.js`):\n\n```js\nimport { defineCustomElements as loadDesignSystem } from \"@dvag/design-system/loader\";\n\nloadDesignSystem().then();\n```\n\n### CSS assets\n\nThe design system requires you to add a _CSS and font files_ to your application. Copy over the `node_modules/@dvag/design-system/css/` to your React `public` directory. We recommend to automate this step with a technology of your choice.\n\nThen add the following line into the `<head>` of your `index.html`:\n\n```html\n<link rel=\"stylesheet\" href=\"/path/to/that/css-directory/design-system.css\" />\n```\n\nMake sure to adapt the path of the `href` attribute.\n\n### Ready to go\n\nNow you can use the design system components everywhere in your web application:\n\n```html\n<dx-text type=\"h1\">Headline in DesignSystem</ds-text>\n```\n\nIf you experience problems with the chunk loading, refer to option 2.\n\n## Option 2: Import external source\n\nInstead you bundling the design system, you can import it as an external source from the projects `assets` or `public` directory.\n\n```js\n// webpack.config.js\n\nconst config = {\n  // ...\n  plugins: [\n    new CopyWebpackPlugin([\n      // ...\n      {\n        from: \"./node_modules/@dvag/design-system/www/build\",\n        to: \"assets/design-system-js\",\n      },\n      {\n        from: \"./node_modules/@dvag/design-system/css\",\n        to: \"assets/design-system-css\",\n      },\n    ]),\n    // ...\n  ],\n  // ...\n};\n```\n\nThe `assets` directory refers to a publicly available directory.\n\nThen add the following line into the `<head>` of your `index.html`:\n\n```html\n<script type=\"module\" src=\"assets/design-system-js/design-system.esm.js\"></script>\n<link rel=\"stylesheet\" href=\"assets/design-system-css/design-system.css\" />\n```\n\n### Ready to go\n\nNow you can use the design system components everywhere in your web application:\n\n```html\n<dx-text type=\"h1\">Headline in DesignSystem</ds-text>\n```"},{"title":"Use SCSS variables","markdown":"The NPM package `@dvag/design-system` contains a `scss` directory with constants, that you can use in `.scss` files.\n\n## Modern style\n\nConstants matching the modern style can be taken from `node_modules/@dvag/design-system/scss/dx/colors.scss`, e.g.:\n\n```scss\n// references to node_modules/@dvag/design-system/scss/dx/...\n@use \"~@dvag/design-system/scss/dx/colors\";\n@use \"~@dvag/design-system/scss/dx/mediaquery\";\n\n.container {\n  background-color: colors.$blue-100;\n\n  @include mediaquery.mq4 {\n    background-color: colors.$green-100;\n  }\n}\n```\n\n## Legacy style\n\nConstants matching the legacy style can be taken from `node_modules/@dvag/design-system/scss/ds/colors.scss`, e.g.:\n\n```scss\n// references to node_modules/@dvag/design-system/scss/ds/...\n@use \"~@dvag/design-system/scss/ds/colors\";\n@use \"~@dvag/design-system/scss/ds/mediaquery\";\n\n.container {\n  background-color: colors.$gold-dunkel;\n\n  @include mediaquery.l {\n    background-color: colors.$anthrazit;\n  }\n}\n```"},{"title":"Bug report","markdown":"## Summary\n\nIt is our concern to schedule and process every issue the fastest and best way possible. To further improve the teams'\ncommunication. In this guide we describe what information are necessary and how you can provide them.\n\n## Information\nTo understand and reproduce your issue, we should know about these critical information's:\n\n- Browser\n- Operating System\n- Framework and version  (e.g., Angular 11.1, React 16.2, ...)\n- design system version\n\n## How to report issues\n\n### Report issue-form\n\nThe easiest way to report your issue, is to use the report issue form in the developer documentation. Hit the button\nwith the bug on it( the one in the top right corner) and fill out and send this form via the send button. Your issue\nwill be send to the design system's teams-channel, and it will be taken care of it.\n\n### Email\n\nA common way to report issues is to write an [email](mailto:ds-support@compeople.de). Sometimes issues are\nnot as easy to understand and reproduce. So we may need your help to resolve the issue. We may have questions and need\nor see your code.\n\n### Online\nAnother way of reporting bugs, is to create a simple example in codepen, jsFiddle, stackBlitz, Github GIST.\n\nYou can use this template to get started: \n```html\n<script type=\"module\" src=\"https://dvag.github.io/design-system-cdn/@0.53.0/js/design-system.esm.js\"></script>\n<link rel=\"stylesheet\" href=\"https://dvag.github.io/design-system-cdn/@0.53.0/css/design-system.css\">\n\n<dx-text type=\"h1\">Hello from the Design System!</dx-text>\n```"}]