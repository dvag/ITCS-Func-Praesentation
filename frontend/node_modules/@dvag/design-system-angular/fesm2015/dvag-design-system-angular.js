import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, Directive, HostListener, NgModule } from '@angular/core';
import { defineCustomElements } from '@dvag/design-system/loader';
import { __decorate } from 'tslib';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/* eslint-disable */
const proxyInputs = (Cmp, inputs) => {
    const Prototype = Cmp.prototype;
    inputs.forEach(item => {
        Object.defineProperty(Prototype, item, {
            get() {
                return this.el[item];
            },
            set(val) {
                this.z.runOutsideAngular(() => (this.el[item] = val));
            }
        });
    });
};
const proxyMethods = (Cmp, methods) => {
    const Prototype = Cmp.prototype;
    methods.forEach(methodName => {
        Prototype[methodName] = function () {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
        };
    });
};
const proxyOutputs = (instance, el, events) => {
    events.forEach(eventName => instance[eventName] = new EventEmitter());
};
function ProxyCmp(opts) {
    const decorator = function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    };
    return decorator;
}

class DsActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionList.decorators = [
    { type: Component, args: [{
                selector: 'ds-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsActionListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionListItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-action-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsActionListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsAlert = class DsAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['buttonClick']);
    }
};
DsAlert.decorators = [
    { type: Component, args: [{
                selector: 'ds-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'visible'],
                outputs: ['buttonClick']
            },] }
];
DsAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'visible'],
        methods: ['show', 'showAlert', 'showConfirm']
    })
], DsAlert);
let DsAlertButton = class DsAlertButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsAlertButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-alert-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
            },] }
];
DsAlertButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlertButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
    })
], DsAlertButton);
class DsAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsAnnouncementBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsApp.decorators = [
    { type: Component, args: [{
                selector: 'ds-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsBorderedFormGroup = class DsBorderedFormGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsBorderedFormGroup.decorators = [
    { type: Component, args: [{
                selector: 'ds-bordered-form-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction', 'size']
            },] }
];
DsBorderedFormGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsBorderedFormGroup = __decorate([
    ProxyCmp({
        inputs: ['direction', 'size']
    })
], DsBorderedFormGroup);
class DsBorderedFormItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsBorderedFormItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-bordered-form-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsBorderedFormItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsButton = class DsButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable']
            },] }
];
DsButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DsButton);
let DsButtonBar = class DsButtonBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButtonBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-button-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction']
            },] }
];
DsButtonBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButtonBar = __decorate([
    ProxyCmp({
        inputs: ['direction']
    })
], DsButtonBar);
let DsCard = class DsCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCard.decorators = [
    { type: Component, args: [{
                selector: 'ds-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['shadow']
            },] }
];
DsCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCard = __decorate([
    ProxyCmp({
        inputs: ['shadow']
    })
], DsCard);
let DsCardCollapsable = class DsCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardCollapsable.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open', 'type']
            },] }
];
DsCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['label', 'open', 'type']
    })
], DsCardCollapsable);
class DsCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardContent.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsCardImageHeader = class DsCardImageHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardImageHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-image-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            },] }
];
DsCardImageHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardImageHeader = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsCardImageHeader);
let DsCardTabBar = class DsCardTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['showChange']);
    }
};
DsCardTabBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['show'],
                outputs: ['showChange']
            },] }
];
DsCardTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabBar = __decorate([
    ProxyCmp({
        inputs: ['show']
    })
], DsCardTabBar);
let DsCardTabPage = class DsCardTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardTabPage.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'name']
            },] }
];
DsCardTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'name']
    })
], DsCardTabPage);
let DsCenteredBoard = class DsCenteredBoard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCenteredBoard.decorators = [
    { type: Component, args: [{
                selector: 'ds-centered-board',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['columns']
            },] }
];
DsCenteredBoard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCenteredBoard = __decorate([
    ProxyCmp({
        inputs: ['columns']
    })
], DsCenteredBoard);
class DsCenteredBoardItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCenteredBoardItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-centered-board-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCenteredBoardItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsChartSample = class DsChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsChartSample.decorators = [
    { type: Component, args: [{
                selector: 'ds-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'formattedValue', 'label', 'value'],
                outputs: ['valueChange']
            },] }
];
DsChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'formattedValue', 'label', 'value'],
        methods: ['toChartSample']
    })
], DsChartSample);
let DsCheckbox = class DsCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DsCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'ds-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            },] }
];
DsCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DsCheckbox);
let DsColumn = class DsColumn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsColumn.decorators = [
    { type: Component, args: [{
                selector: 'ds-column',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align']
            },] }
];
DsColumn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsColumn = __decorate([
    ProxyCmp({
        inputs: ['align']
    })
], DsColumn);
let DsDateInput = class DsDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DsDateInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            },] }
];
DsDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsDateInput);
let DsDateRange = class DsDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDateRange.decorators = [
    { type: Component, args: [{
                selector: 'ds-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            },] }
];
DsDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DsDateRange);
let DsDonutChart = class DsDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DsDonutChart.decorators = [
    { type: Component, args: [{
                selector: 'ds-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle'],
                outputs: ['segmentSelect']
            },] }
];
DsDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDonutChart = __decorate([
    ProxyCmp({
        inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle']
    })
], DsDonutChart);
let DsDropdown = class DsDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsDropdown.decorators = [
    { type: Component, args: [{
                selector: 'ds-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DsDropdown);
let DsDropdownOption = class DsDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDropdownOption.decorators = [
    { type: Component, args: [{
                selector: 'ds-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
            },] }
];
DsDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
    })
], DsDropdownOption);
let DsFmErgebnisuebersicht = class DsFmErgebnisuebersicht {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersicht.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
            },] }
];
DsFmErgebnisuebersicht.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersicht = __decorate([
    ProxyCmp({
        inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
    })
], DsFmErgebnisuebersicht);
let DsFmErgebnisuebersichtItem = class DsFmErgebnisuebersichtItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
            },] }
];
DsFmErgebnisuebersichtItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtItem = __decorate([
    ProxyCmp({
        inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
    })
], DsFmErgebnisuebersichtItem);
let DsFmErgebnisuebersichtTable = class DsFmErgebnisuebersichtTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtTable.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label']
            },] }
];
DsFmErgebnisuebersichtTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtTable = __decorate([
    ProxyCmp({
        inputs: ['label']
    })
], DsFmErgebnisuebersichtTable);
let DsFooter = class DsFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['infoButtonClicked']);
    }
};
DsFooter.decorators = [
    { type: Component, args: [{
                selector: 'ds-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['companyinfo', 'showimprint', 'showtermsofuse'],
                outputs: ['infoButtonClicked']
            },] }
];
DsFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFooter = __decorate([
    ProxyCmp({
        inputs: ['companyinfo', 'showimprint', 'showtermsofuse']
    })
], DsFooter);
let DsFormLayout = class DsFormLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFormLayout.decorators = [
    { type: Component, args: [{
                selector: 'ds-form-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size']
            },] }
];
DsFormLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFormLayout = __decorate([
    ProxyCmp({
        inputs: ['size']
    })
], DsFormLayout);
class DsFullscreenSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsFullscreenSpinner.decorators = [
    { type: Component, args: [{
                selector: 'ds-fullscreen-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsFullscreenSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsFunctionIconButton = class DsFunctionIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFunctionIconButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-function-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'unfocusable']
            },] }
];
DsFunctionIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFunctionIconButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'unfocusable'],
        methods: ['focusControl']
    })
], DsFunctionIconButton);
let DsGrid = class DsGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsGrid.decorators = [
    { type: Component, args: [{
                selector: 'ds-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'l', 'm', 's', 'xl']
            },] }
];
DsGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'l', 'm', 's', 'xl']
    })
], DsGrid);
let DsGroupedTextInput = class DsGroupedTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsGroupedTextInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-grouped-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsGroupedTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGroupedTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value']
    })
], DsGroupedTextInput);
let DsGrowBox = class DsGrowBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['growStart', 'contentVisibilityChange']);
    }
};
DsGrowBox.decorators = [
    { type: Component, args: [{
                selector: 'ds-grow-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['animateoninit', 'open', 'slidecontent'],
                outputs: ['growStart', 'contentVisibilityChange']
            },] }
];
DsGrowBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrowBox = __decorate([
    ProxyCmp({
        inputs: ['animateoninit', 'open', 'slidecontent']
    })
], DsGrowBox);
let DsHeader = class DsHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['brand', 'fullscreen']
            },] }
];
DsHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeader = __decorate([
    ProxyCmp({
        inputs: ['brand', 'fullscreen']
    })
], DsHeader);
let DsHeaderAction = class DsHeaderAction {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DsHeaderAction.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-action',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['highlight', 'label'],
                outputs: ['interaction']
            },] }
];
DsHeaderAction.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderAction = __decorate([
    ProxyCmp({
        inputs: ['highlight', 'label']
    })
], DsHeaderAction);
let DsHeaderActionList = class DsHeaderActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderActionList.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            },] }
];
DsHeaderActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderActionList = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DsHeaderActionList);
let DsHeaderCustomer = class DsHeaderCustomer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderCustomer.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-customer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'typelabel']
            },] }
];
DsHeaderCustomer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderCustomer = __decorate([
    ProxyCmp({
        inputs: ['name', 'typelabel']
    })
], DsHeaderCustomer);
let DsHeaderUser = class DsHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'usernameInteraction']);
    }
};
DsHeaderUser.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'name', 'usernameinteractable'],
                outputs: ['signOut', 'usernameInteraction']
            },] }
];
DsHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'name', 'usernameinteractable']
    })
], DsHeaderUser);
let DsHeroImage = class DsHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeroImage.decorators = [
    { type: Component, args: [{
                selector: 'ds-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            },] }
];
DsHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeroImage = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsHeroImage);
class DsHr {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsHr.decorators = [
    { type: Component, args: [{
                selector: 'ds-hr',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsHr.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsIcon = class DsIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIcon.decorators = [
    { type: Component, args: [{
                selector: 'ds-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            },] }
];
DsIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DsIcon);
let DsIconButton = class DsIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIconButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable']
            },] }
];
DsIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIconButton = __decorate([
    ProxyCmp({
        inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable'],
        methods: ['focusControl']
    })
], DsIconButton);
let DsInfo = class DsInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsInfo.decorators = [
    { type: Component, args: [{
                selector: 'ds-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'popupvisible', 'size']
            },] }
];
DsInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'popupvisible', 'size'],
        methods: ['setModal']
    })
], DsInfo);
let DsLink = class DsLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLink.decorators = [
    { type: Component, args: [{
                selector: 'ds-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            },] }
];
DsLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DsLink);
let DsLogo = class DsLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLogo.decorators = [
    { type: Component, args: [{
                selector: 'ds-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DsLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsLogo);
let DsModal = class DsModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DsModal.decorators = [
    { type: Component, args: [{
                selector: 'ds-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible'],
                outputs: ['modalOpened', 'modalClosed']
            },] }
];
DsModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsModal = __decorate([
    ProxyCmp({
        inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible']
    })
], DsModal);
class DsNavigatedContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsNavigatedContent.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsNavigatedContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsNavigatedContentMenu = class DsNavigatedContentMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DsNavigatedContentMenu.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active'],
                outputs: ['navigate']
            },] }
];
DsNavigatedContentMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenu = __decorate([
    ProxyCmp({
        inputs: ['active']
    })
], DsNavigatedContentMenu);
let DsNavigatedContentMenuItem = class DsNavigatedContentMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsNavigatedContentMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['error', 'label', 'success', 'value', 'warning']
            },] }
];
DsNavigatedContentMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenuItem = __decorate([
    ProxyCmp({
        inputs: ['error', 'label', 'success', 'value', 'warning']
    })
], DsNavigatedContentMenuItem);
let DsNotificationToast = class DsNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DsNotificationToast.decorators = [
    { type: Component, args: [{
                selector: 'ds-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            },] }
];
DsNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DsNotificationToast);
let DsNumberInput = class DsNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsNumberInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
        methods: ['focusControl']
    })
], DsNumberInput);
class DsPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsPage.decorators = [
    { type: Component, args: [{
                selector: 'ds-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsPaginator = class DsPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DsPaginator.decorators = [
    { type: Component, args: [{
                selector: 'ds-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current', 'range'],
                outputs: ['pageChanged']
            },] }
];
DsPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current', 'range']
    })
], DsPaginator);
let DsPlaceholder = class DsPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsPlaceholder.decorators = [
    { type: Component, args: [{
                selector: 'ds-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            },] }
];
DsPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DsPlaceholder);
let DsRadioButton = class DsRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'value']
            },] }
];
DsRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'value'],
        methods: ['focusControl']
    })
], DsRadioButton);
let DsRadioButtonGroup = class DsRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsRadioButtonGroup.decorators = [
    { type: Component, args: [{
                selector: 'ds-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            },] }
];
DsRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsRadioButtonGroup);
let DsSearch = class DsSearch {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['search', 'selectSearch', 'valueChange', 'valueComplete']);
    }
};
DsSearch.decorators = [
    { type: Component, args: [{
                selector: 'ds-search',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
                outputs: ['search', 'selectSearch', 'valueChange', 'valueComplete']
            },] }
];
DsSearch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSearch = __decorate([
    ProxyCmp({
        inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
        methods: ['focusControl']
    })
], DsSearch);
let DsSlider = class DsSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsSlider.decorators = [
    { type: Component, args: [{
                selector: 'ds-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value'],
                outputs: ['valueChange']
            },] }
];
DsSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSlider = __decorate([
    ProxyCmp({
        inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value']
    })
], DsSlider);
let DsSpinner = class DsSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsSpinner.decorators = [
    { type: Component, args: [{
                selector: 'ds-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            },] }
];
DsSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DsSpinner);
let DsTable = class DsTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'rowsSelected']);
    }
};
DsTable.decorators = [
    { type: Component, args: [{
                selector: 'ds-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view'],
                outputs: ['tableStateChanged', 'rowsSelected']
            },] }
];
DsTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view']
    })
], DsTable);
let DsTableCell = class DsTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableCell.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type', 'value']
            },] }
];
DsTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableCell = __decorate([
    ProxyCmp({
        inputs: ['color', 'type', 'value']
    })
], DsTableCell);
class DsTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableFooter.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsTableHeaderItem = class DsTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableHeaderItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
            },] }
];
DsTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
    })
], DsTableHeaderItem);
let DsTableRow = class DsTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DsTableRow.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            },] }
];
DsTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DsTableRow);
let DsText = class DsText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsText.decorators = [
    { type: Component, args: [{
                selector: 'ds-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'screensize', 'type']
            },] }
];
DsText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsText = __decorate([
    ProxyCmp({
        inputs: ['color', 'screensize', 'type']
    })
], DsText);
let DsTextArea = class DsTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsTextArea.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextArea);
let DsTextButton = class DsTextButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'disabled', 'screensize', 'unfocusable']
            },] }
];
DsTextButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'disabled', 'screensize', 'unfocusable'],
        methods: ['focusControl']
    })
], DsTextButton);
let DsTextInput = class DsTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']);
    }
};
DsTextInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']
            },] }
];
DsTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextInput);
let DsTextList = class DsTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextList.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DsTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsTextList);
let DsUserAvatar = class DsUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsUserAvatar.decorators = [
    { type: Component, args: [{
                selector: 'ds-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            },] }
];
DsUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DsUserAvatar);
let DsWorkflowProgress = class DsWorkflowProgress {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWorkflowProgress.decorators = [
    { type: Component, args: [{
                selector: 'ds-workflow-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['progress']
            },] }
];
DsWorkflowProgress.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWorkflowProgress = __decorate([
    ProxyCmp({
        inputs: ['progress']
    })
], DsWorkflowProgress);
let DsWrappedLayout = class DsWrappedLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWrappedLayout.decorators = [
    { type: Component, args: [{
                selector: 'ds-wrapped-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'size']
            },] }
];
DsWrappedLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWrappedLayout = __decorate([
    ProxyCmp({
        inputs: ['align', 'size']
    })
], DsWrappedLayout);
let DsYesNo = class DsYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsYesNo.decorators = [
    { type: Component, args: [{
                selector: 'ds-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange']
            },] }
];
DsYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DsYesNo);
let DxAccordion = class DxAccordion {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAccordion.decorators = [
    { type: Component, args: [{
                selector: 'dx-accordion',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            },] }
];
DxAccordion.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAccordion = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DxAccordion);
class DxAccordionGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxAccordionGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-accordion-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxAccordionGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxAlert = class DxAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAlert.decorators = [
    { type: Component, args: [{
                selector: 'dx-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
            },] }
];
DxAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
    })
], DxAlert);
let DxAnnouncementBar = class DxAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAnnouncementBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'iconcolor']
            },] }
];
DxAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAnnouncementBar = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'iconcolor']
    })
], DxAnnouncementBar);
class DxApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxApp.decorators = [
    { type: Component, args: [{
                selector: 'dx-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxBreadcrumb {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome', 'navigate']);
    }
}
DxBreadcrumb.decorators = [
    { type: Component, args: [{
                selector: 'dx-breadcrumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                outputs: ['navigateHome', 'navigate']
            },] }
];
DxBreadcrumb.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxBreadcrumbItem = class DxBreadcrumbItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxBreadcrumbItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-breadcrumb-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            },] }
];
DxBreadcrumbItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxBreadcrumbItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'value']
    })
], DxBreadcrumbItem);
let DxButton = class DxButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxButton.decorators = [
    { type: Component, args: [{
                selector: 'dx-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable']
            },] }
];
DxButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DxButton);
class DxCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCard.decorators = [
    { type: Component, args: [{
                selector: 'dx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardCollapsable = class DxCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardCollapsable.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['open']
            },] }
];
DxCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['open']
    })
], DxCardCollapsable);
class DxCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCardContent.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardHeader = class DxCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'iconcolor', 'label']
            },] }
];
DxCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardHeader = __decorate([
    ProxyCmp({
        inputs: ['icon', 'iconcolor', 'label']
    })
], DxCardHeader);
let DxCardImage = class DxCardImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardImage.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
            },] }
];
DxCardImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardImage = __decorate([
    ProxyCmp({
        inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
    })
], DxCardImage);
let DxChartSample = class DxChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxChartSample.decorators = [
    { type: Component, args: [{
                selector: 'dx-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
                outputs: ['valueChange']
            },] }
];
DxChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
        methods: ['toChartSample']
    })
], DxChartSample);
let DxCheckbox = class DxCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'dx-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            },] }
];
DxCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DxCheckbox);
let DxCombobox = class DxCombobox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']);
    }
};
DxCombobox.decorators = [
    { type: Component, args: [{
                selector: 'dx-combobox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']
            },] }
];
DxCombobox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCombobox = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxCombobox);
let DxContainer = class DxContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxContainer.decorators = [
    { type: Component, args: [{
                selector: 'dx-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            },] }
];
DxContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxContainer = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxContainer);
let DxDateInput = class DxDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DxDateInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            },] }
];
DxDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxDateInput);
let DxDateRange = class DxDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDateRange.decorators = [
    { type: Component, args: [{
                selector: 'dx-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            },] }
];
DxDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DxDateRange);
let DxDonutChart = class DxDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DxDonutChart.decorators = [
    { type: Component, args: [{
                selector: 'dx-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
                outputs: ['segmentSelect']
            },] }
];
DxDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDonutChart = __decorate([
    ProxyCmp({
        inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
        methods: ['update']
    })
], DxDonutChart);
let DxDropdown = class DxDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxDropdown.decorators = [
    { type: Component, args: [{
                selector: 'dx-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DxDropdown);
let DxDropdownOption = class DxDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDropdownOption.decorators = [
    { type: Component, args: [{
                selector: 'dx-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            },] }
];
DxDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxDropdownOption);
let DxErrorMessage = class DxErrorMessage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['forceUpdateOnChange']);
    }
};
DxErrorMessage.decorators = [
    { type: Component, args: [{
                selector: 'dx-error-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['lines'],
                outputs: ['forceUpdateOnChange']
            },] }
];
DxErrorMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorMessage = __decorate([
    ProxyCmp({
        inputs: ['lines']
    })
], DxErrorMessage);
let DxErrorPage = class DxErrorPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['action']);
    }
};
DxErrorPage.decorators = [
    { type: Component, args: [{
                selector: 'dx-error-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actiondescription', 'actionlabel', 'description', 'reason'],
                outputs: ['action']
            },] }
];
DxErrorPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorPage = __decorate([
    ProxyCmp({
        inputs: ['actiondescription', 'actionlabel', 'description', 'reason']
    })
], DxErrorPage);
class DxExpanded {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxExpanded.decorators = [
    { type: Component, args: [{
                selector: 'dx-expanded',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxExpanded.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxFdOutlineBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxFdOutlineBox.decorators = [
    { type: Component, args: [{
                selector: 'dx-fd-outline-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxFdOutlineBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxFdSeparator = class DxFdSeparator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFdSeparator.decorators = [
    { type: Component, args: [{
                selector: 'dx-fd-separator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor', 'tocolor']
            },] }
];
DxFdSeparator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFdSeparator = __decorate([
    ProxyCmp({
        inputs: ['fromcolor', 'tocolor']
    })
], DxFdSeparator);
let DxFooter = class DxFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFooter.decorators = [
    { type: Component, args: [{
                selector: 'dx-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor']
            },] }
];
DxFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFooter = __decorate([
    ProxyCmp({
        inputs: ['fromcolor']
    })
], DxFooter);
let DxFormWrapper = class DxFormWrapper {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFormWrapper.decorators = [
    { type: Component, args: [{
                selector: 'dx-form-wrapper',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['errormessage', 'kisynced', 'label', 'required']
            },] }
];
DxFormWrapper.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFormWrapper = __decorate([
    ProxyCmp({
        inputs: ['errormessage', 'kisynced', 'label', 'required']
    })
], DxFormWrapper);
let DxGoldenStage = class DxGoldenStage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGoldenStage.decorators = [
    { type: Component, args: [{
                selector: 'dx-golden-stage',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
            },] }
];
DxGoldenStage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGoldenStage = __decorate([
    ProxyCmp({
        inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
    })
], DxGoldenStage);
let DxGrid = class DxGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGrid.decorators = [
    { type: Component, args: [{
                selector: 'dx-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
            },] }
];
DxGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
    })
], DxGrid);
let DxHeader = class DxHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome']);
    }
};
DxHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme'],
                outputs: ['navigateHome']
            },] }
];
DxHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeader = __decorate([
    ProxyCmp({
        inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme']
    })
], DxHeader);
let DxHeaderAppFavorites = class DxHeaderAppFavorites {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']);
    }
};
DxHeaderAppFavorites.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-app-favorites',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']
            },] }
];
DxHeaderAppFavorites.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavorites = __decorate([
    ProxyCmp({
        inputs: ['notifications', 'notificationstheme', 'priority']
    })
], DxHeaderAppFavorites);
let DxHeaderAppFavoritesApp = class DxHeaderAppFavoritesApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderAppFavoritesApp.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-app-favorites-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appid', 'appname', 'icon']
            },] }
];
DxHeaderAppFavoritesApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavoritesApp = __decorate([
    ProxyCmp({
        inputs: ['appid', 'appname', 'icon'],
        methods: ['toAppFavoritesApp']
    })
], DxHeaderAppFavoritesApp);
let DxHeaderMenuCustom = class DxHeaderMenuCustom {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuCustom.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-custom',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            },] }
];
DxHeaderMenuCustom.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuCustom = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuCustom);
let DxHeaderMenuGroup = class DxHeaderMenuGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            },] }
];
DxHeaderMenuGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuGroup = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuGroup);
let DxHeaderMenuItem = class DxHeaderMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuItem = __decorate([
    ProxyCmp({
        inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderMenuItem);
let DxHeaderMenuLink = class DxHeaderMenuLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuLink.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectednavigationvalue', 'label', 'priority', 'selected'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderMenuLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuLink = __decorate([
    ProxyCmp({
        inputs: ['connectednavigationvalue', 'label', 'priority', 'selected']
    })
], DxHeaderMenuLink);
let DxHeaderNavigation = class DxHeaderNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderNavigation.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoclose', 'notification', 'notificationstheme'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigation = __decorate([
    ProxyCmp({
        inputs: ['autoclose', 'notification', 'notificationstheme']
    })
], DxHeaderNavigation);
let DxHeaderNavigationItem = class DxHeaderNavigationItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxHeaderNavigationItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-navigation-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'size', 'value'],
                outputs: ['interaction']
            },] }
];
DxHeaderNavigationItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigationItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'size', 'value']
    })
], DxHeaderNavigationItem);
let DxHeaderUser = class DxHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'accountInteraction', 'menuInteraction']);
    }
};
DxHeaderUser.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['signOut', 'accountInteraction', 'menuInteraction']
            },] }
];
DxHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderUser);
let DxHeroImage = class DxHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeroImage.decorators = [
    { type: Component, args: [{
                selector: 'dx-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            },] }
];
DxHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeroImage = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxHeroImage);
let DxIcon = class DxIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxIcon.decorators = [
    { type: Component, args: [{
                selector: 'dx-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            },] }
];
DxIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DxIcon);
let DxInfo = class DxInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxInfo.decorators = [
    { type: Component, args: [{
                selector: 'dx-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'size']
            },] }
];
DxInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'size'],
        methods: ['setModal']
    })
], DxInfo);
let DxLegend = class DxLegend {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLegend.decorators = [
    { type: Component, args: [{
                selector: 'dx-legend',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['kisynchint', 'requiredhint']
            },] }
];
DxLegend.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLegend = __decorate([
    ProxyCmp({
        inputs: ['kisynchint', 'requiredhint']
    })
], DxLegend);
let DxLink = class DxLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLink.decorators = [
    { type: Component, args: [{
                selector: 'dx-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            },] }
];
DxLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DxLink);
let DxList = class DxList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxList.decorators = [
    { type: Component, args: [{
                selector: 'dx-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['contentbelow', 'size', 'width']
            },] }
];
DxList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxList = __decorate([
    ProxyCmp({
        inputs: ['contentbelow', 'size', 'width']
    })
], DxList);
let DxListItem = class DxListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxListItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value']
            },] }
];
DxListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxListItem = __decorate([
    ProxyCmp({
        inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value'],
        methods: ['getRadioElement', 'focusControl']
    })
], DxListItem);
let DxLogo = class DxLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLogo.decorators = [
    { type: Component, args: [{
                selector: 'dx-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DxLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxLogo);
let DxMediaQueryValue = class DxMediaQueryValue {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxMediaQueryValue.decorators = [
    { type: Component, args: [{
                selector: 'dx-media-query-value',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
            },] }
];
DxMediaQueryValue.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMediaQueryValue = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
    })
], DxMediaQueryValue);
let DxModal = class DxModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DxModal.decorators = [
    { type: Component, args: [{
                selector: 'dx-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['height', 'label', 'visible', 'width'],
                outputs: ['modalOpened', 'modalClosed']
            },] }
];
DxModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxModal = __decorate([
    ProxyCmp({
        inputs: ['height', 'label', 'visible', 'width']
    })
], DxModal);
let DxMultiDropdown = class DxMultiDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxMultiDropdown.decorators = [
    { type: Component, args: [{
                selector: 'dx-multi-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxMultiDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMultiDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
        methods: ['focusControl']
    })
], DxMultiDropdown);
let DxNotificationBar = class DxNotificationBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-notification-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['visible'],
                outputs: ['closeNotification']
            },] }
];
DxNotificationBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationBar = __decorate([
    ProxyCmp({
        inputs: ['visible']
    })
], DxNotificationBar);
let DxNotificationToast = class DxNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationToast.decorators = [
    { type: Component, args: [{
                selector: 'dx-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            },] }
];
DxNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DxNotificationToast);
let DxNumberInput = class DxNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxNumberInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
        methods: ['focusControl']
    })
], DxNumberInput);
let DxNumberPaginator = class DxNumberPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxNumberPaginator.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            },] }
];
DxNumberPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxNumberPaginator);
let DxNumberPicker = class DxNumberPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxNumberPicker.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'value', 'values'],
                outputs: ['valueChange']
            },] }
];
DxNumberPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPicker = __decorate([
    ProxyCmp({
        inputs: ['align', 'value', 'values']
    })
], DxNumberPicker);
let DxOverflowMenu = class DxOverflowMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['selection', 'listOpenChange']);
    }
};
DxOverflowMenu.decorators = [
    { type: Component, args: [{
                selector: 'dx-overflow-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode'],
                outputs: ['selection', 'listOpenChange']
            },] }
];
DxOverflowMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenu = __decorate([
    ProxyCmp({
        inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode']
    })
], DxOverflowMenu);
let DxOverflowMenuItem = class DxOverflowMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxOverflowMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-overflow-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            },] }
];
DxOverflowMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenuItem = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxOverflowMenuItem);
let DxPaginator = class DxPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxPaginator.decorators = [
    { type: Component, args: [{
                selector: 'dx-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            },] }
];
DxPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxPaginator);
let DxPlaceholder = class DxPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxPlaceholder.decorators = [
    { type: Component, args: [{
                selector: 'dx-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            },] }
];
DxPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DxPlaceholder);
let DxProcessHeader = class DxProcessHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxProcessHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-process-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['headline']
            },] }
];
DxProcessHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxProcessHeader = __decorate([
    ProxyCmp({
        inputs: ['headline']
    })
], DxProcessHeader);
let DxRadioButton = class DxRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'dx-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'label', 'value']
            },] }
];
DxRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'label', 'value'],
        methods: ['focusControl']
    })
], DxRadioButton);
let DxRadioButtonGroup = class DxRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxRadioButtonGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            },] }
];
DxRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
        methods: ['focusControl', 'connectRadioButton', 'disconnectRadioButton']
    })
], DxRadioButtonGroup);
let DxRepresentativeInfo = class DxRepresentativeInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRepresentativeInfo.decorators = [
    { type: Component, args: [{
                selector: 'dx-representative-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'type']
            },] }
];
DxRepresentativeInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRepresentativeInfo = __decorate([
    ProxyCmp({
        inputs: ['name', 'type']
    })
], DxRepresentativeInfo);
class DxSidebarContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxSidebarContent.decorators = [
    { type: Component, args: [{
                selector: 'dx-sidebar-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxSidebarContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxSiteNavigation = class DxSiteNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigation.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['expandedlayoutat']
            },] }
];
DxSiteNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigation = __decorate([
    ProxyCmp({
        inputs: ['expandedlayoutat']
    })
], DxSiteNavigation);
let DxSiteNavigationMenu = class DxSiteNavigationMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DxSiteNavigationMenu.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autonavigation', 'selectedvalue', 'titlestring'],
                outputs: ['navigate']
            },] }
];
DxSiteNavigationMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenu = __decorate([
    ProxyCmp({
        inputs: ['autonavigation', 'selectedvalue', 'titlestring']
    })
], DxSiteNavigationMenu);
let DxSiteNavigationMenuItem = class DxSiteNavigationMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'state', 'value']
            },] }
];
DxSiteNavigationMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenuItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'state', 'value']
    })
], DxSiteNavigationMenuItem);
let DxSiteNavigationScope = class DxSiteNavigationScope {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationScope.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-scope',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            },] }
];
DxSiteNavigationScope.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationScope = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSiteNavigationScope);
let DxSlideShow = class DxSlideShow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChange']);
    }
};
DxSlideShow.decorators = [
    { type: Component, args: [{
                selector: 'dx-slide-show',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
                outputs: ['pageChange']
            },] }
];
DxSlideShow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlideShow = __decorate([
    ProxyCmp({
        inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
        methods: ['setPage']
    })
], DxSlideShow);
let DxSlider = class DxSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxSlider.decorators = [
    { type: Component, args: [{
                selector: 'dx-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value'],
                outputs: ['valueChange']
            },] }
];
DxSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlider = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value']
    })
], DxSlider);
let DxSort = class DxSort {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['sort']);
    }
};
DxSort.decorators = [
    { type: Component, args: [{
                selector: 'dx-sort',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['sortable'],
                outputs: ['sort']
            },] }
];
DxSort.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSort = __decorate([
    ProxyCmp({
        inputs: ['sortable']
    })
], DxSort);
let DxSortItem = class DxSortItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSortItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-sort-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            },] }
];
DxSortItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSortItem = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSortItem);
let DxSpacer = class DxSpacer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpacer.decorators = [
    { type: Component, args: [{
                selector: 'dx-spacer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            },] }
];
DxSpacer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpacer = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxSpacer);
let DxSpinner = class DxSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpinner.decorators = [
    { type: Component, args: [{
                selector: 'dx-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            },] }
];
DxSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DxSpinner);
let DxTabBar = class DxTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tabChange']);
    }
};
DxTabBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['selected'],
                outputs: ['tabChange']
            },] }
];
DxTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabBar = __decorate([
    ProxyCmp({
        inputs: ['selected']
    })
], DxTabBar);
let DxTabPage = class DxTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTabPage.decorators = [
    { type: Component, args: [{
                selector: 'dx-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            },] }
];
DxTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'value'],
        methods: ['toTabPage']
    })
], DxTabPage);
let DxTable = class DxTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']);
    }
};
DxTable.decorators = [
    { type: Component, args: [{
                selector: 'dx-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode'],
                outputs: ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']
            },] }
];
DxTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode']
    })
], DxTable);
let DxTableCell = class DxTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableCell.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'color', 'type', 'value']
            },] }
];
DxTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableCell = __decorate([
    ProxyCmp({
        inputs: ['align', 'color', 'type', 'value']
    })
], DxTableCell);
class DxTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableFooter.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxTableHeaderItem = class DxTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableHeaderItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type']
            },] }
];
DxTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type'],
        methods: ['getMinWidth', 'getMaxWidth']
    })
], DxTableHeaderItem);
let DxTableRow = class DxTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DxTableRow.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            },] }
];
DxTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DxTableRow);
let DxTag = class DxTag {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['remove', 'selectChange']);
    }
};
DxTag.decorators = [
    { type: Component, args: [{
                selector: 'dx-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type'],
                outputs: ['remove', 'selectChange']
            },] }
];
DxTag.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTag = __decorate([
    ProxyCmp({
        inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type']
    })
], DxTag);
let DxText = class DxText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxText.decorators = [
    { type: Component, args: [{
                selector: 'dx-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            },] }
];
DxText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxText = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxText);
let DxTextArea = class DxTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxTextArea.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DxTextArea);
let DxTextInput = class DxTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']);
    }
};
DxTextInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']
            },] }
];
DxTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxTextInput);
let DxTextList = class DxTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTextList.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DxTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxTextList);
let DxToggle = class DxToggle {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxToggle.decorators = [
    { type: Component, args: [{
                selector: 'dx-toggle',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled'],
                outputs: ['checkedChange']
            },] }
];
DxToggle.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxToggle = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled']
    })
], DxToggle);
let DxUserAvatar = class DxUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxUserAvatar.decorators = [
    { type: Component, args: [{
                selector: 'dx-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            },] }
];
DxUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DxUserAvatar);
let DxWizard = class DxWizard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['currentStepChange']);
    }
};
DxWizard.decorators = [
    { type: Component, args: [{
                selector: 'dx-wizard',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation'],
                outputs: ['currentStepChange']
            },] }
];
DxWizard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizard = __decorate([
    ProxyCmp({
        inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation']
    })
], DxWizard);
let DxWizardStep = class DxWizardStep {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxWizardStep.decorators = [
    { type: Component, args: [{
                selector: 'dx-wizard-step',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['finished', 'label', 'value'],
                outputs: ['interaction']
            },] }
];
DxWizardStep.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizardStep = __decorate([
    ProxyCmp({
        inputs: ['finished', 'label', 'value']
    })
], DxWizardStep);
let DxYesNo = class DxYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxYesNo.decorators = [
    { type: Component, args: [{
                selector: 'dx-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'size', 'value'],
                outputs: ['valueChange']
            },] }
];
DxYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'size', 'value']
    })
], DxYesNo);

const DIRECTIVES = [
    DsActionList,
    DsActionListItem,
    DsAlert,
    DsAlertButton,
    DsAnnouncementBar,
    DsApp,
    DsBorderedFormGroup,
    DsBorderedFormItem,
    DsButton,
    DsButtonBar,
    DsCard,
    DsCardCollapsable,
    DsCardContent,
    DsCardHeader,
    DsCardImageHeader,
    DsCardTabBar,
    DsCardTabPage,
    DsCenteredBoard,
    DsCenteredBoardItem,
    DsChartSample,
    DsCheckbox,
    DsColumn,
    DsDateInput,
    DsDateRange,
    DsDonutChart,
    DsDropdown,
    DsDropdownOption,
    DsFmErgebnisuebersicht,
    DsFmErgebnisuebersichtItem,
    DsFmErgebnisuebersichtTable,
    DsFooter,
    DsFormLayout,
    DsFullscreenSpinner,
    DsFunctionIconButton,
    DsGrid,
    DsGroupedTextInput,
    DsGrowBox,
    DsHeader,
    DsHeaderAction,
    DsHeaderActionList,
    DsHeaderCustomer,
    DsHeaderUser,
    DsHeroImage,
    DsHr,
    DsIcon,
    DsIconButton,
    DsInfo,
    DsLink,
    DsLogo,
    DsModal,
    DsNavigatedContent,
    DsNavigatedContentMenu,
    DsNavigatedContentMenuItem,
    DsNotificationToast,
    DsNumberInput,
    DsPage,
    DsPaginator,
    DsPlaceholder,
    DsRadioButton,
    DsRadioButtonGroup,
    DsSearch,
    DsSlider,
    DsSpinner,
    DsTable,
    DsTableCell,
    DsTableFooter,
    DsTableHeader,
    DsTableHeaderItem,
    DsTableRow,
    DsText,
    DsTextArea,
    DsTextButton,
    DsTextInput,
    DsTextList,
    DsUserAvatar,
    DsWorkflowProgress,
    DsWrappedLayout,
    DsYesNo,
    DxAccordion,
    DxAccordionGroup,
    DxAlert,
    DxAnnouncementBar,
    DxApp,
    DxBreadcrumb,
    DxBreadcrumbItem,
    DxButton,
    DxCard,
    DxCardCollapsable,
    DxCardContent,
    DxCardHeader,
    DxCardImage,
    DxChartSample,
    DxCheckbox,
    DxCombobox,
    DxContainer,
    DxDateInput,
    DxDateRange,
    DxDonutChart,
    DxDropdown,
    DxDropdownOption,
    DxErrorMessage,
    DxErrorPage,
    DxExpanded,
    DxFdOutlineBox,
    DxFdSeparator,
    DxFooter,
    DxFormWrapper,
    DxGoldenStage,
    DxGrid,
    DxHeader,
    DxHeaderAppFavorites,
    DxHeaderAppFavoritesApp,
    DxHeaderMenuCustom,
    DxHeaderMenuGroup,
    DxHeaderMenuItem,
    DxHeaderMenuLink,
    DxHeaderNavigation,
    DxHeaderNavigationItem,
    DxHeaderUser,
    DxHeroImage,
    DxIcon,
    DxInfo,
    DxLegend,
    DxLink,
    DxList,
    DxListItem,
    DxLogo,
    DxMediaQueryValue,
    DxModal,
    DxMultiDropdown,
    DxNotificationBar,
    DxNotificationToast,
    DxNumberInput,
    DxNumberPaginator,
    DxNumberPicker,
    DxOverflowMenu,
    DxOverflowMenuItem,
    DxPaginator,
    DxPlaceholder,
    DxProcessHeader,
    DxRadioButton,
    DxRadioButtonGroup,
    DxRepresentativeInfo,
    DxSidebarContent,
    DxSiteNavigation,
    DxSiteNavigationMenu,
    DxSiteNavigationMenuItem,
    DxSiteNavigationScope,
    DxSlideShow,
    DxSlider,
    DxSort,
    DxSortItem,
    DxSpacer,
    DxSpinner,
    DxTabBar,
    DxTabPage,
    DxTable,
    DxTableCell,
    DxTableFooter,
    DxTableHeader,
    DxTableHeaderItem,
    DxTableRow,
    DxTag,
    DxText,
    DxTextArea,
    DxTextInput,
    DxTextList,
    DxToggle,
    DxUserAvatar,
    DxWizard,
    DxWizardStep,
    DxYesNo
];

class ValueAccessor {
    constructor(el) {
        this.el = el;
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    writeValue(value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    }
    handleChangeEvent(value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    }
    _handleBlurEvent() {
        this.onTouched();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.el.nativeElement.disabled = isDisabled;
    }
}
ValueAccessor.decorators = [
    { type: Directive, args: [{},] }
];
ValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
ValueAccessor.propDecorators = {
    _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
};

class NumericValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
    registerOnChange(fn) {
        super.registerOnChange(value => {
            fn(value === '' ? null : parseFloat(value));
        });
    }
}
NumericValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-slider, dx-slider, ds-number-input, dx-number-input',
                host: {
                    '(valueChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumericValueAccessor,
                        multi: true
                    }
                ]
            },] }
];
NumericValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

class TextValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
}
TextValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-text-input, ds-radio-button-group, ds-grouped-text-input, ds-dropdown, ds-yes-no, ds-date-input, ds-text-area, ds-search, dx-combobox, dx-dropdown, dx-date-input, dx-radio-button-group, dx-text-input, dx-text-area, dx-yes-no',
                host: {
                    '(valueChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TextValueAccessor,
                        multi: true
                    }
                ]
            },] }
];
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

class BooleanValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
    writeValue(value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    }
}
BooleanValueAccessor.decorators = [
    { type: Directive, args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-checkbox, dx-checkbox, dx-toggle, ds-table-row, dx-table-row, dx-card-header',
                host: {
                    '(checkedChange)': 'handleChangeEvent($event.target.checked)',
                    '(rowSelected)': 'handleChangeEvent($event.target.selected)',
                    '(headerSelected)': 'handleChangeEvent($event.target.selected)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: BooleanValueAccessor,
                        multi: true
                    }
                ]
            },] }
];
BooleanValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];

const components = [
    ...DIRECTIVES,
    NumericValueAccessor,
    TextValueAccessor,
    BooleanValueAccessor
];
class DesignSystemModule {
    constructor() {
        defineCustomElements().then();
    }
}
DesignSystemModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    components,
                ],
                imports: [],
                exports: components
            },] }
];
DesignSystemModule.ctorParameters = () => [];

/*
 * Public API Surface of design-system-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DesignSystemModule, DsActionList, DsActionListItem, DsAlert, DsAlertButton, DsAnnouncementBar, DsApp, DsBorderedFormGroup, DsBorderedFormItem, DsButton, DsButtonBar, DsCard, DsCardCollapsable, DsCardContent, DsCardHeader, DsCardImageHeader, DsCardTabBar, DsCardTabPage, DsCenteredBoard, DsCenteredBoardItem, DsChartSample, DsCheckbox, DsColumn, DsDateInput, DsDateRange, DsDonutChart, DsDropdown, DsDropdownOption, DsFmErgebnisuebersicht, DsFmErgebnisuebersichtItem, DsFmErgebnisuebersichtTable, DsFooter, DsFormLayout, DsFullscreenSpinner, DsFunctionIconButton, DsGrid, DsGroupedTextInput, DsGrowBox, DsHeader, DsHeaderAction, DsHeaderActionList, DsHeaderCustomer, DsHeaderUser, DsHeroImage, DsHr, DsIcon, DsIconButton, DsInfo, DsLink, DsLogo, DsModal, DsNavigatedContent, DsNavigatedContentMenu, DsNavigatedContentMenuItem, DsNotificationToast, DsNumberInput, DsPage, DsPaginator, DsPlaceholder, DsRadioButton, DsRadioButtonGroup, DsSearch, DsSlider, DsSpinner, DsTable, DsTableCell, DsTableFooter, DsTableHeader, DsTableHeaderItem, DsTableRow, DsText, DsTextArea, DsTextButton, DsTextInput, DsTextList, DsUserAvatar, DsWorkflowProgress, DsWrappedLayout, DsYesNo, DxAccordion, DxAccordionGroup, DxAlert, DxAnnouncementBar, DxApp, DxBreadcrumb, DxBreadcrumbItem, DxButton, DxCard, DxCardCollapsable, DxCardContent, DxCardHeader, DxCardImage, DxChartSample, DxCheckbox, DxCombobox, DxContainer, DxDateInput, DxDateRange, DxDonutChart, DxDropdown, DxDropdownOption, DxErrorMessage, DxErrorPage, DxExpanded, DxFdOutlineBox, DxFdSeparator, DxFooter, DxFormWrapper, DxGoldenStage, DxGrid, DxHeader, DxHeaderAppFavorites, DxHeaderAppFavoritesApp, DxHeaderMenuCustom, DxHeaderMenuGroup, DxHeaderMenuItem, DxHeaderMenuLink, DxHeaderNavigation, DxHeaderNavigationItem, DxHeaderUser, DxHeroImage, DxIcon, DxInfo, DxLegend, DxLink, DxList, DxListItem, DxLogo, DxMediaQueryValue, DxModal, DxMultiDropdown, DxNotificationBar, DxNotificationToast, DxNumberInput, DxNumberPaginator, DxNumberPicker, DxOverflowMenu, DxOverflowMenuItem, DxPaginator, DxPlaceholder, DxProcessHeader, DxRadioButton, DxRadioButtonGroup, DxRepresentativeInfo, DxSidebarContent, DxSiteNavigation, DxSiteNavigationMenu, DxSiteNavigationMenuItem, DxSiteNavigationScope, DxSlideShow, DxSlider, DxSort, DxSortItem, DxSpacer, DxSpinner, DxTabBar, DxTabPage, DxTable, DxTableCell, DxTableFooter, DxTableHeader, DxTableHeaderItem, DxTableRow, DxTag, DxText, DxTextArea, DxTextInput, DxTextList, DxToggle, DxUserAvatar, DxWizard, DxWizardStep, DxYesNo, DIRECTIVES as ɵa, ProxyCmp as ɵb, NumericValueAccessor as ɵc, ValueAccessor as ɵd, TextValueAccessor as ɵe, BooleanValueAccessor as ɵf };
//# sourceMappingURL=dvag-design-system-angular.js.map
