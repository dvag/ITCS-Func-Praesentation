(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@dvag/design-system/loader'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@dvag/design-system-angular', ['exports', '@angular/core', '@dvag/design-system/loader', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.dvag = global.dvag || {}, global.dvag["design-system-angular"] = {}), global.ng.core, global.loader, global.ng.forms));
})(this, (function (exports, core, loader, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /* eslint-disable */
    var proxyInputs = function (Cmp, inputs) {
        var Prototype = Cmp.prototype;
        inputs.forEach(function (item) {
            Object.defineProperty(Prototype, item, {
                get: function () {
                    return this.el[item];
                },
                set: function (val) {
                    var _this = this;
                    this.z.runOutsideAngular(function () { return (_this.el[item] = val); });
                }
            });
        });
    };
    var proxyMethods = function (Cmp, methods) {
        var Prototype = Cmp.prototype;
        methods.forEach(function (methodName) {
            Prototype[methodName] = function () {
                var _this = this;
                var args = arguments;
                return this.z.runOutsideAngular(function () { return _this.el[methodName].apply(_this.el, args); });
            };
        });
    };
    var proxyOutputs = function (instance, el, events) {
        events.forEach(function (eventName) { return instance[eventName] = new core.EventEmitter(); });
    };
    function ProxyCmp(opts) {
        var decorator = function (cls) {
            if (opts.inputs) {
                proxyInputs(cls, opts.inputs);
            }
            if (opts.methods) {
                proxyMethods(cls, opts.methods);
            }
            return cls;
        };
        return decorator;
    }

    var DsActionList = /** @class */ (function () {
        function DsActionList(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsActionList;
    }());
    DsActionList.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-action-list',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsActionList.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DsActionListItem = /** @class */ (function () {
        function DsActionListItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsActionListItem;
    }());
    DsActionListItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-action-list-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsActionListItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsAlert = /** @class */ (function () {
        function DsAlert(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['buttonClick']);
        }
        return DsAlert;
    }());
    exports.DsAlert.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-alert',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['actionsdirection', 'visible'],
                    outputs: ['buttonClick']
                },] }
    ];
    exports.DsAlert.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsAlert = __decorate([
        ProxyCmp({
            inputs: ['actionsdirection', 'visible'],
            methods: ['show', 'showAlert', 'showConfirm']
        })
    ], exports.DsAlert);
    exports.DsAlertButton = /** @class */ (function () {
        function DsAlertButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsAlertButton;
    }());
    exports.DsAlertButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-alert-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
                },] }
    ];
    exports.DsAlertButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsAlertButton = __decorate([
        ProxyCmp({
            inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
        })
    ], exports.DsAlertButton);
    var DsAnnouncementBar = /** @class */ (function () {
        function DsAnnouncementBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsAnnouncementBar;
    }());
    DsAnnouncementBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-announcement-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsAnnouncementBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DsApp = /** @class */ (function () {
        function DsApp(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsApp;
    }());
    DsApp.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-app',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsApp.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsBorderedFormGroup = /** @class */ (function () {
        function DsBorderedFormGroup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsBorderedFormGroup;
    }());
    exports.DsBorderedFormGroup.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-bordered-form-group',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['direction', 'size']
                },] }
    ];
    exports.DsBorderedFormGroup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsBorderedFormGroup = __decorate([
        ProxyCmp({
            inputs: ['direction', 'size']
        })
    ], exports.DsBorderedFormGroup);
    var DsBorderedFormItem = /** @class */ (function () {
        function DsBorderedFormItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsBorderedFormItem;
    }());
    DsBorderedFormItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-bordered-form-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsBorderedFormItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsButton = /** @class */ (function () {
        function DsButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsButton;
    }());
    exports.DsButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable']
                },] }
    ];
    exports.DsButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable'],
            methods: ['focusControl']
        })
    ], exports.DsButton);
    exports.DsButtonBar = /** @class */ (function () {
        function DsButtonBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsButtonBar;
    }());
    exports.DsButtonBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-button-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['direction']
                },] }
    ];
    exports.DsButtonBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsButtonBar = __decorate([
        ProxyCmp({
            inputs: ['direction']
        })
    ], exports.DsButtonBar);
    exports.DsCard = /** @class */ (function () {
        function DsCard(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCard;
    }());
    exports.DsCard.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['shadow']
                },] }
    ];
    exports.DsCard.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCard = __decorate([
        ProxyCmp({
            inputs: ['shadow']
        })
    ], exports.DsCard);
    exports.DsCardCollapsable = /** @class */ (function () {
        function DsCardCollapsable(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCardCollapsable;
    }());
    exports.DsCardCollapsable.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-collapsable',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'open', 'type']
                },] }
    ];
    exports.DsCardCollapsable.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCardCollapsable = __decorate([
        ProxyCmp({
            inputs: ['label', 'open', 'type']
        })
    ], exports.DsCardCollapsable);
    var DsCardContent = /** @class */ (function () {
        function DsCardContent(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCardContent;
    }());
    DsCardContent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-content',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsCardContent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DsCardHeader = /** @class */ (function () {
        function DsCardHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCardHeader;
    }());
    DsCardHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsCardHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCardImageHeader = /** @class */ (function () {
        function DsCardImageHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCardImageHeader;
    }());
    exports.DsCardImageHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-image-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['url']
                },] }
    ];
    exports.DsCardImageHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCardImageHeader = __decorate([
        ProxyCmp({
            inputs: ['url']
        })
    ], exports.DsCardImageHeader);
    exports.DsCardTabBar = /** @class */ (function () {
        function DsCardTabBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['showChange']);
        }
        return DsCardTabBar;
    }());
    exports.DsCardTabBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-tab-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['show'],
                    outputs: ['showChange']
                },] }
    ];
    exports.DsCardTabBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCardTabBar = __decorate([
        ProxyCmp({
            inputs: ['show']
        })
    ], exports.DsCardTabBar);
    exports.DsCardTabPage = /** @class */ (function () {
        function DsCardTabPage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCardTabPage;
    }());
    exports.DsCardTabPage.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-card-tab-page',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'name']
                },] }
    ];
    exports.DsCardTabPage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCardTabPage = __decorate([
        ProxyCmp({
            inputs: ['label', 'name']
        })
    ], exports.DsCardTabPage);
    exports.DsCenteredBoard = /** @class */ (function () {
        function DsCenteredBoard(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCenteredBoard;
    }());
    exports.DsCenteredBoard.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-centered-board',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['columns']
                },] }
    ];
    exports.DsCenteredBoard.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCenteredBoard = __decorate([
        ProxyCmp({
            inputs: ['columns']
        })
    ], exports.DsCenteredBoard);
    var DsCenteredBoardItem = /** @class */ (function () {
        function DsCenteredBoardItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsCenteredBoardItem;
    }());
    DsCenteredBoardItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-centered-board-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsCenteredBoardItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsChartSample = /** @class */ (function () {
        function DsChartSample(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DsChartSample;
    }());
    exports.DsChartSample.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-chart-sample',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'formattedValue', 'label', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DsChartSample.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsChartSample = __decorate([
        ProxyCmp({
            inputs: ['color', 'formattedValue', 'label', 'value'],
            methods: ['toChartSample']
        })
    ], exports.DsChartSample);
    exports.DsCheckbox = /** @class */ (function () {
        function DsCheckbox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['checkedChange']);
        }
        return DsCheckbox;
    }());
    exports.DsCheckbox.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-checkbox',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
                    outputs: ['checkedChange']
                },] }
    ];
    exports.DsCheckbox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsCheckbox = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
            methods: ['focusControl']
        })
    ], exports.DsCheckbox);
    exports.DsColumn = /** @class */ (function () {
        function DsColumn(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsColumn;
    }());
    exports.DsColumn.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-column',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align']
                },] }
    ];
    exports.DsColumn.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsColumn = __decorate([
        ProxyCmp({
            inputs: ['align']
        })
    ], exports.DsColumn);
    exports.DsDateInput = /** @class */ (function () {
        function DsDateInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
        }
        return DsDateInput;
    }());
    exports.DsDateInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-date-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
                    outputs: ['valueChange', 'valueComplete', 'errorFound']
                },] }
    ];
    exports.DsDateInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsDateInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsDateInput);
    exports.DsDateRange = /** @class */ (function () {
        function DsDateRange(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsDateRange;
    }());
    exports.DsDateRange.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-date-range',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['max', 'min', 'mode', 'value']
                },] }
    ];
    exports.DsDateRange.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsDateRange = __decorate([
        ProxyCmp({
            inputs: ['max', 'min', 'mode', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsDateRange);
    exports.DsDonutChart = /** @class */ (function () {
        function DsDonutChart(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['segmentSelect']);
        }
        return DsDonutChart;
    }());
    exports.DsDonutChart.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-donut-chart',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle'],
                    outputs: ['segmentSelect']
                },] }
    ];
    exports.DsDonutChart.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsDonutChart = __decorate([
        ProxyCmp({
            inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle']
        })
    ], exports.DsDonutChart);
    exports.DsDropdown = /** @class */ (function () {
        function DsDropdown(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DsDropdown;
    }());
    exports.DsDropdown.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-dropdown',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DsDropdown.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsDropdown = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsDropdown);
    exports.DsDropdownOption = /** @class */ (function () {
        function DsDropdownOption(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsDropdownOption;
    }());
    exports.DsDropdownOption.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-dropdown-option',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
                },] }
    ];
    exports.DsDropdownOption.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsDropdownOption = __decorate([
        ProxyCmp({
            inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
        })
    ], exports.DsDropdownOption);
    exports.DsFmErgebnisuebersicht = /** @class */ (function () {
        function DsFmErgebnisuebersicht(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFmErgebnisuebersicht;
    }());
    exports.DsFmErgebnisuebersicht.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-fm-ergebnisuebersicht',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
                },] }
    ];
    exports.DsFmErgebnisuebersicht.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFmErgebnisuebersicht = __decorate([
        ProxyCmp({
            inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
        })
    ], exports.DsFmErgebnisuebersicht);
    exports.DsFmErgebnisuebersichtItem = /** @class */ (function () {
        function DsFmErgebnisuebersichtItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFmErgebnisuebersichtItem;
    }());
    exports.DsFmErgebnisuebersichtItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-fm-ergebnisuebersicht-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
                },] }
    ];
    exports.DsFmErgebnisuebersichtItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFmErgebnisuebersichtItem = __decorate([
        ProxyCmp({
            inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
        })
    ], exports.DsFmErgebnisuebersichtItem);
    exports.DsFmErgebnisuebersichtTable = /** @class */ (function () {
        function DsFmErgebnisuebersichtTable(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFmErgebnisuebersichtTable;
    }());
    exports.DsFmErgebnisuebersichtTable.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-fm-ergebnisuebersicht-table',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label']
                },] }
    ];
    exports.DsFmErgebnisuebersichtTable.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFmErgebnisuebersichtTable = __decorate([
        ProxyCmp({
            inputs: ['label']
        })
    ], exports.DsFmErgebnisuebersichtTable);
    exports.DsFooter = /** @class */ (function () {
        function DsFooter(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['infoButtonClicked']);
        }
        return DsFooter;
    }());
    exports.DsFooter.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-footer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['companyinfo', 'showimprint', 'showtermsofuse'],
                    outputs: ['infoButtonClicked']
                },] }
    ];
    exports.DsFooter.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFooter = __decorate([
        ProxyCmp({
            inputs: ['companyinfo', 'showimprint', 'showtermsofuse']
        })
    ], exports.DsFooter);
    exports.DsFormLayout = /** @class */ (function () {
        function DsFormLayout(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFormLayout;
    }());
    exports.DsFormLayout.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-form-layout',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['size']
                },] }
    ];
    exports.DsFormLayout.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFormLayout = __decorate([
        ProxyCmp({
            inputs: ['size']
        })
    ], exports.DsFormLayout);
    var DsFullscreenSpinner = /** @class */ (function () {
        function DsFullscreenSpinner(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFullscreenSpinner;
    }());
    DsFullscreenSpinner.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-fullscreen-spinner',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsFullscreenSpinner.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFunctionIconButton = /** @class */ (function () {
        function DsFunctionIconButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsFunctionIconButton;
    }());
    exports.DsFunctionIconButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-function-icon-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'unfocusable']
                },] }
    ];
    exports.DsFunctionIconButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsFunctionIconButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'unfocusable'],
            methods: ['focusControl']
        })
    ], exports.DsFunctionIconButton);
    exports.DsGrid = /** @class */ (function () {
        function DsGrid(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsGrid;
    }());
    exports.DsGrid.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-grid',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['base', 'l', 'm', 's', 'xl']
                },] }
    ];
    exports.DsGrid.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsGrid = __decorate([
        ProxyCmp({
            inputs: ['base', 'l', 'm', 's', 'xl']
        })
    ], exports.DsGrid);
    exports.DsGroupedTextInput = /** @class */ (function () {
        function DsGroupedTextInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DsGroupedTextInput;
    }());
    exports.DsGroupedTextInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-grouped-text-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DsGroupedTextInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsGroupedTextInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value']
        })
    ], exports.DsGroupedTextInput);
    exports.DsGrowBox = /** @class */ (function () {
        function DsGrowBox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['growStart', 'contentVisibilityChange']);
        }
        return DsGrowBox;
    }());
    exports.DsGrowBox.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-grow-box',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['animateoninit', 'open', 'slidecontent'],
                    outputs: ['growStart', 'contentVisibilityChange']
                },] }
    ];
    exports.DsGrowBox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsGrowBox = __decorate([
        ProxyCmp({
            inputs: ['animateoninit', 'open', 'slidecontent']
        })
    ], exports.DsGrowBox);
    exports.DsHeader = /** @class */ (function () {
        function DsHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsHeader;
    }());
    exports.DsHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['brand', 'fullscreen']
                },] }
    ];
    exports.DsHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeader = __decorate([
        ProxyCmp({
            inputs: ['brand', 'fullscreen']
        })
    ], exports.DsHeader);
    exports.DsHeaderAction = /** @class */ (function () {
        function DsHeaderAction(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['interaction']);
        }
        return DsHeaderAction;
    }());
    exports.DsHeaderAction.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-header-action',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['highlight', 'label'],
                    outputs: ['interaction']
                },] }
    ];
    exports.DsHeaderAction.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeaderAction = __decorate([
        ProxyCmp({
            inputs: ['highlight', 'label']
        })
    ], exports.DsHeaderAction);
    exports.DsHeaderActionList = /** @class */ (function () {
        function DsHeaderActionList(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsHeaderActionList;
    }());
    exports.DsHeaderActionList.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-header-action-list',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'open']
                },] }
    ];
    exports.DsHeaderActionList.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeaderActionList = __decorate([
        ProxyCmp({
            inputs: ['label', 'open']
        })
    ], exports.DsHeaderActionList);
    exports.DsHeaderCustomer = /** @class */ (function () {
        function DsHeaderCustomer(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsHeaderCustomer;
    }());
    exports.DsHeaderCustomer.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-header-customer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['name', 'typelabel']
                },] }
    ];
    exports.DsHeaderCustomer.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeaderCustomer = __decorate([
        ProxyCmp({
            inputs: ['name', 'typelabel']
        })
    ], exports.DsHeaderCustomer);
    exports.DsHeaderUser = /** @class */ (function () {
        function DsHeaderUser(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['signOut', 'usernameInteraction']);
        }
        return DsHeaderUser;
    }());
    exports.DsHeaderUser.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-header-user',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['imageurl', 'name', 'usernameinteractable'],
                    outputs: ['signOut', 'usernameInteraction']
                },] }
    ];
    exports.DsHeaderUser.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeaderUser = __decorate([
        ProxyCmp({
            inputs: ['imageurl', 'name', 'usernameinteractable']
        })
    ], exports.DsHeaderUser);
    exports.DsHeroImage = /** @class */ (function () {
        function DsHeroImage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsHeroImage;
    }());
    exports.DsHeroImage.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-hero-image',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['url']
                },] }
    ];
    exports.DsHeroImage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsHeroImage = __decorate([
        ProxyCmp({
            inputs: ['url']
        })
    ], exports.DsHeroImage);
    var DsHr = /** @class */ (function () {
        function DsHr(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsHr;
    }());
    DsHr.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-hr',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsHr.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsIcon = /** @class */ (function () {
        function DsIcon(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsIcon;
    }());
    exports.DsIcon.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-icon',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'icon', 'size']
                },] }
    ];
    exports.DsIcon.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsIcon = __decorate([
        ProxyCmp({
            inputs: ['color', 'icon', 'size']
        })
    ], exports.DsIcon);
    exports.DsIconButton = /** @class */ (function () {
        function DsIconButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsIconButton;
    }());
    exports.DsIconButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-icon-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable']
                },] }
    ];
    exports.DsIconButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsIconButton = __decorate([
        ProxyCmp({
            inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable'],
            methods: ['focusControl']
        })
    ], exports.DsIconButton);
    exports.DsInfo = /** @class */ (function () {
        function DsInfo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsInfo;
    }());
    exports.DsInfo.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-info',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['hidebutton', 'popupvisible', 'size']
                },] }
    ];
    exports.DsInfo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsInfo = __decorate([
        ProxyCmp({
            inputs: ['hidebutton', 'popupvisible', 'size'],
            methods: ['setModal']
        })
    ], exports.DsInfo);
    exports.DsLink = /** @class */ (function () {
        function DsLink(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsLink;
    }());
    exports.DsLink.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-link',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['target', 'url']
                },] }
    ];
    exports.DsLink.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsLink = __decorate([
        ProxyCmp({
            inputs: ['target', 'url']
        })
    ], exports.DsLink);
    exports.DsLogo = /** @class */ (function () {
        function DsLogo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsLogo;
    }());
    exports.DsLogo.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-logo',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['type']
                },] }
    ];
    exports.DsLogo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsLogo = __decorate([
        ProxyCmp({
            inputs: ['type']
        })
    ], exports.DsLogo);
    exports.DsModal = /** @class */ (function () {
        function DsModal(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
        }
        return DsModal;
    }());
    exports.DsModal.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-modal',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible'],
                    outputs: ['modalOpened', 'modalClosed']
                },] }
    ];
    exports.DsModal.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsModal = __decorate([
        ProxyCmp({
            inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible']
        })
    ], exports.DsModal);
    var DsNavigatedContent = /** @class */ (function () {
        function DsNavigatedContent(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsNavigatedContent;
    }());
    DsNavigatedContent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-navigated-content',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsNavigatedContent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsNavigatedContentMenu = /** @class */ (function () {
        function DsNavigatedContentMenu(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['navigate']);
        }
        return DsNavigatedContentMenu;
    }());
    exports.DsNavigatedContentMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-navigated-content-menu',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['active'],
                    outputs: ['navigate']
                },] }
    ];
    exports.DsNavigatedContentMenu.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsNavigatedContentMenu = __decorate([
        ProxyCmp({
            inputs: ['active']
        })
    ], exports.DsNavigatedContentMenu);
    exports.DsNavigatedContentMenuItem = /** @class */ (function () {
        function DsNavigatedContentMenuItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsNavigatedContentMenuItem;
    }());
    exports.DsNavigatedContentMenuItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-navigated-content-menu-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['error', 'label', 'success', 'value', 'warning']
                },] }
    ];
    exports.DsNavigatedContentMenuItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsNavigatedContentMenuItem = __decorate([
        ProxyCmp({
            inputs: ['error', 'label', 'success', 'value', 'warning']
        })
    ], exports.DsNavigatedContentMenuItem);
    exports.DsNotificationToast = /** @class */ (function () {
        function DsNotificationToast(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['closeNotification']);
        }
        return DsNotificationToast;
    }());
    exports.DsNotificationToast.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-notification-toast',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                    outputs: ['closeNotification']
                },] }
    ];
    exports.DsNotificationToast.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsNotificationToast = __decorate([
        ProxyCmp({
            inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
        })
    ], exports.DsNotificationToast);
    exports.DsNumberInput = /** @class */ (function () {
        function DsNumberInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DsNumberInput;
    }());
    exports.DsNumberInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-number-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DsNumberInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsNumberInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsNumberInput);
    var DsPage = /** @class */ (function () {
        function DsPage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsPage;
    }());
    DsPage.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-page',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsPage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsPaginator = /** @class */ (function () {
        function DsPaginator(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['pageChanged']);
        }
        return DsPaginator;
    }());
    exports.DsPaginator.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-paginator',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['count', 'current', 'range'],
                    outputs: ['pageChanged']
                },] }
    ];
    exports.DsPaginator.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsPaginator = __decorate([
        ProxyCmp({
            inputs: ['count', 'current', 'range']
        })
    ], exports.DsPaginator);
    exports.DsPlaceholder = /** @class */ (function () {
        function DsPlaceholder(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsPlaceholder;
    }());
    exports.DsPlaceholder.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-placeholder',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['box', 'card']
                },] }
    ];
    exports.DsPlaceholder.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsPlaceholder = __decorate([
        ProxyCmp({
            inputs: ['box', 'card']
        })
    ], exports.DsPlaceholder);
    exports.DsRadioButton = /** @class */ (function () {
        function DsRadioButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsRadioButton;
    }());
    exports.DsRadioButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-radio-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'label', 'value']
                },] }
    ];
    exports.DsRadioButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsRadioButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'label', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsRadioButton);
    exports.DsRadioButtonGroup = /** @class */ (function () {
        function DsRadioButtonGroup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DsRadioButtonGroup;
    }());
    exports.DsRadioButtonGroup.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-radio-button-group',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DsRadioButtonGroup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsRadioButtonGroup = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsRadioButtonGroup);
    exports.DsSearch = /** @class */ (function () {
        function DsSearch(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['search', 'selectSearch', 'valueChange', 'valueComplete']);
        }
        return DsSearch;
    }());
    exports.DsSearch.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-search',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
                    outputs: ['search', 'selectSearch', 'valueChange', 'valueComplete']
                },] }
    ];
    exports.DsSearch.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsSearch = __decorate([
        ProxyCmp({
            inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
            methods: ['focusControl']
        })
    ], exports.DsSearch);
    exports.DsSlider = /** @class */ (function () {
        function DsSlider(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DsSlider;
    }());
    exports.DsSlider.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-slider',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DsSlider.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsSlider = __decorate([
        ProxyCmp({
            inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value']
        })
    ], exports.DsSlider);
    exports.DsSpinner = /** @class */ (function () {
        function DsSpinner(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsSpinner;
    }());
    exports.DsSpinner.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-spinner',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['size', 'theme']
                },] }
    ];
    exports.DsSpinner.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsSpinner = __decorate([
        ProxyCmp({
            inputs: ['size', 'theme']
        })
    ], exports.DsSpinner);
    exports.DsTable = /** @class */ (function () {
        function DsTable(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['tableStateChanged', 'rowsSelected']);
        }
        return DsTable;
    }());
    exports.DsTable.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view'],
                    outputs: ['tableStateChanged', 'rowsSelected']
                },] }
    ];
    exports.DsTable.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTable = __decorate([
        ProxyCmp({
            inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view']
        })
    ], exports.DsTable);
    exports.DsTableCell = /** @class */ (function () {
        function DsTableCell(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTableCell;
    }());
    exports.DsTableCell.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table-cell',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'type', 'value']
                },] }
    ];
    exports.DsTableCell.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTableCell = __decorate([
        ProxyCmp({
            inputs: ['color', 'type', 'value']
        })
    ], exports.DsTableCell);
    var DsTableFooter = /** @class */ (function () {
        function DsTableFooter(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTableFooter;
    }());
    DsTableFooter.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table-footer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsTableFooter.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DsTableHeader = /** @class */ (function () {
        function DsTableHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTableHeader;
    }());
    DsTableHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DsTableHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTableHeaderItem = /** @class */ (function () {
        function DsTableHeaderItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTableHeaderItem;
    }());
    exports.DsTableHeaderItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table-header-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
                },] }
    ];
    exports.DsTableHeaderItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTableHeaderItem = __decorate([
        ProxyCmp({
            inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
        })
    ], exports.DsTableHeaderItem);
    exports.DsTableRow = /** @class */ (function () {
        function DsTableRow(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['rowSelected']);
        }
        return DsTableRow;
    }());
    exports.DsTableRow.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-table-row',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['rowid', 'selected'],
                    outputs: ['rowSelected']
                },] }
    ];
    exports.DsTableRow.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTableRow = __decorate([
        ProxyCmp({
            inputs: ['rowid', 'selected']
        })
    ], exports.DsTableRow);
    exports.DsText = /** @class */ (function () {
        function DsText(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsText;
    }());
    exports.DsText.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-text',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'screensize', 'type']
                },] }
    ];
    exports.DsText.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsText = __decorate([
        ProxyCmp({
            inputs: ['color', 'screensize', 'type']
        })
    ], exports.DsText);
    exports.DsTextArea = /** @class */ (function () {
        function DsTextArea(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DsTextArea;
    }());
    exports.DsTextArea.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-text-area',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DsTextArea.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTextArea = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsTextArea);
    exports.DsTextButton = /** @class */ (function () {
        function DsTextButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTextButton;
    }());
    exports.DsTextButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-text-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'disabled', 'screensize', 'unfocusable']
                },] }
    ];
    exports.DsTextButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTextButton = __decorate([
        ProxyCmp({
            inputs: ['color', 'disabled', 'screensize', 'unfocusable'],
            methods: ['focusControl']
        })
    ], exports.DsTextButton);
    exports.DsTextInput = /** @class */ (function () {
        function DsTextInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']);
        }
        return DsTextInput;
    }());
    exports.DsTextInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-text-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
                    outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']
                },] }
    ];
    exports.DsTextInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTextInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsTextInput);
    exports.DsTextList = /** @class */ (function () {
        function DsTextList(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsTextList;
    }());
    exports.DsTextList.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-text-list',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['type']
                },] }
    ];
    exports.DsTextList.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsTextList = __decorate([
        ProxyCmp({
            inputs: ['type']
        })
    ], exports.DsTextList);
    exports.DsUserAvatar = /** @class */ (function () {
        function DsUserAvatar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsUserAvatar;
    }());
    exports.DsUserAvatar.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-user-avatar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['imageurl', 'initials', 'size']
                },] }
    ];
    exports.DsUserAvatar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsUserAvatar = __decorate([
        ProxyCmp({
            inputs: ['imageurl', 'initials', 'size']
        })
    ], exports.DsUserAvatar);
    exports.DsWorkflowProgress = /** @class */ (function () {
        function DsWorkflowProgress(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsWorkflowProgress;
    }());
    exports.DsWorkflowProgress.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-workflow-progress',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['progress']
                },] }
    ];
    exports.DsWorkflowProgress.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsWorkflowProgress = __decorate([
        ProxyCmp({
            inputs: ['progress']
        })
    ], exports.DsWorkflowProgress);
    exports.DsWrappedLayout = /** @class */ (function () {
        function DsWrappedLayout(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DsWrappedLayout;
    }());
    exports.DsWrappedLayout.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-wrapped-layout',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'size']
                },] }
    ];
    exports.DsWrappedLayout.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsWrappedLayout = __decorate([
        ProxyCmp({
            inputs: ['align', 'size']
        })
    ], exports.DsWrappedLayout);
    exports.DsYesNo = /** @class */ (function () {
        function DsYesNo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DsYesNo;
    }());
    exports.DsYesNo.decorators = [
        { type: core.Component, args: [{
                    selector: 'ds-yes-no',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DsYesNo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DsYesNo = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
            methods: ['focusControl']
        })
    ], exports.DsYesNo);
    exports.DxAccordion = /** @class */ (function () {
        function DxAccordion(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxAccordion;
    }());
    exports.DxAccordion.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-accordion',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'open']
                },] }
    ];
    exports.DxAccordion.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxAccordion = __decorate([
        ProxyCmp({
            inputs: ['label', 'open']
        })
    ], exports.DxAccordion);
    var DxAccordionGroup = /** @class */ (function () {
        function DxAccordionGroup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxAccordionGroup;
    }());
    DxAccordionGroup.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-accordion-group',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxAccordionGroup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxAlert = /** @class */ (function () {
        function DxAlert(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxAlert;
    }());
    exports.DxAlert.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-alert',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
                },] }
    ];
    exports.DxAlert.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxAlert = __decorate([
        ProxyCmp({
            inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
        })
    ], exports.DxAlert);
    exports.DxAnnouncementBar = /** @class */ (function () {
        function DxAnnouncementBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxAnnouncementBar;
    }());
    exports.DxAnnouncementBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-announcement-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'icon', 'iconcolor']
                },] }
    ];
    exports.DxAnnouncementBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxAnnouncementBar = __decorate([
        ProxyCmp({
            inputs: ['color', 'icon', 'iconcolor']
        })
    ], exports.DxAnnouncementBar);
    var DxApp = /** @class */ (function () {
        function DxApp(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxApp;
    }());
    DxApp.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-app',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxApp.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DxBreadcrumb = /** @class */ (function () {
        function DxBreadcrumb(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['navigateHome', 'navigate']);
        }
        return DxBreadcrumb;
    }());
    DxBreadcrumb.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-breadcrumb',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    outputs: ['navigateHome', 'navigate']
                },] }
    ];
    DxBreadcrumb.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxBreadcrumbItem = /** @class */ (function () {
        function DxBreadcrumbItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxBreadcrumbItem;
    }());
    exports.DxBreadcrumbItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-breadcrumb-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'value']
                },] }
    ];
    exports.DxBreadcrumbItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxBreadcrumbItem = __decorate([
        ProxyCmp({
            inputs: ['label', 'value']
        })
    ], exports.DxBreadcrumbItem);
    exports.DxButton = /** @class */ (function () {
        function DxButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxButton;
    }());
    exports.DxButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable']
                },] }
    ];
    exports.DxButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable'],
            methods: ['focusControl']
        })
    ], exports.DxButton);
    var DxCard = /** @class */ (function () {
        function DxCard(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxCard;
    }());
    DxCard.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-card',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxCard.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCardCollapsable = /** @class */ (function () {
        function DxCardCollapsable(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxCardCollapsable;
    }());
    exports.DxCardCollapsable.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-card-collapsable',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['open']
                },] }
    ];
    exports.DxCardCollapsable.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCardCollapsable = __decorate([
        ProxyCmp({
            inputs: ['open']
        })
    ], exports.DxCardCollapsable);
    var DxCardContent = /** @class */ (function () {
        function DxCardContent(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxCardContent;
    }());
    DxCardContent.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-card-content',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxCardContent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCardHeader = /** @class */ (function () {
        function DxCardHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxCardHeader;
    }());
    exports.DxCardHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-card-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['icon', 'iconcolor', 'label']
                },] }
    ];
    exports.DxCardHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCardHeader = __decorate([
        ProxyCmp({
            inputs: ['icon', 'iconcolor', 'label']
        })
    ], exports.DxCardHeader);
    exports.DxCardImage = /** @class */ (function () {
        function DxCardImage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxCardImage;
    }());
    exports.DxCardImage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-card-image',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
                },] }
    ];
    exports.DxCardImage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCardImage = __decorate([
        ProxyCmp({
            inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
        })
    ], exports.DxCardImage);
    exports.DxChartSample = /** @class */ (function () {
        function DxChartSample(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DxChartSample;
    }());
    exports.DxChartSample.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-chart-sample',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DxChartSample.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxChartSample = __decorate([
        ProxyCmp({
            inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
            methods: ['toChartSample']
        })
    ], exports.DxChartSample);
    exports.DxCheckbox = /** @class */ (function () {
        function DxCheckbox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['checkedChange']);
        }
        return DxCheckbox;
    }());
    exports.DxCheckbox.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-checkbox',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
                    outputs: ['checkedChange']
                },] }
    ];
    exports.DxCheckbox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCheckbox = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
            methods: ['focusControl']
        })
    ], exports.DxCheckbox);
    exports.DxCombobox = /** @class */ (function () {
        function DxCombobox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']);
        }
        return DxCombobox;
    }());
    exports.DxCombobox.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-combobox',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
                    outputs: ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']
                },] }
    ];
    exports.DxCombobox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxCombobox = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxCombobox);
    exports.DxContainer = /** @class */ (function () {
        function DxContainer(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxContainer;
    }());
    exports.DxContainer.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-container',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'type']
                },] }
    ];
    exports.DxContainer.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxContainer = __decorate([
        ProxyCmp({
            inputs: ['color', 'type']
        })
    ], exports.DxContainer);
    exports.DxDateInput = /** @class */ (function () {
        function DxDateInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
        }
        return DxDateInput;
    }());
    exports.DxDateInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-date-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
                    outputs: ['valueChange', 'valueComplete', 'errorFound']
                },] }
    ];
    exports.DxDateInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxDateInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxDateInput);
    exports.DxDateRange = /** @class */ (function () {
        function DxDateRange(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxDateRange;
    }());
    exports.DxDateRange.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-date-range',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['max', 'min', 'mode', 'value']
                },] }
    ];
    exports.DxDateRange.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxDateRange = __decorate([
        ProxyCmp({
            inputs: ['max', 'min', 'mode', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxDateRange);
    exports.DxDonutChart = /** @class */ (function () {
        function DxDonutChart(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['segmentSelect']);
        }
        return DxDonutChart;
    }());
    exports.DxDonutChart.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-donut-chart',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
                    outputs: ['segmentSelect']
                },] }
    ];
    exports.DxDonutChart.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxDonutChart = __decorate([
        ProxyCmp({
            inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
            methods: ['update']
        })
    ], exports.DxDonutChart);
    exports.DxDropdown = /** @class */ (function () {
        function DxDropdown(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DxDropdown;
    }());
    exports.DxDropdown.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-dropdown',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DxDropdown.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxDropdown = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxDropdown);
    exports.DxDropdownOption = /** @class */ (function () {
        function DxDropdownOption(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxDropdownOption;
    }());
    exports.DxDropdownOption.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-dropdown-option',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['icon', 'label', 'selected', 'value']
                },] }
    ];
    exports.DxDropdownOption.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxDropdownOption = __decorate([
        ProxyCmp({
            inputs: ['icon', 'label', 'selected', 'value']
        })
    ], exports.DxDropdownOption);
    exports.DxErrorMessage = /** @class */ (function () {
        function DxErrorMessage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['forceUpdateOnChange']);
        }
        return DxErrorMessage;
    }());
    exports.DxErrorMessage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-error-message',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['lines'],
                    outputs: ['forceUpdateOnChange']
                },] }
    ];
    exports.DxErrorMessage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxErrorMessage = __decorate([
        ProxyCmp({
            inputs: ['lines']
        })
    ], exports.DxErrorMessage);
    exports.DxErrorPage = /** @class */ (function () {
        function DxErrorPage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['action']);
        }
        return DxErrorPage;
    }());
    exports.DxErrorPage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-error-page',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['actiondescription', 'actionlabel', 'description', 'reason'],
                    outputs: ['action']
                },] }
    ];
    exports.DxErrorPage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxErrorPage = __decorate([
        ProxyCmp({
            inputs: ['actiondescription', 'actionlabel', 'description', 'reason']
        })
    ], exports.DxErrorPage);
    var DxExpanded = /** @class */ (function () {
        function DxExpanded(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxExpanded;
    }());
    DxExpanded.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-expanded',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxExpanded.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DxFdOutlineBox = /** @class */ (function () {
        function DxFdOutlineBox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxFdOutlineBox;
    }());
    DxFdOutlineBox.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-fd-outline-box',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxFdOutlineBox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxFdSeparator = /** @class */ (function () {
        function DxFdSeparator(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxFdSeparator;
    }());
    exports.DxFdSeparator.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-fd-separator',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['fromcolor', 'tocolor']
                },] }
    ];
    exports.DxFdSeparator.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxFdSeparator = __decorate([
        ProxyCmp({
            inputs: ['fromcolor', 'tocolor']
        })
    ], exports.DxFdSeparator);
    exports.DxFooter = /** @class */ (function () {
        function DxFooter(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxFooter;
    }());
    exports.DxFooter.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-footer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['fromcolor']
                },] }
    ];
    exports.DxFooter.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxFooter = __decorate([
        ProxyCmp({
            inputs: ['fromcolor']
        })
    ], exports.DxFooter);
    exports.DxFormWrapper = /** @class */ (function () {
        function DxFormWrapper(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxFormWrapper;
    }());
    exports.DxFormWrapper.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-form-wrapper',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['errormessage', 'kisynced', 'label', 'required']
                },] }
    ];
    exports.DxFormWrapper.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxFormWrapper = __decorate([
        ProxyCmp({
            inputs: ['errormessage', 'kisynced', 'label', 'required']
        })
    ], exports.DxFormWrapper);
    exports.DxGoldenStage = /** @class */ (function () {
        function DxGoldenStage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxGoldenStage;
    }());
    exports.DxGoldenStage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-golden-stage',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
                },] }
    ];
    exports.DxGoldenStage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxGoldenStage = __decorate([
        ProxyCmp({
            inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
        })
    ], exports.DxGoldenStage);
    exports.DxGrid = /** @class */ (function () {
        function DxGrid(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxGrid;
    }());
    exports.DxGrid.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-grid',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
                },] }
    ];
    exports.DxGrid.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxGrid = __decorate([
        ProxyCmp({
            inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
        })
    ], exports.DxGrid);
    exports.DxHeader = /** @class */ (function () {
        function DxHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['navigateHome']);
        }
        return DxHeader;
    }());
    exports.DxHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme'],
                    outputs: ['navigateHome']
                },] }
    ];
    exports.DxHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeader = __decorate([
        ProxyCmp({
            inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme']
        })
    ], exports.DxHeader);
    exports.DxHeaderAppFavorites = /** @class */ (function () {
        function DxHeaderAppFavorites(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']);
        }
        return DxHeaderAppFavorites;
    }());
    exports.DxHeaderAppFavorites.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-app-favorites',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['notifications', 'notificationstheme', 'priority'],
                    outputs: ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']
                },] }
    ];
    exports.DxHeaderAppFavorites.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderAppFavorites = __decorate([
        ProxyCmp({
            inputs: ['notifications', 'notificationstheme', 'priority']
        })
    ], exports.DxHeaderAppFavorites);
    exports.DxHeaderAppFavoritesApp = /** @class */ (function () {
        function DxHeaderAppFavoritesApp(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxHeaderAppFavoritesApp;
    }());
    exports.DxHeaderAppFavoritesApp.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-app-favorites-app',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['appid', 'appname', 'icon']
                },] }
    ];
    exports.DxHeaderAppFavoritesApp.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderAppFavoritesApp = __decorate([
        ProxyCmp({
            inputs: ['appid', 'appname', 'icon'],
            methods: ['toAppFavoritesApp']
        })
    ], exports.DxHeaderAppFavoritesApp);
    exports.DxHeaderMenuCustom = /** @class */ (function () {
        function DxHeaderMenuCustom(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxHeaderMenuCustom;
    }());
    exports.DxHeaderMenuCustom.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-menu-custom',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['priority']
                },] }
    ];
    exports.DxHeaderMenuCustom.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderMenuCustom = __decorate([
        ProxyCmp({
            inputs: ['priority']
        })
    ], exports.DxHeaderMenuCustom);
    exports.DxHeaderMenuGroup = /** @class */ (function () {
        function DxHeaderMenuGroup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxHeaderMenuGroup;
    }());
    exports.DxHeaderMenuGroup.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-menu-group',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['priority']
                },] }
    ];
    exports.DxHeaderMenuGroup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderMenuGroup = __decorate([
        ProxyCmp({
            inputs: ['priority']
        })
    ], exports.DxHeaderMenuGroup);
    exports.DxHeaderMenuItem = /** @class */ (function () {
        function DxHeaderMenuItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['menuInteraction']);
        }
        return DxHeaderMenuItem;
    }());
    exports.DxHeaderMenuItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-menu-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority'],
                    outputs: ['menuInteraction']
                },] }
    ];
    exports.DxHeaderMenuItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderMenuItem = __decorate([
        ProxyCmp({
            inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority']
        })
    ], exports.DxHeaderMenuItem);
    exports.DxHeaderMenuLink = /** @class */ (function () {
        function DxHeaderMenuLink(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['menuInteraction']);
        }
        return DxHeaderMenuLink;
    }());
    exports.DxHeaderMenuLink.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-menu-link',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['connectednavigationvalue', 'label', 'priority', 'selected'],
                    outputs: ['menuInteraction']
                },] }
    ];
    exports.DxHeaderMenuLink.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderMenuLink = __decorate([
        ProxyCmp({
            inputs: ['connectednavigationvalue', 'label', 'priority', 'selected']
        })
    ], exports.DxHeaderMenuLink);
    exports.DxHeaderNavigation = /** @class */ (function () {
        function DxHeaderNavigation(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['menuInteraction']);
        }
        return DxHeaderNavigation;
    }());
    exports.DxHeaderNavigation.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-navigation',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autoclose', 'notification', 'notificationstheme'],
                    outputs: ['menuInteraction']
                },] }
    ];
    exports.DxHeaderNavigation.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderNavigation = __decorate([
        ProxyCmp({
            inputs: ['autoclose', 'notification', 'notificationstheme']
        })
    ], exports.DxHeaderNavigation);
    exports.DxHeaderNavigationItem = /** @class */ (function () {
        function DxHeaderNavigationItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['interaction']);
        }
        return DxHeaderNavigationItem;
    }());
    exports.DxHeaderNavigationItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-navigation-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'size', 'value'],
                    outputs: ['interaction']
                },] }
    ];
    exports.DxHeaderNavigationItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderNavigationItem = __decorate([
        ProxyCmp({
            inputs: ['label', 'size', 'value']
        })
    ], exports.DxHeaderNavigationItem);
    exports.DxHeaderUser = /** @class */ (function () {
        function DxHeaderUser(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['signOut', 'accountInteraction', 'menuInteraction']);
        }
        return DxHeaderUser;
    }());
    exports.DxHeaderUser.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-header-user',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority'],
                    outputs: ['signOut', 'accountInteraction', 'menuInteraction']
                },] }
    ];
    exports.DxHeaderUser.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeaderUser = __decorate([
        ProxyCmp({
            inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority']
        })
    ], exports.DxHeaderUser);
    exports.DxHeroImage = /** @class */ (function () {
        function DxHeroImage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxHeroImage;
    }());
    exports.DxHeroImage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-hero-image',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
                },] }
    ];
    exports.DxHeroImage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxHeroImage = __decorate([
        ProxyCmp({
            inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
        })
    ], exports.DxHeroImage);
    exports.DxIcon = /** @class */ (function () {
        function DxIcon(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxIcon;
    }());
    exports.DxIcon.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-icon',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'icon', 'size']
                },] }
    ];
    exports.DxIcon.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxIcon = __decorate([
        ProxyCmp({
            inputs: ['color', 'icon', 'size']
        })
    ], exports.DxIcon);
    exports.DxInfo = /** @class */ (function () {
        function DxInfo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxInfo;
    }());
    exports.DxInfo.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-info',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['hidebutton', 'size']
                },] }
    ];
    exports.DxInfo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxInfo = __decorate([
        ProxyCmp({
            inputs: ['hidebutton', 'size'],
            methods: ['setModal']
        })
    ], exports.DxInfo);
    exports.DxLegend = /** @class */ (function () {
        function DxLegend(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxLegend;
    }());
    exports.DxLegend.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-legend',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['kisynchint', 'requiredhint']
                },] }
    ];
    exports.DxLegend.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxLegend = __decorate([
        ProxyCmp({
            inputs: ['kisynchint', 'requiredhint']
        })
    ], exports.DxLegend);
    exports.DxLink = /** @class */ (function () {
        function DxLink(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxLink;
    }());
    exports.DxLink.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-link',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['target', 'url']
                },] }
    ];
    exports.DxLink.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxLink = __decorate([
        ProxyCmp({
            inputs: ['target', 'url']
        })
    ], exports.DxLink);
    exports.DxList = /** @class */ (function () {
        function DxList(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxList;
    }());
    exports.DxList.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-list',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['contentbelow', 'size', 'width']
                },] }
    ];
    exports.DxList.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxList = __decorate([
        ProxyCmp({
            inputs: ['contentbelow', 'size', 'width']
        })
    ], exports.DxList);
    exports.DxListItem = /** @class */ (function () {
        function DxListItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxListItem;
    }());
    exports.DxListItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-list-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value']
                },] }
    ];
    exports.DxListItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxListItem = __decorate([
        ProxyCmp({
            inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value'],
            methods: ['getRadioElement', 'focusControl']
        })
    ], exports.DxListItem);
    exports.DxLogo = /** @class */ (function () {
        function DxLogo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxLogo;
    }());
    exports.DxLogo.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-logo',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['type']
                },] }
    ];
    exports.DxLogo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxLogo = __decorate([
        ProxyCmp({
            inputs: ['type']
        })
    ], exports.DxLogo);
    exports.DxMediaQueryValue = /** @class */ (function () {
        function DxMediaQueryValue(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxMediaQueryValue;
    }());
    exports.DxMediaQueryValue.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-media-query-value',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
                },] }
    ];
    exports.DxMediaQueryValue.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxMediaQueryValue = __decorate([
        ProxyCmp({
            inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
        })
    ], exports.DxMediaQueryValue);
    exports.DxModal = /** @class */ (function () {
        function DxModal(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
        }
        return DxModal;
    }());
    exports.DxModal.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-modal',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['height', 'label', 'visible', 'width'],
                    outputs: ['modalOpened', 'modalClosed']
                },] }
    ];
    exports.DxModal.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxModal = __decorate([
        ProxyCmp({
            inputs: ['height', 'label', 'visible', 'width']
        })
    ], exports.DxModal);
    exports.DxMultiDropdown = /** @class */ (function () {
        function DxMultiDropdown(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DxMultiDropdown;
    }());
    exports.DxMultiDropdown.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-multi-dropdown',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DxMultiDropdown.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxMultiDropdown = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
            methods: ['focusControl']
        })
    ], exports.DxMultiDropdown);
    exports.DxNotificationBar = /** @class */ (function () {
        function DxNotificationBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['closeNotification']);
        }
        return DxNotificationBar;
    }());
    exports.DxNotificationBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-notification-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['visible'],
                    outputs: ['closeNotification']
                },] }
    ];
    exports.DxNotificationBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxNotificationBar = __decorate([
        ProxyCmp({
            inputs: ['visible']
        })
    ], exports.DxNotificationBar);
    exports.DxNotificationToast = /** @class */ (function () {
        function DxNotificationToast(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['closeNotification']);
        }
        return DxNotificationToast;
    }());
    exports.DxNotificationToast.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-notification-toast',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                    outputs: ['closeNotification']
                },] }
    ];
    exports.DxNotificationToast.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxNotificationToast = __decorate([
        ProxyCmp({
            inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
        })
    ], exports.DxNotificationToast);
    exports.DxNumberInput = /** @class */ (function () {
        function DxNumberInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DxNumberInput;
    }());
    exports.DxNumberInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-number-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DxNumberInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxNumberInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxNumberInput);
    exports.DxNumberPaginator = /** @class */ (function () {
        function DxNumberPaginator(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['pageChanged']);
        }
        return DxNumberPaginator;
    }());
    exports.DxNumberPaginator.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-number-paginator',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['count', 'current'],
                    outputs: ['pageChanged']
                },] }
    ];
    exports.DxNumberPaginator.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxNumberPaginator = __decorate([
        ProxyCmp({
            inputs: ['count', 'current']
        })
    ], exports.DxNumberPaginator);
    exports.DxNumberPicker = /** @class */ (function () {
        function DxNumberPicker(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DxNumberPicker;
    }());
    exports.DxNumberPicker.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-number-picker',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'value', 'values'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DxNumberPicker.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxNumberPicker = __decorate([
        ProxyCmp({
            inputs: ['align', 'value', 'values']
        })
    ], exports.DxNumberPicker);
    exports.DxOverflowMenu = /** @class */ (function () {
        function DxOverflowMenu(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['selection', 'listOpenChange']);
        }
        return DxOverflowMenu;
    }());
    exports.DxOverflowMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-overflow-menu',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode'],
                    outputs: ['selection', 'listOpenChange']
                },] }
    ];
    exports.DxOverflowMenu.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxOverflowMenu = __decorate([
        ProxyCmp({
            inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode']
        })
    ], exports.DxOverflowMenu);
    exports.DxOverflowMenuItem = /** @class */ (function () {
        function DxOverflowMenuItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxOverflowMenuItem;
    }());
    exports.DxOverflowMenuItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-overflow-menu-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['icon', 'label', 'selected', 'value']
                },] }
    ];
    exports.DxOverflowMenuItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxOverflowMenuItem = __decorate([
        ProxyCmp({
            inputs: ['icon', 'label', 'selected', 'value']
        })
    ], exports.DxOverflowMenuItem);
    exports.DxPaginator = /** @class */ (function () {
        function DxPaginator(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['pageChanged']);
        }
        return DxPaginator;
    }());
    exports.DxPaginator.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-paginator',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['count', 'current'],
                    outputs: ['pageChanged']
                },] }
    ];
    exports.DxPaginator.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxPaginator = __decorate([
        ProxyCmp({
            inputs: ['count', 'current']
        })
    ], exports.DxPaginator);
    exports.DxPlaceholder = /** @class */ (function () {
        function DxPlaceholder(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxPlaceholder;
    }());
    exports.DxPlaceholder.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-placeholder',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['box', 'card']
                },] }
    ];
    exports.DxPlaceholder.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxPlaceholder = __decorate([
        ProxyCmp({
            inputs: ['box', 'card']
        })
    ], exports.DxPlaceholder);
    exports.DxProcessHeader = /** @class */ (function () {
        function DxProcessHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxProcessHeader;
    }());
    exports.DxProcessHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-process-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['headline']
                },] }
    ];
    exports.DxProcessHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxProcessHeader = __decorate([
        ProxyCmp({
            inputs: ['headline']
        })
    ], exports.DxProcessHeader);
    exports.DxRadioButton = /** @class */ (function () {
        function DxRadioButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxRadioButton;
    }());
    exports.DxRadioButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-radio-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'label', 'value']
                },] }
    ];
    exports.DxRadioButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxRadioButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'label', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxRadioButton);
    exports.DxRadioButtonGroup = /** @class */ (function () {
        function DxRadioButtonGroup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DxRadioButtonGroup;
    }());
    exports.DxRadioButtonGroup.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-radio-button-group',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DxRadioButtonGroup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxRadioButtonGroup = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
            methods: ['focusControl', 'connectRadioButton', 'disconnectRadioButton']
        })
    ], exports.DxRadioButtonGroup);
    exports.DxRepresentativeInfo = /** @class */ (function () {
        function DxRepresentativeInfo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxRepresentativeInfo;
    }());
    exports.DxRepresentativeInfo.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-representative-info',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['name', 'type']
                },] }
    ];
    exports.DxRepresentativeInfo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxRepresentativeInfo = __decorate([
        ProxyCmp({
            inputs: ['name', 'type']
        })
    ], exports.DxRepresentativeInfo);
    var DxSidebarContent = /** @class */ (function () {
        function DxSidebarContent(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSidebarContent;
    }());
    DxSidebarContent.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-sidebar-content',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxSidebarContent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSiteNavigation = /** @class */ (function () {
        function DxSiteNavigation(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSiteNavigation;
    }());
    exports.DxSiteNavigation.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-site-navigation',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['expandedlayoutat']
                },] }
    ];
    exports.DxSiteNavigation.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSiteNavigation = __decorate([
        ProxyCmp({
            inputs: ['expandedlayoutat']
        })
    ], exports.DxSiteNavigation);
    exports.DxSiteNavigationMenu = /** @class */ (function () {
        function DxSiteNavigationMenu(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['navigate']);
        }
        return DxSiteNavigationMenu;
    }());
    exports.DxSiteNavigationMenu.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-site-navigation-menu',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autonavigation', 'selectedvalue', 'titlestring'],
                    outputs: ['navigate']
                },] }
    ];
    exports.DxSiteNavigationMenu.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSiteNavigationMenu = __decorate([
        ProxyCmp({
            inputs: ['autonavigation', 'selectedvalue', 'titlestring']
        })
    ], exports.DxSiteNavigationMenu);
    exports.DxSiteNavigationMenuItem = /** @class */ (function () {
        function DxSiteNavigationMenuItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSiteNavigationMenuItem;
    }());
    exports.DxSiteNavigationMenuItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-site-navigation-menu-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'state', 'value']
                },] }
    ];
    exports.DxSiteNavigationMenuItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSiteNavigationMenuItem = __decorate([
        ProxyCmp({
            inputs: ['label', 'state', 'value']
        })
    ], exports.DxSiteNavigationMenuItem);
    exports.DxSiteNavigationScope = /** @class */ (function () {
        function DxSiteNavigationScope(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSiteNavigationScope;
    }());
    exports.DxSiteNavigationScope.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-site-navigation-scope',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['value']
                },] }
    ];
    exports.DxSiteNavigationScope.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSiteNavigationScope = __decorate([
        ProxyCmp({
            inputs: ['value']
        })
    ], exports.DxSiteNavigationScope);
    exports.DxSlideShow = /** @class */ (function () {
        function DxSlideShow(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['pageChange']);
        }
        return DxSlideShow;
    }());
    exports.DxSlideShow.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-slide-show',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
                    outputs: ['pageChange']
                },] }
    ];
    exports.DxSlideShow.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSlideShow = __decorate([
        ProxyCmp({
            inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
            methods: ['setPage']
        })
    ], exports.DxSlideShow);
    exports.DxSlider = /** @class */ (function () {
        function DxSlider(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DxSlider;
    }());
    exports.DxSlider.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-slider',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DxSlider.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSlider = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value']
        })
    ], exports.DxSlider);
    exports.DxSort = /** @class */ (function () {
        function DxSort(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['sort']);
        }
        return DxSort;
    }());
    exports.DxSort.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-sort',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['sortable'],
                    outputs: ['sort']
                },] }
    ];
    exports.DxSort.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSort = __decorate([
        ProxyCmp({
            inputs: ['sortable']
        })
    ], exports.DxSort);
    exports.DxSortItem = /** @class */ (function () {
        function DxSortItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSortItem;
    }());
    exports.DxSortItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-sort-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['value']
                },] }
    ];
    exports.DxSortItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSortItem = __decorate([
        ProxyCmp({
            inputs: ['value']
        })
    ], exports.DxSortItem);
    exports.DxSpacer = /** @class */ (function () {
        function DxSpacer(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSpacer;
    }());
    exports.DxSpacer.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-spacer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
                },] }
    ];
    exports.DxSpacer.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSpacer = __decorate([
        ProxyCmp({
            inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
        })
    ], exports.DxSpacer);
    exports.DxSpinner = /** @class */ (function () {
        function DxSpinner(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxSpinner;
    }());
    exports.DxSpinner.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-spinner',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['size', 'theme']
                },] }
    ];
    exports.DxSpinner.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxSpinner = __decorate([
        ProxyCmp({
            inputs: ['size', 'theme']
        })
    ], exports.DxSpinner);
    exports.DxTabBar = /** @class */ (function () {
        function DxTabBar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['tabChange']);
        }
        return DxTabBar;
    }());
    exports.DxTabBar.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-tab-bar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['selected'],
                    outputs: ['tabChange']
                },] }
    ];
    exports.DxTabBar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTabBar = __decorate([
        ProxyCmp({
            inputs: ['selected']
        })
    ], exports.DxTabBar);
    exports.DxTabPage = /** @class */ (function () {
        function DxTabPage(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTabPage;
    }());
    exports.DxTabPage.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-tab-page',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['label', 'value']
                },] }
    ];
    exports.DxTabPage.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTabPage = __decorate([
        ProxyCmp({
            inputs: ['label', 'value'],
            methods: ['toTabPage']
        })
    ], exports.DxTabPage);
    exports.DxTable = /** @class */ (function () {
        function DxTable(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']);
        }
        return DxTable;
    }());
    exports.DxTable.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode'],
                    outputs: ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']
                },] }
    ];
    exports.DxTable.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTable = __decorate([
        ProxyCmp({
            inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode']
        })
    ], exports.DxTable);
    exports.DxTableCell = /** @class */ (function () {
        function DxTableCell(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTableCell;
    }());
    exports.DxTableCell.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table-cell',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'color', 'type', 'value']
                },] }
    ];
    exports.DxTableCell.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTableCell = __decorate([
        ProxyCmp({
            inputs: ['align', 'color', 'type', 'value']
        })
    ], exports.DxTableCell);
    var DxTableFooter = /** @class */ (function () {
        function DxTableFooter(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTableFooter;
    }());
    DxTableFooter.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table-footer',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxTableFooter.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var DxTableHeader = /** @class */ (function () {
        function DxTableHeader(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTableHeader;
    }());
    DxTableHeader.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table-header',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    DxTableHeader.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTableHeaderItem = /** @class */ (function () {
        function DxTableHeaderItem(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTableHeaderItem;
    }());
    exports.DxTableHeaderItem.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table-header-item',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type']
                },] }
    ];
    exports.DxTableHeaderItem.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTableHeaderItem = __decorate([
        ProxyCmp({
            inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type'],
            methods: ['getMinWidth', 'getMaxWidth']
        })
    ], exports.DxTableHeaderItem);
    exports.DxTableRow = /** @class */ (function () {
        function DxTableRow(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['rowSelected']);
        }
        return DxTableRow;
    }());
    exports.DxTableRow.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-table-row',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['rowid', 'selected'],
                    outputs: ['rowSelected']
                },] }
    ];
    exports.DxTableRow.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTableRow = __decorate([
        ProxyCmp({
            inputs: ['rowid', 'selected']
        })
    ], exports.DxTableRow);
    exports.DxTag = /** @class */ (function () {
        function DxTag(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['remove', 'selectChange']);
        }
        return DxTag;
    }());
    exports.DxTag.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-tag',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type'],
                    outputs: ['remove', 'selectChange']
                },] }
    ];
    exports.DxTag.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTag = __decorate([
        ProxyCmp({
            inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type']
        })
    ], exports.DxTag);
    exports.DxText = /** @class */ (function () {
        function DxText(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxText;
    }());
    exports.DxText.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-text',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['color', 'type']
                },] }
    ];
    exports.DxText.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxText = __decorate([
        ProxyCmp({
            inputs: ['color', 'type']
        })
    ], exports.DxText);
    exports.DxTextArea = /** @class */ (function () {
        function DxTextArea(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
        }
        return DxTextArea;
    }());
    exports.DxTextArea.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-text-area',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
                    outputs: ['valueChange', 'valueComplete']
                },] }
    ];
    exports.DxTextArea.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTextArea = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxTextArea);
    exports.DxTextInput = /** @class */ (function () {
        function DxTextInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']);
        }
        return DxTextInput;
    }());
    exports.DxTextInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-text-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
                    outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']
                },] }
    ];
    exports.DxTextInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTextInput = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
            methods: ['focusControl']
        })
    ], exports.DxTextInput);
    exports.DxTextList = /** @class */ (function () {
        function DxTextList(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxTextList;
    }());
    exports.DxTextList.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-text-list',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['type']
                },] }
    ];
    exports.DxTextList.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxTextList = __decorate([
        ProxyCmp({
            inputs: ['type']
        })
    ], exports.DxTextList);
    exports.DxToggle = /** @class */ (function () {
        function DxToggle(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['checkedChange']);
        }
        return DxToggle;
    }());
    exports.DxToggle.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-toggle',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled'],
                    outputs: ['checkedChange']
                },] }
    ];
    exports.DxToggle.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxToggle = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled']
        })
    ], exports.DxToggle);
    exports.DxUserAvatar = /** @class */ (function () {
        function DxUserAvatar(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return DxUserAvatar;
    }());
    exports.DxUserAvatar.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-user-avatar',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['imageurl', 'initials', 'size']
                },] }
    ];
    exports.DxUserAvatar.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxUserAvatar = __decorate([
        ProxyCmp({
            inputs: ['imageurl', 'initials', 'size']
        })
    ], exports.DxUserAvatar);
    exports.DxWizard = /** @class */ (function () {
        function DxWizard(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['currentStepChange']);
        }
        return DxWizard;
    }());
    exports.DxWizard.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-wizard',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation'],
                    outputs: ['currentStepChange']
                },] }
    ];
    exports.DxWizard.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxWizard = __decorate([
        ProxyCmp({
            inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation']
        })
    ], exports.DxWizard);
    exports.DxWizardStep = /** @class */ (function () {
        function DxWizardStep(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['interaction']);
        }
        return DxWizardStep;
    }());
    exports.DxWizardStep.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-wizard-step',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['finished', 'label', 'value'],
                    outputs: ['interaction']
                },] }
    ];
    exports.DxWizardStep.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxWizardStep = __decorate([
        ProxyCmp({
            inputs: ['finished', 'label', 'value']
        })
    ], exports.DxWizardStep);
    exports.DxYesNo = /** @class */ (function () {
        function DxYesNo(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['valueChange']);
        }
        return DxYesNo;
    }());
    exports.DxYesNo.decorators = [
        { type: core.Component, args: [{
                    selector: 'dx-yes-no',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'errormessage', 'size', 'value'],
                    outputs: ['valueChange']
                },] }
    ];
    exports.DxYesNo.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.DxYesNo = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'errormessage', 'size', 'value']
        })
    ], exports.DxYesNo);

    var DIRECTIVES = [
        DsActionList,
        DsActionListItem,
        exports.DsAlert,
        exports.DsAlertButton,
        DsAnnouncementBar,
        DsApp,
        exports.DsBorderedFormGroup,
        DsBorderedFormItem,
        exports.DsButton,
        exports.DsButtonBar,
        exports.DsCard,
        exports.DsCardCollapsable,
        DsCardContent,
        DsCardHeader,
        exports.DsCardImageHeader,
        exports.DsCardTabBar,
        exports.DsCardTabPage,
        exports.DsCenteredBoard,
        DsCenteredBoardItem,
        exports.DsChartSample,
        exports.DsCheckbox,
        exports.DsColumn,
        exports.DsDateInput,
        exports.DsDateRange,
        exports.DsDonutChart,
        exports.DsDropdown,
        exports.DsDropdownOption,
        exports.DsFmErgebnisuebersicht,
        exports.DsFmErgebnisuebersichtItem,
        exports.DsFmErgebnisuebersichtTable,
        exports.DsFooter,
        exports.DsFormLayout,
        DsFullscreenSpinner,
        exports.DsFunctionIconButton,
        exports.DsGrid,
        exports.DsGroupedTextInput,
        exports.DsGrowBox,
        exports.DsHeader,
        exports.DsHeaderAction,
        exports.DsHeaderActionList,
        exports.DsHeaderCustomer,
        exports.DsHeaderUser,
        exports.DsHeroImage,
        DsHr,
        exports.DsIcon,
        exports.DsIconButton,
        exports.DsInfo,
        exports.DsLink,
        exports.DsLogo,
        exports.DsModal,
        DsNavigatedContent,
        exports.DsNavigatedContentMenu,
        exports.DsNavigatedContentMenuItem,
        exports.DsNotificationToast,
        exports.DsNumberInput,
        DsPage,
        exports.DsPaginator,
        exports.DsPlaceholder,
        exports.DsRadioButton,
        exports.DsRadioButtonGroup,
        exports.DsSearch,
        exports.DsSlider,
        exports.DsSpinner,
        exports.DsTable,
        exports.DsTableCell,
        DsTableFooter,
        DsTableHeader,
        exports.DsTableHeaderItem,
        exports.DsTableRow,
        exports.DsText,
        exports.DsTextArea,
        exports.DsTextButton,
        exports.DsTextInput,
        exports.DsTextList,
        exports.DsUserAvatar,
        exports.DsWorkflowProgress,
        exports.DsWrappedLayout,
        exports.DsYesNo,
        exports.DxAccordion,
        DxAccordionGroup,
        exports.DxAlert,
        exports.DxAnnouncementBar,
        DxApp,
        DxBreadcrumb,
        exports.DxBreadcrumbItem,
        exports.DxButton,
        DxCard,
        exports.DxCardCollapsable,
        DxCardContent,
        exports.DxCardHeader,
        exports.DxCardImage,
        exports.DxChartSample,
        exports.DxCheckbox,
        exports.DxCombobox,
        exports.DxContainer,
        exports.DxDateInput,
        exports.DxDateRange,
        exports.DxDonutChart,
        exports.DxDropdown,
        exports.DxDropdownOption,
        exports.DxErrorMessage,
        exports.DxErrorPage,
        DxExpanded,
        DxFdOutlineBox,
        exports.DxFdSeparator,
        exports.DxFooter,
        exports.DxFormWrapper,
        exports.DxGoldenStage,
        exports.DxGrid,
        exports.DxHeader,
        exports.DxHeaderAppFavorites,
        exports.DxHeaderAppFavoritesApp,
        exports.DxHeaderMenuCustom,
        exports.DxHeaderMenuGroup,
        exports.DxHeaderMenuItem,
        exports.DxHeaderMenuLink,
        exports.DxHeaderNavigation,
        exports.DxHeaderNavigationItem,
        exports.DxHeaderUser,
        exports.DxHeroImage,
        exports.DxIcon,
        exports.DxInfo,
        exports.DxLegend,
        exports.DxLink,
        exports.DxList,
        exports.DxListItem,
        exports.DxLogo,
        exports.DxMediaQueryValue,
        exports.DxModal,
        exports.DxMultiDropdown,
        exports.DxNotificationBar,
        exports.DxNotificationToast,
        exports.DxNumberInput,
        exports.DxNumberPaginator,
        exports.DxNumberPicker,
        exports.DxOverflowMenu,
        exports.DxOverflowMenuItem,
        exports.DxPaginator,
        exports.DxPlaceholder,
        exports.DxProcessHeader,
        exports.DxRadioButton,
        exports.DxRadioButtonGroup,
        exports.DxRepresentativeInfo,
        DxSidebarContent,
        exports.DxSiteNavigation,
        exports.DxSiteNavigationMenu,
        exports.DxSiteNavigationMenuItem,
        exports.DxSiteNavigationScope,
        exports.DxSlideShow,
        exports.DxSlider,
        exports.DxSort,
        exports.DxSortItem,
        exports.DxSpacer,
        exports.DxSpinner,
        exports.DxTabBar,
        exports.DxTabPage,
        exports.DxTable,
        exports.DxTableCell,
        DxTableFooter,
        DxTableHeader,
        exports.DxTableHeaderItem,
        exports.DxTableRow,
        exports.DxTag,
        exports.DxText,
        exports.DxTextArea,
        exports.DxTextInput,
        exports.DxTextList,
        exports.DxToggle,
        exports.DxUserAvatar,
        exports.DxWizard,
        exports.DxWizardStep,
        exports.DxYesNo
    ];

    var ValueAccessor = /** @class */ (function () {
        function ValueAccessor(el) {
            this.el = el;
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        ValueAccessor.prototype.writeValue = function (value) {
            this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
        };
        ValueAccessor.prototype.handleChangeEvent = function (value) {
            if (value !== this.lastValue) {
                this.lastValue = value;
                this.onChange(value);
            }
        };
        ValueAccessor.prototype._handleBlurEvent = function () {
            this.onTouched();
        };
        ValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        ValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        ValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this.el.nativeElement.disabled = isDisabled;
        };
        return ValueAccessor;
    }());
    ValueAccessor.decorators = [
        { type: core.Directive, args: [{},] }
    ];
    ValueAccessor.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ValueAccessor.propDecorators = {
        _handleBlurEvent: [{ type: core.HostListener, args: ['focusout',] }]
    };

    var NumericValueAccessor = /** @class */ (function (_super) {
        __extends(NumericValueAccessor, _super);
        function NumericValueAccessor(el) {
            return _super.call(this, el) || this;
        }
        NumericValueAccessor.prototype.registerOnChange = function (fn) {
            _super.prototype.registerOnChange.call(this, function (value) {
                fn(value === '' ? null : parseFloat(value));
            });
        };
        return NumericValueAccessor;
    }(ValueAccessor));
    NumericValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ds-slider, dx-slider, ds-number-input, dx-number-input',
                    host: {
                        '(valueChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: NumericValueAccessor,
                            multi: true
                        }
                    ]
                },] }
    ];
    NumericValueAccessor.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };

    var TextValueAccessor = /** @class */ (function (_super) {
        __extends(TextValueAccessor, _super);
        function TextValueAccessor(el) {
            return _super.call(this, el) || this;
        }
        return TextValueAccessor;
    }(ValueAccessor));
    TextValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ds-text-input, ds-radio-button-group, ds-grouped-text-input, ds-dropdown, ds-yes-no, ds-date-input, ds-text-area, ds-search, dx-combobox, dx-dropdown, dx-date-input, dx-radio-button-group, dx-text-input, dx-text-area, dx-yes-no',
                    host: {
                        '(valueChange)': 'handleChangeEvent($event.target.value)'
                    },
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: TextValueAccessor,
                            multi: true
                        }
                    ]
                },] }
    ];
    TextValueAccessor.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };

    var BooleanValueAccessor = /** @class */ (function (_super) {
        __extends(BooleanValueAccessor, _super);
        function BooleanValueAccessor(el) {
            return _super.call(this, el) || this;
        }
        BooleanValueAccessor.prototype.writeValue = function (value) {
            this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
        };
        return BooleanValueAccessor;
    }(ValueAccessor));
    BooleanValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ds-checkbox, dx-checkbox, dx-toggle, ds-table-row, dx-table-row, dx-card-header',
                    host: {
                        '(checkedChange)': 'handleChangeEvent($event.target.checked)',
                        '(rowSelected)': 'handleChangeEvent($event.target.selected)',
                        '(headerSelected)': 'handleChangeEvent($event.target.selected)'
                    },
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: BooleanValueAccessor,
                            multi: true
                        }
                    ]
                },] }
    ];
    BooleanValueAccessor.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };

    var components = __spread(DIRECTIVES, [
        NumericValueAccessor,
        TextValueAccessor,
        BooleanValueAccessor
    ]);
    var DesignSystemModule = /** @class */ (function () {
        function DesignSystemModule() {
            loader.defineCustomElements().then();
        }
        return DesignSystemModule;
    }());
    DesignSystemModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        components,
                    ],
                    imports: [],
                    exports: components
                },] }
    ];
    DesignSystemModule.ctorParameters = function () { return []; };

    /*
     * Public API Surface of design-system-angular
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DesignSystemModule = DesignSystemModule;
    exports.DsActionList = DsActionList;
    exports.DsActionListItem = DsActionListItem;
    exports.DsAnnouncementBar = DsAnnouncementBar;
    exports.DsApp = DsApp;
    exports.DsBorderedFormItem = DsBorderedFormItem;
    exports.DsCardContent = DsCardContent;
    exports.DsCardHeader = DsCardHeader;
    exports.DsCenteredBoardItem = DsCenteredBoardItem;
    exports.DsFullscreenSpinner = DsFullscreenSpinner;
    exports.DsHr = DsHr;
    exports.DsNavigatedContent = DsNavigatedContent;
    exports.DsPage = DsPage;
    exports.DsTableFooter = DsTableFooter;
    exports.DsTableHeader = DsTableHeader;
    exports.DxAccordionGroup = DxAccordionGroup;
    exports.DxApp = DxApp;
    exports.DxBreadcrumb = DxBreadcrumb;
    exports.DxCard = DxCard;
    exports.DxCardContent = DxCardContent;
    exports.DxExpanded = DxExpanded;
    exports.DxFdOutlineBox = DxFdOutlineBox;
    exports.DxSidebarContent = DxSidebarContent;
    exports.DxTableFooter = DxTableFooter;
    exports.DxTableHeader = DxTableHeader;
    exports["ɵa"] = DIRECTIVES;
    exports["ɵb"] = ProxyCmp;
    exports["ɵc"] = NumericValueAccessor;
    exports["ɵd"] = ValueAccessor;
    exports["ɵe"] = TextValueAccessor;
    exports["ɵf"] = BooleanValueAccessor;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=dvag-design-system-angular.umd.js.map
