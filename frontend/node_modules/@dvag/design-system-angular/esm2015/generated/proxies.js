import { __decorate } from "tslib";
/* tslint:disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone } from '@angular/core';
import { ProxyCmp, proxyOutputs } from './angular-component-lib/utils';
export class DsActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionList.decorators = [
    { type: Component, args: [{
                selector: 'ds-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DsActionListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionListItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-action-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsActionListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsAlert = class DsAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['buttonClick']);
    }
};
DsAlert.decorators = [
    { type: Component, args: [{
                selector: 'ds-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'visible'],
                outputs: ['buttonClick']
            },] }
];
DsAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'visible'],
        methods: ['show', 'showAlert', 'showConfirm']
    })
], DsAlert);
export { DsAlert };
let DsAlertButton = class DsAlertButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsAlertButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-alert-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
            },] }
];
DsAlertButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlertButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
    })
], DsAlertButton);
export { DsAlertButton };
export class DsAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsAnnouncementBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DsApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsApp.decorators = [
    { type: Component, args: [{
                selector: 'ds-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsBorderedFormGroup = class DsBorderedFormGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsBorderedFormGroup.decorators = [
    { type: Component, args: [{
                selector: 'ds-bordered-form-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction', 'size']
            },] }
];
DsBorderedFormGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsBorderedFormGroup = __decorate([
    ProxyCmp({
        inputs: ['direction', 'size']
    })
], DsBorderedFormGroup);
export { DsBorderedFormGroup };
export class DsBorderedFormItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsBorderedFormItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-bordered-form-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsBorderedFormItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsButton = class DsButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable']
            },] }
];
DsButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DsButton);
export { DsButton };
let DsButtonBar = class DsButtonBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButtonBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-button-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction']
            },] }
];
DsButtonBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButtonBar = __decorate([
    ProxyCmp({
        inputs: ['direction']
    })
], DsButtonBar);
export { DsButtonBar };
let DsCard = class DsCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCard.decorators = [
    { type: Component, args: [{
                selector: 'ds-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['shadow']
            },] }
];
DsCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCard = __decorate([
    ProxyCmp({
        inputs: ['shadow']
    })
], DsCard);
export { DsCard };
let DsCardCollapsable = class DsCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardCollapsable.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open', 'type']
            },] }
];
DsCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['label', 'open', 'type']
    })
], DsCardCollapsable);
export { DsCardCollapsable };
export class DsCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardContent.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DsCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsCardImageHeader = class DsCardImageHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardImageHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-image-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            },] }
];
DsCardImageHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardImageHeader = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsCardImageHeader);
export { DsCardImageHeader };
let DsCardTabBar = class DsCardTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['showChange']);
    }
};
DsCardTabBar.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['show'],
                outputs: ['showChange']
            },] }
];
DsCardTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabBar = __decorate([
    ProxyCmp({
        inputs: ['show']
    })
], DsCardTabBar);
export { DsCardTabBar };
let DsCardTabPage = class DsCardTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardTabPage.decorators = [
    { type: Component, args: [{
                selector: 'ds-card-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'name']
            },] }
];
DsCardTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'name']
    })
], DsCardTabPage);
export { DsCardTabPage };
let DsCenteredBoard = class DsCenteredBoard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCenteredBoard.decorators = [
    { type: Component, args: [{
                selector: 'ds-centered-board',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['columns']
            },] }
];
DsCenteredBoard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCenteredBoard = __decorate([
    ProxyCmp({
        inputs: ['columns']
    })
], DsCenteredBoard);
export { DsCenteredBoard };
export class DsCenteredBoardItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCenteredBoardItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-centered-board-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsCenteredBoardItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsChartSample = class DsChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsChartSample.decorators = [
    { type: Component, args: [{
                selector: 'ds-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'formattedValue', 'label', 'value'],
                outputs: ['valueChange']
            },] }
];
DsChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'formattedValue', 'label', 'value'],
        methods: ['toChartSample']
    })
], DsChartSample);
export { DsChartSample };
let DsCheckbox = class DsCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DsCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'ds-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            },] }
];
DsCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DsCheckbox);
export { DsCheckbox };
let DsColumn = class DsColumn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsColumn.decorators = [
    { type: Component, args: [{
                selector: 'ds-column',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align']
            },] }
];
DsColumn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsColumn = __decorate([
    ProxyCmp({
        inputs: ['align']
    })
], DsColumn);
export { DsColumn };
let DsDateInput = class DsDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DsDateInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            },] }
];
DsDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsDateInput);
export { DsDateInput };
let DsDateRange = class DsDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDateRange.decorators = [
    { type: Component, args: [{
                selector: 'ds-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            },] }
];
DsDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DsDateRange);
export { DsDateRange };
let DsDonutChart = class DsDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DsDonutChart.decorators = [
    { type: Component, args: [{
                selector: 'ds-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle'],
                outputs: ['segmentSelect']
            },] }
];
DsDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDonutChart = __decorate([
    ProxyCmp({
        inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle']
    })
], DsDonutChart);
export { DsDonutChart };
let DsDropdown = class DsDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsDropdown.decorators = [
    { type: Component, args: [{
                selector: 'ds-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DsDropdown);
export { DsDropdown };
let DsDropdownOption = class DsDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDropdownOption.decorators = [
    { type: Component, args: [{
                selector: 'ds-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
            },] }
];
DsDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
    })
], DsDropdownOption);
export { DsDropdownOption };
let DsFmErgebnisuebersicht = class DsFmErgebnisuebersicht {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersicht.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
            },] }
];
DsFmErgebnisuebersicht.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersicht = __decorate([
    ProxyCmp({
        inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
    })
], DsFmErgebnisuebersicht);
export { DsFmErgebnisuebersicht };
let DsFmErgebnisuebersichtItem = class DsFmErgebnisuebersichtItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
            },] }
];
DsFmErgebnisuebersichtItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtItem = __decorate([
    ProxyCmp({
        inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
    })
], DsFmErgebnisuebersichtItem);
export { DsFmErgebnisuebersichtItem };
let DsFmErgebnisuebersichtTable = class DsFmErgebnisuebersichtTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtTable.decorators = [
    { type: Component, args: [{
                selector: 'ds-fm-ergebnisuebersicht-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label']
            },] }
];
DsFmErgebnisuebersichtTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtTable = __decorate([
    ProxyCmp({
        inputs: ['label']
    })
], DsFmErgebnisuebersichtTable);
export { DsFmErgebnisuebersichtTable };
let DsFooter = class DsFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['infoButtonClicked']);
    }
};
DsFooter.decorators = [
    { type: Component, args: [{
                selector: 'ds-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['companyinfo', 'showimprint', 'showtermsofuse'],
                outputs: ['infoButtonClicked']
            },] }
];
DsFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFooter = __decorate([
    ProxyCmp({
        inputs: ['companyinfo', 'showimprint', 'showtermsofuse']
    })
], DsFooter);
export { DsFooter };
let DsFormLayout = class DsFormLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFormLayout.decorators = [
    { type: Component, args: [{
                selector: 'ds-form-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size']
            },] }
];
DsFormLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFormLayout = __decorate([
    ProxyCmp({
        inputs: ['size']
    })
], DsFormLayout);
export { DsFormLayout };
export class DsFullscreenSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsFullscreenSpinner.decorators = [
    { type: Component, args: [{
                selector: 'ds-fullscreen-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsFullscreenSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsFunctionIconButton = class DsFunctionIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFunctionIconButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-function-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'unfocusable']
            },] }
];
DsFunctionIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFunctionIconButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'unfocusable'],
        methods: ['focusControl']
    })
], DsFunctionIconButton);
export { DsFunctionIconButton };
let DsGrid = class DsGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsGrid.decorators = [
    { type: Component, args: [{
                selector: 'ds-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'l', 'm', 's', 'xl']
            },] }
];
DsGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'l', 'm', 's', 'xl']
    })
], DsGrid);
export { DsGrid };
let DsGroupedTextInput = class DsGroupedTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsGroupedTextInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-grouped-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsGroupedTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGroupedTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value']
    })
], DsGroupedTextInput);
export { DsGroupedTextInput };
let DsGrowBox = class DsGrowBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['growStart', 'contentVisibilityChange']);
    }
};
DsGrowBox.decorators = [
    { type: Component, args: [{
                selector: 'ds-grow-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['animateoninit', 'open', 'slidecontent'],
                outputs: ['growStart', 'contentVisibilityChange']
            },] }
];
DsGrowBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrowBox = __decorate([
    ProxyCmp({
        inputs: ['animateoninit', 'open', 'slidecontent']
    })
], DsGrowBox);
export { DsGrowBox };
let DsHeader = class DsHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['brand', 'fullscreen']
            },] }
];
DsHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeader = __decorate([
    ProxyCmp({
        inputs: ['brand', 'fullscreen']
    })
], DsHeader);
export { DsHeader };
let DsHeaderAction = class DsHeaderAction {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DsHeaderAction.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-action',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['highlight', 'label'],
                outputs: ['interaction']
            },] }
];
DsHeaderAction.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderAction = __decorate([
    ProxyCmp({
        inputs: ['highlight', 'label']
    })
], DsHeaderAction);
export { DsHeaderAction };
let DsHeaderActionList = class DsHeaderActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderActionList.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            },] }
];
DsHeaderActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderActionList = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DsHeaderActionList);
export { DsHeaderActionList };
let DsHeaderCustomer = class DsHeaderCustomer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderCustomer.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-customer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'typelabel']
            },] }
];
DsHeaderCustomer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderCustomer = __decorate([
    ProxyCmp({
        inputs: ['name', 'typelabel']
    })
], DsHeaderCustomer);
export { DsHeaderCustomer };
let DsHeaderUser = class DsHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'usernameInteraction']);
    }
};
DsHeaderUser.decorators = [
    { type: Component, args: [{
                selector: 'ds-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'name', 'usernameinteractable'],
                outputs: ['signOut', 'usernameInteraction']
            },] }
];
DsHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'name', 'usernameinteractable']
    })
], DsHeaderUser);
export { DsHeaderUser };
let DsHeroImage = class DsHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeroImage.decorators = [
    { type: Component, args: [{
                selector: 'ds-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            },] }
];
DsHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeroImage = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsHeroImage);
export { DsHeroImage };
export class DsHr {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsHr.decorators = [
    { type: Component, args: [{
                selector: 'ds-hr',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsHr.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsIcon = class DsIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIcon.decorators = [
    { type: Component, args: [{
                selector: 'ds-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            },] }
];
DsIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DsIcon);
export { DsIcon };
let DsIconButton = class DsIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIconButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable']
            },] }
];
DsIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIconButton = __decorate([
    ProxyCmp({
        inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable'],
        methods: ['focusControl']
    })
], DsIconButton);
export { DsIconButton };
let DsInfo = class DsInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsInfo.decorators = [
    { type: Component, args: [{
                selector: 'ds-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'popupvisible', 'size']
            },] }
];
DsInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'popupvisible', 'size'],
        methods: ['setModal']
    })
], DsInfo);
export { DsInfo };
let DsLink = class DsLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLink.decorators = [
    { type: Component, args: [{
                selector: 'ds-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            },] }
];
DsLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DsLink);
export { DsLink };
let DsLogo = class DsLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLogo.decorators = [
    { type: Component, args: [{
                selector: 'ds-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DsLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsLogo);
export { DsLogo };
let DsModal = class DsModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DsModal.decorators = [
    { type: Component, args: [{
                selector: 'ds-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible'],
                outputs: ['modalOpened', 'modalClosed']
            },] }
];
DsModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsModal = __decorate([
    ProxyCmp({
        inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible']
    })
], DsModal);
export { DsModal };
export class DsNavigatedContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsNavigatedContent.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsNavigatedContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsNavigatedContentMenu = class DsNavigatedContentMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DsNavigatedContentMenu.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active'],
                outputs: ['navigate']
            },] }
];
DsNavigatedContentMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenu = __decorate([
    ProxyCmp({
        inputs: ['active']
    })
], DsNavigatedContentMenu);
export { DsNavigatedContentMenu };
let DsNavigatedContentMenuItem = class DsNavigatedContentMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsNavigatedContentMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-navigated-content-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['error', 'label', 'success', 'value', 'warning']
            },] }
];
DsNavigatedContentMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenuItem = __decorate([
    ProxyCmp({
        inputs: ['error', 'label', 'success', 'value', 'warning']
    })
], DsNavigatedContentMenuItem);
export { DsNavigatedContentMenuItem };
let DsNotificationToast = class DsNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DsNotificationToast.decorators = [
    { type: Component, args: [{
                selector: 'ds-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            },] }
];
DsNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DsNotificationToast);
export { DsNotificationToast };
let DsNumberInput = class DsNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsNumberInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
        methods: ['focusControl']
    })
], DsNumberInput);
export { DsNumberInput };
export class DsPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsPage.decorators = [
    { type: Component, args: [{
                selector: 'ds-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsPaginator = class DsPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DsPaginator.decorators = [
    { type: Component, args: [{
                selector: 'ds-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current', 'range'],
                outputs: ['pageChanged']
            },] }
];
DsPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current', 'range']
    })
], DsPaginator);
export { DsPaginator };
let DsPlaceholder = class DsPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsPlaceholder.decorators = [
    { type: Component, args: [{
                selector: 'ds-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            },] }
];
DsPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DsPlaceholder);
export { DsPlaceholder };
let DsRadioButton = class DsRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'value']
            },] }
];
DsRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'value'],
        methods: ['focusControl']
    })
], DsRadioButton);
export { DsRadioButton };
let DsRadioButtonGroup = class DsRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsRadioButtonGroup.decorators = [
    { type: Component, args: [{
                selector: 'ds-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            },] }
];
DsRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsRadioButtonGroup);
export { DsRadioButtonGroup };
let DsSearch = class DsSearch {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['search', 'selectSearch', 'valueChange', 'valueComplete']);
    }
};
DsSearch.decorators = [
    { type: Component, args: [{
                selector: 'ds-search',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
                outputs: ['search', 'selectSearch', 'valueChange', 'valueComplete']
            },] }
];
DsSearch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSearch = __decorate([
    ProxyCmp({
        inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
        methods: ['focusControl']
    })
], DsSearch);
export { DsSearch };
let DsSlider = class DsSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsSlider.decorators = [
    { type: Component, args: [{
                selector: 'ds-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value'],
                outputs: ['valueChange']
            },] }
];
DsSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSlider = __decorate([
    ProxyCmp({
        inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value']
    })
], DsSlider);
export { DsSlider };
let DsSpinner = class DsSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsSpinner.decorators = [
    { type: Component, args: [{
                selector: 'ds-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            },] }
];
DsSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DsSpinner);
export { DsSpinner };
let DsTable = class DsTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'rowsSelected']);
    }
};
DsTable.decorators = [
    { type: Component, args: [{
                selector: 'ds-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view'],
                outputs: ['tableStateChanged', 'rowsSelected']
            },] }
];
DsTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view']
    })
], DsTable);
export { DsTable };
let DsTableCell = class DsTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableCell.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type', 'value']
            },] }
];
DsTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableCell = __decorate([
    ProxyCmp({
        inputs: ['color', 'type', 'value']
    })
], DsTableCell);
export { DsTableCell };
export class DsTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableFooter.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DsTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableHeader.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DsTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsTableHeaderItem = class DsTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableHeaderItem.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
            },] }
];
DsTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
    })
], DsTableHeaderItem);
export { DsTableHeaderItem };
let DsTableRow = class DsTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DsTableRow.decorators = [
    { type: Component, args: [{
                selector: 'ds-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            },] }
];
DsTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DsTableRow);
export { DsTableRow };
let DsText = class DsText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsText.decorators = [
    { type: Component, args: [{
                selector: 'ds-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'screensize', 'type']
            },] }
];
DsText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsText = __decorate([
    ProxyCmp({
        inputs: ['color', 'screensize', 'type']
    })
], DsText);
export { DsText };
let DsTextArea = class DsTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsTextArea.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DsTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextArea);
export { DsTextArea };
let DsTextButton = class DsTextButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextButton.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'disabled', 'screensize', 'unfocusable']
            },] }
];
DsTextButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'disabled', 'screensize', 'unfocusable'],
        methods: ['focusControl']
    })
], DsTextButton);
export { DsTextButton };
let DsTextInput = class DsTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']);
    }
};
DsTextInput.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']
            },] }
];
DsTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextInput);
export { DsTextInput };
let DsTextList = class DsTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextList.decorators = [
    { type: Component, args: [{
                selector: 'ds-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DsTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsTextList);
export { DsTextList };
let DsUserAvatar = class DsUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsUserAvatar.decorators = [
    { type: Component, args: [{
                selector: 'ds-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            },] }
];
DsUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DsUserAvatar);
export { DsUserAvatar };
let DsWorkflowProgress = class DsWorkflowProgress {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWorkflowProgress.decorators = [
    { type: Component, args: [{
                selector: 'ds-workflow-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['progress']
            },] }
];
DsWorkflowProgress.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWorkflowProgress = __decorate([
    ProxyCmp({
        inputs: ['progress']
    })
], DsWorkflowProgress);
export { DsWorkflowProgress };
let DsWrappedLayout = class DsWrappedLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWrappedLayout.decorators = [
    { type: Component, args: [{
                selector: 'ds-wrapped-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'size']
            },] }
];
DsWrappedLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWrappedLayout = __decorate([
    ProxyCmp({
        inputs: ['align', 'size']
    })
], DsWrappedLayout);
export { DsWrappedLayout };
let DsYesNo = class DsYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsYesNo.decorators = [
    { type: Component, args: [{
                selector: 'ds-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange']
            },] }
];
DsYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DsYesNo);
export { DsYesNo };
let DxAccordion = class DxAccordion {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAccordion.decorators = [
    { type: Component, args: [{
                selector: 'dx-accordion',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            },] }
];
DxAccordion.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAccordion = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DxAccordion);
export { DxAccordion };
export class DxAccordionGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxAccordionGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-accordion-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxAccordionGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxAlert = class DxAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAlert.decorators = [
    { type: Component, args: [{
                selector: 'dx-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
            },] }
];
DxAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
    })
], DxAlert);
export { DxAlert };
let DxAnnouncementBar = class DxAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAnnouncementBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'iconcolor']
            },] }
];
DxAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAnnouncementBar = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'iconcolor']
    })
], DxAnnouncementBar);
export { DxAnnouncementBar };
export class DxApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxApp.decorators = [
    { type: Component, args: [{
                selector: 'dx-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DxBreadcrumb {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome', 'navigate']);
    }
}
DxBreadcrumb.decorators = [
    { type: Component, args: [{
                selector: 'dx-breadcrumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                outputs: ['navigateHome', 'navigate']
            },] }
];
DxBreadcrumb.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxBreadcrumbItem = class DxBreadcrumbItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxBreadcrumbItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-breadcrumb-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            },] }
];
DxBreadcrumbItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxBreadcrumbItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'value']
    })
], DxBreadcrumbItem);
export { DxBreadcrumbItem };
let DxButton = class DxButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxButton.decorators = [
    { type: Component, args: [{
                selector: 'dx-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable']
            },] }
];
DxButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DxButton);
export { DxButton };
export class DxCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCard.decorators = [
    { type: Component, args: [{
                selector: 'dx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardCollapsable = class DxCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardCollapsable.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['open']
            },] }
];
DxCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['open']
    })
], DxCardCollapsable);
export { DxCardCollapsable };
export class DxCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCardContent.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardHeader = class DxCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'iconcolor', 'label']
            },] }
];
DxCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardHeader = __decorate([
    ProxyCmp({
        inputs: ['icon', 'iconcolor', 'label']
    })
], DxCardHeader);
export { DxCardHeader };
let DxCardImage = class DxCardImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardImage.decorators = [
    { type: Component, args: [{
                selector: 'dx-card-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
            },] }
];
DxCardImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardImage = __decorate([
    ProxyCmp({
        inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
    })
], DxCardImage);
export { DxCardImage };
let DxChartSample = class DxChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxChartSample.decorators = [
    { type: Component, args: [{
                selector: 'dx-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
                outputs: ['valueChange']
            },] }
];
DxChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
        methods: ['toChartSample']
    })
], DxChartSample);
export { DxChartSample };
let DxCheckbox = class DxCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'dx-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            },] }
];
DxCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DxCheckbox);
export { DxCheckbox };
let DxCombobox = class DxCombobox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']);
    }
};
DxCombobox.decorators = [
    { type: Component, args: [{
                selector: 'dx-combobox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']
            },] }
];
DxCombobox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCombobox = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxCombobox);
export { DxCombobox };
let DxContainer = class DxContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxContainer.decorators = [
    { type: Component, args: [{
                selector: 'dx-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            },] }
];
DxContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxContainer = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxContainer);
export { DxContainer };
let DxDateInput = class DxDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DxDateInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            },] }
];
DxDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxDateInput);
export { DxDateInput };
let DxDateRange = class DxDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDateRange.decorators = [
    { type: Component, args: [{
                selector: 'dx-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            },] }
];
DxDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DxDateRange);
export { DxDateRange };
let DxDonutChart = class DxDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DxDonutChart.decorators = [
    { type: Component, args: [{
                selector: 'dx-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
                outputs: ['segmentSelect']
            },] }
];
DxDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDonutChart = __decorate([
    ProxyCmp({
        inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
        methods: ['update']
    })
], DxDonutChart);
export { DxDonutChart };
let DxDropdown = class DxDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxDropdown.decorators = [
    { type: Component, args: [{
                selector: 'dx-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DxDropdown);
export { DxDropdown };
let DxDropdownOption = class DxDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDropdownOption.decorators = [
    { type: Component, args: [{
                selector: 'dx-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            },] }
];
DxDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxDropdownOption);
export { DxDropdownOption };
let DxErrorMessage = class DxErrorMessage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['forceUpdateOnChange']);
    }
};
DxErrorMessage.decorators = [
    { type: Component, args: [{
                selector: 'dx-error-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['lines'],
                outputs: ['forceUpdateOnChange']
            },] }
];
DxErrorMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorMessage = __decorate([
    ProxyCmp({
        inputs: ['lines']
    })
], DxErrorMessage);
export { DxErrorMessage };
let DxErrorPage = class DxErrorPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['action']);
    }
};
DxErrorPage.decorators = [
    { type: Component, args: [{
                selector: 'dx-error-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actiondescription', 'actionlabel', 'description', 'reason'],
                outputs: ['action']
            },] }
];
DxErrorPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorPage = __decorate([
    ProxyCmp({
        inputs: ['actiondescription', 'actionlabel', 'description', 'reason']
    })
], DxErrorPage);
export { DxErrorPage };
export class DxExpanded {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxExpanded.decorators = [
    { type: Component, args: [{
                selector: 'dx-expanded',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxExpanded.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DxFdOutlineBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxFdOutlineBox.decorators = [
    { type: Component, args: [{
                selector: 'dx-fd-outline-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxFdOutlineBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxFdSeparator = class DxFdSeparator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFdSeparator.decorators = [
    { type: Component, args: [{
                selector: 'dx-fd-separator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor', 'tocolor']
            },] }
];
DxFdSeparator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFdSeparator = __decorate([
    ProxyCmp({
        inputs: ['fromcolor', 'tocolor']
    })
], DxFdSeparator);
export { DxFdSeparator };
let DxFooter = class DxFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFooter.decorators = [
    { type: Component, args: [{
                selector: 'dx-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor']
            },] }
];
DxFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFooter = __decorate([
    ProxyCmp({
        inputs: ['fromcolor']
    })
], DxFooter);
export { DxFooter };
let DxFormWrapper = class DxFormWrapper {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFormWrapper.decorators = [
    { type: Component, args: [{
                selector: 'dx-form-wrapper',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['errormessage', 'kisynced', 'label', 'required']
            },] }
];
DxFormWrapper.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFormWrapper = __decorate([
    ProxyCmp({
        inputs: ['errormessage', 'kisynced', 'label', 'required']
    })
], DxFormWrapper);
export { DxFormWrapper };
let DxGoldenStage = class DxGoldenStage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGoldenStage.decorators = [
    { type: Component, args: [{
                selector: 'dx-golden-stage',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
            },] }
];
DxGoldenStage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGoldenStage = __decorate([
    ProxyCmp({
        inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
    })
], DxGoldenStage);
export { DxGoldenStage };
let DxGrid = class DxGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGrid.decorators = [
    { type: Component, args: [{
                selector: 'dx-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
            },] }
];
DxGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
    })
], DxGrid);
export { DxGrid };
let DxHeader = class DxHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome']);
    }
};
DxHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme'],
                outputs: ['navigateHome']
            },] }
];
DxHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeader = __decorate([
    ProxyCmp({
        inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme']
    })
], DxHeader);
export { DxHeader };
let DxHeaderAppFavorites = class DxHeaderAppFavorites {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']);
    }
};
DxHeaderAppFavorites.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-app-favorites',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']
            },] }
];
DxHeaderAppFavorites.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavorites = __decorate([
    ProxyCmp({
        inputs: ['notifications', 'notificationstheme', 'priority']
    })
], DxHeaderAppFavorites);
export { DxHeaderAppFavorites };
let DxHeaderAppFavoritesApp = class DxHeaderAppFavoritesApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderAppFavoritesApp.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-app-favorites-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appid', 'appname', 'icon']
            },] }
];
DxHeaderAppFavoritesApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavoritesApp = __decorate([
    ProxyCmp({
        inputs: ['appid', 'appname', 'icon'],
        methods: ['toAppFavoritesApp']
    })
], DxHeaderAppFavoritesApp);
export { DxHeaderAppFavoritesApp };
let DxHeaderMenuCustom = class DxHeaderMenuCustom {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuCustom.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-custom',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            },] }
];
DxHeaderMenuCustom.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuCustom = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuCustom);
export { DxHeaderMenuCustom };
let DxHeaderMenuGroup = class DxHeaderMenuGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            },] }
];
DxHeaderMenuGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuGroup = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuGroup);
export { DxHeaderMenuGroup };
let DxHeaderMenuItem = class DxHeaderMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuItem = __decorate([
    ProxyCmp({
        inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderMenuItem);
export { DxHeaderMenuItem };
let DxHeaderMenuLink = class DxHeaderMenuLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuLink.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-menu-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectednavigationvalue', 'label', 'priority', 'selected'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderMenuLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuLink = __decorate([
    ProxyCmp({
        inputs: ['connectednavigationvalue', 'label', 'priority', 'selected']
    })
], DxHeaderMenuLink);
export { DxHeaderMenuLink };
let DxHeaderNavigation = class DxHeaderNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderNavigation.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoclose', 'notification', 'notificationstheme'],
                outputs: ['menuInteraction']
            },] }
];
DxHeaderNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigation = __decorate([
    ProxyCmp({
        inputs: ['autoclose', 'notification', 'notificationstheme']
    })
], DxHeaderNavigation);
export { DxHeaderNavigation };
let DxHeaderNavigationItem = class DxHeaderNavigationItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxHeaderNavigationItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-navigation-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'size', 'value'],
                outputs: ['interaction']
            },] }
];
DxHeaderNavigationItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigationItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'size', 'value']
    })
], DxHeaderNavigationItem);
export { DxHeaderNavigationItem };
let DxHeaderUser = class DxHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'accountInteraction', 'menuInteraction']);
    }
};
DxHeaderUser.decorators = [
    { type: Component, args: [{
                selector: 'dx-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['signOut', 'accountInteraction', 'menuInteraction']
            },] }
];
DxHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderUser);
export { DxHeaderUser };
let DxHeroImage = class DxHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeroImage.decorators = [
    { type: Component, args: [{
                selector: 'dx-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            },] }
];
DxHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeroImage = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxHeroImage);
export { DxHeroImage };
let DxIcon = class DxIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxIcon.decorators = [
    { type: Component, args: [{
                selector: 'dx-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            },] }
];
DxIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DxIcon);
export { DxIcon };
let DxInfo = class DxInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxInfo.decorators = [
    { type: Component, args: [{
                selector: 'dx-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'size']
            },] }
];
DxInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'size'],
        methods: ['setModal']
    })
], DxInfo);
export { DxInfo };
let DxLegend = class DxLegend {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLegend.decorators = [
    { type: Component, args: [{
                selector: 'dx-legend',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['kisynchint', 'requiredhint']
            },] }
];
DxLegend.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLegend = __decorate([
    ProxyCmp({
        inputs: ['kisynchint', 'requiredhint']
    })
], DxLegend);
export { DxLegend };
let DxLink = class DxLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLink.decorators = [
    { type: Component, args: [{
                selector: 'dx-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            },] }
];
DxLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DxLink);
export { DxLink };
let DxList = class DxList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxList.decorators = [
    { type: Component, args: [{
                selector: 'dx-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['contentbelow', 'size', 'width']
            },] }
];
DxList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxList = __decorate([
    ProxyCmp({
        inputs: ['contentbelow', 'size', 'width']
    })
], DxList);
export { DxList };
let DxListItem = class DxListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxListItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value']
            },] }
];
DxListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxListItem = __decorate([
    ProxyCmp({
        inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value'],
        methods: ['getRadioElement', 'focusControl']
    })
], DxListItem);
export { DxListItem };
let DxLogo = class DxLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLogo.decorators = [
    { type: Component, args: [{
                selector: 'dx-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DxLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxLogo);
export { DxLogo };
let DxMediaQueryValue = class DxMediaQueryValue {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxMediaQueryValue.decorators = [
    { type: Component, args: [{
                selector: 'dx-media-query-value',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
            },] }
];
DxMediaQueryValue.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMediaQueryValue = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
    })
], DxMediaQueryValue);
export { DxMediaQueryValue };
let DxModal = class DxModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DxModal.decorators = [
    { type: Component, args: [{
                selector: 'dx-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['height', 'label', 'visible', 'width'],
                outputs: ['modalOpened', 'modalClosed']
            },] }
];
DxModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxModal = __decorate([
    ProxyCmp({
        inputs: ['height', 'label', 'visible', 'width']
    })
], DxModal);
export { DxModal };
let DxMultiDropdown = class DxMultiDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxMultiDropdown.decorators = [
    { type: Component, args: [{
                selector: 'dx-multi-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxMultiDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMultiDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
        methods: ['focusControl']
    })
], DxMultiDropdown);
export { DxMultiDropdown };
let DxNotificationBar = class DxNotificationBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-notification-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['visible'],
                outputs: ['closeNotification']
            },] }
];
DxNotificationBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationBar = __decorate([
    ProxyCmp({
        inputs: ['visible']
    })
], DxNotificationBar);
export { DxNotificationBar };
let DxNotificationToast = class DxNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationToast.decorators = [
    { type: Component, args: [{
                selector: 'dx-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            },] }
];
DxNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DxNotificationToast);
export { DxNotificationToast };
let DxNumberInput = class DxNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxNumberInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
        methods: ['focusControl']
    })
], DxNumberInput);
export { DxNumberInput };
let DxNumberPaginator = class DxNumberPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxNumberPaginator.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            },] }
];
DxNumberPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxNumberPaginator);
export { DxNumberPaginator };
let DxNumberPicker = class DxNumberPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxNumberPicker.decorators = [
    { type: Component, args: [{
                selector: 'dx-number-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'value', 'values'],
                outputs: ['valueChange']
            },] }
];
DxNumberPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPicker = __decorate([
    ProxyCmp({
        inputs: ['align', 'value', 'values']
    })
], DxNumberPicker);
export { DxNumberPicker };
let DxOverflowMenu = class DxOverflowMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['selection', 'listOpenChange']);
    }
};
DxOverflowMenu.decorators = [
    { type: Component, args: [{
                selector: 'dx-overflow-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode'],
                outputs: ['selection', 'listOpenChange']
            },] }
];
DxOverflowMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenu = __decorate([
    ProxyCmp({
        inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode']
    })
], DxOverflowMenu);
export { DxOverflowMenu };
let DxOverflowMenuItem = class DxOverflowMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxOverflowMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-overflow-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            },] }
];
DxOverflowMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenuItem = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxOverflowMenuItem);
export { DxOverflowMenuItem };
let DxPaginator = class DxPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxPaginator.decorators = [
    { type: Component, args: [{
                selector: 'dx-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            },] }
];
DxPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxPaginator);
export { DxPaginator };
let DxPlaceholder = class DxPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxPlaceholder.decorators = [
    { type: Component, args: [{
                selector: 'dx-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            },] }
];
DxPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DxPlaceholder);
export { DxPlaceholder };
let DxProcessHeader = class DxProcessHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxProcessHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-process-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['headline']
            },] }
];
DxProcessHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxProcessHeader = __decorate([
    ProxyCmp({
        inputs: ['headline']
    })
], DxProcessHeader);
export { DxProcessHeader };
let DxRadioButton = class DxRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'dx-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'label', 'value']
            },] }
];
DxRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'label', 'value'],
        methods: ['focusControl']
    })
], DxRadioButton);
export { DxRadioButton };
let DxRadioButtonGroup = class DxRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxRadioButtonGroup.decorators = [
    { type: Component, args: [{
                selector: 'dx-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            },] }
];
DxRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
        methods: ['focusControl', 'connectRadioButton', 'disconnectRadioButton']
    })
], DxRadioButtonGroup);
export { DxRadioButtonGroup };
let DxRepresentativeInfo = class DxRepresentativeInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRepresentativeInfo.decorators = [
    { type: Component, args: [{
                selector: 'dx-representative-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'type']
            },] }
];
DxRepresentativeInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRepresentativeInfo = __decorate([
    ProxyCmp({
        inputs: ['name', 'type']
    })
], DxRepresentativeInfo);
export { DxRepresentativeInfo };
export class DxSidebarContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxSidebarContent.decorators = [
    { type: Component, args: [{
                selector: 'dx-sidebar-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxSidebarContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxSiteNavigation = class DxSiteNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigation.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['expandedlayoutat']
            },] }
];
DxSiteNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigation = __decorate([
    ProxyCmp({
        inputs: ['expandedlayoutat']
    })
], DxSiteNavigation);
export { DxSiteNavigation };
let DxSiteNavigationMenu = class DxSiteNavigationMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DxSiteNavigationMenu.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autonavigation', 'selectedvalue', 'titlestring'],
                outputs: ['navigate']
            },] }
];
DxSiteNavigationMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenu = __decorate([
    ProxyCmp({
        inputs: ['autonavigation', 'selectedvalue', 'titlestring']
    })
], DxSiteNavigationMenu);
export { DxSiteNavigationMenu };
let DxSiteNavigationMenuItem = class DxSiteNavigationMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationMenuItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'state', 'value']
            },] }
];
DxSiteNavigationMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenuItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'state', 'value']
    })
], DxSiteNavigationMenuItem);
export { DxSiteNavigationMenuItem };
let DxSiteNavigationScope = class DxSiteNavigationScope {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationScope.decorators = [
    { type: Component, args: [{
                selector: 'dx-site-navigation-scope',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            },] }
];
DxSiteNavigationScope.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationScope = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSiteNavigationScope);
export { DxSiteNavigationScope };
let DxSlideShow = class DxSlideShow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChange']);
    }
};
DxSlideShow.decorators = [
    { type: Component, args: [{
                selector: 'dx-slide-show',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
                outputs: ['pageChange']
            },] }
];
DxSlideShow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlideShow = __decorate([
    ProxyCmp({
        inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
        methods: ['setPage']
    })
], DxSlideShow);
export { DxSlideShow };
let DxSlider = class DxSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxSlider.decorators = [
    { type: Component, args: [{
                selector: 'dx-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value'],
                outputs: ['valueChange']
            },] }
];
DxSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlider = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value']
    })
], DxSlider);
export { DxSlider };
let DxSort = class DxSort {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['sort']);
    }
};
DxSort.decorators = [
    { type: Component, args: [{
                selector: 'dx-sort',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['sortable'],
                outputs: ['sort']
            },] }
];
DxSort.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSort = __decorate([
    ProxyCmp({
        inputs: ['sortable']
    })
], DxSort);
export { DxSort };
let DxSortItem = class DxSortItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSortItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-sort-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            },] }
];
DxSortItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSortItem = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSortItem);
export { DxSortItem };
let DxSpacer = class DxSpacer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpacer.decorators = [
    { type: Component, args: [{
                selector: 'dx-spacer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            },] }
];
DxSpacer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpacer = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxSpacer);
export { DxSpacer };
let DxSpinner = class DxSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpinner.decorators = [
    { type: Component, args: [{
                selector: 'dx-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            },] }
];
DxSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DxSpinner);
export { DxSpinner };
let DxTabBar = class DxTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tabChange']);
    }
};
DxTabBar.decorators = [
    { type: Component, args: [{
                selector: 'dx-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['selected'],
                outputs: ['tabChange']
            },] }
];
DxTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabBar = __decorate([
    ProxyCmp({
        inputs: ['selected']
    })
], DxTabBar);
export { DxTabBar };
let DxTabPage = class DxTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTabPage.decorators = [
    { type: Component, args: [{
                selector: 'dx-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            },] }
];
DxTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'value'],
        methods: ['toTabPage']
    })
], DxTabPage);
export { DxTabPage };
let DxTable = class DxTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']);
    }
};
DxTable.decorators = [
    { type: Component, args: [{
                selector: 'dx-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode'],
                outputs: ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']
            },] }
];
DxTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode']
    })
], DxTable);
export { DxTable };
let DxTableCell = class DxTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableCell.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'color', 'type', 'value']
            },] }
];
DxTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableCell = __decorate([
    ProxyCmp({
        inputs: ['align', 'color', 'type', 'value']
    })
], DxTableCell);
export { DxTableCell };
export class DxTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableFooter.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class DxTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableHeader.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
DxTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxTableHeaderItem = class DxTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableHeaderItem.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type']
            },] }
];
DxTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type'],
        methods: ['getMinWidth', 'getMaxWidth']
    })
], DxTableHeaderItem);
export { DxTableHeaderItem };
let DxTableRow = class DxTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DxTableRow.decorators = [
    { type: Component, args: [{
                selector: 'dx-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            },] }
];
DxTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DxTableRow);
export { DxTableRow };
let DxTag = class DxTag {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['remove', 'selectChange']);
    }
};
DxTag.decorators = [
    { type: Component, args: [{
                selector: 'dx-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type'],
                outputs: ['remove', 'selectChange']
            },] }
];
DxTag.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTag = __decorate([
    ProxyCmp({
        inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type']
    })
], DxTag);
export { DxTag };
let DxText = class DxText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxText.decorators = [
    { type: Component, args: [{
                selector: 'dx-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            },] }
];
DxText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxText = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxText);
export { DxText };
let DxTextArea = class DxTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxTextArea.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            },] }
];
DxTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DxTextArea);
export { DxTextArea };
let DxTextInput = class DxTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']);
    }
};
DxTextInput.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']
            },] }
];
DxTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxTextInput);
export { DxTextInput };
let DxTextList = class DxTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTextList.decorators = [
    { type: Component, args: [{
                selector: 'dx-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            },] }
];
DxTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxTextList);
export { DxTextList };
let DxToggle = class DxToggle {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxToggle.decorators = [
    { type: Component, args: [{
                selector: 'dx-toggle',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled'],
                outputs: ['checkedChange']
            },] }
];
DxToggle.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxToggle = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled']
    })
], DxToggle);
export { DxToggle };
let DxUserAvatar = class DxUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxUserAvatar.decorators = [
    { type: Component, args: [{
                selector: 'dx-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            },] }
];
DxUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DxUserAvatar);
export { DxUserAvatar };
let DxWizard = class DxWizard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['currentStepChange']);
    }
};
DxWizard.decorators = [
    { type: Component, args: [{
                selector: 'dx-wizard',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation'],
                outputs: ['currentStepChange']
            },] }
];
DxWizard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizard = __decorate([
    ProxyCmp({
        inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation']
    })
], DxWizard);
export { DxWizard };
let DxWizardStep = class DxWizardStep {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxWizardStep.decorators = [
    { type: Component, args: [{
                selector: 'dx-wizard-step',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['finished', 'label', 'value'],
                outputs: ['interaction']
            },] }
];
DxWizardStep.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizardStep = __decorate([
    ProxyCmp({
        inputs: ['finished', 'label', 'value']
    })
], DxWizardStep);
export { DxWizardStep };
let DxYesNo = class DxYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxYesNo.decorators = [
    { type: Component, args: [{
                selector: 'dx-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'size', 'value'],
                outputs: ['valueChange']
            },] }
];
DxYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'size', 'value']
    })
], DxYesNo);
export { DxYesNo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveGllcy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ydW5uZXIvd29yay9kZXNpZ24tc3lzdGVtL2Rlc2lnbi1zeXN0ZW0vZXh0cmFzL2FuZ3VsYXItd3JhcHBlci9wcm9qZWN0cy9kZXNpZ24tc3lzdGVtLWFuZ3VsYXIvc3JjLyIsInNvdXJjZXMiOlsiZ2VuZXJhdGVkL3Byb3hpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9CQUFvQjtBQUNwQiw4Q0FBOEM7QUFDOUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQWdCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBWXZFLE1BQU0sT0FBTyxZQUFZO0lBRXZCLFlBQVksQ0FBb0IsRUFBRSxDQUFhLEVBQVksQ0FBUztRQUFULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDbEUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7OztZQVZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjthQUN0Qzs7O1lBWmlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUE2QmhHLE1BQU0sT0FBTyxnQkFBZ0I7SUFFM0IsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQzs7O1lBVkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxxQkFBcUI7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QUN2QyxDQUFDO0dBUVcsWUFBWSxDQVN4QjtTQVRZLFlBQVk7SUF1QlosT0FBTyxTQUFQLE9BQU87SUFJbEIsWUFBWSxDQUFvQixFQUFFLENBQWEsRUFBWSxDQUFTO1FBQVQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNsRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWCxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDMUIsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0YsQ0FBQTs7WUFoQkEsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsUUFBUSxFQUFFLDJCQUEyQjtnQkFDckMsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDO2dCQUNyRCxPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUM7YUFDekI7OztZQW5qSGlDLGlCQUFpQjtZQUFhLFVBQVU7WUFBZ0IsTUFBTTs7QUFvakhuRixPQUFPO0lBVm5CLFFBQVEsQ0FBQztRQUNSLE1BQU0sRUFBRSxDQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQztLQUN0RCxDQUFDO0dBUVcsT0FBTyxDQVNuQjtTQVRZLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuLyogYXV0by1nZW5lcmF0ZWQgYW5ndWxhciBkaXJlY3RpdmUgcHJveGllcyAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm94eUNtcCwgcHJveHlPdXRwdXRzIH0gZnJvbSAnLi9hbmd1bGFyLWNvbXBvbmVudC1saWIvdXRpbHMnO1xuXG5pbXBvcnQgeyBDb21wb25lbnRzIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbSc7XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQWN0aW9uTGlzdCBleHRlbmRzIENvbXBvbmVudHMuRHNBY3Rpb25MaXN0IHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWFjdGlvbi1saXN0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRHNBY3Rpb25MaXN0IHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNBY3Rpb25MaXN0SXRlbSBleHRlbmRzIENvbXBvbmVudHMuRHNBY3Rpb25MaXN0SXRlbSB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1hY3Rpb24tbGlzdC1pdGVtJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRHNBY3Rpb25MaXN0SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQWxlcnQgZXh0ZW5kcyBDb21wb25lbnRzLkRzQWxlcnQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhY3Rpb25zZGlyZWN0aW9uJywgJ3Zpc2libGUnXSxcbiAgbWV0aG9kczogWydzaG93JywgJ3Nob3dBbGVydCcsICdzaG93Q29uZmlybSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtYWxlcnQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FjdGlvbnNkaXJlY3Rpb24nLCAndmlzaWJsZSddLFxuICBvdXRwdXRzOiBbJ2J1dHRvbkNsaWNrJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNBbGVydCB7XG4gIC8qKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIG9uZSBvZiB0aGUgYWxlcnQncyBidXR0b25zLiBAZXhxbXBsZSBidXR0b24tY2xpY2sqL1xuICBidXR0b25DbGljayE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnYnV0dG9uQ2xpY2snXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNBbGVydEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudHMuRHNBbGVydEJ1dHRvbiB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2NvbmZpcm0nLCAnZGlzYWJsZWQnLCAnaGlnaGxpZ2h0JywgJ2xhYmVsJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1hbGVydC1idXR0b24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2NvbmZpcm0nLCAnZGlzYWJsZWQnLCAnaGlnaGxpZ2h0JywgJ2xhYmVsJywgJ3ZhbHVlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNBbGVydEJ1dHRvbiB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQW5ub3VuY2VtZW50QmFyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0Fubm91bmNlbWVudEJhciB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1hbm5vdW5jZW1lbnQtYmFyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRHNBbm5vdW5jZW1lbnRCYXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0FwcCBleHRlbmRzIENvbXBvbmVudHMuRHNBcHAge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtYXBwJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRHNBcHAge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0JvcmRlcmVkRm9ybUdyb3VwIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0JvcmRlcmVkRm9ybUdyb3VwIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlyZWN0aW9uJywgJ3NpemUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWJvcmRlcmVkLWZvcm0tZ3JvdXAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2RpcmVjdGlvbicsICdzaXplJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNCb3JkZXJlZEZvcm1Hcm91cCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQm9yZGVyZWRGb3JtSXRlbSBleHRlbmRzIENvbXBvbmVudHMuRHNCb3JkZXJlZEZvcm1JdGVtIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWJvcmRlcmVkLWZvcm0taXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzQm9yZGVyZWRGb3JtSXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0J1dHRvbiB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3NpemUnLCAnc3RyZXRjaCcsICd0eXBlJywgJ3VuZm9jdXNhYmxlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1idXR0b24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3NpemUnLCAnc3RyZXRjaCcsICd0eXBlJywgJ3VuZm9jdXNhYmxlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNCdXR0b24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0J1dHRvbkJhciBleHRlbmRzIENvbXBvbmVudHMuRHNCdXR0b25CYXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXJlY3Rpb24nXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWJ1dHRvbi1iYXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2RpcmVjdGlvbiddXG59KVxuZXhwb3J0IGNsYXNzIERzQnV0dG9uQmFyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNDYXJkIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NhcmQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydzaGFkb3cnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWNhcmQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3NoYWRvdyddXG59KVxuZXhwb3J0IGNsYXNzIERzQ2FyZCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ2FyZENvbGxhcHNhYmxlIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NhcmRDb2xsYXBzYWJsZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2xhYmVsJywgJ29wZW4nLCAndHlwZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtY2FyZC1jb2xsYXBzYWJsZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnbGFiZWwnLCAnb3BlbicsICd0eXBlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNDYXJkQ29sbGFwc2FibGUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0NhcmRDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NhcmRDb250ZW50IHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWNhcmQtY29udGVudCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzQ2FyZENvbnRlbnQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0NhcmRIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnRzLkRzQ2FyZEhlYWRlciB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1jYXJkLWhlYWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzQ2FyZEhlYWRlciB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ2FyZEltYWdlSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NhcmRJbWFnZUhlYWRlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3VybCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtY2FyZC1pbWFnZS1oZWFkZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3VybCddXG59KVxuZXhwb3J0IGNsYXNzIERzQ2FyZEltYWdlSGVhZGVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNDYXJkVGFiQmFyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NhcmRUYWJCYXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydzaG93J11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1jYXJkLXRhYi1iYXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3Nob3cnXSxcbiAgb3V0cHV0czogWydzaG93Q2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNDYXJkVGFiQmFyIHtcbiAgLyoqIFRoaXMgZXZlbnQgd2lsbCBiZSBkZWxlZ2F0ZWQgd2hlbiB0aGUgdGFiIHN3aXRjaGVzLlxuSXQgY29udGFpbnMgdGhlIGBuYW1lYCBvZiB0aGUgY3VycmVudCBgPGRzLWNhcmQtdGFiLXBhZ2U+YC4gQGV4YW1wbGUgc2hvdy1jaGFuZ2UqL1xuICBzaG93Q2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydzaG93Q2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ2FyZFRhYlBhZ2UgZXh0ZW5kcyBDb21wb25lbnRzLkRzQ2FyZFRhYlBhZ2Uge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydsYWJlbCcsICduYW1lJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1jYXJkLXRhYi1wYWdlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydsYWJlbCcsICduYW1lJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNDYXJkVGFiUGFnZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ2VudGVyZWRCb2FyZCBleHRlbmRzIENvbXBvbmVudHMuRHNDZW50ZXJlZEJvYXJkIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sdW1ucyddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtY2VudGVyZWQtYm9hcmQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvbHVtbnMnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0NlbnRlcmVkQm9hcmQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0NlbnRlcmVkQm9hcmRJdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NlbnRlcmVkQm9hcmRJdGVtIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWNlbnRlcmVkLWJvYXJkLWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEc0NlbnRlcmVkQm9hcmRJdGVtIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNDaGFydFNhbXBsZSBleHRlbmRzIENvbXBvbmVudHMuRHNDaGFydFNhbXBsZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2Zvcm1hdHRlZFZhbHVlJywgJ2xhYmVsJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsndG9DaGFydFNhbXBsZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtY2hhcnQtc2FtcGxlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICdmb3JtYXR0ZWRWYWx1ZScsICdsYWJlbCcsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNDaGFydFNhbXBsZSB7XG4gIC8qKiBUcmlnZ2VycyB3aGVuIHZhbHVlIG9mIHRoZSBzYW1wbGUgY2hhbmdlcy4gQHZhbHVlIG51bWJlcjogRGVsZWdhdGVzIHRoZSBuZXcgdmFsdWUuKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3ZhbHVlQ2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ2hlY2tib3ggZXh0ZW5kcyBDb21wb25lbnRzLkRzQ2hlY2tib3gge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2Vycm9ybWVzc2FnZScsICdsYWJlbCcsICdyZWFkb25seScsICdyZXF1aXJlZCddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtY2hlY2tib3gnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2xhYmVsJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJ10sXG4gIG91dHB1dHM6IFsnY2hlY2tlZENoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIERzQ2hlY2tib3gge1xuICAvKiogSW5kaWNhdGVzIHRoYXQgYW4gZXJyb3IgZXhpc3Qgd2l0aGluIHRoZSBjaGVja2JveC4gQ29sb3JzIHRoZSBib3JkZXIgaW4gcmVkLiBAZXhhbXBsZSBjaGVjay1ldmVudCovXG4gIGNoZWNrZWRDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8Ym9vbGVhbj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydjaGVja2VkQ2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzQ29sdW1uIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0NvbHVtbiB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2FsaWduJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1jb2x1bW4nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FsaWduJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNDb2x1bW4ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5pbXBvcnQgeyBEYXRlRXJyb3IgYXMgSURzRGF0ZUlucHV0RGF0ZUVycm9yIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL2NvbXBvbmVudHMvZm9ybS9pbnB1dHMvZGF0ZS9kYXRlJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0RhdGVJbnB1dCBleHRlbmRzIENvbXBvbmVudHMuRHNEYXRlSW5wdXQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbWF4JywgJ21pbicsICdtb2RlJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1kYXRlLWlucHV0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbWF4JywgJ21pbicsICdtb2RlJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZScsICdlcnJvckZvdW5kJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNEYXRlSW5wdXQge1xuICAvKiogRGVsZWdhdGVzIHRoZSBjdXJyZW50IHZhbHVlIHdoaWxlIHRoZSB1c2VyIGlzIGVkaXRpbmcgdGhlIGlucHV0LiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGZpbmFsIHZhbHVlIHdoZW4gdGhlIHVzZXIgc3VibWl0cyB0aGUgcmVzdWx0IGJ5IHByZXNzaW5nICdFbnRlcicgb3IgdW5mb2N1c2luZyB0aGlzIGNvbXBvbmVudC4gQGV4YW1wbGUgY2hhbmdlLWV2ZW50cyovXG4gIHZhbHVlQ29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGZpbmFsIHZhbHVlIHdoZW4gdGhlIHVzZXIgc3VibWl0cyB0aGUgcmVzdWx0IGJ5IHByZXNzaW5nICdFbnRlcicgb3IgdW5mb2N1c2luZyB0aGlzIGNvbXBvbmVudC4gQGV4YW1wbGUgY2hhbmdlLWV2ZW50cyovXG4gIGVycm9yRm91bmQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SURzRGF0ZUlucHV0RGF0ZUVycm9yPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnLCAnZXJyb3JGb3VuZCddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0RhdGVSYW5nZSBleHRlbmRzIENvbXBvbmVudHMuRHNEYXRlUmFuZ2Uge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydtYXgnLCAnbWluJywgJ21vZGUnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWRhdGUtcmFuZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ21heCcsICdtaW4nLCAnbW9kZScsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzRGF0ZVJhbmdlIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNEb251dENoYXJ0IGV4dGVuZHMgQ29tcG9uZW50cy5Ec0RvbnV0Q2hhcnQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydvZmZzZXQnLCAncmFkaXVzJywgJ3NjYWxlJywgJ3NlZ21lbnR3aWR0aCcsICdzdGFydGFuZ2xlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1kb251dC1jaGFydCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnb2Zmc2V0JywgJ3JhZGl1cycsICdzY2FsZScsICdzZWdtZW50d2lkdGgnLCAnc3RhcnRhbmdsZSddLFxuICBvdXRwdXRzOiBbJ3NlZ21lbnRTZWxlY3QnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0RvbnV0Q2hhcnQge1xuICAvKiogVHJpZ2dlcnMgd2hlbiBhIHNlZ21lbnQgaXMgY2xpY2tlZC4gSXQgZGVsZWdhdGVzIHRoZSBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgc2VnbWVudC4gQHZhbHVlIG51bWJlcjogVGhlIGluZGV4IG9mIHRoZSBzZWxlY3RlZCBzZWdtZW50LiovXG4gIHNlZ21lbnRTZWxlY3QhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3NlZ21lbnRTZWxlY3QnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgU3RyaW5nT3JPYmplY3QgYXMgSURzRHJvcGRvd25TdHJpbmdPck9iamVjdCB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9jb21wb25lbnRzL2Zvcm0vZHMtZHJvcGRvd24vZHMtZHJvcGRvd24nO1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzRHJvcGRvd24gZXh0ZW5kcyBDb21wb25lbnRzLkRzRHJvcGRvd24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlbHNlb3B0aW9uJywgJ2Vsc2VvcHRpb25idXR0b25sYWJlbCcsICdlbHNlb3B0aW9uaW5wdXRsYWJlbCcsICdlbHNlb3B0aW9uc2VsZWN0ZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2ljb24nLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncGxhY2Vob2xkZXInLCAncG9wdXBwb3NpdGlvbicsICdyZWFkb25seScsICdyZXF1aXJlZCcsICd0ZXh0YWxpZ24nLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWRyb3Bkb3duJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlbHNlb3B0aW9uJywgJ2Vsc2VvcHRpb25idXR0b25sYWJlbCcsICdlbHNlb3B0aW9uaW5wdXRsYWJlbCcsICdlbHNlb3B0aW9uc2VsZWN0ZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2ljb24nLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncGxhY2Vob2xkZXInLCAncG9wdXBwb3NpdGlvbicsICdyZWFkb25seScsICdyZXF1aXJlZCcsICd0ZXh0YWxpZ24nLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNEcm9wZG93biB7XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9yIHRleHQgaW5wdXQgKGBlbHNlb3B0aW9uYCkgd2hpbGUgdGhlIHVzZXIgaXMgc3RpbGwgZWRpdGluZy4gQGV4YW1wbGUgY29tcGxleCovXG4gIHZhbHVlQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEc0Ryb3Bkb3duU3RyaW5nT3JPYmplY3Q+PjtcbiAgLyoqIERlbGVnYXRlcyB0aGUgZmluYWwgc2VsZWN0aW9uIG9yIHRleHQgaW5wdXQgKGBlbHNlb3B0aW9uYCkuXG5UaGUgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgZHJvcGRvd24gbG9zZXMgZm9jdXMgb3IgcHVzaGluZyB0aGUgJ0VudGVyJyBrZXkuIEBleGFtcGxlIGNvbXBsZXgqL1xuICB2YWx1ZUNvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEc0Ryb3Bkb3duU3RyaW5nT3JPYmplY3Q+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0Ryb3Bkb3duT3B0aW9uIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0Ryb3Bkb3duT3B0aW9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnaWNvbicsICdsYWJlbCcsICdzZWNvbmRhcnlsYWJlbCcsICd0ZXJ0aWFyeWxhYmVsJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1kcm9wZG93bi1vcHRpb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2ljb24nLCAnbGFiZWwnLCAnc2Vjb25kYXJ5bGFiZWwnLCAndGVydGlhcnlsYWJlbCcsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzRHJvcGRvd25PcHRpb24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0ZtRXJnZWJuaXN1ZWJlcnNpY2h0IGV4dGVuZHMgQ29tcG9uZW50cy5Ec0ZtRXJnZWJuaXN1ZWJlcnNpY2h0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZG9udXRjZW50ZXJsYWJlbCcsICdkb251dGxhYmVsJywgJ2RvbnV0c3VibGFiZWwnLCAnZG9udXR2aXNpYmxlJywgJ2ZpcnN0Y29sdW1uJywgJ2ZpcnN0Y29sdW1uaW5mbycsICdmaXJzdGNvbnRyaWJ1dGlvbmxhYmVsJywgJ2ZpcnN0Y29udHJpYnV0aW9uc3VibGFiZWwnLCAnc2Vjb25kY29sdW1uJywgJ3NlY29uZGNvbHVtbmluZm8nLCAnc2Vjb25kY29udHJpYnV0aW9ubGFiZWwnLCAnc2Vjb25kY29udHJpYnV0aW9uc3VibGFiZWwnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWZtLWVyZ2VibmlzdWViZXJzaWNodCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZG9udXRjZW50ZXJsYWJlbCcsICdkb251dGxhYmVsJywgJ2RvbnV0c3VibGFiZWwnLCAnZG9udXR2aXNpYmxlJywgJ2ZpcnN0Y29sdW1uJywgJ2ZpcnN0Y29sdW1uaW5mbycsICdmaXJzdGNvbnRyaWJ1dGlvbmxhYmVsJywgJ2ZpcnN0Y29udHJpYnV0aW9uc3VibGFiZWwnLCAnc2Vjb25kY29sdW1uJywgJ3NlY29uZGNvbHVtbmluZm8nLCAnc2Vjb25kY29udHJpYnV0aW9ubGFiZWwnLCAnc2Vjb25kY29udHJpYnV0aW9uc3VibGFiZWwnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0ZtRXJnZWJuaXN1ZWJlcnNpY2h0IHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNGbUVyZ2VibmlzdWViZXJzaWNodEl0ZW0gZXh0ZW5kcyBDb21wb25lbnRzLkRzRm1FcmdlYm5pc3VlYmVyc2ljaHRJdGVtIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZmlyc3Rjb2x1bW5pbmZvJywgJ2ZpcnN0Y29sdW1udmFsdWUnLCAnbGFiZWwnLCAnc2Vjb25kY29sdW1uaW5mbycsICdzZWNvbmRjb2x1bW52YWx1ZScsICdzdWJsYWJlbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtZm0tZXJnZWJuaXN1ZWJlcnNpY2h0LWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2ZpcnN0Y29sdW1uaW5mbycsICdmaXJzdGNvbHVtbnZhbHVlJywgJ2xhYmVsJywgJ3NlY29uZGNvbHVtbmluZm8nLCAnc2Vjb25kY29sdW1udmFsdWUnLCAnc3VibGFiZWwnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0ZtRXJnZWJuaXN1ZWJlcnNpY2h0SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzRm1FcmdlYm5pc3VlYmVyc2ljaHRUYWJsZSBleHRlbmRzIENvbXBvbmVudHMuRHNGbUVyZ2VibmlzdWViZXJzaWNodFRhYmxlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGFiZWwnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWZtLWVyZ2VibmlzdWViZXJzaWNodC10YWJsZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnbGFiZWwnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0ZtRXJnZWJuaXN1ZWJlcnNpY2h0VGFibGUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0Zvb3RlciBleHRlbmRzIENvbXBvbmVudHMuRHNGb290ZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb21wYW55aW5mbycsICdzaG93aW1wcmludCcsICdzaG93dGVybXNvZnVzZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtZm9vdGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb21wYW55aW5mbycsICdzaG93aW1wcmludCcsICdzaG93dGVybXNvZnVzZSddLFxuICBvdXRwdXRzOiBbJ2luZm9CdXR0b25DbGlja2VkJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNGb290ZXIge1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhbiBpbmZvcm1hdGlvbiBidXR0b24uIFRoZSBldmVudCBob2xkcyB0aGUgaW5mb3JtYXRpb24gYWJvdXQgd2hpY2ggYnV0dG9uIGlzIGNsaWNrZWQuIEBleGFtcGxlIGluZm8tYnV0dG9uLWV2ZW50Ki9cbiAgaW5mb0J1dHRvbkNsaWNrZWQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ2luZm9CdXR0b25DbGlja2VkJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzRm9ybUxheW91dCBleHRlbmRzIENvbXBvbmVudHMuRHNGb3JtTGF5b3V0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnc2l6ZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtZm9ybS1sYXlvdXQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3NpemUnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0Zvcm1MYXlvdXQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0Z1bGxzY3JlZW5TcGlubmVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0Z1bGxzY3JlZW5TcGlubmVyIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWZ1bGxzY3JlZW4tc3Bpbm5lcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzRnVsbHNjcmVlblNwaW5uZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0Z1bmN0aW9uSWNvbkJ1dHRvbiBleHRlbmRzIENvbXBvbmVudHMuRHNGdW5jdGlvbkljb25CdXR0b24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICd1bmZvY3VzYWJsZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtZnVuY3Rpb24taWNvbi1idXR0b24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ3VuZm9jdXNhYmxlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNGdW5jdGlvbkljb25CdXR0b24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0dyaWQgZXh0ZW5kcyBDb21wb25lbnRzLkRzR3JpZCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Jhc2UnLCAnbCcsICdtJywgJ3MnLCAneGwnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWdyaWQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Jhc2UnLCAnbCcsICdtJywgJ3MnLCAneGwnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0dyaWQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc0dyb3VwZWRUZXh0SW5wdXQgZXh0ZW5kcyBDb21wb25lbnRzLkRzR3JvdXBlZFRleHRJbnB1dCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2Vycm9ybWVzc2FnZScsICdsYWJlbCcsICdtYXNrJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1ncm91cGVkLXRleHQtaW5wdXQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2Vycm9ybWVzc2FnZScsICdsYWJlbCcsICdtYXNrJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzR3JvdXBlZFRleHRJbnB1dCB7XG4gIC8qKiBDaGFuZ2Ugb2YgdGhlIGVudGVyZWQgdmFsdWUgZHVyaW5nIHRoZSB1c2VyJ3MgaW5wdXQuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgLyoqIENvbmZpcm1hdGlvbiBvZiB0aGUgZW50ZXJlZCB2YWx1ZSBieSB0aGUgdXNlci4gRXZlbnQgaXMgdHJpZ2dlcmVkIGJ5XG5QcmVzc2luZyB0aGUgRW50ZXIga2V5IG9yIGJ5IGxlYXZpbmcgdGhlIGlucHV0IGZpZWxkLiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDb21wbGV0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddKTtcbiAgfVxufVxuXG5pbXBvcnQgeyBHcm93U3RhcnRFdmVudCBhcyBJRHNHcm93Qm94R3Jvd1N0YXJ0RXZlbnQgfSBmcm9tICdAZHZhZy9kZXNpZ24tc3lzdGVtL2Rpc3QvdHlwZXMvY29tcG9uZW50cy9sYXlvdXQvZHMtZ3Jvdy1ib3gvZHMtZ3Jvdy1ib3gnO1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzR3Jvd0JveCBleHRlbmRzIENvbXBvbmVudHMuRHNHcm93Qm94IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYW5pbWF0ZW9uaW5pdCcsICdvcGVuJywgJ3NsaWRlY29udGVudCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtZ3Jvdy1ib3gnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FuaW1hdGVvbmluaXQnLCAnb3BlbicsICdzbGlkZWNvbnRlbnQnXSxcbiAgb3V0cHV0czogWydncm93U3RhcnQnLCAnY29udGVudFZpc2liaWxpdHlDaGFuZ2UnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0dyb3dCb3gge1xuICAvKiogRXZlbnQga2VubnplaWNobmV0IGRlbiBBYnNjaGx1c3MgZWluZXIgVHJhbnNpdGlvbi4gRGllIEV2ZW50LVBheWxvYWQgKGBldmVudC5kZXRhaWxgKVxuZW50aMOkbHQgU3RhdHVzLUluZm9ybWF0aW9uZW4genVyIEdyb3dib3guICovXG4gIGdyb3dTdGFydCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHNHcm93Qm94R3Jvd1N0YXJ0RXZlbnQ+PjtcbiAgLyoqIFdpcmZ0IEVyZ2VpZ25pcywgd2VubiBzaWNoIGRpZSBTaWNodGJhcmtlaXQgZGVzIENvbnRlbnRzIMOkbmRlcnQuXG5EaWUgRXZlbnQtUGF5bG9hZCAoYGV2ZW50LmRldGFpbGApIGVudGjDpGx0IGVpbmVuIGJvb2xlYW4sIG9iIGRlclxuQ29udGVudCBzaWNodGJhciBpc3QuICovXG4gIGNvbnRlbnRWaXNpYmlsaXR5Q2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PGJvb2xlYW4+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnZ3Jvd1N0YXJ0JywgJ2NvbnRlbnRWaXNpYmlsaXR5Q2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0hlYWRlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2JyYW5kJywgJ2Z1bGxzY3JlZW4nXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWhlYWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYnJhbmQnLCAnZnVsbHNjcmVlbiddXG59KVxuZXhwb3J0IGNsYXNzIERzSGVhZGVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNIZWFkZXJBY3Rpb24gZXh0ZW5kcyBDb21wb25lbnRzLkRzSGVhZGVyQWN0aW9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnaGlnaGxpZ2h0JywgJ2xhYmVsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1oZWFkZXItYWN0aW9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydoaWdobGlnaHQnLCAnbGFiZWwnXSxcbiAgb3V0cHV0czogWydpbnRlcmFjdGlvbiddXG59KVxuZXhwb3J0IGNsYXNzIERzSGVhZGVyQWN0aW9uIHtcbiAgLyoqIEZpcmVkIHdoZW4gdXNlciBpbnRlcmFjdHMgd2l0aCB0aGlzIGl0ZW0uXG5cbkV2ZW50IGNvbnRhaW5zIHRoZSBsYWJlbCBhdHRyaWJ1dGUgb2YgdGhlIGFjdGlvbi4gKi9cbiAgaW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ2ludGVyYWN0aW9uJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSGVhZGVyQWN0aW9uTGlzdCBleHRlbmRzIENvbXBvbmVudHMuRHNIZWFkZXJBY3Rpb25MaXN0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGFiZWwnLCAnb3BlbiddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtaGVhZGVyLWFjdGlvbi1saXN0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydsYWJlbCcsICdvcGVuJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNIZWFkZXJBY3Rpb25MaXN0IHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNIZWFkZXJDdXN0b21lciBleHRlbmRzIENvbXBvbmVudHMuRHNIZWFkZXJDdXN0b21lciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ25hbWUnLCAndHlwZWxhYmVsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1oZWFkZXItY3VzdG9tZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ25hbWUnLCAndHlwZWxhYmVsJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNIZWFkZXJDdXN0b21lciB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSGVhZGVyVXNlciBleHRlbmRzIENvbXBvbmVudHMuRHNIZWFkZXJVc2VyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnaW1hZ2V1cmwnLCAnbmFtZScsICd1c2VybmFtZWludGVyYWN0YWJsZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtaGVhZGVyLXVzZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2ltYWdldXJsJywgJ25hbWUnLCAndXNlcm5hbWVpbnRlcmFjdGFibGUnXSxcbiAgb3V0cHV0czogWydzaWduT3V0JywgJ3VzZXJuYW1lSW50ZXJhY3Rpb24nXVxufSlcbmV4cG9ydCBjbGFzcyBEc0hlYWRlclVzZXIge1xuICAvKiogRXZlbnQgd2lyZCBnZWZldWVydCwgd2VubiBkZXIgTnV0emVyIHNpY2ggYWJtZWxkZW4gbcO2Y2h0ZS4gKi9cbiAgc2lnbk91dCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDx2b2lkPj47XG4gIC8qKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoZSBOYW1lIG9mIHRoZSBjdXJyZW50IHVzZXIsIHdpdGhpbiB0aGUgYXZhdGFyLW1lbnUuICovXG4gIHVzZXJuYW1lSW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydzaWduT3V0JywgJ3VzZXJuYW1lSW50ZXJhY3Rpb24nXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNIZXJvSW1hZ2UgZXh0ZW5kcyBDb21wb25lbnRzLkRzSGVyb0ltYWdlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsndXJsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1oZXJvLWltYWdlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWyd1cmwnXVxufSlcbmV4cG9ydCBjbGFzcyBEc0hlcm9JbWFnZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSHIgZXh0ZW5kcyBDb21wb25lbnRzLkRzSHIge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtaHInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEc0hyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNJY29uIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0ljb24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb2xvcicsICdpY29uJywgJ3NpemUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWljb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2ljb24nLCAnc2l6ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzSWNvbiB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSWNvbkJ1dHRvbiBleHRlbmRzIENvbXBvbmVudHMuRHNJY29uQnV0dG9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ24nLCAnYmFja2dyb3VuZGNvbG9yJywgJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ3NpemUnLCAndW5mb2N1c2FibGUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLWljb24tYnV0dG9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhbGlnbicsICdiYWNrZ3JvdW5kY29sb3InLCAnY29sb3InLCAnZGlzYWJsZWQnLCAnc2l6ZScsICd1bmZvY3VzYWJsZSddXG59KVxuZXhwb3J0IGNsYXNzIERzSWNvbkJ1dHRvbiB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzSW5mbyBleHRlbmRzIENvbXBvbmVudHMuRHNJbmZvIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnaGlkZWJ1dHRvbicsICdwb3B1cHZpc2libGUnLCAnc2l6ZSddLFxuICBtZXRob2RzOiBbJ3NldE1vZGFsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1pbmZvJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydoaWRlYnV0dG9uJywgJ3BvcHVwdmlzaWJsZScsICdzaXplJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNJbmZvIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNMaW5rIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0xpbmsge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWyd0YXJnZXQnLCAndXJsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1saW5rJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWyd0YXJnZXQnLCAndXJsJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNMaW5rIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNMb2dvIGV4dGVuZHMgQ29tcG9uZW50cy5Ec0xvZ28ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWyd0eXBlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1sb2dvJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWyd0eXBlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNMb2dvIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNNb2RhbCBleHRlbmRzIENvbXBvbmVudHMuRHNNb2RhbCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2FsbG93YmFja2dyb3VuZGNsb3NlJywgJ2NvbnRlbnRjb2xvcicsICdsYWJlbCcsICdzaXplJywgJ3Zpc2libGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLW1vZGFsJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhbGxvd2JhY2tncm91bmRjbG9zZScsICdjb250ZW50Y29sb3InLCAnbGFiZWwnLCAnc2l6ZScsICd2aXNpYmxlJ10sXG4gIG91dHB1dHM6IFsnbW9kYWxPcGVuZWQnLCAnbW9kYWxDbG9zZWQnXVxufSlcbmV4cG9ydCBjbGFzcyBEc01vZGFsIHtcbiAgLyoqIFdpcmQgZ2VmZXVlcnQsIHdlbm4gZGVyIERpYWxvZyBnZcO2ZmZuZXQgd2lyZC4gKi9cbiAgbW9kYWxPcGVuZWQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICAvKiogV2lyZCBnZWZldWVydCwgd2VubiBkZXIgRGlhbG9nIHZvbSBOdXR6ZXIgZ2VzY2hsb3NzZW4gd2lyZC4gKFNjaGxpZcOfZW4tQnV0dG9uL0hpbnRlcmdydW5kIGtsaWNrZW4pICovXG4gIG1vZGFsQ2xvc2VkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnbW9kYWxPcGVuZWQnLCAnbW9kYWxDbG9zZWQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNOYXZpZ2F0ZWRDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50cy5Ec05hdmlnYXRlZENvbnRlbnQge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtbmF2aWdhdGVkLWNvbnRlbnQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEc05hdmlnYXRlZENvbnRlbnQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5pbXBvcnQgeyBOYXZpZ2F0ZWRSb3V0ZSBhcyBJRHNOYXZpZ2F0ZWRDb250ZW50TWVudU5hdmlnYXRlZFJvdXRlIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL2NvbXBvbmVudHMvc2NhZmZvbGQvbmF2aWdhdGVkLWNvbnRlbnQvZHMtbmF2aWdhdGVkLWNvbnRlbnQtbWVudS9kcy1uYXZpZ2F0ZWQtY29udGVudC1tZW51JztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc05hdmlnYXRlZENvbnRlbnRNZW51IGV4dGVuZHMgQ29tcG9uZW50cy5Ec05hdmlnYXRlZENvbnRlbnRNZW51IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWN0aXZlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1uYXZpZ2F0ZWQtY29udGVudC1tZW51JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhY3RpdmUnXSxcbiAgb3V0cHV0czogWyduYXZpZ2F0ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzTmF2aWdhdGVkQ29udGVudE1lbnUge1xuICAvKiogSXMgdHJpZ2dlcmVkIGlmIGFuIHVzZXIgaW50ZXJhY3RzIHdpdGggdGhlIG1lbnUgZW50cmllcy5cblRoZSBldmVudCBkZXRhaWwgY29udGFpbnMgZm9sbG93aW5nIGRhdGEgc3RydWN0dXJlOiBge3BhdGg6ICd0b3BsZXZlbC9zdWJsZXZlbCcsIHNlZ21lbnRzOiBbJ3RvcGxldmVsJywgJ3N1YmxldmVsJ119YCAqL1xuICBuYXZpZ2F0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHNOYXZpZ2F0ZWRDb250ZW50TWVudU5hdmlnYXRlZFJvdXRlPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ25hdmlnYXRlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzTmF2aWdhdGVkQ29udGVudE1lbnVJdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5Ec05hdmlnYXRlZENvbnRlbnRNZW51SXRlbSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Vycm9yJywgJ2xhYmVsJywgJ3N1Y2Nlc3MnLCAndmFsdWUnLCAnd2FybmluZyddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtbmF2aWdhdGVkLWNvbnRlbnQtbWVudS1pdGVtJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydlcnJvcicsICdsYWJlbCcsICdzdWNjZXNzJywgJ3ZhbHVlJywgJ3dhcm5pbmcnXVxufSlcbmV4cG9ydCBjbGFzcyBEc05hdmlnYXRlZENvbnRlbnRNZW51SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzTm90aWZpY2F0aW9uVG9hc3QgZXh0ZW5kcyBDb21wb25lbnRzLkRzTm90aWZpY2F0aW9uVG9hc3Qge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjbG9zZWFmdGVyJywgJ2ljb24nLCAnaWNvbmNvbG9yJywgJ3N1YmNvbnRlbnQnLCAndGl0bGVzdHJpbmcnLCAndmlzaWJsZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtbm90aWZpY2F0aW9uLXRvYXN0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjbG9zZWFmdGVyJywgJ2ljb24nLCAnaWNvbmNvbG9yJywgJ3N1YmNvbnRlbnQnLCAndGl0bGVzdHJpbmcnLCAndmlzaWJsZSddLFxuICBvdXRwdXRzOiBbJ2Nsb3NlTm90aWZpY2F0aW9uJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNOb3RpZmljYXRpb25Ub2FzdCB7XG4gIC8qKiBGaXJlcyB3aGVuIHRoZSBub3RpZmljYXRpb24gY2xvc2VzIGF1dG9tYXRpY2FsbHkgb3IgYnkgY2xpY2tpbmcgb24gdGhlIGNsb3NlIGJ1dHRvbi4gQGV4YW1wbGUgY2xvc2Utbm90aWZpY2F0aW9uKi9cbiAgY2xvc2VOb3RpZmljYXRpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydjbG9zZU5vdGlmaWNhdGlvbiddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc051bWJlcklucHV0IGV4dGVuZHMgQ29tcG9uZW50cy5Ec051bWJlcklucHV0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ21heCcsICdtaW4nLCAncGxhY2Vob2xkZXInLCAncHJlY2lzaW9uJywgJ3Byb2ZpbGUnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndGhvdXNhbmRzZXBhcmF0b3InLCAndW5pdGljb24nLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLW51bWJlci1pbnB1dCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ21heCcsICdtaW4nLCAncGxhY2Vob2xkZXInLCAncHJlY2lzaW9uJywgJ3Byb2ZpbGUnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndGhvdXNhbmRzZXBhcmF0b3InLCAndW5pdGljb24nLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNOdW1iZXJJbnB1dCB7XG4gIC8qKiBDaGFuZ2VzIG9mIHRoZSBpbnB1dCB2YWx1ZSBkdXJpbmcgdGhlIGlucHV0IG9mIHRoZSB1c2VyLiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIC8qKiBDb25maXJtYXRpb24gb2YgdGhlIGlucHV0IHZhbHVlLiBFdmVudCBpcyB0cmlnZ2VyZWQsIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyByZXR1cm4gb3IgbGVhdmluZyB0aGUgaW5wdXQgZmllbGQuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PG51bWJlcj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzUGFnZSBleHRlbmRzIENvbXBvbmVudHMuRHNQYWdlIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXBhZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEc1BhZ2Uge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1BhZ2luYXRvciBleHRlbmRzIENvbXBvbmVudHMuRHNQYWdpbmF0b3Ige31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb3VudCcsICdjdXJyZW50JywgJ3JhbmdlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1wYWdpbmF0b3InLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvdW50JywgJ2N1cnJlbnQnLCAncmFuZ2UnXSxcbiAgb3V0cHV0czogWydwYWdlQ2hhbmdlZCddXG59KVxuZXhwb3J0IGNsYXNzIERzUGFnaW5hdG9yIHtcbiAgLyoqIEV2ZW50IHdpcmQgZ2VmZXVlcnQsIHdlbm4gZGllIFNlaXRlLCBkdXJjaCBLbGlja2VuIGRlciBQZmVpbGUgb2RlciBkZXIgU2VpdGVuemFobGVuLCBnZcOkbmRlcnQgd2lyZC5cbkRlciBkZWxlZ2llcnRlIFdlcnQsIHJlZmxla3RpZXJ0IGRhcyBgY3VycmVudGAtQXR0cmlidXQuICovXG4gIHBhZ2VDaGFuZ2VkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PG51bWJlcj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydwYWdlQ2hhbmdlZCddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1BsYWNlaG9sZGVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1BsYWNlaG9sZGVyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYm94JywgJ2NhcmQnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXBsYWNlaG9sZGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydib3gnLCAnY2FyZCddXG59KVxuZXhwb3J0IGNsYXNzIERzUGxhY2Vob2xkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1JhZGlvQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1JhZGlvQnV0dG9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2xhYmVsJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy1yYWRpby1idXR0b24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2Vycm9ybWVzc2FnZScsICdsYWJlbCcsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzUmFkaW9CdXR0b24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1JhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBDb21wb25lbnRzLkRzUmFkaW9CdXR0b25Hcm91cCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2Vycm9ybWVzc2FnZScsICdyZWFkb25seScsICdyZXF1aXJlZCcsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtcmFkaW8tYnV0dG9uLWdyb3VwJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIERzUmFkaW9CdXR0b25Hcm91cCB7XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgYDxkcy1yYWRpby1idXR0b24+YCBlbGVtZW50J3MgdmFsdWUuXG5UaGlzIGV2ZW50IHdpbGwgbm90IHRyaWdnZXIgd2hlbiBzZXR0aW5nIHRoZSBgdmFsdWVgIGluIEphdmFTY3JpcHQuIEBleGFtcGxlIHJlYWQtdmFsdWUqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgU2VhcmNoQXV0b0NvbXBsZXRlSGFuZGxlciBhcyBJRHNTZWFyY2hTZWFyY2hBdXRvQ29tcGxldGVIYW5kbGVyIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL2NvbXBvbmVudHMvZm9ybS9kcy1zZWFyY2gvYXV0by1jb21wbGV0ZS12YWx1ZSc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNTZWFyY2ggZXh0ZW5kcyBDb21wb25lbnRzLkRzU2VhcmNoIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYXV0b3Njcm9sbGludG92aWV3JywgJ25vcmVzdWx0c3RleHQnLCAncGxhY2Vob2xkZXInLCAndmFsdWUnLCAndmlzaWJsZWVudHJpZXMnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXNlYXJjaCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYXV0b3Njcm9sbGludG92aWV3JywgJ25vcmVzdWx0c3RleHQnLCAncGxhY2Vob2xkZXInLCAndmFsdWUnLCAndmlzaWJsZWVudHJpZXMnXSxcbiAgb3V0cHV0czogWydzZWFyY2gnLCAnc2VsZWN0U2VhcmNoJywgJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEc1NlYXJjaCB7XG4gIC8qKiBcbldoaWxlIHRoZSB1c2VyIGlzIHR5cGluZywgdGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgYW5kIHJldHVybnMgYSBjb250cm9sbGVyIGluIHRoZSBldmVudCBwYXlsb2FkIChgZXZlbnQuZGV0YWlsYCkuXG5UaGlzIGNvbnRyb2xsZXIgY2FuIGJlIHVzZWQgdG8gc2VuZCBpbnB1dCBmaWVsZCB2YWx1ZXMgZm9yIGF1dG9jb21wbGV0aW9uLlxuVGhlIHVzZXIgZW50ZXJlZCB2YWx1ZSBjYW4gYmUgZGV0ZXJtaW5lZCB1c2luZyBgZXZlbnQuZGV0YWlsLnZhbHVlYC5cblxuVGhlIGdlbmVyYXRlZCBzZWFyY2ggc3VnZ2VzdGlvbnMgYXJlIHBhc3NlZCBhcyBhbiBhcnJheSB0byB0aGUgYGV2ZW50LmRldGFpbC5wcm92aWRlVmFsdWVzKClgXG5tZXRob2QuIEEgc2VhcmNoIHN1Z2dlc3Rpb24gaXMgYW4gb2JqZWN0IHdpdGggdGhlIHByb3BlcnRpZXM6XG5cbi0gYGxhYmVsYDogUHJpbWFyeSBzZWFyY2ggc3VnZ2VzdGlvbiB0ZXh0LCB3aGljaCB3aWxsIGJlIHRyYW5zZmVycmVkIHRvIHRoZSBpbnB1dCBmaWVsZCB3aGVuIGl0IGlzIGFjY2VwdGVkXG4tIGBwcmVsYWJlbGA6IE9wdGlvbmFsIHRleHQgYWJvdmUgdGhlIGxhYmVsIHRoYXQgZGVzY3JpYmVzIHRoZSBzZWFyY2ggc3VnZ2VzdGlvbiBpbiBtb3JlIGRldGFpbC5cbi0gYHN1YmxhYmVsYDogT3B0aW9uYWwgdGV4dCB1bmRlciB0aGUgbGFiZWwgdGhhdCBkZXNjcmliZXMgdGhlIHNlYXJjaCBzdWdnZXN0aW9uIGluIG1vcmUgZGV0YWlsXG4tIGBjYXRlZ29yeWA6IE9wdGlvbmFsIGNhdGVnb3JpemF0aW9uXG4tIGBkYXRhYDogT3B0aW9uYWwgZmllbGQgZm9yIGFueSBkYXRhLlxuXG5BIHNlYXJjaCBzdWdnZXN0aW9uIG9iamVjdCBjYW4gY29udGFpbiBmdXJ0aGVyIHByb3BlcnRpZXMsIHdoaWNoIGNhbiBiZSBldmFsdWF0ZWQgd2l0aCB0aGUgYHNlYXJjaFNlbGVjdGBcbmV2ZW50LiBAZXhhbXBsZSBleGFtcGxlKi9cbiAgc2VhcmNoITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEc1NlYXJjaFNlYXJjaEF1dG9Db21wbGV0ZUhhbmRsZXI+PjtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIHNlYXJjaCBzdWdnZXN0aW9uLlxuQXMgZXZlbnQgcGF5bG9hZCAoYGV2ZW50LmRldGFpbGApIHRoZSBvYmplY3QgaXMgc3VwcGxpZWQsXG53aGljaCBjcmVhdGVkIHRoZSBzZWFyY2ggc3VnZ2VzdGlvbi4gQGV4YW1wbGUgZXhhbXBsZSovXG4gIHNlbGVjdFNlYXJjaCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxhbnk+PjtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgc2VhcmNoIHRlcm0uICovXG4gIHZhbHVlQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICAvKiogQ29uZmlybWF0aW9uIG9mIHRoZSBlbnRlcmVkIHZhbHVlIGJ5IHRoZSB1c2VyLiBFdmVudCBpcyB0cmlnZ2VyZWQgYnlcbnByZXNzaW5nIHRoZSBFbnRlciBrZXkgb3IgYnkgbGVhdmluZyB0aGUgaW5wdXQgZmllbGQuICovXG4gIHZhbHVlQ29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3NlYXJjaCcsICdzZWxlY3RTZWFyY2gnLCAndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1NsaWRlciBleHRlbmRzIENvbXBvbmVudHMuRHNTbGlkZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydmb3JtYXR0ZWR2YWx1ZScsICdsYWJlbCcsICdtYXgnLCAnbWluJywgJ3JlYWRvbmx5JywgJ3N0ZXAnLCAndmFsdWUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXNsaWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZm9ybWF0dGVkdmFsdWUnLCAnbGFiZWwnLCAnbWF4JywgJ21pbicsICdyZWFkb25seScsICdzdGVwJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsndmFsdWVDaGFuZ2UnXVxufSlcbmV4cG9ydCBjbGFzcyBEc1NsaWRlciB7XG4gIC8qKiBVc2VyIG1hZGUgY2hhbmdlcy4gQ29udGFpbnMgdGhlIGNob3NlbiB2YWx1ZS4gQGV4YW1wbGUgdmFsdWUtY2hhbmdlKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3ZhbHVlQ2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzU3Bpbm5lciBleHRlbmRzIENvbXBvbmVudHMuRHNTcGlubmVyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnc2l6ZScsICd0aGVtZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtc3Bpbm5lcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnc2l6ZScsICd0aGVtZSddXG59KVxuZXhwb3J0IGNsYXNzIERzU3Bpbm5lciB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cbmltcG9ydCB7IFRhYmxlQ29uZmlnIGFzIElEc1RhYmxlVGFibGVDb25maWcgfSBmcm9tICdAZHZhZy9kZXNpZ24tc3lzdGVtL2Rpc3QvdHlwZXMvY29tcG9uZW50cy90YWJsZS9kcy10YWJsZS9kcy10YWJsZSc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNUYWJsZSBleHRlbmRzIENvbXBvbmVudHMuRHNUYWJsZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2luaXRpYWxzb3J0JywgJ2luaXRpYWxzb3J0ZGlyZWN0aW9uJywgJ21vZGUnLCAncGFnZXNpemUnLCAncGFnZXNpemVzJywgJ3Jvd2NvdW50JywgJ3Njcm9sbGFibGUnLCAnc2VsZWN0aW9uZW5hYmxlZCcsICdzZWxlY3Rpb25tb2RlJywgJ3ZpZXcnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXRhYmxlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydpbml0aWFsc29ydCcsICdpbml0aWFsc29ydGRpcmVjdGlvbicsICdtb2RlJywgJ3BhZ2VzaXplJywgJ3BhZ2VzaXplcycsICdyb3djb3VudCcsICdzY3JvbGxhYmxlJywgJ3NlbGVjdGlvbmVuYWJsZWQnLCAnc2VsZWN0aW9ubW9kZScsICd2aWV3J10sXG4gIG91dHB1dHM6IFsndGFibGVTdGF0ZUNoYW5nZWQnLCAncm93c1NlbGVjdGVkJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNUYWJsZSB7XG4gIC8qKiBUaGlzIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXMgc29vbiBhcyB0aGUgdGFibGVgcyBzdGF0ZSBjaGFuZ2VzIChlLmcuIHNvcnRpbmcsIHBhZ2luZy4uLikgQGV4YW1wbGUgdGFibGUtc3RhdGUtY2hhbmdlZCovXG4gIHRhYmxlU3RhdGVDaGFuZ2VkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEc1RhYmxlVGFibGVDb25maWc+PjtcbiAgLyoqIEluIGNhc2UgYSByb3cgaXMgc2VsZWN0ZWQgdGhpcyBldmVudCB3aWxsIGZpcmUgdGhlIGtleSBvZiB0aGUgcm93LiBAdmFsdWUgc3RyaW5nOiBJZiB0aGUgYHNlbGVjdGlvbm1vZGVgIGFsbG93cyBhIHNpbmdsZSBzZWxlY3Rpb24gdGhlIGV2ZW50IHdpbGwgZGVsZWdhdGUgb25lIHNlbGVjdGVkIHJvdyBrZXkuLEB2YWx1ZSBzdHJpbmdbXTogSWYgdGhlIGBzZWxlY3Rpb25tb2RlYCBhbGxvd3MgYSBtdWx0aSBzZWxlY3Rpb24gdGhlIGV2ZW50IHdpbGwgZGVsZWdhdGUgYWxsIHNlbGVjdGVkIHJvdyBrZXlzLlxuKiohISFFeHBlcmltZW50YWwgZmVhdHVyZSEhISoqKi9cbiAgcm93c1NlbGVjdGVkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZ1tdPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3RhYmxlU3RhdGVDaGFuZ2VkJywgJ3Jvd3NTZWxlY3RlZCddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RhYmxlQ2VsbCBleHRlbmRzIENvbXBvbmVudHMuRHNUYWJsZUNlbGwge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb2xvcicsICd0eXBlJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy10YWJsZS1jZWxsJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICd0eXBlJywgJ3ZhbHVlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNUYWJsZUNlbGwge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RhYmxlRm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1RhYmxlRm9vdGVyIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXRhYmxlLWZvb3RlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzVGFibGVGb290ZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RhYmxlSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1RhYmxlSGVhZGVyIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXRhYmxlLWhlYWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIERzVGFibGVIZWFkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RhYmxlSGVhZGVySXRlbSBleHRlbmRzIENvbXBvbmVudHMuRHNUYWJsZUhlYWRlckl0ZW0ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhbGlnbicsICdjb2x1bW5pZCcsICdjdXN0b21Tb3J0JywgJ2xhYmVsJywgJ2xpbmVzaXplJywgJ21heHdpZHRoJywgJ21pbndpZHRoJywgJ3NvcnRhYmxlJywgJ3NvcnRwcmlvcml0eScsICd0eXBlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy10YWJsZS1oZWFkZXItaXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWxpZ24nLCAnY29sdW1uaWQnLCAnY3VzdG9tU29ydCcsICdsYWJlbCcsICdsaW5lc2l6ZScsICdtYXh3aWR0aCcsICdtaW53aWR0aCcsICdzb3J0YWJsZScsICdzb3J0cHJpb3JpdHknLCAndHlwZSddXG59KVxuZXhwb3J0IGNsYXNzIERzVGFibGVIZWFkZXJJdGVtIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNUYWJsZVJvdyBleHRlbmRzIENvbXBvbmVudHMuRHNUYWJsZVJvdyB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3Jvd2lkJywgJ3NlbGVjdGVkJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy10YWJsZS1yb3cnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3Jvd2lkJywgJ3NlbGVjdGVkJ10sXG4gIG91dHB1dHM6IFsncm93U2VsZWN0ZWQnXVxufSlcbmV4cG9ydCBjbGFzcyBEc1RhYmxlUm93IHtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIHNlbGVjdGlvbi1zdGF0dXMgb2YgdGhlIHJvdyBpcyBjaGFuZ2VkLiBAdmFsdWUgYm9vbGVhbjogUm93IGlzIHNlbGVjdGVkIG9yIG5vdC4qL1xuICByb3dTZWxlY3RlZCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxib29sZWFuPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3Jvd1NlbGVjdGVkJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzVGV4dCBleHRlbmRzIENvbXBvbmVudHMuRHNUZXh0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3InLCAnc2NyZWVuc2l6ZScsICd0eXBlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy10ZXh0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICdzY3JlZW5zaXplJywgJ3R5cGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEc1RleHQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RleHRBcmVhIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1RleHRBcmVhIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2xhYmVsJywgJ2xpbmVzJywgJ21heGxlbmd0aCcsICdyZWFkb25seScsICdyZXF1aXJlZCcsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtdGV4dC1hcmVhJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAnbGFiZWwnLCAnbGluZXMnLCAnbWF4bGVuZ3RoJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzVGV4dEFyZWEge1xuICAvKiogRXZlbnQgaXMgdGhyb3duIHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgY29udGVudCBvZiB0aGUgdGV4dGFyZWEuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgLyoqIEV2ZW50IGlzIHRocm93biB3aGVuIHRoZSB1c2VyIGNoZWNrcyB0aGUgaW5wdXQuIEV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIHByZXNzZXMgUmV0dXJuIG9yXG5sZWF2ZXMgdGhlIHRleHRhcmVhLiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDb21wbGV0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RleHRCdXR0b24gZXh0ZW5kcyBDb21wb25lbnRzLkRzVGV4dEJ1dHRvbiB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2Rpc2FibGVkJywgJ3NjcmVlbnNpemUnLCAndW5mb2N1c2FibGUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXRleHQtYnV0dG9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICdkaXNhYmxlZCcsICdzY3JlZW5zaXplJywgJ3VuZm9jdXNhYmxlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNUZXh0QnV0dG9uIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuaW1wb3J0IHsgVGV4dElucHV0QXV0b2NvbXBsZXRlQ29udHJvbGxlciBhcyBJRHNUZXh0SW5wdXRUZXh0SW5wdXRBdXRvY29tcGxldGVDb250cm9sbGVyIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL2NvbXBvbmVudHMvZm9ybS9pbnB1dHMvZHMtdGV4dC1pbnB1dC9kcy10ZXh0LWlucHV0JztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1RleHRJbnB1dCBleHRlbmRzIENvbXBvbmVudHMuRHNUZXh0SW5wdXQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbGltaXRsZW5ndGgnLCAnbWFzaycsICdwbGFjZWhvbGRlcicsICdyZWFkb25seScsICdyZXF1aXJlZCcsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtdGV4dC1pbnB1dCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3InLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ21hc2snLCAncGxhY2Vob2xkZXInLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJywgJ2F1dG9jb21wbGV0ZScsICdzZWxlY3RBdXRvY29tcGxldGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEc1RleHRJbnB1dCB7XG4gIC8qKiBFbWl0cyB0aGlzIGV2ZW50IHdoZW4gdGhlIHVzZXIgY2hhbmdlcyB0aGUgdmFsdWUgb2YgdGhpcyBpbnB1dC4gQGV4YW1wbGUgY2hhbmdlLWV2ZW50cyovXG4gIHZhbHVlQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICAvKiogVGhpcyBFdmVudCBpcyBlbWl0dGVkIHdoZW4gdGhlIHVzZXIgYWNjZXB0cyB0aGUgdmFsdWUuXG5UaGUgdXNlciBhY2NlcHRzIHRoZSB2YWx1ZSBieSBwcmVzc2luZyB0aGUgRW50ZXIgS2V5IG9yIHdoZW4gdGhlIHVzZXIgbGVhdmUgdGhlIGlucHV0LiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDb21wbGV0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgLyoqIFRoaXMgZXZlbnQgaXMgZmlyZWQsIHdoZW4gdGhlIHVzZXIgZmlsbHMgb3V0IHRoaXMgaW5wdXQuXG5UaGUgZXZlbnQgcGF5bG9kIGNvbnRhaW5zIGFuIGNvbnRyb2xsZXIgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc3VibWl0IGF1dG9jb21wbGV0ZSB2YWx1ZXMuIEBleGFtcGxlIGF1dG9jb21wbGV0ZS1wbHoqL1xuICBhdXRvY29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SURzVGV4dElucHV0VGV4dElucHV0QXV0b2NvbXBsZXRlQ29udHJvbGxlcj4+O1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gYXV0b2NvbXBsZXRlIHZhbHVlIGZyb20gdGhlIGxpc3QuXG5UaGUgZXZlbnQgcGF5bG9hZCBjb250YWlucyB0aGUgYGRhdGFgIG9mIHRoZSBzZWxlY3RlZCBBdXRvQ29tcGxldGVPcHRpb24uIEBleGFtcGxlIGF1dG9jb21wbGV0ZS1wbHotb3J0Ki9cbiAgc2VsZWN0QXV0b2NvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PGFueT4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJywgJ2F1dG9jb21wbGV0ZScsICdzZWxlY3RBdXRvY29tcGxldGUnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNUZXh0TGlzdCBleHRlbmRzIENvbXBvbmVudHMuRHNUZXh0TGlzdCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3R5cGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXRleHQtbGlzdCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsndHlwZSddXG59KVxuZXhwb3J0IGNsYXNzIERzVGV4dExpc3Qge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEc1VzZXJBdmF0YXIgZXh0ZW5kcyBDb21wb25lbnRzLkRzVXNlckF2YXRhciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2ltYWdldXJsJywgJ2luaXRpYWxzJywgJ3NpemUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RzLXVzZXItYXZhdGFyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydpbWFnZXVybCcsICdpbml0aWFscycsICdzaXplJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNVc2VyQXZhdGFyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNXb3JrZmxvd1Byb2dyZXNzIGV4dGVuZHMgQ29tcG9uZW50cy5Ec1dvcmtmbG93UHJvZ3Jlc3Mge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydwcm9ncmVzcyddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMtd29ya2Zsb3ctcHJvZ3Jlc3MnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3Byb2dyZXNzJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNXb3JrZmxvd1Byb2dyZXNzIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHNXcmFwcGVkTGF5b3V0IGV4dGVuZHMgQ29tcG9uZW50cy5Ec1dyYXBwZWRMYXlvdXQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhbGlnbicsICdzaXplJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkcy13cmFwcGVkLWxheW91dCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWxpZ24nLCAnc2l6ZSddXG59KVxuZXhwb3J0IGNsYXNzIERzV3JhcHBlZExheW91dCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIERzWWVzTm8gZXh0ZW5kcyBDb21wb25lbnRzLkRzWWVzTm8ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAnc2l6ZScsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHMteWVzLW5vJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcicsICdlcnJvcm1lc3NhZ2UnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAnc2l6ZScsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHNZZXNObyB7XG4gIC8qKiBFdmVudCBjb250YWlucyBgXCJ5ZXNcImAsIHdoZW4gSmEgb3IgYFwibm9cImAgd2hlbiBOZWluIHdhcyBzZWxlY3RlZC5cblRoZSB1c2VyIGNhbid0IHVuc2VsZWN0IHRoZSB2YWx1ZS4gQGV4YW1wbGUgZXZlbnQqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhBY2NvcmRpb24gZXh0ZW5kcyBDb21wb25lbnRzLkR4QWNjb3JkaW9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGFiZWwnLCAnb3BlbiddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtYWNjb3JkaW9uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydsYWJlbCcsICdvcGVuJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhBY2NvcmRpb24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEFjY29yZGlvbkdyb3VwIGV4dGVuZHMgQ29tcG9uZW50cy5EeEFjY29yZGlvbkdyb3VwIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWFjY29yZGlvbi1ncm91cCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIER4QWNjb3JkaW9uR3JvdXAge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEFsZXJ0IGV4dGVuZHMgQ29tcG9uZW50cy5EeEFsZXJ0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWN0aW9uc2RpcmVjdGlvbicsICdjb250ZW50JywgJ2ljb24nLCAnc3VibGFiZWwnLCAndGl0bGVzdHJpbmcnLCAndHlwZScsICd2aXNpYmxlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1hbGVydCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWN0aW9uc2RpcmVjdGlvbicsICdjb250ZW50JywgJ2ljb24nLCAnc3VibGFiZWwnLCAndGl0bGVzdHJpbmcnLCAndHlwZScsICd2aXNpYmxlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhBbGVydCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4QW5ub3VuY2VtZW50QmFyIGV4dGVuZHMgQ29tcG9uZW50cy5EeEFubm91bmNlbWVudEJhciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2ljb24nLCAnaWNvbmNvbG9yJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1hbm5vdW5jZW1lbnQtYmFyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICdpY29uJywgJ2ljb25jb2xvciddXG59KVxuZXhwb3J0IGNsYXNzIER4QW5ub3VuY2VtZW50QmFyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhBcHAgZXh0ZW5kcyBDb21wb25lbnRzLkR4QXBwIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWFwcCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIER4QXBwIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhCcmVhZGNydW1iIGV4dGVuZHMgQ29tcG9uZW50cy5EeEJyZWFkY3J1bWIge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtYnJlYWRjcnVtYicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBvdXRwdXRzOiBbJ25hdmlnYXRlSG9tZScsICduYXZpZ2F0ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4QnJlYWRjcnVtYiB7XG4gIC8qKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoaXMgaXRlbS4gQGV4YW1wbGUgbmF2aWdhdGlvbiovXG4gIG5hdmlnYXRlSG9tZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDx2b2lkPj47XG4gIC8qKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIGEgYnJlYWRjcnVtYiBpdGVtLlxuQXMgZXZlbnQgcGF5bG9hZCAoYGV2ZW50LmRldGFpbGApIHRoZSB2YWx1ZSBvZiB0aGUgaW50ZXJhY3RlZCBpdGVtIGlzIHN1cHBsaWVkLiBAZXhhbXBsZSBuYXZpZ2F0aW9uKi9cbiAgbmF2aWdhdGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ25hdmlnYXRlSG9tZScsICduYXZpZ2F0ZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEJyZWFkY3J1bWJJdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5EeEJyZWFkY3J1bWJJdGVtIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGFiZWwnLCAndmFsdWUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWJyZWFkY3J1bWItaXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnbGFiZWwnLCAndmFsdWUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEJyZWFkY3J1bWJJdGVtIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhCdXR0b24gZXh0ZW5kcyBDb21wb25lbnRzLkR4QnV0dG9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnaWNvbicsICdpY29ucG9zaXRpb24nLCAnbGFiZWwnLCAnbG9hZGluZycsICdzdHJldGNoJywgJ3RoZW1lJywgJ3R5cGUnLCAndW5mb2N1c2FibGUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWJ1dHRvbicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnaWNvbicsICdpY29ucG9zaXRpb24nLCAnbGFiZWwnLCAnbG9hZGluZycsICdzdHJldGNoJywgJ3RoZW1lJywgJ3R5cGUnLCAndW5mb2N1c2FibGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEJ1dHRvbiB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4Q2FyZCBleHRlbmRzIENvbXBvbmVudHMuRHhDYXJkIHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWNhcmQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEeENhcmQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeENhcmRDb2xsYXBzYWJsZSBleHRlbmRzIENvbXBvbmVudHMuRHhDYXJkQ29sbGFwc2FibGUge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydvcGVuJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1jYXJkLWNvbGxhcHNhYmxlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydvcGVuJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhDYXJkQ29sbGFwc2FibGUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeENhcmRDb250ZW50IGV4dGVuZHMgQ29tcG9uZW50cy5EeENhcmRDb250ZW50IHt9XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWNhcmQtY29udGVudCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIER4Q2FyZENvbnRlbnQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeENhcmRIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4Q2FyZEhlYWRlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2ljb24nLCAnaWNvbmNvbG9yJywgJ2xhYmVsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1jYXJkLWhlYWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnaWNvbicsICdpY29uY29sb3InLCAnbGFiZWwnXVxufSlcbmV4cG9ydCBjbGFzcyBEeENhcmRIZWFkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeENhcmRJbWFnZSBleHRlbmRzIENvbXBvbmVudHMuRHhDYXJkSW1hZ2Uge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb3ZlcmhlaWdodG1xMScsICdjb3ZlcmhlaWdodG1xMicsICdjb3ZlcmhlaWdodG1xMycsICdjb3ZlcmhlaWdodG1xNCcsICdjb3ZlcmhlaWdodG1xNScsICdjb3ZlcnBvc2l0aW9ubXExJywgJ2NvdmVycG9zaXRpb25tcTInLCAnY292ZXJwb3NpdGlvbm1xMycsICdjb3ZlcnBvc2l0aW9ubXE0JywgJ2NvdmVycG9zaXRpb25tcTUnLCAnZml0JywgJ3VybCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtY2FyZC1pbWFnZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY292ZXJoZWlnaHRtcTEnLCAnY292ZXJoZWlnaHRtcTInLCAnY292ZXJoZWlnaHRtcTMnLCAnY292ZXJoZWlnaHRtcTQnLCAnY292ZXJoZWlnaHRtcTUnLCAnY292ZXJwb3NpdGlvbm1xMScsICdjb3ZlcnBvc2l0aW9ubXEyJywgJ2NvdmVycG9zaXRpb25tcTMnLCAnY292ZXJwb3NpdGlvbm1xNCcsICdjb3ZlcnBvc2l0aW9ubXE1JywgJ2ZpdCcsICd1cmwnXVxufSlcbmV4cG9ydCBjbGFzcyBEeENhcmRJbWFnZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4Q2hhcnRTYW1wbGUgZXh0ZW5kcyBDb21wb25lbnRzLkR4Q2hhcnRTYW1wbGUge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb2xvcicsICdpY29uJywgJ2xhYmVsJywgJ3NlbGVjdGVkY29sb3InLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWyd0b0NoYXJ0U2FtcGxlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1jaGFydC1zYW1wbGUnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2ljb24nLCAnbGFiZWwnLCAnc2VsZWN0ZWRjb2xvcicsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhDaGFydFNhbXBsZSB7XG4gIC8qKiBUcmlnZ2VycyB3aGVuIHZhbHVlIG9mIHRoZSBzYW1wbGUgY2hhbmdlcy4gQHZhbHVlIG51bWJlcjogRGVsZWdhdGVzIHRoZSBuZXcgdmFsdWUuKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3ZhbHVlQ2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4Q2hlY2tib3ggZXh0ZW5kcyBDb21wb25lbnRzLkR4Q2hlY2tib3gge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9ybWVzc2FnZScsICdraXN5bmNlZCcsICdsYWJlbCcsICdyZWFkb25seScsICdyZXF1aXJlZCddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtY2hlY2tib3gnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJ10sXG4gIG91dHB1dHM6IFsnY2hlY2tlZENoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4Q2hlY2tib3gge1xuICAvKiogRGVsZWdhdGVzIHRoZSBjdXJyZW50IGBjaGVja2VkYCB2YWx1ZSBvZiB0aGlzIGNvbXBvbmVudCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIGl0LiBAZXhhbXBsZSBjaGVjay1ldmVudCovXG4gIGNoZWNrZWRDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8Ym9vbGVhbj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydjaGVja2VkQ2hhbmdlJ10pO1xuICB9XG59XG5cbmltcG9ydCB7IENvbWJvYm94U2VhcmNoQ29udHJvbGxlciBhcyBJRHhDb21ib2JveENvbWJvYm94U2VhcmNoQ29udHJvbGxlciB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvZm9ybS9keC1jb21ib2JveC9keC1jb21ib2JveCc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhDb21ib2JveCBleHRlbmRzIENvbXBvbmVudHMuRHhDb21ib2JveCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2VtcHR5c2VhcmNodGV4dCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbGltaXRsZW5ndGgnLCAnbG9hZGluZ3RleHQnLCAnbWF4bGlzdGhlaWdodCcsICdwbGFjZWhvbGRlcicsICdwcmVzZWFyY2hjb25kaXRpb250ZXh0JywgJ3ByZXNlYXJjaGxldHRlcmNvdW50JywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3NpemUnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWNvbWJvYm94JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlbXB0eXNlYXJjaHRleHQnLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ2xvYWRpbmd0ZXh0JywgJ21heGxpc3RoZWlnaHQnLCAncGxhY2Vob2xkZXInLCAncHJlc2VhcmNoY29uZGl0aW9udGV4dCcsICdwcmVzZWFyY2hsZXR0ZXJjb3VudCcsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzaXplJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZScsICdzZWFyY2gnLCAnc2VsZWN0U2VhcmNoT3B0aW9uJywgJ2VudGVyUHJlc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEeENvbWJvYm94IHtcbiAgLyoqIEVtaXRzIHRoaXMgZXZlbnQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGlzIGlucHV0LiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIC8qKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiB0aGUgdXNlciBhY2NlcHRzIHRoZSB2YWx1ZS5cblRoZSB1c2VyIGFjY2VwdHMgdGhlIHZhbHVlIGJ5IHByZXNzaW5nIHRoZSBFbnRlciBrZXkgb3Igd2hlbiB0aGUgdXNlciBsZWF2ZSB0aGUgaW5wdXQuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCwgd2hlbiB0aGUgdXNlciBmaWxscyBvdXQgdGhpcyBpbnB1dC5cblRoZSBldmVudCBwYXlsb2QgY29udGFpbnMgYW4gY29udHJvbGxlciB3aGljaCBjYW4gYmUgdXNlZCB0byBzdWJtaXQgYXV0b2NvbXBsZXRlIG9wdGlvbnMuIEBleGFtcGxlIHNlYXJjaCxAZXhhbXBsZSBzZWxlY3Qtc2VhcmNoLW9wdGlvbixAZXhhbXBsZSBvcHRpb24tbGFiZWxzLEBleGFtcGxlIG9wdGlvbi1pY29ucyovXG4gIHNlYXJjaCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHhDb21ib2JveENvbWJvYm94U2VhcmNoQ29udHJvbGxlcj4+O1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gYXV0b2NvbXBsZXRlIG9wdGlvbnMgZnJvbSB0aGUgbGlzdC5cblRoZSBldmVudCBwYXlsb2FkIGNvbnRhaW5zIHRoZSBgZGF0YWAgb2YgdGhlIHNlbGVjdGVkIEF1dG9Db21wbGV0ZU9wdGlvbi4gQGV4YW1wbGUgc2VsZWN0LXNlYXJjaC1vcHRpb24qL1xuICBzZWxlY3RTZWFyY2hPcHRpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8YW55Pj47XG4gIC8qKiBUcmlnZ2VyIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyB0aGUgXCJFbnRlclwiIGtleSB3aGlsZSBlZGl0aW5nIHRoZSBpbnB1dCBmaWVsZC4gQGV4YW1wbGUgZW50ZXItcHJlc3MqL1xuICBlbnRlclByZXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZScsICdzZWFyY2gnLCAnc2VsZWN0U2VhcmNoT3B0aW9uJywgJ2VudGVyUHJlc3MnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4Q29udGFpbmVyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3InLCAndHlwZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtY29udGFpbmVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICd0eXBlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhDb250YWluZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5pbXBvcnQgeyBEYXRlRXJyb3IgYXMgSUR4RGF0ZUlucHV0RGF0ZUVycm9yIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL25ldy9mb3JtL2RhdGUvZGF0ZSc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhEYXRlSW5wdXQgZXh0ZW5kcyBDb21wb25lbnRzLkR4RGF0ZUlucHV0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ21heCcsICdtaW4nLCAnbW9kZScsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzaXplJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1kYXRlLWlucHV0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbWF4JywgJ21pbicsICdtb2RlJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3NpemUnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJywgJ2Vycm9yRm91bmQnXVxufSlcbmV4cG9ydCBjbGFzcyBEeERhdGVJbnB1dCB7XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGN1cnJlbnQgdmFsdWUgd2hpbGUgdGhlIHVzZXIgaXMgZWRpdGluZyB0aGUgaW5wdXQuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgLyoqIERlbGVnYXRlcyB0aGUgZmluYWwgdmFsdWUgd2hlbiB0aGUgdXNlciBzdWJtaXRzIHRoZSByZXN1bHQgYnkgcHJlc3NpbmcgJ0VudGVyJyBvciB1bmZvY3VzaW5nIHRoaXMgY29tcG9uZW50LiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDb21wbGV0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgLyoqIERlbGVnYXRlcyBhbiBlcnJvciBwYXlsb2FkIHdoaWNoIGNvbnNpc3RzIG9mIGEgbWVzc2FnZSBhbmQgYW4gZXJyb3IgdHlwZS4gQGV4YW1wbGUgZXJyb3ItZm91bmQqL1xuICBlcnJvckZvdW5kITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEeERhdGVJbnB1dERhdGVFcnJvcj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJywgJ2Vycm9yRm91bmQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhEYXRlUmFuZ2UgZXh0ZW5kcyBDb21wb25lbnRzLkR4RGF0ZVJhbmdlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbWF4JywgJ21pbicsICdtb2RlJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1kYXRlLXJhbmdlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydtYXgnLCAnbWluJywgJ21vZGUnLCAndmFsdWUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeERhdGVSYW5nZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4RG9udXRDaGFydCBleHRlbmRzIENvbXBvbmVudHMuRHhEb251dENoYXJ0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3JzY2hlbWUnLCAnbGFiZWwnLCAnc2VsZWN0ZWQnLCAnc2hvd3NlZ21lbnRsYWJlbHMnLCAnc3VibGFiZWwnXSxcbiAgbWV0aG9kczogWyd1cGRhdGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWRvbnV0LWNoYXJ0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcnNjaGVtZScsICdsYWJlbCcsICdzZWxlY3RlZCcsICdzaG93c2VnbWVudGxhYmVscycsICdzdWJsYWJlbCddLFxuICBvdXRwdXRzOiBbJ3NlZ21lbnRTZWxlY3QnXVxufSlcbmV4cG9ydCBjbGFzcyBEeERvbnV0Q2hhcnQge1xuICAvKiogVHJpZ2dlcnMgd2hlbiBhIHNlZ21lbnQgaXMgY2xpY2tlZC4gSXQgZGVsZWdhdGVzIHRoZSBpbmRleCBvZiB0aGUgc2VsZWN0ZWQgc2VnbWVudC4gQHZhbHVlIG51bWJlcjogVGhlIGluZGV4IG9mIHRoZSBzZWxlY3RlZCBzZWdtZW50LixAZXhhbXBsZSBzZWdtZW50LXNlbGVjdCovXG4gIHNlZ21lbnRTZWxlY3QhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3NlZ21lbnRTZWxlY3QnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgU3RyaW5nT3JPYmplY3QgYXMgSUR4RHJvcGRvd25TdHJpbmdPck9iamVjdCB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvbGF5b3V0L2R4LWxpc3QvbGlzdC51dGlsJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeERyb3Bkb3duIGV4dGVuZHMgQ29tcG9uZW50cy5EeERyb3Bkb3duIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZWxzZW9wdGlvbicsICdlbHNlb3B0aW9uYnV0dG9ubGFiZWwnLCAnZWxzZW9wdGlvbmlucHV0bGFiZWwnLCAnZWxzZW9wdGlvbnNlbGVjdGVkJywgJ2Vycm9ybWVzc2FnZScsICdpY29uJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ3BsYWNlaG9sZGVyJywgJ3BvcHVwcG9zaXRpb24nLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAnc2l6ZScsICd0ZXh0YWxpZ24nLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWRyb3Bkb3duJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlbHNlb3B0aW9uJywgJ2Vsc2VvcHRpb25idXR0b25sYWJlbCcsICdlbHNlb3B0aW9uaW5wdXRsYWJlbCcsICdlbHNlb3B0aW9uc2VsZWN0ZWQnLCAnZXJyb3JtZXNzYWdlJywgJ2ljb24nLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncGxhY2Vob2xkZXInLCAncG9wdXBwb3NpdGlvbicsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzaXplJywgJ3RleHRhbGlnbicsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeERyb3Bkb3duIHtcbiAgLyoqIERlbGVnYXRlcyB0aGUgY3VycmVudCBzZWxlY3Rpb24gb3IgdGV4dCBpbnB1dCAoYGVsc2VvcHRpb25gKSB3aGlsZSB0aGUgdXNlciBpcyBzdGlsbCBlZGl0aW5nLiBAZXhhbXBsZSBjb21wbGV4Ki9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4RHJvcGRvd25TdHJpbmdPck9iamVjdD4+O1xuICAvKiogRGVsZWdhdGVzIHRoZSBmaW5hbCBzZWxlY3Rpb24gb3IgdGV4dCBpbnB1dCAoYGVsc2VvcHRpb25gKS5cblRoZSBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBkcm9wZG93biBsb3NlcyBmb2N1cyBvciBwdXNoaW5nIHRoZSAnRW50ZXInIGtleS4gQGV4YW1wbGUgY29tcGxleCovXG4gIHZhbHVlQ29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4RHJvcGRvd25TdHJpbmdPck9iamVjdD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4RHJvcGRvd25PcHRpb24gZXh0ZW5kcyBDb21wb25lbnRzLkR4RHJvcGRvd25PcHRpb24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydpY29uJywgJ2xhYmVsJywgJ3NlbGVjdGVkJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1kcm9wZG93bi1vcHRpb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2ljb24nLCAnbGFiZWwnLCAnc2VsZWN0ZWQnLCAndmFsdWUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeERyb3Bkb3duT3B0aW9uIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhFcnJvck1lc3NhZ2UgZXh0ZW5kcyBDb21wb25lbnRzLkR4RXJyb3JNZXNzYWdlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGluZXMnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWVycm9yLW1lc3NhZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2xpbmVzJ10sXG4gIG91dHB1dHM6IFsnZm9yY2VVcGRhdGVPbkNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4RXJyb3JNZXNzYWdlIHtcbiAgLyoqICAqL1xuICBmb3JjZVVwZGF0ZU9uQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PChyZWY6IGFueSkgPT4gdm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydmb3JjZVVwZGF0ZU9uQ2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4RXJyb3JQYWdlIGV4dGVuZHMgQ29tcG9uZW50cy5EeEVycm9yUGFnZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2FjdGlvbmRlc2NyaXB0aW9uJywgJ2FjdGlvbmxhYmVsJywgJ2Rlc2NyaXB0aW9uJywgJ3JlYXNvbiddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtZXJyb3ItcGFnZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWN0aW9uZGVzY3JpcHRpb24nLCAnYWN0aW9ubGFiZWwnLCAnZGVzY3JpcHRpb24nLCAncmVhc29uJ10sXG4gIG91dHB1dHM6IFsnYWN0aW9uJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhFcnJvclBhZ2Uge1xuICAvKiogRmlyZXMgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgYnV0dG9uLiBAZXhhbXBsZSBhY3Rpb24qL1xuICBhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydhY3Rpb24nXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhFeHBhbmRlZCBleHRlbmRzIENvbXBvbmVudHMuRHhFeHBhbmRlZCB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1leHBhbmRlZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nXG59KVxuZXhwb3J0IGNsYXNzIER4RXhwYW5kZWQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEZkT3V0bGluZUJveCBleHRlbmRzIENvbXBvbmVudHMuRHhGZE91dGxpbmVCb3gge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtZmQtb3V0bGluZS1ib3gnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEeEZkT3V0bGluZUJveCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4RmRTZXBhcmF0b3IgZXh0ZW5kcyBDb21wb25lbnRzLkR4RmRTZXBhcmF0b3Ige31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydmcm9tY29sb3InLCAndG9jb2xvciddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtZmQtc2VwYXJhdG9yJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydmcm9tY29sb3InLCAndG9jb2xvciddXG59KVxuZXhwb3J0IGNsYXNzIER4RmRTZXBhcmF0b3Ige1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEZvb3RlciBleHRlbmRzIENvbXBvbmVudHMuRHhGb290ZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydmcm9tY29sb3InXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWZvb3RlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZnJvbWNvbG9yJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhGb290ZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEZvcm1XcmFwcGVyIGV4dGVuZHMgQ29tcG9uZW50cy5EeEZvcm1XcmFwcGVyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZXJyb3JtZXNzYWdlJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ3JlcXVpcmVkJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1mb3JtLXdyYXBwZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Vycm9ybWVzc2FnZScsICdraXN5bmNlZCcsICdsYWJlbCcsICdyZXF1aXJlZCddXG59KVxuZXhwb3J0IGNsYXNzIER4Rm9ybVdyYXBwZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEdvbGRlblN0YWdlIGV4dGVuZHMgQ29tcG9uZW50cy5EeEdvbGRlblN0YWdlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ25tZW50JywgJ2JhY2tncm91bmRjb2xvcicsICdjb250ZW50b2Zmc2V0eScsICdzaXplJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1nb2xkZW4tc3RhZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FsaWdubWVudCcsICdiYWNrZ3JvdW5kY29sb3InLCAnY29udGVudG9mZnNldHknLCAnc2l6ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4R29sZGVuU3RhZ2Uge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEdyaWQgZXh0ZW5kcyBDb21wb25lbnRzLkR4R3JpZCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Jhc2UnLCAnbXExJywgJ21xMicsICdtcTMnLCAnbXE0JywgJ21xNScsICdyb3dnYXAnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWdyaWQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Jhc2UnLCAnbXExJywgJ21xMicsICdtcTMnLCAnbXE0JywgJ21xNScsICdyb3dnYXAnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEdyaWQge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEhlYWRlciBleHRlbmRzIENvbXBvbmVudHMuRHhIZWFkZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhcHBuYW1lJywgJ2JyYW5kJywgJ2xvZ28nLCAnc2hvd2Fubm91bmNlbWVudCcsICd0aGVtZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhcHBuYW1lJywgJ2JyYW5kJywgJ2xvZ28nLCAnc2hvd2Fubm91bmNlbWVudCcsICd0aGVtZSddLFxuICBvdXRwdXRzOiBbJ25hdmlnYXRlSG9tZSddXG59KVxuZXhwb3J0IGNsYXNzIER4SGVhZGVyIHtcbiAgLyoqIEFuIGV2ZW50IHdoaWNoIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgbG9nbyBvciB0aGUgYXBwbGljYXRpb24gbmFtZS5cblRoaXMgZXZlbnQgc2hvdWxkIGFsd2F5cyBiZSB1c2VkIHRvIHNob3cgdGhlIHVzZXIgdGhlIGFwcGxpY2F0aW9uJ3MgaG9tZSBwYWdlLiAqL1xuICBuYXZpZ2F0ZUhvbWUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyduYXZpZ2F0ZUhvbWUnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgQ2xvc2VTaWRlYmFyRGV0YWlsIGFzIElEeEhlYWRlckFwcEZhdm9yaXRlc0Nsb3NlU2lkZWJhckRldGFpbCB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvc2NhZmZvbGQvZHgtaGVhZGVyL2R4LWhlYWRlci1hcHAtZmF2b3JpdGVzL2FwcC1mYXZvcml0ZSc7XG5pbXBvcnQgeyBMYXVuY2hBcHBEZXRhaWwgYXMgSUR4SGVhZGVyQXBwRmF2b3JpdGVzTGF1bmNoQXBwRGV0YWlsIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL25ldy9zY2FmZm9sZC9keC1oZWFkZXIvZHgtaGVhZGVyLWFwcC1mYXZvcml0ZXMvYXBwLWZhdm9yaXRlJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEhlYWRlckFwcEZhdm9yaXRlcyBleHRlbmRzIENvbXBvbmVudHMuRHhIZWFkZXJBcHBGYXZvcml0ZXMge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydub3RpZmljYXRpb25zJywgJ25vdGlmaWNhdGlvbnN0aGVtZScsICdwcmlvcml0eSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyLWFwcC1mYXZvcml0ZXMnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ25vdGlmaWNhdGlvbnMnLCAnbm90aWZpY2F0aW9uc3RoZW1lJywgJ3ByaW9yaXR5J10sXG4gIG91dHB1dHM6IFsnbWVudUludGVyYWN0aW9uJywgJ2RlbGV0ZUFwcCcsICdzb3J0QXBwcycsICdhZGRBcHAnLCAnZWRpdEFwcHMnLCAnbGF1bmNoQXBwJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhIZWFkZXJBcHBGYXZvcml0ZXMge1xuICAvKiogRmlyZWQgd2hlbiB0aGUgbmF2aWdhdGlvbidzIGhlYWRlciBtZW51IGl0ZW0gaXMgaW50ZXJhY3RlZCB3aXRoLiBAZXhhbXBsZSBtZW51LWludGVyYWN0aW9uKi9cbiAgbWVudUludGVyYWN0aW9uITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgLyoqIEZpcmVzIHdoZW4gdGhlIHVzZXIgZGVsZXRlcyBhIGZhdm9yaXRlIGFwcC4gVGhlIGV2ZW50IGRlbGVnYXRlcyB0aGUgYXBwbGljYXRpb24gaWQgb2YgdGhlIGRlbGV0ZWQgYXBwLiAqL1xuICBkZWxldGVBcHAhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIC8qKiBGaXJlcyB3aGVuIHRoZSB1c2VyIHNvcnRzIGhpcyBmYXZvcml0ZSBhcHBzLiBUaGUgZXZlbnQgZGVsZWdhdGVzIHRoZSBhcHBsaWNhdGlvbiBpZHMgZGVwZW5kYW50IG9uIHRoZSBjdXJyZW50IHNvcnRpbmcuICovXG4gIHNvcnRBcHBzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZ1tdPj47XG4gIC8qKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgXCJGYXZvcml0ZW4gaGluenVmw7xnZW5cIiBidXR0b24gd2l0aGluIHRoZSBzaWRlYmFyIGNvbnRlbnQuICovXG4gIGFkZEFwcCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHhIZWFkZXJBcHBGYXZvcml0ZXNDbG9zZVNpZGViYXJEZXRhaWw+PjtcbiAgLyoqIEZpcmVzIHdoZW4gdG9nZ2xpbmcgdGhlIGVkaXQgbW9kZSB3aXRoaW4gdGhlIHNpZGViYXIuIChlLmcuIGJ5IGNsaWNraW5nIHRoZSBcIkZhdm9yaXRlbiBiZWFyYmVpdGVuXCIgYnV0dG9uKSBAZXhhbXBsZSBlZGl0LWFwcC1ldmVudCovXG4gIGVkaXRBcHBzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PGJvb2xlYW4+PjtcbiAgLyoqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHNlbGVjdHMgYW4gYXBwLiBUaGUgZXZlbnQgZGVsZWdhdGVzIHRoZSBhcHBsaWNhdGlvbiBpZCBvZiB0aGUgY29ycmVzcG9uZGluZyBhcHAuICovXG4gIGxhdW5jaEFwcCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHhIZWFkZXJBcHBGYXZvcml0ZXNMYXVuY2hBcHBEZXRhaWw+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnbWVudUludGVyYWN0aW9uJywgJ2RlbGV0ZUFwcCcsICdzb3J0QXBwcycsICdhZGRBcHAnLCAnZWRpdEFwcHMnLCAnbGF1bmNoQXBwJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4SGVhZGVyQXBwRmF2b3JpdGVzQXBwIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlckFwcEZhdm9yaXRlc0FwcCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2FwcGlkJywgJ2FwcG5hbWUnLCAnaWNvbiddLFxuICBtZXRob2RzOiBbJ3RvQXBwRmF2b3JpdGVzQXBwJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1oZWFkZXItYXBwLWZhdm9yaXRlcy1hcHAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FwcGlkJywgJ2FwcG5hbWUnLCAnaWNvbiddXG59KVxuZXhwb3J0IGNsYXNzIER4SGVhZGVyQXBwRmF2b3JpdGVzQXBwIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhIZWFkZXJNZW51Q3VzdG9tIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlck1lbnVDdXN0b20ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydwcmlvcml0eSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyLW1lbnUtY3VzdG9tJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydwcmlvcml0eSddXG59KVxuZXhwb3J0IGNsYXNzIER4SGVhZGVyTWVudUN1c3RvbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4SGVhZGVyTWVudUdyb3VwIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlck1lbnVHcm91cCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3ByaW9yaXR5J11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1oZWFkZXItbWVudS1ncm91cCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsncHJpb3JpdHknXVxufSlcbmV4cG9ydCBjbGFzcyBEeEhlYWRlck1lbnVHcm91cCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4SGVhZGVyTWVudUl0ZW0gZXh0ZW5kcyBDb21wb25lbnRzLkR4SGVhZGVyTWVudUl0ZW0ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb25uZWN0ZWRzbG90JywgJ2ljb24nLCAnbm90aWZpY2F0aW9ucycsICdub3RpZmljYXRpb25zdGhlbWUnLCAncHJpb3JpdHknXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWhlYWRlci1tZW51LWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Nvbm5lY3RlZHNsb3QnLCAnaWNvbicsICdub3RpZmljYXRpb25zJywgJ25vdGlmaWNhdGlvbnN0aGVtZScsICdwcmlvcml0eSddLFxuICBvdXRwdXRzOiBbJ21lbnVJbnRlcmFjdGlvbiddXG59KVxuZXhwb3J0IGNsYXNzIER4SGVhZGVyTWVudUl0ZW0ge1xuICAvKiogRmlyZWQgd2hlbiB0aGUgaGVhZGVyIG1lbnUgaXRlbSBpcyBpbnRlcmFjdGVkIHdpdGguIEBleGFtcGxlIG1lbnUtaW50ZXJhY3Rpb24qL1xuICBtZW51SW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ21lbnVJbnRlcmFjdGlvbiddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEhlYWRlck1lbnVMaW5rIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlck1lbnVMaW5rIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29ubmVjdGVkbmF2aWdhdGlvbnZhbHVlJywgJ2xhYmVsJywgJ3ByaW9yaXR5JywgJ3NlbGVjdGVkJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1oZWFkZXItbWVudS1saW5rJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb25uZWN0ZWRuYXZpZ2F0aW9udmFsdWUnLCAnbGFiZWwnLCAncHJpb3JpdHknLCAnc2VsZWN0ZWQnXSxcbiAgb3V0cHV0czogWydtZW51SW50ZXJhY3Rpb24nXVxufSlcbmV4cG9ydCBjbGFzcyBEeEhlYWRlck1lbnVMaW5rIHtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIGhlYWRlciBtZW51IGl0ZW0gaXMgaW50ZXJhY3RlZCB3aXRoLiBAZXhhbXBsZSBtZW51LWludGVyYWN0aW9uKi9cbiAgbWVudUludGVyYWN0aW9uITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydtZW51SW50ZXJhY3Rpb24nXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhIZWFkZXJOYXZpZ2F0aW9uIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlck5hdmlnYXRpb24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydhdXRvY2xvc2UnLCAnbm90aWZpY2F0aW9uJywgJ25vdGlmaWNhdGlvbnN0aGVtZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyLW5hdmlnYXRpb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2F1dG9jbG9zZScsICdub3RpZmljYXRpb24nLCAnbm90aWZpY2F0aW9uc3RoZW1lJ10sXG4gIG91dHB1dHM6IFsnbWVudUludGVyYWN0aW9uJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhIZWFkZXJOYXZpZ2F0aW9uIHtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIG5hdmlnYXRpb24ncyBoZWFkZXIgbWVudSBpdGVtIGlzIGludGVyYWN0ZWQgd2l0aC4gQGV4YW1wbGUgbWVudS1pbnRlcmFjdGlvbiovXG4gIG1lbnVJbnRlcmFjdGlvbiE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDx2b2lkPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ21lbnVJbnRlcmFjdGlvbiddKTtcbiAgfVxufVxuXG5pbXBvcnQgeyBOYXZpZ2F0aW9uSXRlbUludGVyYWN0aW9uUGF5bG9hZCBhcyBJRHhIZWFkZXJOYXZpZ2F0aW9uSXRlbU5hdmlnYXRpb25JdGVtSW50ZXJhY3Rpb25QYXlsb2FkIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL25ldy9zY2FmZm9sZC9keC1oZWFkZXIvZHgtaGVhZGVyLW5hdmlnYXRpb24vZHgtaGVhZGVyLW5hdmlnYXRpb24taXRlbS9keC1oZWFkZXItbmF2aWdhdGlvbi1pdGVtJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEhlYWRlck5hdmlnYXRpb25JdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlYWRlck5hdmlnYXRpb25JdGVtIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbGFiZWwnLCAnc2l6ZScsICd2YWx1ZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyLW5hdmlnYXRpb24taXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnbGFiZWwnLCAnc2l6ZScsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ2ludGVyYWN0aW9uJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhIZWFkZXJOYXZpZ2F0aW9uSXRlbSB7XG4gIC8qKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoaXMgaXRlbS4gKGUuZy4gYnkgY2xpY2tpbmcgaXQpXG5JdCBlbWl0cyBhIG5hdmlnYXRpb24gaXRlbSBwYXlsb2FkIHdoaWNoIGNvbnNpc3RzIG9mIHRoZSBjb3JyZXNwb25kaW5nIG5hdmlnYXRpb24gaXRlbSdzIGB2YWx1ZWAgYW5kIGEgZnVuY3Rpb24gd2hpY2gsIHdoZW4gY2FsbGVkLCBjbG9zZXMgdGhlIHNpZGViYXIuIEBleGFtcGxlIGludGVyYWN0aW9uKi9cbiAgaW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4SGVhZGVyTmF2aWdhdGlvbkl0ZW1OYXZpZ2F0aW9uSXRlbUludGVyYWN0aW9uUGF5bG9hZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydpbnRlcmFjdGlvbiddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEhlYWRlclVzZXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4SGVhZGVyVXNlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2FjY291bnRhdmFpbGFibGUnLCAnaW1hZ2V1cmwnLCAnbmFtZScsICdub3RpZmljYXRpb25zJywgJ25vdGlmaWNhdGlvbnN0aGVtZScsICdwcmlvcml0eSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtaGVhZGVyLXVzZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FjY291bnRhdmFpbGFibGUnLCAnaW1hZ2V1cmwnLCAnbmFtZScsICdub3RpZmljYXRpb25zJywgJ25vdGlmaWNhdGlvbnN0aGVtZScsICdwcmlvcml0eSddLFxuICBvdXRwdXRzOiBbJ3NpZ25PdXQnLCAnYWNjb3VudEludGVyYWN0aW9uJywgJ21lbnVJbnRlcmFjdGlvbiddXG59KVxuZXhwb3J0IGNsYXNzIER4SGVhZGVyVXNlciB7XG4gIC8qKiBGaXJlZCB3aGVuIHRoZSBzaWduLW91dCBidXR0b24gKFwiQWJtZWxkZW5cIikgaXMgY2xpY2tlZCBpbiB0aGUgdXNlcidzIHNpZGViYXIgY29udGVudC4gQGV4YW1wbGUgc2lkZWJhci1ldmVudHMqL1xuICBzaWduT3V0ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgLyoqIEZpcmVkIHdoZW4gdGhlIGFjY291bnQgYnV0dG9uIChcIkJlbnV0emVya29udG9cIikgaXMgY2xpY2tlZCBpbiB0aGUgdXNlcidzIHNpZGViYXIgY29udGVudC4gQGV4YW1wbGUgc2lkZWJhci1ldmVudHMqL1xuICBhY2NvdW50SW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICAvKiogRmlyZWQgd2hlbiB0aGUgdXNlcidzIGhlYWRlciBtZW51IGl0ZW0gaXMgaW50ZXJhY3RlZCB3aXRoLiBAZXhhbXBsZSBtZW51LWludGVyYWN0aW9uKi9cbiAgbWVudUludGVyYWN0aW9uITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnc2lnbk91dCcsICdhY2NvdW50SW50ZXJhY3Rpb24nLCAnbWVudUludGVyYWN0aW9uJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4SGVyb0ltYWdlIGV4dGVuZHMgQ29tcG9uZW50cy5EeEhlcm9JbWFnZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ21xMScsICdtcTInLCAnbXEzJywgJ21xNCcsICdtcTUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LWhlcm8taW1hZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ21xMScsICdtcTInLCAnbXEzJywgJ21xNCcsICdtcTUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEhlcm9JbWFnZSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4SWNvbiBleHRlbmRzIENvbXBvbmVudHMuRHhJY29uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3InLCAnaWNvbicsICdzaXplJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1pY29uJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydjb2xvcicsICdpY29uJywgJ3NpemUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEljb24ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeEluZm8gZXh0ZW5kcyBDb21wb25lbnRzLkR4SW5mbyB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2hpZGVidXR0b24nLCAnc2l6ZSddLFxuICBtZXRob2RzOiBbJ3NldE1vZGFsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1pbmZvJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydoaWRlYnV0dG9uJywgJ3NpemUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeEluZm8ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeExlZ2VuZCBleHRlbmRzIENvbXBvbmVudHMuRHhMZWdlbmQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydraXN5bmNoaW50JywgJ3JlcXVpcmVkaGludCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtbGVnZW5kJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydraXN5bmNoaW50JywgJ3JlcXVpcmVkaGludCddXG59KVxuZXhwb3J0IGNsYXNzIER4TGVnZW5kIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhMaW5rIGV4dGVuZHMgQ29tcG9uZW50cy5EeExpbmsge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWyd0YXJnZXQnLCAndXJsJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1saW5rJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWyd0YXJnZXQnLCAndXJsJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhMaW5rIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhMaXN0IGV4dGVuZHMgQ29tcG9uZW50cy5EeExpc3Qge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjb250ZW50YmVsb3cnLCAnc2l6ZScsICd3aWR0aCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtbGlzdCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY29udGVudGJlbG93JywgJ3NpemUnLCAnd2lkdGgnXVxufSlcbmV4cG9ydCBjbGFzcyBEeExpc3Qge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeExpc3RJdGVtIGV4dGVuZHMgQ29tcG9uZW50cy5EeExpc3RJdGVtIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWN0aW9uaW5kaWNhdG9yJywgJ2Rpc2FibGVkJywgJ2ljb24nLCAnbGFiZWwnLCAnc2VsZWN0ZWQnLCAnc3VibGFiZWwnLCAndGV4dGFsaWduJywgJ3R5cGUnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydnZXRSYWRpb0VsZW1lbnQnLCAnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1saXN0LWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FjdGlvbmluZGljYXRvcicsICdkaXNhYmxlZCcsICdpY29uJywgJ2xhYmVsJywgJ3NlbGVjdGVkJywgJ3N1YmxhYmVsJywgJ3RleHRhbGlnbicsICd0eXBlJywgJ3ZhbHVlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhMaXN0SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4TG9nbyBleHRlbmRzIENvbXBvbmVudHMuRHhMb2dvIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsndHlwZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtbG9nbycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsndHlwZSddXG59KVxuZXhwb3J0IGNsYXNzIER4TG9nbyB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4TWVkaWFRdWVyeVZhbHVlIGV4dGVuZHMgQ29tcG9uZW50cy5EeE1lZGlhUXVlcnlWYWx1ZSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ21xMScsICdtcTInLCAnbXEzJywgJ21xNCcsICdtcTUnLCAncHJvcGVydHknXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LW1lZGlhLXF1ZXJ5LXZhbHVlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydtcTEnLCAnbXEyJywgJ21xMycsICdtcTQnLCAnbXE1JywgJ3Byb3BlcnR5J11cbn0pXG5leHBvcnQgY2xhc3MgRHhNZWRpYVF1ZXJ5VmFsdWUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5pbXBvcnQgeyBNb2RhbENsb3NlZFBheWxvYWQgYXMgSUR4TW9kYWxNb2RhbENsb3NlZFBheWxvYWQgfSBmcm9tICdAZHZhZy9kZXNpZ24tc3lzdGVtL2Rpc3QvdHlwZXMvbmV3L21vZGFscy9keC1tb2RhbC9keC1tb2RhbCc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhNb2RhbCBleHRlbmRzIENvbXBvbmVudHMuRHhNb2RhbCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2hlaWdodCcsICdsYWJlbCcsICd2aXNpYmxlJywgJ3dpZHRoJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1tb2RhbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnaGVpZ2h0JywgJ2xhYmVsJywgJ3Zpc2libGUnLCAnd2lkdGgnXSxcbiAgb3V0cHV0czogWydtb2RhbE9wZW5lZCcsICdtb2RhbENsb3NlZCddXG59KVxuZXhwb3J0IGNsYXNzIER4TW9kYWwge1xuICAvKiogVGhlIEV2ZW50IHRyaWdnZXJzIGFzIHNvb24gdGhlIGRpYWxvZyBvcGVucy4gKi9cbiAgbW9kYWxPcGVuZWQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICAvKiogVGhlIEV2ZW50IHRyaWdnZXJzLCBhcyBzb29uIHRoZSB1c2VyIGNsb3NlcyB0aGUgZGlhbG9nIHZpYSB0aGUgY2xvc2UgYnV0dG9uIG9yIHRocm91Z2ggY2xpY2tpbmcgb24gdGhlIGJhY2tncm91bmQgYmVoaW5kIHRoZSBtb2RhbC5cbkl0IGVtaXRzIGFuIG9iamVjdCB3aXRoIG1ldGEtZGF0YSBjb250YWluaW5nIHRoZSByZWFzb24gdGhlIG1vZGFsIHdhcyBjbG9zZWQgYW5kIGEgZnVuY3Rpb24gdG8gcHJldmVudCB0aGUgbW9kYWwgZnJvbSBjbG9zaW5nLiBAZXhhbXBsZSBwcmV2ZW50LWJhY2tncm91bmQtY2xvc2UsQGV4YW1wbGUgbW9kYWwtY2xvc2VkKi9cbiAgbW9kYWxDbG9zZWQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4TW9kYWxNb2RhbENsb3NlZFBheWxvYWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnbW9kYWxPcGVuZWQnLCAnbW9kYWxDbG9zZWQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhNdWx0aURyb3Bkb3duIGV4dGVuZHMgQ29tcG9uZW50cy5EeE11bHRpRHJvcGRvd24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAnaWNvbicsICdraXN5bmNlZCcsICdsYWJlbCcsICdwbGFjZWhvbGRlcicsICdwb3B1cHBvc2l0aW9uJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3NlbGVjdGlvbmxhYmVsJywgJ3NpemUnLCAndGV4dGFsaWduJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1tdWx0aS1kcm9wZG93bicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3JtZXNzYWdlJywgJ2ljb24nLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncGxhY2Vob2xkZXInLCAncG9wdXBwb3NpdGlvbicsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzZWxlY3Rpb25sYWJlbCcsICdzaXplJywgJ3RleHRhbGlnbiddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeE11bHRpRHJvcGRvd24ge1xuICAvKiogRGVsZWdhdGVzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiB3aGlsZSB0aGUgdXNlciBpcyBzdGlsbCBlZGl0aW5nLiBAZXhhbXBsZSBjb21wbGV4Ki9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SFRNTER4RHJvcGRvd25PcHRpb25FbGVtZW50W10+PjtcbiAgLyoqIERlbGVnYXRlcyB0aGUgZmluYWwgc2VsZWN0aW9uLlxuVGhlIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIGRyb3Bkb3duIGxvc2VzIGZvY3VzIG9yIHB1c2hpbmcgdGhlICdFbnRlcicga2V5LiBAZXhhbXBsZSBjb21wbGV4Ki9cbiAgdmFsdWVDb21wbGV0ZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxIVE1MRHhEcm9wZG93bk9wdGlvbkVsZW1lbnRbXT4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4Tm90aWZpY2F0aW9uQmFyIGV4dGVuZHMgQ29tcG9uZW50cy5EeE5vdGlmaWNhdGlvbkJhciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3Zpc2libGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LW5vdGlmaWNhdGlvbi1iYXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3Zpc2libGUnXSxcbiAgb3V0cHV0czogWydjbG9zZU5vdGlmaWNhdGlvbiddXG59KVxuZXhwb3J0IGNsYXNzIER4Tm90aWZpY2F0aW9uQmFyIHtcbiAgLyoqIFRoaXMgZXZlbnQgaXMgZmlyZWQsIHdoZW4gdGhlIHVzZXIgY2xvc2VzIHRoZSBub3RpZmljYXRpb24gdmlhIHRoZSBjbG9zZSBidXR0b24uIEBleGFtcGxlIGNsb3NlLW5vdGlmaWNhdGlvbiovXG4gIGNsb3NlTm90aWZpY2F0aW9uITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnY2xvc2VOb3RpZmljYXRpb24nXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhOb3RpZmljYXRpb25Ub2FzdCBleHRlbmRzIENvbXBvbmVudHMuRHhOb3RpZmljYXRpb25Ub2FzdCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Nsb3NlYWZ0ZXInLCAnaWNvbicsICdpY29uY29sb3InLCAnc3ViY29udGVudCcsICd0aXRsZXN0cmluZycsICd2aXNpYmxlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1ub3RpZmljYXRpb24tdG9hc3QnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Nsb3NlYWZ0ZXInLCAnaWNvbicsICdpY29uY29sb3InLCAnc3ViY29udGVudCcsICd0aXRsZXN0cmluZycsICd2aXNpYmxlJ10sXG4gIG91dHB1dHM6IFsnY2xvc2VOb3RpZmljYXRpb24nXVxufSlcbmV4cG9ydCBjbGFzcyBEeE5vdGlmaWNhdGlvblRvYXN0IHtcbiAgLyoqIEZpcmVzIHdoZW4gdGhlIG5vdGlmaWNhdGlvbiBjbG9zZXMgYXV0b21hdGljYWxseSBvciBieSBjbGlja2luZyBvbiB0aGUgY2xvc2UgYnV0dG9uLiBAZXhhbXBsZSBjbG9zZS1ub3RpZmljYXRpb24qL1xuICBjbG9zZU5vdGlmaWNhdGlvbiE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDx2b2lkPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ2Nsb3NlTm90aWZpY2F0aW9uJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4TnVtYmVySW5wdXQgZXh0ZW5kcyBDb21wb25lbnRzLkR4TnVtYmVySW5wdXQge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbGltaXRsZW5ndGgnLCAnbWF4JywgJ21pbicsICdwbGFjZWhvbGRlcicsICdwcmVjaXNpb24nLCAncHJvZmlsZScsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzaXplJywgJ3N0ZXAnLCAndGhvdXNhbmRzZXBhcmF0b3InLCAndW5pdCcsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ2ZvY3VzQ29udHJvbCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtbnVtYmVyLWlucHV0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbGltaXRsZW5ndGgnLCAnbWF4JywgJ21pbicsICdwbGFjZWhvbGRlcicsICdwcmVjaXNpb24nLCAncHJvZmlsZScsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdzaXplJywgJ3N0ZXAnLCAndGhvdXNhbmRzZXBhcmF0b3InLCAndW5pdCcsICd2YWx1ZSddLFxuICBvdXRwdXRzOiBbJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeE51bWJlcklucHV0IHtcbiAgLyoqIENoYW5nZXMgb2YgdGhlIGlucHV0IHZhbHVlIGR1cmluZyB0aGUgaW5wdXQgb2YgdGhlIHVzZXIuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxudW1iZXI+PjtcbiAgLyoqIENvbmZpcm1hdGlvbiBvZiB0aGUgaW5wdXQgdmFsdWUuIEV2ZW50IGlzIHRyaWdnZXJlZCwgd2hlbiB0aGUgdXNlciBwcmVzc2VzIHJldHVybiBvciBsZWF2aW5nIHRoZSBpbnB1dCBmaWVsZC4gQGV4YW1wbGUgY2hhbmdlLWV2ZW50cyovXG4gIHZhbHVlQ29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8bnVtYmVyPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3ZhbHVlQ2hhbmdlJywgJ3ZhbHVlQ29tcGxldGUnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhOdW1iZXJQYWdpbmF0b3IgZXh0ZW5kcyBDb21wb25lbnRzLkR4TnVtYmVyUGFnaW5hdG9yIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY291bnQnLCAnY3VycmVudCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtbnVtYmVyLXBhZ2luYXRvcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY291bnQnLCAnY3VycmVudCddLFxuICBvdXRwdXRzOiBbJ3BhZ2VDaGFuZ2VkJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhOdW1iZXJQYWdpbmF0b3Ige1xuICAvKiogVHJpZ2dlcnMgd2hlbiB0aGUgcGFnZSBjaGFuZ2VzIGJ5IGludGVyYWN0aW5nIHdpdGggdGhlIGFycm93cywgdGhlIHBhZ2UgbnVtYmVycyBvciB0aGUgZHJvcGRvd24gKE1RMSkuIEBleGFtcGxlIHBhZ2VjaGFuZ2UqL1xuICBwYWdlQ2hhbmdlZCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxudW1iZXI+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsncGFnZUNoYW5nZWQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhOdW1iZXJQaWNrZXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4TnVtYmVyUGlja2VyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ24nLCAndmFsdWUnLCAndmFsdWVzJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1udW1iZXItcGlja2VyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhbGlnbicsICd2YWx1ZScsICd2YWx1ZXMnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4TnVtYmVyUGlja2VyIHtcbiAgLyoqICAqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxudW1iZXI+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgU2VsZWN0aW9uUGF5bG9hZCBhcyBJRHhPdmVyZmxvd01lbnVTZWxlY3Rpb25QYXlsb2FkIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL25ldy9zY2FmZm9sZC9keC1vdmVyZmxvdy1tZW51L2R4LW92ZXJmbG93LW1lbnUnO1xuaW1wb3J0IHsgT3BlbkNoYW5nZVBheWxvYWQgYXMgSUR4T3ZlcmZsb3dNZW51T3BlbkNoYW5nZVBheWxvYWQgfSBmcm9tICdAZHZhZy9kZXNpZ24tc3lzdGVtL2Rpc3QvdHlwZXMvbmV3L3NjYWZmb2xkL2R4LW92ZXJmbG93LW1lbnUvZHgtb3ZlcmZsb3ctbWVudSc7XG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhPdmVyZmxvd01lbnUgZXh0ZW5kcyBDb21wb25lbnRzLkR4T3ZlcmZsb3dNZW51IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ24nLCAnbGFiZWwnLCAnbWF4bGFiZWxzJywgJ21heHNlbGVjdGlvbnMnLCAnc2VsZWN0aW9ubW9kZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtb3ZlcmZsb3ctbWVudScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWxpZ24nLCAnbGFiZWwnLCAnbWF4bGFiZWxzJywgJ21heHNlbGVjdGlvbnMnLCAnc2VsZWN0aW9ubW9kZSddLFxuICBvdXRwdXRzOiBbJ3NlbGVjdGlvbicsICdsaXN0T3BlbkNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4T3ZlcmZsb3dNZW51IHtcbiAgLyoqIEZpcmVzIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIG1lbnUgaXRlbS5cblRoZSBldmVudCBwYXlsb2FkIGNvbnNpc3RzIG9mIGEgYFNlbGVjdGlvblBheWxvYWRgIG9iamVjdCB3aGljaCBjb250YWlucyBhIGB2YWx1ZWAgcHJvcGVydHksIGJlaW5nIGVpdGhlciBhIHN0cmluZywgYW4gb2JqZWN0LlxuV2hlbiB0aGUgYHNlbGVjdGlvbm1vZGVgIGVxdWFscyBgbXVsdGlgIHRoZSBvbWl0dGVkIGB2YWx1ZWAgd2l0aGluIHRoZSBgU2VsZWN0aW9uUGF5bG9hZGAgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncyBhbmQgb2JqZWN0cy4gQGV4YW1wbGUgc2VsZWN0aW9uLEBleGFtcGxlIHNlbGVjdGlvbi1jb21wbGV4Ki9cbiAgc2VsZWN0aW9uITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEeE92ZXJmbG93TWVudVNlbGVjdGlvblBheWxvYWQ+PjtcbiAgLyoqIEZpcmVzIHdoZW4gdGhlIGxpc3Qgb3BlbnMuXG5UaGUgZXZlbnQgcGF5bG9hZCBjb25zaXN0cyBvZiBhbiBgT3BlbkNoYW5nZVBheWxvYWRgIG9iamVjdCB3aGljaCBjb250YWlucyBhbiBgaXNPcGVuYCBwcm9wZXJ0eS4gQGV4YW1wbGUgbGlzdC1vcGVuLWNoYW5nZSovXG4gIGxpc3RPcGVuQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEeE92ZXJmbG93TWVudU9wZW5DaGFuZ2VQYXlsb2FkPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3NlbGVjdGlvbicsICdsaXN0T3BlbkNoYW5nZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeE92ZXJmbG93TWVudUl0ZW0gZXh0ZW5kcyBDb21wb25lbnRzLkR4T3ZlcmZsb3dNZW51SXRlbSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2ljb24nLCAnbGFiZWwnLCAnc2VsZWN0ZWQnLCAndmFsdWUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LW92ZXJmbG93LW1lbnUtaXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnaWNvbicsICdsYWJlbCcsICdzZWxlY3RlZCcsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4T3ZlcmZsb3dNZW51SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4UGFnaW5hdG9yIGV4dGVuZHMgQ29tcG9uZW50cy5EeFBhZ2luYXRvciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2NvdW50JywgJ2N1cnJlbnQnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXBhZ2luYXRvcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY291bnQnLCAnY3VycmVudCddLFxuICBvdXRwdXRzOiBbJ3BhZ2VDaGFuZ2VkJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhQYWdpbmF0b3Ige1xuICAvKiogRmlyZXMgd2hlbiB0aGUgYGN1cnJlbnRgIHByb3BlcnR5IGNoYW5nZXMuICovXG4gIHBhZ2VDaGFuZ2VkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PG51bWJlcj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydwYWdlQ2hhbmdlZCddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFBsYWNlaG9sZGVyIGV4dGVuZHMgQ29tcG9uZW50cy5EeFBsYWNlaG9sZGVyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYm94JywgJ2NhcmQnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXBsYWNlaG9sZGVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydib3gnLCAnY2FyZCddXG59KVxuZXhwb3J0IGNsYXNzIER4UGxhY2Vob2xkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFByb2Nlc3NIZWFkZXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4UHJvY2Vzc0hlYWRlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2hlYWRsaW5lJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1wcm9jZXNzLWhlYWRlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnaGVhZGxpbmUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFByb2Nlc3NIZWFkZXIge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFJhZGlvQnV0dG9uIGV4dGVuZHMgQ29tcG9uZW50cy5EeFJhZGlvQnV0dG9uIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnbGFiZWwnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXJhZGlvLWJ1dHRvbicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnbGFiZWwnLCAndmFsdWUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFJhZGlvQnV0dG9uIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhSYWRpb0J1dHRvbkdyb3VwIGV4dGVuZHMgQ29tcG9uZW50cy5EeFJhZGlvQnV0dG9uR3JvdXAge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnLCAnY29ubmVjdFJhZGlvQnV0dG9uJywgJ2Rpc2Nvbm5lY3RSYWRpb0J1dHRvbiddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtcmFkaW8tYnV0dG9uLWdyb3VwJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4UmFkaW9CdXR0b25Hcm91cCB7XG4gIC8qKiBEZWxlZ2F0ZXMgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgYDxkeC1yYWRpby1idXR0b24+YCBlbGVtZW50J3MgdmFsdWUuXG5UaGlzIGV2ZW50IHdpbGwgbm90IHRyaWdnZXIgd2hlbiBzZXR0aW5nIHRoZSBgdmFsdWVgIGluIEphdmFTY3JpcHQuIEBleGFtcGxlIHJlYWQtdmFsdWUqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhSZXByZXNlbnRhdGl2ZUluZm8gZXh0ZW5kcyBDb21wb25lbnRzLkR4UmVwcmVzZW50YXRpdmVJbmZvIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnbmFtZScsICd0eXBlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1yZXByZXNlbnRhdGl2ZS1pbmZvJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWyduYW1lJywgJ3R5cGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFJlcHJlc2VudGF0aXZlSW5mbyB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4U2lkZWJhckNvbnRlbnQgZXh0ZW5kcyBDb21wb25lbnRzLkR4U2lkZWJhckNvbnRlbnQge31cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtc2lkZWJhci1jb250ZW50JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50Pidcbn0pXG5leHBvcnQgY2xhc3MgRHhTaWRlYmFyQ29udGVudCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4U2l0ZU5hdmlnYXRpb24gZXh0ZW5kcyBDb21wb25lbnRzLkR4U2l0ZU5hdmlnYXRpb24ge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydleHBhbmRlZGxheW91dGF0J11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zaXRlLW5hdmlnYXRpb24nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2V4cGFuZGVkbGF5b3V0YXQnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFNpdGVOYXZpZ2F0aW9uIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuaW1wb3J0IHsgTmF2aWdhdGVFdmVudERldGFpbCBhcyBJRHhTaXRlTmF2aWdhdGlvbk1lbnVOYXZpZ2F0ZUV2ZW50RGV0YWlsIH0gZnJvbSAnQGR2YWcvZGVzaWduLXN5c3RlbS9kaXN0L3R5cGVzL25ldy9zaXRlLW5hdmlnYXRpb24vZHgtc2l0ZS1uYXZpZ2F0aW9uLW1lbnUvZHgtc2l0ZS1uYXZpZ2F0aW9uLW1lbnUnO1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4U2l0ZU5hdmlnYXRpb25NZW51IGV4dGVuZHMgQ29tcG9uZW50cy5EeFNpdGVOYXZpZ2F0aW9uTWVudSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2F1dG9uYXZpZ2F0aW9uJywgJ3NlbGVjdGVkdmFsdWUnLCAndGl0bGVzdHJpbmcnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXNpdGUtbmF2aWdhdGlvbi1tZW51JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydhdXRvbmF2aWdhdGlvbicsICdzZWxlY3RlZHZhbHVlJywgJ3RpdGxlc3RyaW5nJ10sXG4gIG91dHB1dHM6IFsnbmF2aWdhdGUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFNpdGVOYXZpZ2F0aW9uTWVudSB7XG4gIC8qKiBFdmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIGEgbWVudSBpdGVtLlxuVGhlIGV2ZW50IGRldGFpbHMgb2JqZWN0IGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbi0gYHZhbHVlYDogKHN0cmluZykgdmFsdWUgb2YgdGhlIG1lbnUgaXRlbSB0aGUgdXNlciBjbGlja2VkXG4tIGBjb21wbGV0ZWA6IChmdW5jdGlvbikgbmVlZHMgdG8gYmUgY2FsbGVkIGlmIG5vdCB1c2luZyBhdXRvbmF2aWdhdGlvbiBmZWF0dXJlLiBXaGlsZSBub3QgY29tcGxldGVkIHRoZSBtZW51IHdpbGwgbm90IGNvbm5lY3QgdG8gc2NvcGVzIGluIG9yZGVyIHRvIHNlbGVjdCBpdGVtcyBieSBzY3JvbGxpbmcgaW50byB0aGUgYXJlYS4gKi9cbiAgbmF2aWdhdGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4U2l0ZU5hdmlnYXRpb25NZW51TmF2aWdhdGVFdmVudERldGFpbD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyduYXZpZ2F0ZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFNpdGVOYXZpZ2F0aW9uTWVudUl0ZW0gZXh0ZW5kcyBDb21wb25lbnRzLkR4U2l0ZU5hdmlnYXRpb25NZW51SXRlbSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2xhYmVsJywgJ3N0YXRlJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zaXRlLW5hdmlnYXRpb24tbWVudS1pdGVtJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydsYWJlbCcsICdzdGF0ZScsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4U2l0ZU5hdmlnYXRpb25NZW51SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4U2l0ZU5hdmlnYXRpb25TY29wZSBleHRlbmRzIENvbXBvbmVudHMuRHhTaXRlTmF2aWdhdGlvblNjb3BlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsndmFsdWUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXNpdGUtbmF2aWdhdGlvbi1zY29wZScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsndmFsdWUnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFNpdGVOYXZpZ2F0aW9uU2NvcGUge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFNsaWRlU2hvdyBleHRlbmRzIENvbXBvbmVudHMuRHhTbGlkZVNob3cge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydpbml0aWFscGFnZScsICdtcTFhbW91bnQnLCAnbXEyYW1vdW50JywgJ21xM2Ftb3VudCcsICdtcTRhbW91bnQnLCAnbXE1YW1vdW50JywgJ3NwYWNlYmV0d2VlbicsICd2aWV3bW9kZSddLFxuICBtZXRob2RzOiBbJ3NldFBhZ2UnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXNsaWRlLXNob3cnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2luaXRpYWxwYWdlJywgJ21xMWFtb3VudCcsICdtcTJhbW91bnQnLCAnbXEzYW1vdW50JywgJ21xNGFtb3VudCcsICdtcTVhbW91bnQnLCAnc3BhY2ViZXR3ZWVuJywgJ3ZpZXdtb2RlJ10sXG4gIG91dHB1dHM6IFsncGFnZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4U2xpZGVTaG93IHtcbiAgLyoqIERlbGVnYXRlcyB0aGUgY3VycmVudCBwYWdlIHdoZW4gaXQgY2hhbmdlcy4gKi9cbiAgcGFnZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxudW1iZXI+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsncGFnZUNoYW5nZSddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFNsaWRlciBleHRlbmRzIENvbXBvbmVudHMuRHhTbGlkZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdmb3JtYXR0aW5ncGF0dGVybicsICdsYWJlbCcsICdtYXgnLCAnbWluJywgJ3JlYWRvbmx5JywgJ3Nob3dtaW5tYXhsYWJlbCcsICdzaG93dmFsdWVsYWJlbCcsICdzdGVwJywgJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zbGlkZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Zvcm1hdHRpbmdwYXR0ZXJuJywgJ2xhYmVsJywgJ21heCcsICdtaW4nLCAncmVhZG9ubHknLCAnc2hvd21pbm1heGxhYmVsJywgJ3Nob3d2YWx1ZWxhYmVsJywgJ3N0ZXAnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4U2xpZGVyIHtcbiAgLyoqIFVzZXIgbWFkZSBjaGFuZ2VzLiBDb250YWlucyB0aGUgY2hvc2VuIHZhbHVlLiBAZXhhbXBsZSB2YWx1ZS1jaGFuZ2UqL1xuICB2YWx1ZUNoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxudW1iZXI+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnXSk7XG4gIH1cbn1cblxuaW1wb3J0IHsgU29ydERldGFpbCBhcyBJRHhTb3J0U29ydERldGFpbCB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvaW50ZXJuYWwvZHgtc29ydC9keC1zb3J0JztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFNvcnQgZXh0ZW5kcyBDb21wb25lbnRzLkR4U29ydCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3NvcnRhYmxlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zb3J0JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydzb3J0YWJsZSddLFxuICBvdXRwdXRzOiBbJ3NvcnQnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFNvcnQge1xuICAvKiogRmlyZXMgd2hlbiB0aGUgY2hpbGRyZW4gYXJlIHNvcnRlZCBieSB0aGUgdXNlci4gQnkgcmVhZGluZyB0aGUgZXZlbnQncyBkZXRhaWwgcHJvcGVydHkgeW91IGNhbiBhY2Nlc3MgdGhlIGBvcmlnaW5hbEFycmF5YCBhbmQgdGhlIGBzb3J0ZWRBcnJheWAuXG5Cb3RoIGFycmF5cyBjb25zaXN0IG9mIHRoZSBgdmFsdWVgIHByb3BlcnRpZXMgcHJvdmlkZWQgYnkgdGhlIGA8ZHgtc29ydC1pdGVtPmAgZWxlbWVudHMuIEBleGFtcGxlIHNvcnQqL1xuICBzb3J0ITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PElEeFNvcnRTb3J0RGV0YWlsPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ3NvcnQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhTb3J0SXRlbSBleHRlbmRzIENvbXBvbmVudHMuRHhTb3J0SXRlbSB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3ZhbHVlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zb3J0LWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3ZhbHVlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhTb3J0SXRlbSB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4U3BhY2VyIGV4dGVuZHMgQ29tcG9uZW50cy5EeFNwYWNlciB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ21xMScsICdtcTInLCAnbXEzJywgJ21xNCcsICdtcTUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXNwYWNlcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnbXExJywgJ21xMicsICdtcTMnLCAnbXE0JywgJ21xNSddXG59KVxuZXhwb3J0IGNsYXNzIER4U3BhY2VyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhTcGlubmVyIGV4dGVuZHMgQ29tcG9uZW50cy5EeFNwaW5uZXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydzaXplJywgJ3RoZW1lJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC1zcGlubmVyJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydzaXplJywgJ3RoZW1lJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhTcGlubmVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJCYXIgZXh0ZW5kcyBDb21wb25lbnRzLkR4VGFiQmFyIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnc2VsZWN0ZWQnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXRhYi1iYXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ3NlbGVjdGVkJ10sXG4gIG91dHB1dHM6IFsndGFiQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhUYWJCYXIge1xuICAvKiogVGhpcyBldmVudCBmaXJlcyB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBuZXcgdGFiLlxuSXQgY29udGFpbnMgdGhlIGB2YWx1ZWAgb2YgdGhlIGNvcnJlc3BvbmRpbmcgYDxkeC10YWItcGFnZT5gLiBAZXhhbXBsZSB0YWItY2hhbmdlKi9cbiAgdGFiQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd0YWJDaGFuZ2UnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJQYWdlIGV4dGVuZHMgQ29tcG9uZW50cy5EeFRhYlBhZ2Uge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydsYWJlbCcsICd2YWx1ZSddLFxuICBtZXRob2RzOiBbJ3RvVGFiUGFnZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtdGFiLXBhZ2UnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2xhYmVsJywgJ3ZhbHVlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhUYWJQYWdlIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuaW1wb3J0IHsgVGFibGVDb25maWcgYXMgSUR4VGFibGVUYWJsZUNvbmZpZyB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvdGFibGUvZHgtdGFibGUvZHgtdGFibGUnO1xuaW1wb3J0IHsgVGFibGVTZWxlY3Rpb24gYXMgSUR4VGFibGVUYWJsZVNlbGVjdGlvbiB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvdGFibGUvdGFibGUtY29tbW9uLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFRhYmxlIGV4dGVuZHMgQ29tcG9uZW50cy5EeFRhYmxlIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnaW5pdGlhbHNvcnQnLCAnaW5pdGlhbHNvcnRkaXJlY3Rpb24nLCAnbW9kZScsICdwYWdlc2l6ZScsICdwYWdlc2l6ZXMnLCAncm93Y291bnQnLCAnc2Nyb2xsYWJsZScsICdzZWxlY3Rpb25lbmFibGVkJywgJ3NlbGVjdGlvbm1vZGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXRhYmxlJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gIGlucHV0czogWydpbml0aWFsc29ydCcsICdpbml0aWFsc29ydGRpcmVjdGlvbicsICdtb2RlJywgJ3BhZ2VzaXplJywgJ3BhZ2VzaXplcycsICdyb3djb3VudCcsICdzY3JvbGxhYmxlJywgJ3NlbGVjdGlvbmVuYWJsZWQnLCAnc2VsZWN0aW9ubW9kZSddLFxuICBvdXRwdXRzOiBbJ3RhYmxlU3RhdGVDaGFuZ2VkJywgJ3NlbGVjdGlvblN0YXRlQ2hhbmdlZCcsICdleHBhbnNpb25DaGFuZ2VkJywgJ3Jvd3NTZWxlY3RlZCddXG59KVxuZXhwb3J0IGNsYXNzIER4VGFibGUge1xuICAvKiogVGhpcyBldmVudCB3aWxsIGJlIGZpcmVkIGFzIHNvb24gYXMgdGhlIHRhYmxlYHMgc3RhdGUgY2hhbmdlcyAoZS5nLiBzb3J0aW5nLCBwYWdpbmcuLi4pIEBleGFtcGxlIHRhYmxlLXN0YXRlLWNoYW5nZWQqL1xuICB0YWJsZVN0YXRlQ2hhbmdlZCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHhUYWJsZVRhYmxlQ29uZmlnPj47XG4gIC8qKiBUaGlzIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXMgc29vbiBhcyB0aGUgdGFibGVgcyBzdGF0ZSBjaGFuZ2VzIChlLmcuIHNvcnRpbmcsIHBhZ2luZy4uLikgQGV4YW1wbGUgdGFibGUtc3RhdGUtY2hhbmdlZCovXG4gIHNlbGVjdGlvblN0YXRlQ2hhbmdlZCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxJRHhUYWJsZVRhYmxlU2VsZWN0aW9uPj47XG4gIC8qKiBUaGlzIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXMgc29vbiBhcyB0aGUgdGFibGVgcyBzdGF0ZSBjaGFuZ2VzIChlLmcuIHNvcnRpbmcsIHBhZ2luZy4uLikgQGV4YW1wbGUgdGFibGUtc3RhdGUtY2hhbmdlZCovXG4gIGV4cGFuc2lvbkNoYW5nZWQhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8Ym9vbGVhbj4+O1xuICAvKiogSW4gY2FzZSBhIHJvdyBpcyBzZWxlY3RlZCB0aGlzIGV2ZW50IHdpbGwgZmlyZSB0aGUga2V5IG9mIHRoZSByb3cuIEB2YWx1ZSBzdHJpbmc6IElmIHRoZSBgc2VsZWN0aW9ubW9kZWAgYWxsb3dzIGEgc2luZ2xlIHNlbGVjdGlvbiB0aGUgZXZlbnQgd2lsbCBkZWxlZ2F0ZSBvbmUgc2VsZWN0ZWQgcm93IGtleS4sQHZhbHVlIHN0cmluZ1tdOiBJZiB0aGUgYHNlbGVjdGlvbm1vZGVgIGFsbG93cyBhIG11bHRpIHNlbGVjdGlvbiB0aGUgZXZlbnQgd2lsbCBkZWxlZ2F0ZSBhbGwgc2VsZWN0ZWQgcm93IGtleXMuLEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgdGhlIGByb3dTZWxlY3RlZGAgZXZlbnQgb2YgdGhlIGA8ZHgtdGFibGUtcm93PmAgY29tcG9uZW50cyB0byBnZXQgbm90aWZpZWQgd2hlbiBhIG5ldyByb3cgd2FzIHNlbGVjdGVkLiovXG4gIHJvd3NTZWxlY3RlZCE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmdbXT4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd0YWJsZVN0YXRlQ2hhbmdlZCcsICdzZWxlY3Rpb25TdGF0ZUNoYW5nZWQnLCAnZXhwYW5zaW9uQ2hhbmdlZCcsICdyb3dzU2VsZWN0ZWQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJsZUNlbGwgZXh0ZW5kcyBDb21wb25lbnRzLkR4VGFibGVDZWxsIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ24nLCAnY29sb3InLCAndHlwZScsICd2YWx1ZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtdGFibGUtY2VsbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnYWxpZ24nLCAnY29sb3InLCAndHlwZScsICd2YWx1ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4VGFibGVDZWxsIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJsZUZvb3RlciBleHRlbmRzIENvbXBvbmVudHMuRHhUYWJsZUZvb3RlciB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC10YWJsZS1mb290ZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEeFRhYmxlRm9vdGVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJsZUhlYWRlciBleHRlbmRzIENvbXBvbmVudHMuRHhUYWJsZUhlYWRlciB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC10YWJsZS1oZWFkZXInLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+J1xufSlcbmV4cG9ydCBjbGFzcyBEeFRhYmxlSGVhZGVyIHtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWJsZUhlYWRlckl0ZW0gZXh0ZW5kcyBDb21wb25lbnRzLkR4VGFibGVIZWFkZXJJdGVtIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnYWxpZ24nLCAnY29sdW1uaWQnLCAnY3VzdG9tU29ydCcsICdsYWJlbCcsICdsaW5lc2l6ZScsICdtYXh3aWR0aCcsICdtaW53aWR0aCcsICdzb3J0YWJsZScsICdzb3J0cHJpb3JpdHknLCAnc3RpY2t5JywgJ3R5cGUnXSxcbiAgbWV0aG9kczogWydnZXRNaW5XaWR0aCcsICdnZXRNYXhXaWR0aCddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtdGFibGUtaGVhZGVyLWl0ZW0nLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2FsaWduJywgJ2NvbHVtbmlkJywgJ2N1c3RvbVNvcnQnLCAnbGFiZWwnLCAnbGluZXNpemUnLCAnbWF4d2lkdGgnLCAnbWlud2lkdGgnLCAnc29ydGFibGUnLCAnc29ydHByaW9yaXR5JywgJ3N0aWNreScsICd0eXBlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhUYWJsZUhlYWRlckl0ZW0ge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFRhYmxlUm93IGV4dGVuZHMgQ29tcG9uZW50cy5EeFRhYmxlUm93IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsncm93aWQnLCAnc2VsZWN0ZWQnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXRhYmxlLXJvdycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsncm93aWQnLCAnc2VsZWN0ZWQnXSxcbiAgb3V0cHV0czogWydyb3dTZWxlY3RlZCddXG59KVxuZXhwb3J0IGNsYXNzIER4VGFibGVSb3cge1xuICAvKiogRmlyZWQgd2hlbiB0aGUgc2VsZWN0aW9uLXN0YXR1cyBvZiB0aGUgcm93IGlzIGNoYW5nZWQuIEB2YWx1ZSBib29sZWFuOiBSb3cgaXMgc2VsZWN0ZWQgb3Igbm90LiovXG4gIHJvd1NlbGVjdGVkITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PGJvb2xlYW4+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsncm93U2VsZWN0ZWQnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUYWcgZXh0ZW5kcyBDb21wb25lbnRzLkR4VGFnIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3InLCAnbGFiZWwnLCAncmVtb3ZlYWJsZScsICdzZWxlY3RhYmxlJywgJ3NlbGVjdGVkJywgJ3RleHRjb2xvcicsICd0aGVtZScsICd0eXBlJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC10YWcnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NvbG9yJywgJ2xhYmVsJywgJ3JlbW92ZWFibGUnLCAnc2VsZWN0YWJsZScsICdzZWxlY3RlZCcsICd0ZXh0Y29sb3InLCAndGhlbWUnLCAndHlwZSddLFxuICBvdXRwdXRzOiBbJ3JlbW92ZScsICdzZWxlY3RDaGFuZ2UnXVxufSlcbmV4cG9ydCBjbGFzcyBEeFRhZyB7XG4gIC8qKiBJcyBmaXJlZCB3aGVuIHRoZSB1c2VyIGludGVyYWN0cyB3aXRoIHRoZSByZW1vdmUgYnV0dG9uLiBAZXhhbXBsZSByZW1vdmUtZXZlbnQqL1xuICByZW1vdmUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICAvKiogSXMgZmlyZWQgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCBhIHNlbGVjdGFibGUgdGFnLiBAZXhhbXBsZSBzZWxlY3QtZXZlbnQqL1xuICBzZWxlY3RDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8Ym9vbGVhbj4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydyZW1vdmUnLCAnc2VsZWN0Q2hhbmdlJ10pO1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4VGV4dCBleHRlbmRzIENvbXBvbmVudHMuRHhUZXh0IHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnY29sb3InLCAndHlwZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtdGV4dCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY29sb3InLCAndHlwZSddXG59KVxuZXhwb3J0IGNsYXNzIER4VGV4dCB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4VGV4dEFyZWEgZXh0ZW5kcyBDb21wb25lbnRzLkR4VGV4dEFyZWEge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydkaXNhYmxlZCcsICdlcnJvcm1lc3NhZ2UnLCAna2lzeW5jZWQnLCAnbGFiZWwnLCAnbGluZXMnLCAnbWF4bGVuZ3RoJywgJ3BsYWNlaG9sZGVyJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3ZhbHVlJ10sXG4gIG1ldGhvZHM6IFsnZm9jdXNDb250cm9sJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC10ZXh0LWFyZWEnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9ybWVzc2FnZScsICdraXN5bmNlZCcsICdsYWJlbCcsICdsaW5lcycsICdtYXhsZW5ndGgnLCAncGxhY2Vob2xkZXInLCAncmVhZG9ubHknLCAncmVxdWlyZWQnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhUZXh0QXJlYSB7XG4gIC8qKiBFdmVudCBpcyB0aHJvd24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBjb250ZW50IG9mIHRoZSB0ZXh0YXJlYS4gQGV4YW1wbGUgY2hhbmdlLWV2ZW50cyovXG4gIHZhbHVlQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICAvKiogRXZlbnQgaXMgdGhyb3duIHdoZW4gdGhlIHVzZXIgY2hlY2tzIHRoZSBpbnB1dC4gRXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyBSZXR1cm4gb3JcbmxlYXZlcyB0aGUgdGV4dGFyZWEuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJ10pO1xuICB9XG59XG5cbmltcG9ydCB7IFRleHRJbnB1dEF1dG9jb21wbGV0ZUNvbnRyb2xsZXIgYXMgSUR4VGV4dElucHV0VGV4dElucHV0QXV0b2NvbXBsZXRlQ29udHJvbGxlciB9IGZyb20gJ0BkdmFnL2Rlc2lnbi1zeXN0ZW0vZGlzdC90eXBlcy9uZXcvZm9ybS9keC10ZXh0LWlucHV0L2R4LXRleHQtaW5wdXQnO1xuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4VGV4dElucHV0IGV4dGVuZHMgQ29tcG9uZW50cy5EeFRleHRJbnB1dCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9ybWVzc2FnZScsICdpY29uJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ3BsYWNlaG9sZGVyJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3NpemUnLCAndmFsdWUnXSxcbiAgbWV0aG9kczogWydmb2N1c0NvbnRyb2wnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXRleHQtaW5wdXQnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2Rpc2FibGVkJywgJ2Vycm9ybWVzc2FnZScsICdpY29uJywgJ2tpc3luY2VkJywgJ2xhYmVsJywgJ2xpbWl0bGVuZ3RoJywgJ3BsYWNlaG9sZGVyJywgJ3JlYWRvbmx5JywgJ3JlcXVpcmVkJywgJ3NpemUnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZScsICd2YWx1ZUNvbXBsZXRlJywgJ2F1dG9jb21wbGV0ZScsICdzZWxlY3RBdXRvY29tcGxldGUnLCAnZW50ZXJQcmVzcyddXG59KVxuZXhwb3J0IGNsYXNzIER4VGV4dElucHV0IHtcbiAgLyoqIEVtaXRzIHRoaXMgZXZlbnQgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSB2YWx1ZSBvZiB0aGlzIGlucHV0LiBAZXhhbXBsZSBjaGFuZ2UtZXZlbnRzKi9cbiAgdmFsdWVDaGFuZ2UhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8c3RyaW5nPj47XG4gIC8qKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgd2hlbiB0aGUgdXNlciBhY2NlcHRzIHRoZSB2YWx1ZS5cblRoZSB1c2VyIGFjY2VwdHMgdGhlIHZhbHVlIGJ5IHByZXNzaW5nIHRoZSBFbnRlciBrZXkgb3Igd2hlbiB0aGUgdXNlciBsZWF2ZSB0aGUgaW5wdXQuIEBleGFtcGxlIGNoYW5nZS1ldmVudHMqL1xuICB2YWx1ZUNvbXBsZXRlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCwgd2hlbiB0aGUgdXNlciBmaWxscyBvdXQgdGhpcyBpbnB1dC5cblRoZSBldmVudCBwYXlsb2QgY29udGFpbnMgYW4gY29udHJvbGxlciB3aGljaCBjYW4gYmUgdXNlZCB0byBzdWJtaXQgYXV0b2NvbXBsZXRlIG9wdGlvbnMuIEBleGFtcGxlIGF1dG9jb21wbGV0ZS1wbHoqL1xuICBhdXRvY29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8SUR4VGV4dElucHV0VGV4dElucHV0QXV0b2NvbXBsZXRlQ29udHJvbGxlcj4+O1xuICAvKiogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gYXV0b2NvbXBsZXRlIG9wdGlvbnMgZnJvbSB0aGUgbGlzdC5cblRoZSBldmVudCBwYXlsb2FkIGNvbnRhaW5zIHRoZSBgZGF0YWAgb2YgdGhlIHNlbGVjdGVkIEF1dG9Db21wbGV0ZU9wdGlvbi4gQGV4YW1wbGUgYXV0b2NvbXBsZXRlLXBsei1vcnQqL1xuICBzZWxlY3RBdXRvY29tcGxldGUhOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8YW55Pj47XG4gIC8qKiBUcmlnZ2VyIHdoZW4gdGhlIHVzZXIgcHJlc3NlcyB0aGUgXCJFbnRlclwiIGtleSB3aGlsZSBlZGl0aW5nIHRoZSBpbnB1dCBmaWVsZC4gQGV4YW1wbGUgZW50ZXItcHJlc3MqL1xuICBlbnRlclByZXNzITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHZvaWQ+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsndmFsdWVDaGFuZ2UnLCAndmFsdWVDb21wbGV0ZScsICdhdXRvY29tcGxldGUnLCAnc2VsZWN0QXV0b2NvbXBsZXRlJywgJ2VudGVyUHJlc3MnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhUZXh0TGlzdCBleHRlbmRzIENvbXBvbmVudHMuRHhUZXh0TGlzdCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ3R5cGUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXRleHQtbGlzdCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsndHlwZSddXG59KVxuZXhwb3J0IGNsYXNzIER4VGV4dExpc3Qge1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFRvZ2dsZSBleHRlbmRzIENvbXBvbmVudHMuRHhUb2dnbGUge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydjaGVja2VkJywgJ2Rpc2FibGVkJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC10b2dnbGUnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnXSxcbiAgb3V0cHV0czogWydjaGVja2VkQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhUb2dnbGUge1xuICAvKiogRW1pdHMgdGhpcyBldmVudCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHZhbHVlIG9mIHRoaXMgaW5wdXQuIEBleGFtcGxlIGNoZWNrZWQtY2hhbmdlKi9cbiAgY2hlY2tlZENoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxib29sZWFuPj47XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICAgIHByb3h5T3V0cHV0cyh0aGlzLCB0aGlzLmVsLCBbJ2NoZWNrZWRDaGFuZ2UnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhVc2VyQXZhdGFyIGV4dGVuZHMgQ29tcG9uZW50cy5EeFVzZXJBdmF0YXIge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydpbWFnZXVybCcsICdpbml0aWFscycsICdzaXplJ11cbn0pXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkeC11c2VyLWF2YXRhcicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnaW1hZ2V1cmwnLCAnaW5pdGlhbHMnLCAnc2l6ZSddXG59KVxuZXhwb3J0IGNsYXNzIER4VXNlckF2YXRhciB7XG4gIHByb3RlY3RlZCBlbDogSFRNTEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKGM6IENoYW5nZURldGVjdG9yUmVmLCByOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgejogTmdab25lKSB7XG4gICAgYy5kZXRhY2goKTtcbiAgICB0aGlzLmVsID0gci5uYXRpdmVFbGVtZW50O1xuICB9XG59XG5cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIER4V2l6YXJkIGV4dGVuZHMgQ29tcG9uZW50cy5EeFdpemFyZCB7fVxuQFByb3h5Q21wKHtcbiAgaW5wdXRzOiBbJ2N1cnJlbnRzdGVwJywgJ2V4cGFuZGVkbGF5b3V0YXQnLCAnaGVhZGxpbmUnLCAnb3JpZW50YXRpb24nXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXdpemFyZCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnY3VycmVudHN0ZXAnLCAnZXhwYW5kZWRsYXlvdXRhdCcsICdoZWFkbGluZScsICdvcmllbnRhdGlvbiddLFxuICBvdXRwdXRzOiBbJ2N1cnJlbnRTdGVwQ2hhbmdlJ11cbn0pXG5leHBvcnQgY2xhc3MgRHhXaXphcmQge1xuICAvKiogRmlyZXMgd2hlbiB0aGUgYGN1cnJlbnRzdGVwYCBwcm9wZXJ0eSB2YWx1ZSBjaGFuZ2VzLiBAZXhhbXBsZSBjdXJyZW50LXN0ZXAqL1xuICBjdXJyZW50U3RlcENoYW5nZSE6IEV2ZW50RW1pdHRlcjxDdXN0b21FdmVudDxzdHJpbmc+PjtcbiAgcHJvdGVjdGVkIGVsOiBIVE1MRWxlbWVudDtcbiAgY29uc3RydWN0b3IoYzogQ2hhbmdlRGV0ZWN0b3JSZWYsIHI6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCB6OiBOZ1pvbmUpIHtcbiAgICBjLmRldGFjaCgpO1xuICAgIHRoaXMuZWwgPSByLm5hdGl2ZUVsZW1lbnQ7XG4gICAgcHJveHlPdXRwdXRzKHRoaXMsIHRoaXMuZWwsIFsnY3VycmVudFN0ZXBDaGFuZ2UnXSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgRHhXaXphcmRTdGVwIGV4dGVuZHMgQ29tcG9uZW50cy5EeFdpemFyZFN0ZXAge31cbkBQcm94eUNtcCh7XG4gIGlucHV0czogWydmaW5pc2hlZCcsICdsYWJlbCcsICd2YWx1ZSddXG59KVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZHgtd2l6YXJkLXN0ZXAnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgaW5wdXRzOiBbJ2ZpbmlzaGVkJywgJ2xhYmVsJywgJ3ZhbHVlJ10sXG4gIG91dHB1dHM6IFsnaW50ZXJhY3Rpb24nXVxufSlcbmV4cG9ydCBjbGFzcyBEeFdpemFyZFN0ZXAge1xuICAvKiogRmlyZXMgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGlzIHN0ZXAuIEBleGFtcGxlIGludGVyYWN0aW9uKi9cbiAgaW50ZXJhY3Rpb24hOiBFdmVudEVtaXR0ZXI8Q3VzdG9tRXZlbnQ8dm9pZD4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWydpbnRlcmFjdGlvbiddKTtcbiAgfVxufVxuXG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBEeFllc05vIGV4dGVuZHMgQ29tcG9uZW50cy5EeFllc05vIHt9XG5AUHJveHlDbXAoe1xuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3JtZXNzYWdlJywgJ3NpemUnLCAndmFsdWUnXVxufSlcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2R4LXllcy1ubycsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICBpbnB1dHM6IFsnZGlzYWJsZWQnLCAnZXJyb3JtZXNzYWdlJywgJ3NpemUnLCAndmFsdWUnXSxcbiAgb3V0cHV0czogWyd2YWx1ZUNoYW5nZSddXG59KVxuZXhwb3J0IGNsYXNzIER4WWVzTm8ge1xuICAvKiogRW1pdHMgdGhpcyBldmVudCB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHZhbHVlIG9mIHRoaXMgaW5wdXQuIEBleGFtcGxlIHZhbHVlLWNoYW5nZSovXG4gIHZhbHVlQ2hhbmdlITogRXZlbnRFbWl0dGVyPEN1c3RvbUV2ZW50PHN0cmluZz4+O1xuICBwcm90ZWN0ZWQgZWw6IEhUTUxFbGVtZW50O1xuICBjb25zdHJ1Y3RvcihjOiBDaGFuZ2VEZXRlY3RvclJlZiwgcjogRWxlbWVudFJlZiwgcHJvdGVjdGVkIHo6IE5nWm9uZSkge1xuICAgIGMuZGV0YWNoKCk7XG4gICAgdGhpcy5lbCA9IHIubmF0aXZlRWxlbWVudDtcbiAgICBwcm94eU91dHB1dHModGhpcywgdGhpcy5lbCwgWyd2YWx1ZUNoYW5nZSddKTtcbiAgfVxufVxuIl19