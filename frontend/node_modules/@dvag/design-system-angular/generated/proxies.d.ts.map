{"version":3,"file":"proxies.d.ts","sources":["proxies.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEa;AADf;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAA+B;AACjC;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEmB;AAAE;AADrB;AACA;AACA;;;AACA;AACA;AACA;AACA;AAA0C;AAE1C;AADA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAA4D;AAC9D;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAyC;AAC3C;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEK;AAAE;AADP;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEO;AADT;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAuC;AACzC;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEC;AADH;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AACD;AAAD;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEG;AAAE;AADL;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AAC6B;;;AAD9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEK;AAAE;AADP;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAE;AAAkC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEiC;AAAE;AADnC;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAmD;AAE1C;AADT;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA4D;AAAE;AAC9D;AACA;AACA;;;AACA;AACA;AACA;AACA;AAA0C;AAE1C;AADA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEoE;AADtE;AACA;AACA;AACA;AACA;AACA;AACA;AAEM;AAEC;AAHP;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAAuD;AAEf;AADxC;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEK;AADP;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA4D;AAAE;AAC9D;AACA;AACA;;;AACA;AACA;AACA;AACA;AAA8B;AAAyB;AACvD;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAA+B;AACjC;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEiB;AADnB;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEyB;AAAE;AAD3B;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AAAwD;AAEpC;;;AADpB;AACA;AACA;AACA;AACA;AACA;AACA;AAAoD;AAMzC;AALX;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AAA8D;AAEf;AAD/C;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEiB;AADnB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAgE;AAEhE;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAA4B;AAEQ;AADpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AACD;AAAD;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAED;AADD;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAA+B;AAAyB;AACxD;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AAAqD;AAEpC;;;AADjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAoC;AACtC;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA8D;AAAE;AAChE;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA8D;AAAE;AAChE;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAyC;AACxC;AAAD;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAA8D;AAIjC;AAH7B;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA4D;AAAE;AAC9D;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEO;AAAE;AADT;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAoC;AAAyB;AAC7D;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEC;AAAE;AADH;AACA;AACA;AACA;AACA;;;AACA;AACA;AAIM;AAEO;AALb;AACA;AACA;AACA;AACA;AACA;AACA;AAAsD;AAEF;AADpD;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEqC;AADvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEK;AADP;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEwD;AAD1D;AACA;AACA;AACA;AACA;AACA;AACA;AAE+B;AAEX;AAHpB;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAkC;AAAyB;AAC3D;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AACD;AAAD;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAqC;AACvC;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAEkC;AAEtB;AAHZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEa;AAA+B;;;AAD5C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEiB;AAAE;AADnB;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEa;AAAE;AADf;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEiB;AAAE;AADnB;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEkC;AAA+B;;;AADjE;AACA;AACA;AACA;AACA;AACA;AACA;AAA8C;AAIjB;AAH7B;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAA4D;AAC9D;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA4D;AAAE;AAC9D;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAyC;AACxC;AAAD;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAyB;AAEX;AADd;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEW;AAAE;AADb;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AAIU;AAEH;AALP;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEc;AAA+B;;;AAD7C;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAEW;AAAE;AADb;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAA+B;;;AAEF;AAD7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAwC;AACxC;AAAA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAEqB;AAAE;AADvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAyB;AAA+B;;;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAwD;AAEpC;;;AADpB;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACC;AACA;AADD;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAgC;AAAyB;AACzD;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAiC;AACnC;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAE;AAA+B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAmC;AACrC;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AAAE;AAAqC;AACvC;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAA0D;AAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAA8B;AAAyB;AACvD;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEwC;AAE9B;AAHV;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAE8B;AAAoD;AADlF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AAAkC;AAAyB;AAC3D;;;AACA;AACA;AACA;AACA;AACA;AACA;AAE+B;AAEjB;AAHd;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AACD;AAAD;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAEK;AADP;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAE;AAA8D;AAChsourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone } from '@angular/core';\nimport { Components } from '@dvag/design-system';\nexport declare interface DsActionList extends Components.DsActionList {\n}\nexport declare class DsActionList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsActionListItem extends Components.DsActionListItem {\n}\nexport declare class DsActionListItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsAlert extends Components.DsAlert {\n}\nexport declare class DsAlert {\n    protected z: NgZone;\n    /** Fires when the user interacts with one of the alert's buttons. @exqmple button-click*/\n    buttonClick: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsAlertButton extends Components.DsAlertButton {\n}\nexport declare class DsAlertButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsAnnouncementBar extends Components.DsAnnouncementBar {\n}\nexport declare class DsAnnouncementBar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsApp extends Components.DsApp {\n}\nexport declare class DsApp {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsBorderedFormGroup extends Components.DsBorderedFormGroup {\n}\nexport declare class DsBorderedFormGroup {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsBorderedFormItem extends Components.DsBorderedFormItem {\n}\nexport declare class DsBorderedFormItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsButton extends Components.DsButton {\n}\nexport declare class DsButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsButtonBar extends Components.DsButtonBar {\n}\nexport declare class DsButtonBar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCard extends Components.DsCard {\n}\nexport declare class DsCard {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardCollapsable extends Components.DsCardCollapsable {\n}\nexport declare class DsCardCollapsable {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardContent extends Components.DsCardContent {\n}\nexport declare class DsCardContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardHeader extends Components.DsCardHeader {\n}\nexport declare class DsCardHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardImageHeader extends Components.DsCardImageHeader {\n}\nexport declare class DsCardImageHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardTabBar extends Components.DsCardTabBar {\n}\nexport declare class DsCardTabBar {\n    protected z: NgZone;\n    /** This event will be delegated when the tab switches.\n  It contains the `name` of the current `<ds-card-tab-page>`. @example show-change*/\n    showChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCardTabPage extends Components.DsCardTabPage {\n}\nexport declare class DsCardTabPage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCenteredBoard extends Components.DsCenteredBoard {\n}\nexport declare class DsCenteredBoard {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCenteredBoardItem extends Components.DsCenteredBoardItem {\n}\nexport declare class DsCenteredBoardItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsChartSample extends Components.DsChartSample {\n}\nexport declare class DsChartSample {\n    protected z: NgZone;\n    /** Triggers when value of the sample changes. @value number: Delegates the new value.*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsCheckbox extends Components.DsCheckbox {\n}\nexport declare class DsCheckbox {\n    protected z: NgZone;\n    /** Indicates that an error exist within the checkbox. Colors the border in red. @example check-event*/\n    checkedChange: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsColumn extends Components.DsColumn {\n}\nexport declare class DsColumn {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { DateError as IDsDateInputDateError } from '@dvag/design-system/dist/types/components/form/inputs/date/date';\nexport declare interface DsDateInput extends Components.DsDateInput {\n}\nexport declare class DsDateInput {\n    protected z: NgZone;\n    /** Delegates the current value while the user is editing the input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    /** Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component. @example change-events*/\n    errorFound: EventEmitter<CustomEvent<IDsDateInputDateError>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsDateRange extends Components.DsDateRange {\n}\nexport declare class DsDateRange {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsDonutChart extends Components.DsDonutChart {\n}\nexport declare class DsDonutChart {\n    protected z: NgZone;\n    /** Triggers when a segment is clicked. It delegates the index of the selected segment. @value number: The index of the selected segment.*/\n    segmentSelect: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { StringOrObject as IDsDropdownStringOrObject } from '@dvag/design-system/dist/types/components/form/ds-dropdown/ds-dropdown';\nexport declare interface DsDropdown extends Components.DsDropdown {\n}\nexport declare class DsDropdown {\n    protected z: NgZone;\n    /** Delegates the current selection or text input (`elseoption`) while the user is still editing. @example complex*/\n    valueChange: EventEmitter<CustomEvent<IDsDropdownStringOrObject>>;\n    /** Delegates the final selection or text input (`elseoption`).\n  The event is fired when the dropdown loses focus or pushing the 'Enter' key. @example complex*/\n    valueComplete: EventEmitter<CustomEvent<IDsDropdownStringOrObject>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsDropdownOption extends Components.DsDropdownOption {\n}\nexport declare class DsDropdownOption {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFmErgebnisuebersicht extends Components.DsFmErgebnisuebersicht {\n}\nexport declare class DsFmErgebnisuebersicht {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFmErgebnisuebersichtItem extends Components.DsFmErgebnisuebersichtItem {\n}\nexport declare class DsFmErgebnisuebersichtItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFmErgebnisuebersichtTable extends Components.DsFmErgebnisuebersichtTable {\n}\nexport declare class DsFmErgebnisuebersichtTable {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFooter extends Components.DsFooter {\n}\nexport declare class DsFooter {\n    protected z: NgZone;\n    /** This event is fired when the user clicks on an information button. The event holds the information about which button is clicked. @example info-button-event*/\n    infoButtonClicked: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFormLayout extends Components.DsFormLayout {\n}\nexport declare class DsFormLayout {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFullscreenSpinner extends Components.DsFullscreenSpinner {\n}\nexport declare class DsFullscreenSpinner {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsFunctionIconButton extends Components.DsFunctionIconButton {\n}\nexport declare class DsFunctionIconButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsGrid extends Components.DsGrid {\n}\nexport declare class DsGrid {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsGroupedTextInput extends Components.DsGroupedTextInput {\n}\nexport declare class DsGroupedTextInput {\n    protected z: NgZone;\n    /** Change of the entered value during the user's input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Confirmation of the entered value by the user. Event is triggered by\n  Pressing the Enter key or by leaving the input field. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { GrowStartEvent as IDsGrowBoxGrowStartEvent } from '@dvag/design-system/dist/types/components/layout/ds-grow-box/ds-grow-box';\nexport declare interface DsGrowBox extends Components.DsGrowBox {\n}\nexport declare class DsGrowBox {\n    protected z: NgZone;\n    /** Event kennzeichnet den Abschluss einer Transition. Die Event-Payload (`event.detail`)\n  enthält Status-Informationen zur Growbox. */\n    growStart: EventEmitter<CustomEvent<IDsGrowBoxGrowStartEvent>>;\n    /** Wirft Ergeignis, wenn sich die Sichtbarkeit des Contents ändert.\n  Die Event-Payload (`event.detail`) enthält einen boolean, ob der\n  Content sichtbar ist. */\n    contentVisibilityChange: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeader extends Components.DsHeader {\n}\nexport declare class DsHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeaderAction extends Components.DsHeaderAction {\n}\nexport declare class DsHeaderAction {\n    protected z: NgZone;\n    /** Fired when user interacts with this item.\n  \n  Event contains the label attribute of the action. */\n    interaction: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeaderActionList extends Components.DsHeaderActionList {\n}\nexport declare class DsHeaderActionList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeaderCustomer extends Components.DsHeaderCustomer {\n}\nexport declare class DsHeaderCustomer {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeaderUser extends Components.DsHeaderUser {\n}\nexport declare class DsHeaderUser {\n    protected z: NgZone;\n    /** Event wird gefeuert, wenn der Nutzer sich abmelden möchte. */\n    signOut: EventEmitter<CustomEvent<void>>;\n    /** Fired when the user interacts with the Name of the current user, within the avatar-menu. */\n    usernameInteraction: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHeroImage extends Components.DsHeroImage {\n}\nexport declare class DsHeroImage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsHr extends Components.DsHr {\n}\nexport declare class DsHr {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsIcon extends Components.DsIcon {\n}\nexport declare class DsIcon {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsIconButton extends Components.DsIconButton {\n}\nexport declare class DsIconButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsInfo extends Components.DsInfo {\n}\nexport declare class DsInfo {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsLink extends Components.DsLink {\n}\nexport declare class DsLink {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsLogo extends Components.DsLogo {\n}\nexport declare class DsLogo {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsModal extends Components.DsModal {\n}\nexport declare class DsModal {\n    protected z: NgZone;\n    /** Wird gefeuert, wenn der Dialog geöffnet wird. */\n    modalOpened: EventEmitter<CustomEvent<void>>;\n    /** Wird gefeuert, wenn der Dialog vom Nutzer geschlossen wird. (Schließen-Button/Hintergrund klicken) */\n    modalClosed: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsNavigatedContent extends Components.DsNavigatedContent {\n}\nexport declare class DsNavigatedContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { NavigatedRoute as IDsNavigatedContentMenuNavigatedRoute } from '@dvag/design-system/dist/types/components/scaffold/navigated-content/ds-navigated-content-menu/ds-navigated-content-menu';\nexport declare interface DsNavigatedContentMenu extends Components.DsNavigatedContentMenu {\n}\nexport declare class DsNavigatedContentMenu {\n    protected z: NgZone;\n    /** Is triggered if an user interacts with the menu entries.\n  The event detail contains following data structure: `{path: 'toplevel/sublevel', segments: ['toplevel', 'sublevel']}` */\n    navigate: EventEmitter<CustomEvent<IDsNavigatedContentMenuNavigatedRoute>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsNavigatedContentMenuItem extends Components.DsNavigatedContentMenuItem {\n}\nexport declare class DsNavigatedContentMenuItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsNotificationToast extends Components.DsNotificationToast {\n}\nexport declare class DsNotificationToast {\n    protected z: NgZone;\n    /** Fires when the notification closes automatically or by clicking on the close button. @example close-notification*/\n    closeNotification: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsNumberInput extends Components.DsNumberInput {\n}\nexport declare class DsNumberInput {\n    protected z: NgZone;\n    /** Changes of the input value during the input of the user. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    /** Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsPage extends Components.DsPage {\n}\nexport declare class DsPage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsPaginator extends Components.DsPaginator {\n}\nexport declare class DsPaginator {\n    protected z: NgZone;\n    /** Event wird gefeuert, wenn die Seite, durch Klicken der Pfeile oder der Seitenzahlen, geändert wird.\n  Der delegierte Wert, reflektiert das `current`-Attribut. */\n    pageChanged: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsPlaceholder extends Components.DsPlaceholder {\n}\nexport declare class DsPlaceholder {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsRadioButton extends Components.DsRadioButton {\n}\nexport declare class DsRadioButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsRadioButtonGroup extends Components.DsRadioButtonGroup {\n}\nexport declare class DsRadioButtonGroup {\n    protected z: NgZone;\n    /** Delegates the current selected `<ds-radio-button>` element's value.\n  This event will not trigger when setting the `value` in JavaScript. @example read-value*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SearchAutoCompleteHandler as IDsSearchSearchAutoCompleteHandler } from '@dvag/design-system/dist/types/components/form/ds-search/auto-complete-value';\nexport declare interface DsSearch extends Components.DsSearch {\n}\nexport declare class DsSearch {\n    protected z: NgZone;\n    /**\n  While the user is typing, this event is triggered and returns a controller in the event payload (`event.detail`).\n  This controller can be used to send input field values for autocompletion.\n  The user entered value can be determined using `event.detail.value`.\n  \n  The generated search suggestions are passed as an array to the `event.detail.provideValues()`\n  method. A search suggestion is an object with the properties:\n  \n  - `label`: Primary search suggestion text, which will be transferred to the input field when it is accepted\n  - `prelabel`: Optional text above the label that describes the search suggestion in more detail.\n  - `sublabel`: Optional text under the label that describes the search suggestion in more detail\n  - `category`: Optional categorization\n  - `data`: Optional field for any data.\n  \n  A search suggestion object can contain further properties, which can be evaluated with the `searchSelect`\n  event. @example example*/\n    search: EventEmitter<CustomEvent<IDsSearchSearchAutoCompleteHandler>>;\n    /** Fired when the user selects a search suggestion.\n  As event payload (`event.detail`) the object is supplied,\n  which created the search suggestion. @example example*/\n    selectSearch: EventEmitter<CustomEvent<any>>;\n    /** Fired when the user changes the search term. */\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Confirmation of the entered value by the user. Event is triggered by\n  pressing the Enter key or by leaving the input field. */\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsSlider extends Components.DsSlider {\n}\nexport declare class DsSlider {\n    protected z: NgZone;\n    /** User made changes. Contains the chosen value. @example value-change*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsSpinner extends Components.DsSpinner {\n}\nexport declare class DsSpinner {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { TableConfig as IDsTableTableConfig } from '@dvag/design-system/dist/types/components/table/ds-table/ds-table';\nexport declare interface DsTable extends Components.DsTable {\n}\nexport declare class DsTable {\n    protected z: NgZone;\n    /** This event will be fired as soon as the table`s state changes (e.g. sorting, paging...) @example table-state-changed*/\n    tableStateChanged: EventEmitter<CustomEvent<IDsTableTableConfig>>;\n    /** In case a row is selected this event will fire the key of the row. @value string: If the `selectionmode` allows a single selection the event will delegate one selected row key.,@value string[]: If the `selectionmode` allows a multi selection the event will delegate all selected row keys.\n  **!!!Experimental feature!!!***/\n    rowsSelected: EventEmitter<CustomEvent<string[]>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTableCell extends Components.DsTableCell {\n}\nexport declare class DsTableCell {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTableFooter extends Components.DsTableFooter {\n}\nexport declare class DsTableFooter {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTableHeader extends Components.DsTableHeader {\n}\nexport declare class DsTableHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTableHeaderItem extends Components.DsTableHeaderItem {\n}\nexport declare class DsTableHeaderItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTableRow extends Components.DsTableRow {\n}\nexport declare class DsTableRow {\n    protected z: NgZone;\n    /** Fired when the selection-status of the row is changed. @value boolean: Row is selected or not.*/\n    rowSelected: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsText extends Components.DsText {\n}\nexport declare class DsText {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTextArea extends Components.DsTextArea {\n}\nexport declare class DsTextArea {\n    protected z: NgZone;\n    /** Event is thrown when the user changes the content of the textarea. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Event is thrown when the user checks the input. Event is triggered when the user presses Return or\n  leaves the textarea. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTextButton extends Components.DsTextButton {\n}\nexport declare class DsTextButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { TextInputAutocompleteController as IDsTextInputTextInputAutocompleteController } from '@dvag/design-system/dist/types/components/form/inputs/ds-text-input/ds-text-input';\nexport declare interface DsTextInput extends Components.DsTextInput {\n}\nexport declare class DsTextInput {\n    protected z: NgZone;\n    /** Emits this event when the user changes the value of this input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** This Event is emitted when the user accepts the value.\n  The user accepts the value by pressing the Enter Key or when the user leave the input. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    /** This event is fired, when the user fills out this input.\n  The event paylod contains an controller which can be used to submit autocomplete values. @example autocomplete-plz*/\n    autocomplete: EventEmitter<CustomEvent<IDsTextInputTextInputAutocompleteController>>;\n    /** This event is fired when the user selects an autocomplete value from the list.\n  The event payload contains the `data` of the selected AutoCompleteOption. @example autocomplete-plz-ort*/\n    selectAutocomplete: EventEmitter<CustomEvent<any>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsTextList extends Components.DsTextList {\n}\nexport declare class DsTextList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsUserAvatar extends Components.DsUserAvatar {\n}\nexport declare class DsUserAvatar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsWorkflowProgress extends Components.DsWorkflowProgress {\n}\nexport declare class DsWorkflowProgress {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsWrappedLayout extends Components.DsWrappedLayout {\n}\nexport declare class DsWrappedLayout {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DsYesNo extends Components.DsYesNo {\n}\nexport declare class DsYesNo {\n    protected z: NgZone;\n    /** Event contains `\"yes\"`, when Ja or `\"no\"` when Nein was selected.\n  The user can't unselect the value. @example event*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxAccordion extends Components.DxAccordion {\n}\nexport declare class DxAccordion {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxAccordionGroup extends Components.DxAccordionGroup {\n}\nexport declare class DxAccordionGroup {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxAlert extends Components.DxAlert {\n}\nexport declare class DxAlert {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxAnnouncementBar extends Components.DxAnnouncementBar {\n}\nexport declare class DxAnnouncementBar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxApp extends Components.DxApp {\n}\nexport declare class DxApp {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxBreadcrumb extends Components.DxBreadcrumb {\n}\nexport declare class DxBreadcrumb {\n    protected z: NgZone;\n    /** Fired when the user interacts with this item. @example navigation*/\n    navigateHome: EventEmitter<CustomEvent<void>>;\n    /** Fired when the user interacts with a breadcrumb item.\n  As event payload (`event.detail`) the value of the interacted item is supplied. @example navigation*/\n    navigate: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxBreadcrumbItem extends Components.DxBreadcrumbItem {\n}\nexport declare class DxBreadcrumbItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxButton extends Components.DxButton {\n}\nexport declare class DxButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCard extends Components.DxCard {\n}\nexport declare class DxCard {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCardCollapsable extends Components.DxCardCollapsable {\n}\nexport declare class DxCardCollapsable {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCardContent extends Components.DxCardContent {\n}\nexport declare class DxCardContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCardHeader extends Components.DxCardHeader {\n}\nexport declare class DxCardHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCardImage extends Components.DxCardImage {\n}\nexport declare class DxCardImage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxChartSample extends Components.DxChartSample {\n}\nexport declare class DxChartSample {\n    protected z: NgZone;\n    /** Triggers when value of the sample changes. @value number: Delegates the new value.*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxCheckbox extends Components.DxCheckbox {\n}\nexport declare class DxCheckbox {\n    protected z: NgZone;\n    /** Delegates the current `checked` value of this component when the user interacts with it. @example check-event*/\n    checkedChange: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { ComboboxSearchController as IDxComboboxComboboxSearchController } from '@dvag/design-system/dist/types/new/form/dx-combobox/dx-combobox';\nexport declare interface DxCombobox extends Components.DxCombobox {\n}\nexport declare class DxCombobox {\n    protected z: NgZone;\n    /** Emits this event when the user changes the value of this input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** This event is emitted when the user accepts the value.\n  The user accepts the value by pressing the Enter key or when the user leave the input. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    /** This event is fired, when the user fills out this input.\n  The event paylod contains an controller which can be used to submit autocomplete options. @example search,@example select-search-option,@example option-labels,@example option-icons*/\n    search: EventEmitter<CustomEvent<IDxComboboxComboboxSearchController>>;\n    /** This event is fired when the user selects an autocomplete options from the list.\n  The event payload contains the `data` of the selected AutoCompleteOption. @example select-search-option*/\n    selectSearchOption: EventEmitter<CustomEvent<any>>;\n    /** Trigger when the user presses the \"Enter\" key while editing the input field. @example enter-press*/\n    enterPress: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxContainer extends Components.DxContainer {\n}\nexport declare class DxContainer {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { DateError as IDxDateInputDateError } from '@dvag/design-system/dist/types/new/form/date/date';\nexport declare interface DxDateInput extends Components.DxDateInput {\n}\nexport declare class DxDateInput {\n    protected z: NgZone;\n    /** Delegates the current value while the user is editing the input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Delegates the final value when the user submits the result by pressing 'Enter' or unfocusing this component. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    /** Delegates an error payload which consists of a message and an error type. @example error-found*/\n    errorFound: EventEmitter<CustomEvent<IDxDateInputDateError>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxDateRange extends Components.DxDateRange {\n}\nexport declare class DxDateRange {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxDonutChart extends Components.DxDonutChart {\n}\nexport declare class DxDonutChart {\n    protected z: NgZone;\n    /** Triggers when a segment is clicked. It delegates the index of the selected segment. @value number: The index of the selected segment.,@example segment-select*/\n    segmentSelect: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { StringOrObject as IDxDropdownStringOrObject } from '@dvag/design-system/dist/types/new/layout/dx-list/list.util';\nexport declare interface DxDropdown extends Components.DxDropdown {\n}\nexport declare class DxDropdown {\n    protected z: NgZone;\n    /** Delegates the current selection or text input (`elseoption`) while the user is still editing. @example complex*/\n    valueChange: EventEmitter<CustomEvent<IDxDropdownStringOrObject>>;\n    /** Delegates the final selection or text input (`elseoption`).\n  The event is fired when the dropdown loses focus or pushing the 'Enter' key. @example complex*/\n    valueComplete: EventEmitter<CustomEvent<IDxDropdownStringOrObject>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxDropdownOption extends Components.DxDropdownOption {\n}\nexport declare class DxDropdownOption {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxErrorMessage extends Components.DxErrorMessage {\n}\nexport declare class DxErrorMessage {\n    protected z: NgZone;\n    /**  */\n    forceUpdateOnChange: EventEmitter<CustomEvent<(ref: any) => void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxErrorPage extends Components.DxErrorPage {\n}\nexport declare class DxErrorPage {\n    protected z: NgZone;\n    /** Fires when the user interacts with the button. @example action*/\n    action: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxExpanded extends Components.DxExpanded {\n}\nexport declare class DxExpanded {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxFdOutlineBox extends Components.DxFdOutlineBox {\n}\nexport declare class DxFdOutlineBox {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxFdSeparator extends Components.DxFdSeparator {\n}\nexport declare class DxFdSeparator {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxFooter extends Components.DxFooter {\n}\nexport declare class DxFooter {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxFormWrapper extends Components.DxFormWrapper {\n}\nexport declare class DxFormWrapper {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxGoldenStage extends Components.DxGoldenStage {\n}\nexport declare class DxGoldenStage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxGrid extends Components.DxGrid {\n}\nexport declare class DxGrid {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeader extends Components.DxHeader {\n}\nexport declare class DxHeader {\n    protected z: NgZone;\n    /** An event which is triggered when the user clicks the logo or the application name.\n  This event should always be used to show the user the application's home page. */\n    navigateHome: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { CloseSidebarDetail as IDxHeaderAppFavoritesCloseSidebarDetail } from '@dvag/design-system/dist/types/new/scaffold/dx-header/dx-header-app-favorites/app-favorite';\nimport { LaunchAppDetail as IDxHeaderAppFavoritesLaunchAppDetail } from '@dvag/design-system/dist/types/new/scaffold/dx-header/dx-header-app-favorites/app-favorite';\nexport declare interface DxHeaderAppFavorites extends Components.DxHeaderAppFavorites {\n}\nexport declare class DxHeaderAppFavorites {\n    protected z: NgZone;\n    /** Fired when the navigation's header menu item is interacted with. @example menu-interaction*/\n    menuInteraction: EventEmitter<CustomEvent<void>>;\n    /** Fires when the user deletes a favorite app. The event delegates the application id of the deleted app. */\n    deleteApp: EventEmitter<CustomEvent<string>>;\n    /** Fires when the user sorts his favorite apps. The event delegates the application ids dependant on the current sorting. */\n    sortApps: EventEmitter<CustomEvent<string[]>>;\n    /** Fires when the user clicks on the \"Favoriten hinzufügen\" button within the sidebar content. */\n    addApp: EventEmitter<CustomEvent<IDxHeaderAppFavoritesCloseSidebarDetail>>;\n    /** Fires when toggling the edit mode within the sidebar. (e.g. by clicking the \"Favoriten bearbeiten\" button) @example edit-app-event*/\n    editApps: EventEmitter<CustomEvent<boolean>>;\n    /** Fires when the user clicks selects an app. The event delegates the application id of the corresponding app. */\n    launchApp: EventEmitter<CustomEvent<IDxHeaderAppFavoritesLaunchAppDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderAppFavoritesApp extends Components.DxHeaderAppFavoritesApp {\n}\nexport declare class DxHeaderAppFavoritesApp {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderMenuCustom extends Components.DxHeaderMenuCustom {\n}\nexport declare class DxHeaderMenuCustom {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderMenuGroup extends Components.DxHeaderMenuGroup {\n}\nexport declare class DxHeaderMenuGroup {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderMenuItem extends Components.DxHeaderMenuItem {\n}\nexport declare class DxHeaderMenuItem {\n    protected z: NgZone;\n    /** Fired when the header menu item is interacted with. @example menu-interaction*/\n    menuInteraction: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderMenuLink extends Components.DxHeaderMenuLink {\n}\nexport declare class DxHeaderMenuLink {\n    protected z: NgZone;\n    /** Fired when the header menu item is interacted with. @example menu-interaction*/\n    menuInteraction: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderNavigation extends Components.DxHeaderNavigation {\n}\nexport declare class DxHeaderNavigation {\n    protected z: NgZone;\n    /** Fired when the navigation's header menu item is interacted with. @example menu-interaction*/\n    menuInteraction: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { NavigationItemInteractionPayload as IDxHeaderNavigationItemNavigationItemInteractionPayload } from '@dvag/design-system/dist/types/new/scaffold/dx-header/dx-header-navigation/dx-header-navigation-item/dx-header-navigation-item';\nexport declare interface DxHeaderNavigationItem extends Components.DxHeaderNavigationItem {\n}\nexport declare class DxHeaderNavigationItem {\n    protected z: NgZone;\n    /** Fired when the user interacts with this item. (e.g. by clicking it)\n  It emits a navigation item payload which consists of the corresponding navigation item's `value` and a function which, when called, closes the sidebar. @example interaction*/\n    interaction: EventEmitter<CustomEvent<IDxHeaderNavigationItemNavigationItemInteractionPayload>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeaderUser extends Components.DxHeaderUser {\n}\nexport declare class DxHeaderUser {\n    protected z: NgZone;\n    /** Fired when the sign-out button (\"Abmelden\") is clicked in the user's sidebar content. @example sidebar-events*/\n    signOut: EventEmitter<CustomEvent<void>>;\n    /** Fired when the account button (\"Benutzerkonto\") is clicked in the user's sidebar content. @example sidebar-events*/\n    accountInteraction: EventEmitter<CustomEvent<void>>;\n    /** Fired when the user's header menu item is interacted with. @example menu-interaction*/\n    menuInteraction: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxHeroImage extends Components.DxHeroImage {\n}\nexport declare class DxHeroImage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxIcon extends Components.DxIcon {\n}\nexport declare class DxIcon {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxInfo extends Components.DxInfo {\n}\nexport declare class DxInfo {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxLegend extends Components.DxLegend {\n}\nexport declare class DxLegend {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxLink extends Components.DxLink {\n}\nexport declare class DxLink {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxList extends Components.DxList {\n}\nexport declare class DxList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxListItem extends Components.DxListItem {\n}\nexport declare class DxListItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxLogo extends Components.DxLogo {\n}\nexport declare class DxLogo {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxMediaQueryValue extends Components.DxMediaQueryValue {\n}\nexport declare class DxMediaQueryValue {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { ModalClosedPayload as IDxModalModalClosedPayload } from '@dvag/design-system/dist/types/new/modals/dx-modal/dx-modal';\nexport declare interface DxModal extends Components.DxModal {\n}\nexport declare class DxModal {\n    protected z: NgZone;\n    /** The Event triggers as soon the dialog opens. */\n    modalOpened: EventEmitter<CustomEvent<void>>;\n    /** The Event triggers, as soon the user closes the dialog via the close button or through clicking on the background behind the modal.\n  It emits an object with meta-data containing the reason the modal was closed and a function to prevent the modal from closing. @example prevent-background-close,@example modal-closed*/\n    modalClosed: EventEmitter<CustomEvent<IDxModalModalClosedPayload>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxMultiDropdown extends Components.DxMultiDropdown {\n}\nexport declare class DxMultiDropdown {\n    protected z: NgZone;\n    /** Delegates the current selection while the user is still editing. @example complex*/\n    valueChange: EventEmitter<CustomEvent<HTMLDxDropdownOptionElement[]>>;\n    /** Delegates the final selection.\n  The event is fired when the dropdown loses focus or pushing the 'Enter' key. @example complex*/\n    valueComplete: EventEmitter<CustomEvent<HTMLDxDropdownOptionElement[]>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxNotificationBar extends Components.DxNotificationBar {\n}\nexport declare class DxNotificationBar {\n    protected z: NgZone;\n    /** This event is fired, when the user closes the notification via the close button. @example close-notification*/\n    closeNotification: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxNotificationToast extends Components.DxNotificationToast {\n}\nexport declare class DxNotificationToast {\n    protected z: NgZone;\n    /** Fires when the notification closes automatically or by clicking on the close button. @example close-notification*/\n    closeNotification: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxNumberInput extends Components.DxNumberInput {\n}\nexport declare class DxNumberInput {\n    protected z: NgZone;\n    /** Changes of the input value during the input of the user. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    /** Confirmation of the input value. Event is triggered, when the user presses return or leaving the input field. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxNumberPaginator extends Components.DxNumberPaginator {\n}\nexport declare class DxNumberPaginator {\n    protected z: NgZone;\n    /** Triggers when the page changes by interacting with the arrows, the page numbers or the dropdown (MQ1). @example pagechange*/\n    pageChanged: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxNumberPicker extends Components.DxNumberPicker {\n}\nexport declare class DxNumberPicker {\n    protected z: NgZone;\n    /**  */\n    valueChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SelectionPayload as IDxOverflowMenuSelectionPayload } from '@dvag/design-system/dist/types/new/scaffold/dx-overflow-menu/dx-overflow-menu';\nimport { OpenChangePayload as IDxOverflowMenuOpenChangePayload } from '@dvag/design-system/dist/types/new/scaffold/dx-overflow-menu/dx-overflow-menu';\nexport declare interface DxOverflowMenu extends Components.DxOverflowMenu {\n}\nexport declare class DxOverflowMenu {\n    protected z: NgZone;\n    /** Fires when the user selects a menu item.\n  The event payload consists of a `SelectionPayload` object which contains a `value` property, being either a string, an object.\n  When the `selectionmode` equals `multi` the omitted `value` within the `SelectionPayload` is an array of strings and objects. @example selection,@example selection-complex*/\n    selection: EventEmitter<CustomEvent<IDxOverflowMenuSelectionPayload>>;\n    /** Fires when the list opens.\n  The event payload consists of an `OpenChangePayload` object which contains an `isOpen` property. @example list-open-change*/\n    listOpenChange: EventEmitter<CustomEvent<IDxOverflowMenuOpenChangePayload>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxOverflowMenuItem extends Components.DxOverflowMenuItem {\n}\nexport declare class DxOverflowMenuItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxPaginator extends Components.DxPaginator {\n}\nexport declare class DxPaginator {\n    protected z: NgZone;\n    /** Fires when the `current` property changes. */\n    pageChanged: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxPlaceholder extends Components.DxPlaceholder {\n}\nexport declare class DxPlaceholder {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxProcessHeader extends Components.DxProcessHeader {\n}\nexport declare class DxProcessHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxRadioButton extends Components.DxRadioButton {\n}\nexport declare class DxRadioButton {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxRadioButtonGroup extends Components.DxRadioButtonGroup {\n}\nexport declare class DxRadioButtonGroup {\n    protected z: NgZone;\n    /** Delegates the current selected `<dx-radio-button>` element's value.\n  This event will not trigger when setting the `value` in JavaScript. @example read-value*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxRepresentativeInfo extends Components.DxRepresentativeInfo {\n}\nexport declare class DxRepresentativeInfo {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSidebarContent extends Components.DxSidebarContent {\n}\nexport declare class DxSidebarContent {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSiteNavigation extends Components.DxSiteNavigation {\n}\nexport declare class DxSiteNavigation {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { NavigateEventDetail as IDxSiteNavigationMenuNavigateEventDetail } from '@dvag/design-system/dist/types/new/site-navigation/dx-site-navigation-menu/dx-site-navigation-menu';\nexport declare interface DxSiteNavigationMenu extends Components.DxSiteNavigationMenu {\n}\nexport declare class DxSiteNavigationMenu {\n    protected z: NgZone;\n    /** Event is fired when the user interacts with a menu item.\n  The event details object contains the following properties:\n  - `value`: (string) value of the menu item the user clicked\n  - `complete`: (function) needs to be called if not using autonavigation feature. While not completed the menu will not connect to scopes in order to select items by scrolling into the area. */\n    navigate: EventEmitter<CustomEvent<IDxSiteNavigationMenuNavigateEventDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSiteNavigationMenuItem extends Components.DxSiteNavigationMenuItem {\n}\nexport declare class DxSiteNavigationMenuItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSiteNavigationScope extends Components.DxSiteNavigationScope {\n}\nexport declare class DxSiteNavigationScope {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSlideShow extends Components.DxSlideShow {\n}\nexport declare class DxSlideShow {\n    protected z: NgZone;\n    /** Delegates the current page when it changes. */\n    pageChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSlider extends Components.DxSlider {\n}\nexport declare class DxSlider {\n    protected z: NgZone;\n    /** User made changes. Contains the chosen value. @example value-change*/\n    valueChange: EventEmitter<CustomEvent<number>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { SortDetail as IDxSortSortDetail } from '@dvag/design-system/dist/types/new/internal/dx-sort/dx-sort';\nexport declare interface DxSort extends Components.DxSort {\n}\nexport declare class DxSort {\n    protected z: NgZone;\n    /** Fires when the children are sorted by the user. By reading the event's detail property you can access the `originalArray` and the `sortedArray`.\n  Both arrays consist of the `value` properties provided by the `<dx-sort-item>` elements. @example sort*/\n    sort: EventEmitter<CustomEvent<IDxSortSortDetail>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSortItem extends Components.DxSortItem {\n}\nexport declare class DxSortItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSpacer extends Components.DxSpacer {\n}\nexport declare class DxSpacer {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxSpinner extends Components.DxSpinner {\n}\nexport declare class DxSpinner {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTabBar extends Components.DxTabBar {\n}\nexport declare class DxTabBar {\n    protected z: NgZone;\n    /** This event fires when the user selects a new tab.\n  It contains the `value` of the corresponding `<dx-tab-page>`. @example tab-change*/\n    tabChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTabPage extends Components.DxTabPage {\n}\nexport declare class DxTabPage {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { TableConfig as IDxTableTableConfig } from '@dvag/design-system/dist/types/new/table/dx-table/dx-table';\nimport { TableSelection as IDxTableTableSelection } from '@dvag/design-system/dist/types/new/table/table-common-types';\nexport declare interface DxTable extends Components.DxTable {\n}\nexport declare class DxTable {\n    protected z: NgZone;\n    /** This event will be fired as soon as the table`s state changes (e.g. sorting, paging...) @example table-state-changed*/\n    tableStateChanged: EventEmitter<CustomEvent<IDxTableTableConfig>>;\n    /** This event will be fired as soon as the table`s state changes (e.g. sorting, paging...) @example table-state-changed*/\n    selectionStateChanged: EventEmitter<CustomEvent<IDxTableTableSelection>>;\n    /** This event will be fired as soon as the table`s state changes (e.g. sorting, paging...) @example table-state-changed*/\n    expansionChanged: EventEmitter<CustomEvent<boolean>>;\n    /** In case a row is selected this event will fire the key of the row. @value string: If the `selectionmode` allows a single selection the event will delegate one selected row key.,@value string[]: If the `selectionmode` allows a multi selection the event will delegate all selected row keys.,@deprecated Please use the `rowSelected` event of the `<dx-table-row>` components to get notified when a new row was selected.*/\n    rowsSelected: EventEmitter<CustomEvent<string[]>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTableCell extends Components.DxTableCell {\n}\nexport declare class DxTableCell {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTableFooter extends Components.DxTableFooter {\n}\nexport declare class DxTableFooter {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTableHeader extends Components.DxTableHeader {\n}\nexport declare class DxTableHeader {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTableHeaderItem extends Components.DxTableHeaderItem {\n}\nexport declare class DxTableHeaderItem {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTableRow extends Components.DxTableRow {\n}\nexport declare class DxTableRow {\n    protected z: NgZone;\n    /** Fired when the selection-status of the row is changed. @value boolean: Row is selected or not.*/\n    rowSelected: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTag extends Components.DxTag {\n}\nexport declare class DxTag {\n    protected z: NgZone;\n    /** Is fired when the user interacts with the remove button. @example remove-event*/\n    remove: EventEmitter<CustomEvent<void>>;\n    /** Is fired when the user interacts with a selectable tag. @example select-event*/\n    selectChange: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxText extends Components.DxText {\n}\nexport declare class DxText {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTextArea extends Components.DxTextArea {\n}\nexport declare class DxTextArea {\n    protected z: NgZone;\n    /** Event is thrown when the user changes the content of the textarea. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** Event is thrown when the user checks the input. Event is triggered when the user presses Return or\n  leaves the textarea. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nimport { TextInputAutocompleteController as IDxTextInputTextInputAutocompleteController } from '@dvag/design-system/dist/types/new/form/dx-text-input/dx-text-input';\nexport declare interface DxTextInput extends Components.DxTextInput {\n}\nexport declare class DxTextInput {\n    protected z: NgZone;\n    /** Emits this event when the user changes the value of this input. @example change-events*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    /** This event is emitted when the user accepts the value.\n  The user accepts the value by pressing the Enter key or when the user leave the input. @example change-events*/\n    valueComplete: EventEmitter<CustomEvent<string>>;\n    /** This event is fired, when the user fills out this input.\n  The event paylod contains an controller which can be used to submit autocomplete options. @example autocomplete-plz*/\n    autocomplete: EventEmitter<CustomEvent<IDxTextInputTextInputAutocompleteController>>;\n    /** This event is fired when the user selects an autocomplete options from the list.\n  The event payload contains the `data` of the selected AutoCompleteOption. @example autocomplete-plz-ort*/\n    selectAutocomplete: EventEmitter<CustomEvent<any>>;\n    /** Trigger when the user presses the \"Enter\" key while editing the input field. @example enter-press*/\n    enterPress: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxTextList extends Components.DxTextList {\n}\nexport declare class DxTextList {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxToggle extends Components.DxToggle {\n}\nexport declare class DxToggle {\n    protected z: NgZone;\n    /** Emits this event when the user changes the value of this input. @example checked-change*/\n    checkedChange: EventEmitter<CustomEvent<boolean>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxUserAvatar extends Components.DxUserAvatar {\n}\nexport declare class DxUserAvatar {\n    protected z: NgZone;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxWizard extends Components.DxWizard {\n}\nexport declare class DxWizard {\n    protected z: NgZone;\n    /** Fires when the `currentstep` property value changes. @example current-step*/\n    currentStepChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxWizardStep extends Components.DxWizardStep {\n}\nexport declare class DxWizardStep {\n    protected z: NgZone;\n    /** Fires when the user interacts with this step. @example interaction*/\n    interaction: EventEmitter<CustomEvent<void>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\nexport declare interface DxYesNo extends Components.DxYesNo {\n}\nexport declare class DxYesNo {\n    protected z: NgZone;\n    /** Emits this event when the user changes the value of this input. @example value-change*/\n    valueChange: EventEmitter<CustomEvent<string>>;\n    protected el: HTMLElement;\n    constructor(c: ChangeDetectorRef, r: ElementRef, z: NgZone);\n}\n"]}