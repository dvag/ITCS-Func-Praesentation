import { EventEmitter, Component, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, Directive, HostListener, NgModule } from '@angular/core';
import { defineCustomElements } from '@dvag/design-system/loader';
import { __decorate } from 'tslib';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

/* eslint-disable */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
const proxyInputs = (Cmp, inputs) => {
    const Prototype = Cmp.prototype;
    inputs.forEach(item => {
        Object.defineProperty(Prototype, item, {
            get() {
                return this.el[item];
            },
            set(val) {
                this.z.runOutsideAngular(() => (this.el[item] = val));
            }
        });
    });
};
const proxyMethods = (Cmp, methods) => {
    const Prototype = Cmp.prototype;
    methods.forEach(methodName => {
        Prototype[methodName] = function () {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
        };
    });
};
const proxyOutputs = (instance, el, events) => {
    events.forEach(eventName => instance[eventName] = new EventEmitter());
};
function ProxyCmp(opts) {
    const decorator = function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    };
    return decorator;
}

class DsActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionList.ɵfac = function DsActionList_Factory(t) { return new (t || DsActionList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsActionList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsActionList, selectors: [["ds-action-list"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsActionList_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsActionListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsActionListItem.ɵfac = function DsActionListItem_Factory(t) { return new (t || DsActionListItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsActionListItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsActionListItem, selectors: [["ds-action-list-item"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsActionListItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsActionListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsAlert = class DsAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['buttonClick']);
    }
};
DsAlert.ɵfac = function DsAlert_Factory(t) { return new (t || DsAlert)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsAlert.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsAlert, selectors: [["ds-alert"]], inputs: { actionsdirection: "actionsdirection", visible: "visible" }, outputs: { buttonClick: "buttonClick" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsAlert_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'visible'],
        methods: ['show', 'showAlert', 'showConfirm']
    })
], DsAlert);
let DsAlertButton = class DsAlertButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsAlertButton.ɵfac = function DsAlertButton_Factory(t) { return new (t || DsAlertButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsAlertButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsAlertButton, selectors: [["ds-alert-button"]], inputs: { color: "color", confirm: "confirm", disabled: "disabled", highlight: "highlight", label: "label", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsAlertButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsAlertButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsAlertButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
    })
], DsAlertButton);
class DsAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsAnnouncementBar.ɵfac = function DsAnnouncementBar_Factory(t) { return new (t || DsAnnouncementBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsAnnouncementBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsAnnouncementBar, selectors: [["ds-announcement-bar"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsAnnouncementBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsApp.ɵfac = function DsApp_Factory(t) { return new (t || DsApp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsApp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsApp, selectors: [["ds-app"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsApp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsBorderedFormGroup = class DsBorderedFormGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsBorderedFormGroup.ɵfac = function DsBorderedFormGroup_Factory(t) { return new (t || DsBorderedFormGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsBorderedFormGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsBorderedFormGroup, selectors: [["ds-bordered-form-group"]], inputs: { direction: "direction", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsBorderedFormGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsBorderedFormGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsBorderedFormGroup = __decorate([
    ProxyCmp({
        inputs: ['direction', 'size']
    })
], DsBorderedFormGroup);
class DsBorderedFormItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsBorderedFormItem.ɵfac = function DsBorderedFormItem_Factory(t) { return new (t || DsBorderedFormItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsBorderedFormItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsBorderedFormItem, selectors: [["ds-bordered-form-item"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsBorderedFormItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsBorderedFormItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsButton = class DsButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButton.ɵfac = function DsButton_Factory(t) { return new (t || DsButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsButton, selectors: [["ds-button"]], inputs: { disabled: "disabled", size: "size", stretch: "stretch", type: "type", unfocusable: "unfocusable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DsButton);
let DsButtonBar = class DsButtonBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsButtonBar.ɵfac = function DsButtonBar_Factory(t) { return new (t || DsButtonBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsButtonBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsButtonBar, selectors: [["ds-button-bar"]], inputs: { direction: "direction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsButtonBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsButtonBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsButtonBar = __decorate([
    ProxyCmp({
        inputs: ['direction']
    })
], DsButtonBar);
let DsCard = class DsCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCard.ɵfac = function DsCard_Factory(t) { return new (t || DsCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCard.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCard, selectors: [["ds-card"]], inputs: { shadow: "shadow" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCard = __decorate([
    ProxyCmp({
        inputs: ['shadow']
    })
], DsCard);
let DsCardCollapsable = class DsCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardCollapsable.ɵfac = function DsCardCollapsable_Factory(t) { return new (t || DsCardCollapsable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardCollapsable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardCollapsable, selectors: [["ds-card-collapsable"]], inputs: { label: "label", open: "open", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardCollapsable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['label', 'open', 'type']
    })
], DsCardCollapsable);
class DsCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardContent.ɵfac = function DsCardContent_Factory(t) { return new (t || DsCardContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardContent, selectors: [["ds-card-content"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCardHeader.ɵfac = function DsCardHeader_Factory(t) { return new (t || DsCardHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardHeader, selectors: [["ds-card-header"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsCardImageHeader = class DsCardImageHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardImageHeader.ɵfac = function DsCardImageHeader_Factory(t) { return new (t || DsCardImageHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardImageHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardImageHeader, selectors: [["ds-card-image-header"]], inputs: { url: "url" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardImageHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardImageHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardImageHeader = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsCardImageHeader);
let DsCardTabBar = class DsCardTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['showChange']);
    }
};
DsCardTabBar.ɵfac = function DsCardTabBar_Factory(t) { return new (t || DsCardTabBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardTabBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardTabBar, selectors: [["ds-card-tab-bar"]], inputs: { show: "show" }, outputs: { showChange: "showChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardTabBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabBar = __decorate([
    ProxyCmp({
        inputs: ['show']
    })
], DsCardTabBar);
let DsCardTabPage = class DsCardTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCardTabPage.ɵfac = function DsCardTabPage_Factory(t) { return new (t || DsCardTabPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCardTabPage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCardTabPage, selectors: [["ds-card-tab-page"]], inputs: { label: "label", name: "name" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCardTabPage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCardTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCardTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'name']
    })
], DsCardTabPage);
let DsCenteredBoard = class DsCenteredBoard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsCenteredBoard.ɵfac = function DsCenteredBoard_Factory(t) { return new (t || DsCenteredBoard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCenteredBoard.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCenteredBoard, selectors: [["ds-centered-board"]], inputs: { columns: "columns" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCenteredBoard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCenteredBoard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCenteredBoard = __decorate([
    ProxyCmp({
        inputs: ['columns']
    })
], DsCenteredBoard);
class DsCenteredBoardItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsCenteredBoardItem.ɵfac = function DsCenteredBoardItem_Factory(t) { return new (t || DsCenteredBoardItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCenteredBoardItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCenteredBoardItem, selectors: [["ds-centered-board-item"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCenteredBoardItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCenteredBoardItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsChartSample = class DsChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsChartSample.ɵfac = function DsChartSample_Factory(t) { return new (t || DsChartSample)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsChartSample.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsChartSample, selectors: [["ds-chart-sample"]], inputs: { color: "color", formattedValue: "formattedValue", label: "label", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsChartSample_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'formattedValue', 'label', 'value'],
        methods: ['toChartSample']
    })
], DsChartSample);
let DsCheckbox = class DsCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DsCheckbox.ɵfac = function DsCheckbox_Factory(t) { return new (t || DsCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsCheckbox, selectors: [["ds-checkbox"]], inputs: { checked: "checked", disabled: "disabled", error: "error", errormessage: "errormessage", label: "label", readonly: "readonly", required: "required" }, outputs: { checkedChange: "checkedChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DsCheckbox);
let DsColumn = class DsColumn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsColumn.ɵfac = function DsColumn_Factory(t) { return new (t || DsColumn)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsColumn.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsColumn, selectors: [["ds-column"]], inputs: { align: "align" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsColumn_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsColumn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsColumn = __decorate([
    ProxyCmp({
        inputs: ['align']
    })
], DsColumn);
let DsDateInput = class DsDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DsDateInput.ɵfac = function DsDateInput_Factory(t) { return new (t || DsDateInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsDateInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsDateInput, selectors: [["ds-date-input"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", kisynced: "kisynced", label: "label", max: "max", min: "min", mode: "mode", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete", errorFound: "errorFound" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsDateInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsDateInput);
let DsDateRange = class DsDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDateRange.ɵfac = function DsDateRange_Factory(t) { return new (t || DsDateRange)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsDateRange.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsDateRange, selectors: [["ds-date-range"]], inputs: { max: "max", min: "min", mode: "mode", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsDateRange_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DsDateRange);
let DsDonutChart = class DsDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DsDonutChart.ɵfac = function DsDonutChart_Factory(t) { return new (t || DsDonutChart)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsDonutChart.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsDonutChart, selectors: [["ds-donut-chart"]], inputs: { offset: "offset", radius: "radius", scale: "scale", segmentwidth: "segmentwidth", startangle: "startangle" }, outputs: { segmentSelect: "segmentSelect" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsDonutChart_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDonutChart = __decorate([
    ProxyCmp({
        inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle']
    })
], DsDonutChart);
let DsDropdown = class DsDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsDropdown.ɵfac = function DsDropdown_Factory(t) { return new (t || DsDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsDropdown.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsDropdown, selectors: [["ds-dropdown"]], inputs: { disabled: "disabled", elseoption: "elseoption", elseoptionbuttonlabel: "elseoptionbuttonlabel", elseoptioninputlabel: "elseoptioninputlabel", elseoptionselected: "elseoptionselected", error: "error", errormessage: "errormessage", icon: "icon", kisynced: "kisynced", label: "label", placeholder: "placeholder", popupposition: "popupposition", readonly: "readonly", required: "required", textalign: "textalign", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsDropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DsDropdown);
let DsDropdownOption = class DsDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsDropdownOption.ɵfac = function DsDropdownOption_Factory(t) { return new (t || DsDropdownOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsDropdownOption.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsDropdownOption, selectors: [["ds-dropdown-option"]], inputs: { icon: "icon", label: "label", secondarylabel: "secondarylabel", tertiarylabel: "tertiarylabel", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsDropdownOption_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
    })
], DsDropdownOption);
let DsFmErgebnisuebersicht = class DsFmErgebnisuebersicht {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersicht.ɵfac = function DsFmErgebnisuebersicht_Factory(t) { return new (t || DsFmErgebnisuebersicht)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFmErgebnisuebersicht.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFmErgebnisuebersicht, selectors: [["ds-fm-ergebnisuebersicht"]], inputs: { donutcenterlabel: "donutcenterlabel", donutlabel: "donutlabel", donutsublabel: "donutsublabel", donutvisible: "donutvisible", firstcolumn: "firstcolumn", firstcolumninfo: "firstcolumninfo", firstcontributionlabel: "firstcontributionlabel", firstcontributionsublabel: "firstcontributionsublabel", secondcolumn: "secondcolumn", secondcolumninfo: "secondcolumninfo", secondcontributionlabel: "secondcontributionlabel", secondcontributionsublabel: "secondcontributionsublabel" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFmErgebnisuebersicht_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFmErgebnisuebersicht.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersicht = __decorate([
    ProxyCmp({
        inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
    })
], DsFmErgebnisuebersicht);
let DsFmErgebnisuebersichtItem = class DsFmErgebnisuebersichtItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtItem.ɵfac = function DsFmErgebnisuebersichtItem_Factory(t) { return new (t || DsFmErgebnisuebersichtItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFmErgebnisuebersichtItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFmErgebnisuebersichtItem, selectors: [["ds-fm-ergebnisuebersicht-item"]], inputs: { firstcolumninfo: "firstcolumninfo", firstcolumnvalue: "firstcolumnvalue", label: "label", secondcolumninfo: "secondcolumninfo", secondcolumnvalue: "secondcolumnvalue", sublabel: "sublabel" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFmErgebnisuebersichtItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFmErgebnisuebersichtItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtItem = __decorate([
    ProxyCmp({
        inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
    })
], DsFmErgebnisuebersichtItem);
let DsFmErgebnisuebersichtTable = class DsFmErgebnisuebersichtTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFmErgebnisuebersichtTable.ɵfac = function DsFmErgebnisuebersichtTable_Factory(t) { return new (t || DsFmErgebnisuebersichtTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFmErgebnisuebersichtTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFmErgebnisuebersichtTable, selectors: [["ds-fm-ergebnisuebersicht-table"]], inputs: { label: "label" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFmErgebnisuebersichtTable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFmErgebnisuebersichtTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFmErgebnisuebersichtTable = __decorate([
    ProxyCmp({
        inputs: ['label']
    })
], DsFmErgebnisuebersichtTable);
let DsFooter = class DsFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['infoButtonClicked']);
    }
};
DsFooter.ɵfac = function DsFooter_Factory(t) { return new (t || DsFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFooter.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFooter, selectors: [["ds-footer"]], inputs: { companyinfo: "companyinfo", showimprint: "showimprint", showtermsofuse: "showtermsofuse" }, outputs: { infoButtonClicked: "infoButtonClicked" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFooter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFooter = __decorate([
    ProxyCmp({
        inputs: ['companyinfo', 'showimprint', 'showtermsofuse']
    })
], DsFooter);
let DsFormLayout = class DsFormLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFormLayout.ɵfac = function DsFormLayout_Factory(t) { return new (t || DsFormLayout)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFormLayout.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFormLayout, selectors: [["ds-form-layout"]], inputs: { size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFormLayout_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFormLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFormLayout = __decorate([
    ProxyCmp({
        inputs: ['size']
    })
], DsFormLayout);
class DsFullscreenSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsFullscreenSpinner.ɵfac = function DsFullscreenSpinner_Factory(t) { return new (t || DsFullscreenSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFullscreenSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFullscreenSpinner, selectors: [["ds-fullscreen-spinner"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFullscreenSpinner_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFullscreenSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsFunctionIconButton = class DsFunctionIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsFunctionIconButton.ɵfac = function DsFunctionIconButton_Factory(t) { return new (t || DsFunctionIconButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsFunctionIconButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsFunctionIconButton, selectors: [["ds-function-icon-button"]], inputs: { disabled: "disabled", unfocusable: "unfocusable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsFunctionIconButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsFunctionIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsFunctionIconButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'unfocusable'],
        methods: ['focusControl']
    })
], DsFunctionIconButton);
let DsGrid = class DsGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsGrid.ɵfac = function DsGrid_Factory(t) { return new (t || DsGrid)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsGrid.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsGrid, selectors: [["ds-grid"]], inputs: { base: "base", l: "l", m: "m", s: "s", xl: "xl" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsGrid_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'l', 'm', 's', 'xl']
    })
], DsGrid);
let DsGroupedTextInput = class DsGroupedTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsGroupedTextInput.ɵfac = function DsGroupedTextInput_Factory(t) { return new (t || DsGroupedTextInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsGroupedTextInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsGroupedTextInput, selectors: [["ds-grouped-text-input"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", label: "label", mask: "mask", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsGroupedTextInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsGroupedTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGroupedTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value']
    })
], DsGroupedTextInput);
let DsGrowBox = class DsGrowBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['growStart', 'contentVisibilityChange']);
    }
};
DsGrowBox.ɵfac = function DsGrowBox_Factory(t) { return new (t || DsGrowBox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsGrowBox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsGrowBox, selectors: [["ds-grow-box"]], inputs: { animateoninit: "animateoninit", open: "open", slidecontent: "slidecontent" }, outputs: { growStart: "growStart", contentVisibilityChange: "contentVisibilityChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsGrowBox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsGrowBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsGrowBox = __decorate([
    ProxyCmp({
        inputs: ['animateoninit', 'open', 'slidecontent']
    })
], DsGrowBox);
let DsHeader = class DsHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeader.ɵfac = function DsHeader_Factory(t) { return new (t || DsHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeader, selectors: [["ds-header"]], inputs: { brand: "brand", fullscreen: "fullscreen" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeader = __decorate([
    ProxyCmp({
        inputs: ['brand', 'fullscreen']
    })
], DsHeader);
let DsHeaderAction = class DsHeaderAction {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DsHeaderAction.ɵfac = function DsHeaderAction_Factory(t) { return new (t || DsHeaderAction)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeaderAction.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeaderAction, selectors: [["ds-header-action"]], inputs: { highlight: "highlight", label: "label" }, outputs: { interaction: "interaction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeaderAction_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeaderAction.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderAction = __decorate([
    ProxyCmp({
        inputs: ['highlight', 'label']
    })
], DsHeaderAction);
let DsHeaderActionList = class DsHeaderActionList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderActionList.ɵfac = function DsHeaderActionList_Factory(t) { return new (t || DsHeaderActionList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeaderActionList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeaderActionList, selectors: [["ds-header-action-list"]], inputs: { label: "label", open: "open" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeaderActionList_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeaderActionList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderActionList = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DsHeaderActionList);
let DsHeaderCustomer = class DsHeaderCustomer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeaderCustomer.ɵfac = function DsHeaderCustomer_Factory(t) { return new (t || DsHeaderCustomer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeaderCustomer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeaderCustomer, selectors: [["ds-header-customer"]], inputs: { name: "name", typelabel: "typelabel" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeaderCustomer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeaderCustomer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderCustomer = __decorate([
    ProxyCmp({
        inputs: ['name', 'typelabel']
    })
], DsHeaderCustomer);
let DsHeaderUser = class DsHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'usernameInteraction']);
    }
};
DsHeaderUser.ɵfac = function DsHeaderUser_Factory(t) { return new (t || DsHeaderUser)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeaderUser.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeaderUser, selectors: [["ds-header-user"]], inputs: { imageurl: "imageurl", name: "name", usernameinteractable: "usernameinteractable" }, outputs: { signOut: "signOut", usernameInteraction: "usernameInteraction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeaderUser_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'name', 'usernameinteractable']
    })
], DsHeaderUser);
let DsHeroImage = class DsHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsHeroImage.ɵfac = function DsHeroImage_Factory(t) { return new (t || DsHeroImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHeroImage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHeroImage, selectors: [["ds-hero-image"]], inputs: { url: "url" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHeroImage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsHeroImage = __decorate([
    ProxyCmp({
        inputs: ['url']
    })
], DsHeroImage);
class DsHr {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsHr.ɵfac = function DsHr_Factory(t) { return new (t || DsHr)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsHr.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsHr, selectors: [["ds-hr"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsHr_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsHr.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsIcon = class DsIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIcon.ɵfac = function DsIcon_Factory(t) { return new (t || DsIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsIcon, selectors: [["ds-icon"]], inputs: { color: "color", icon: "icon", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsIcon_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DsIcon);
let DsIconButton = class DsIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsIconButton.ɵfac = function DsIconButton_Factory(t) { return new (t || DsIconButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsIconButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsIconButton, selectors: [["ds-icon-button"]], inputs: { align: "align", backgroundcolor: "backgroundcolor", color: "color", disabled: "disabled", size: "size", unfocusable: "unfocusable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsIconButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsIconButton = __decorate([
    ProxyCmp({
        inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable'],
        methods: ['focusControl']
    })
], DsIconButton);
let DsInfo = class DsInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsInfo.ɵfac = function DsInfo_Factory(t) { return new (t || DsInfo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsInfo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsInfo, selectors: [["ds-info"]], inputs: { hidebutton: "hidebutton", popupvisible: "popupvisible", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsInfo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'popupvisible', 'size'],
        methods: ['setModal']
    })
], DsInfo);
let DsLink = class DsLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLink.ɵfac = function DsLink_Factory(t) { return new (t || DsLink)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsLink.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsLink, selectors: [["ds-link"]], inputs: { target: "target", url: "url" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsLink_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DsLink);
let DsLogo = class DsLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsLogo.ɵfac = function DsLogo_Factory(t) { return new (t || DsLogo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsLogo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsLogo, selectors: [["ds-logo"]], inputs: { type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsLogo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsLogo);
let DsModal = class DsModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DsModal.ɵfac = function DsModal_Factory(t) { return new (t || DsModal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsModal.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsModal, selectors: [["ds-modal"]], inputs: { allowbackgroundclose: "allowbackgroundclose", contentcolor: "contentcolor", label: "label", size: "size", visible: "visible" }, outputs: { modalOpened: "modalOpened", modalClosed: "modalClosed" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsModal_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsModal = __decorate([
    ProxyCmp({
        inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible']
    })
], DsModal);
class DsNavigatedContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsNavigatedContent.ɵfac = function DsNavigatedContent_Factory(t) { return new (t || DsNavigatedContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsNavigatedContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsNavigatedContent, selectors: [["ds-navigated-content"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsNavigatedContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsNavigatedContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsNavigatedContentMenu = class DsNavigatedContentMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DsNavigatedContentMenu.ɵfac = function DsNavigatedContentMenu_Factory(t) { return new (t || DsNavigatedContentMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsNavigatedContentMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsNavigatedContentMenu, selectors: [["ds-navigated-content-menu"]], inputs: { active: "active" }, outputs: { navigate: "navigate" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsNavigatedContentMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsNavigatedContentMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenu = __decorate([
    ProxyCmp({
        inputs: ['active']
    })
], DsNavigatedContentMenu);
let DsNavigatedContentMenuItem = class DsNavigatedContentMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsNavigatedContentMenuItem.ɵfac = function DsNavigatedContentMenuItem_Factory(t) { return new (t || DsNavigatedContentMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsNavigatedContentMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsNavigatedContentMenuItem, selectors: [["ds-navigated-content-menu-item"]], inputs: { error: "error", label: "label", success: "success", value: "value", warning: "warning" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsNavigatedContentMenuItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsNavigatedContentMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNavigatedContentMenuItem = __decorate([
    ProxyCmp({
        inputs: ['error', 'label', 'success', 'value', 'warning']
    })
], DsNavigatedContentMenuItem);
let DsNotificationToast = class DsNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DsNotificationToast.ɵfac = function DsNotificationToast_Factory(t) { return new (t || DsNotificationToast)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsNotificationToast.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsNotificationToast, selectors: [["ds-notification-toast"]], inputs: { closeafter: "closeafter", icon: "icon", iconcolor: "iconcolor", subcontent: "subcontent", titlestring: "titlestring", visible: "visible" }, outputs: { closeNotification: "closeNotification" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsNotificationToast_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DsNotificationToast);
let DsNumberInput = class DsNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsNumberInput.ɵfac = function DsNumberInput_Factory(t) { return new (t || DsNumberInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsNumberInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsNumberInput, selectors: [["ds-number-input"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", kisynced: "kisynced", label: "label", limitlength: "limitlength", max: "max", min: "min", placeholder: "placeholder", precision: "precision", profile: "profile", readonly: "readonly", required: "required", thousandseparator: "thousandseparator", uniticon: "uniticon", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsNumberInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
        methods: ['focusControl']
    })
], DsNumberInput);
class DsPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsPage.ɵfac = function DsPage_Factory(t) { return new (t || DsPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsPage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsPage, selectors: [["ds-page"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsPage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsPaginator = class DsPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DsPaginator.ɵfac = function DsPaginator_Factory(t) { return new (t || DsPaginator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsPaginator.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsPaginator, selectors: [["ds-paginator"]], inputs: { count: "count", current: "current", range: "range" }, outputs: { pageChanged: "pageChanged" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsPaginator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current', 'range']
    })
], DsPaginator);
let DsPlaceholder = class DsPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsPlaceholder.ɵfac = function DsPlaceholder_Factory(t) { return new (t || DsPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsPlaceholder.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsPlaceholder, selectors: [["ds-placeholder"]], inputs: { box: "box", card: "card" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsPlaceholder_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DsPlaceholder);
let DsRadioButton = class DsRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsRadioButton.ɵfac = function DsRadioButton_Factory(t) { return new (t || DsRadioButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsRadioButton, selectors: [["ds-radio-button"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", label: "label", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsRadioButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'value'],
        methods: ['focusControl']
    })
], DsRadioButton);
let DsRadioButtonGroup = class DsRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsRadioButtonGroup.ɵfac = function DsRadioButtonGroup_Factory(t) { return new (t || DsRadioButtonGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsRadioButtonGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsRadioButtonGroup, selectors: [["ds-radio-button-group"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsRadioButtonGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsRadioButtonGroup);
let DsSearch = class DsSearch {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['search', 'selectSearch', 'valueChange', 'valueComplete']);
    }
};
DsSearch.ɵfac = function DsSearch_Factory(t) { return new (t || DsSearch)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsSearch.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsSearch, selectors: [["ds-search"]], inputs: { autoscrollintoview: "autoscrollintoview", noresultstext: "noresultstext", placeholder: "placeholder", value: "value", visibleentries: "visibleentries" }, outputs: { search: "search", selectSearch: "selectSearch", valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsSearch_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsSearch.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSearch = __decorate([
    ProxyCmp({
        inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
        methods: ['focusControl']
    })
], DsSearch);
let DsSlider = class DsSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsSlider.ɵfac = function DsSlider_Factory(t) { return new (t || DsSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsSlider.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsSlider, selectors: [["ds-slider"]], inputs: { formattedvalue: "formattedvalue", label: "label", max: "max", min: "min", readonly: "readonly", step: "step", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsSlider_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSlider = __decorate([
    ProxyCmp({
        inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value']
    })
], DsSlider);
let DsSpinner = class DsSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsSpinner.ɵfac = function DsSpinner_Factory(t) { return new (t || DsSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsSpinner, selectors: [["ds-spinner"]], inputs: { size: "size", theme: "theme" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsSpinner_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DsSpinner);
let DsTable = class DsTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'rowsSelected']);
    }
};
DsTable.ɵfac = function DsTable_Factory(t) { return new (t || DsTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTable, selectors: [["ds-table"]], inputs: { initialsort: "initialsort", initialsortdirection: "initialsortdirection", mode: "mode", pagesize: "pagesize", pagesizes: "pagesizes", rowcount: "rowcount", scrollable: "scrollable", selectionenabled: "selectionenabled", selectionmode: "selectionmode", view: "view" }, outputs: { tableStateChanged: "tableStateChanged", rowsSelected: "rowsSelected" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view']
    })
], DsTable);
let DsTableCell = class DsTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableCell.ɵfac = function DsTableCell_Factory(t) { return new (t || DsTableCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTableCell.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTableCell, selectors: [["ds-table-cell"]], inputs: { color: "color", type: "type", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTableCell_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableCell = __decorate([
    ProxyCmp({
        inputs: ['color', 'type', 'value']
    })
], DsTableCell);
class DsTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableFooter.ɵfac = function DsTableFooter_Factory(t) { return new (t || DsTableFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTableFooter.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTableFooter, selectors: [["ds-table-footer"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTableFooter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DsTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DsTableHeader.ɵfac = function DsTableHeader_Factory(t) { return new (t || DsTableHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTableHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTableHeader, selectors: [["ds-table-header"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTableHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DsTableHeaderItem = class DsTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTableHeaderItem.ɵfac = function DsTableHeaderItem_Factory(t) { return new (t || DsTableHeaderItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTableHeaderItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTableHeaderItem, selectors: [["ds-table-header-item"]], inputs: { align: "align", columnid: "columnid", customSort: "customSort", label: "label", linesize: "linesize", maxwidth: "maxwidth", minwidth: "minwidth", sortable: "sortable", sortpriority: "sortpriority", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTableHeaderItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
    })
], DsTableHeaderItem);
let DsTableRow = class DsTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DsTableRow.ɵfac = function DsTableRow_Factory(t) { return new (t || DsTableRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTableRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTableRow, selectors: [["ds-table-row"]], inputs: { rowid: "rowid", selected: "selected" }, outputs: { rowSelected: "rowSelected" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTableRow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DsTableRow);
let DsText = class DsText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsText.ɵfac = function DsText_Factory(t) { return new (t || DsText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsText, selectors: [["ds-text"]], inputs: { color: "color", screensize: "screensize", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsText_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsText = __decorate([
    ProxyCmp({
        inputs: ['color', 'screensize', 'type']
    })
], DsText);
let DsTextArea = class DsTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DsTextArea.ɵfac = function DsTextArea_Factory(t) { return new (t || DsTextArea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTextArea.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTextArea, selectors: [["ds-text-area"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", label: "label", lines: "lines", maxlength: "maxlength", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextArea);
let DsTextButton = class DsTextButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextButton.ɵfac = function DsTextButton_Factory(t) { return new (t || DsTextButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTextButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTextButton, selectors: [["ds-text-button"]], inputs: { color: "color", disabled: "disabled", screensize: "screensize", unfocusable: "unfocusable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTextButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTextButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextButton = __decorate([
    ProxyCmp({
        inputs: ['color', 'disabled', 'screensize', 'unfocusable'],
        methods: ['focusControl']
    })
], DsTextButton);
let DsTextInput = class DsTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']);
    }
};
DsTextInput.ɵfac = function DsTextInput_Factory(t) { return new (t || DsTextInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTextInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTextInput, selectors: [["ds-text-input"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", kisynced: "kisynced", label: "label", limitlength: "limitlength", mask: "mask", placeholder: "placeholder", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete", autocomplete: "autocomplete", selectAutocomplete: "selectAutocomplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTextInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DsTextInput);
let DsTextList = class DsTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsTextList.ɵfac = function DsTextList_Factory(t) { return new (t || DsTextList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsTextList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsTextList, selectors: [["ds-text-list"]], inputs: { type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsTextList_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DsTextList);
let DsUserAvatar = class DsUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsUserAvatar.ɵfac = function DsUserAvatar_Factory(t) { return new (t || DsUserAvatar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsUserAvatar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsUserAvatar, selectors: [["ds-user-avatar"]], inputs: { imageurl: "imageurl", initials: "initials", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsUserAvatar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DsUserAvatar);
let DsWorkflowProgress = class DsWorkflowProgress {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWorkflowProgress.ɵfac = function DsWorkflowProgress_Factory(t) { return new (t || DsWorkflowProgress)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsWorkflowProgress.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsWorkflowProgress, selectors: [["ds-workflow-progress"]], inputs: { progress: "progress" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsWorkflowProgress_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsWorkflowProgress.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWorkflowProgress = __decorate([
    ProxyCmp({
        inputs: ['progress']
    })
], DsWorkflowProgress);
let DsWrappedLayout = class DsWrappedLayout {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DsWrappedLayout.ɵfac = function DsWrappedLayout_Factory(t) { return new (t || DsWrappedLayout)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsWrappedLayout.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsWrappedLayout, selectors: [["ds-wrapped-layout"]], inputs: { align: "align", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsWrappedLayout_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsWrappedLayout.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsWrappedLayout = __decorate([
    ProxyCmp({
        inputs: ['align', 'size']
    })
], DsWrappedLayout);
let DsYesNo = class DsYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DsYesNo.ɵfac = function DsYesNo_Factory(t) { return new (t || DsYesNo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DsYesNo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DsYesNo, selectors: [["ds-yes-no"]], inputs: { disabled: "disabled", error: "error", errormessage: "errormessage", readonly: "readonly", required: "required", size: "size", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DsYesNo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DsYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DsYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DsYesNo);
let DxAccordion = class DxAccordion {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAccordion.ɵfac = function DxAccordion_Factory(t) { return new (t || DxAccordion)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxAccordion.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxAccordion, selectors: [["dx-accordion"]], inputs: { label: "label", open: "open" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxAccordion_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxAccordion.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAccordion = __decorate([
    ProxyCmp({
        inputs: ['label', 'open']
    })
], DxAccordion);
class DxAccordionGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxAccordionGroup.ɵfac = function DxAccordionGroup_Factory(t) { return new (t || DxAccordionGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxAccordionGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxAccordionGroup, selectors: [["dx-accordion-group"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxAccordionGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxAccordionGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxAlert = class DxAlert {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAlert.ɵfac = function DxAlert_Factory(t) { return new (t || DxAlert)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxAlert.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxAlert, selectors: [["dx-alert"]], inputs: { actionsdirection: "actionsdirection", content: "content", icon: "icon", sublabel: "sublabel", titlestring: "titlestring", type: "type", visible: "visible" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxAlert_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxAlert.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAlert = __decorate([
    ProxyCmp({
        inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
    })
], DxAlert);
let DxAnnouncementBar = class DxAnnouncementBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxAnnouncementBar.ɵfac = function DxAnnouncementBar_Factory(t) { return new (t || DxAnnouncementBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxAnnouncementBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxAnnouncementBar, selectors: [["dx-announcement-bar"]], inputs: { color: "color", icon: "icon", iconcolor: "iconcolor" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxAnnouncementBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxAnnouncementBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxAnnouncementBar = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'iconcolor']
    })
], DxAnnouncementBar);
class DxApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxApp.ɵfac = function DxApp_Factory(t) { return new (t || DxApp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxApp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxApp, selectors: [["dx-app"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxApp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxBreadcrumb {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome', 'navigate']);
    }
}
DxBreadcrumb.ɵfac = function DxBreadcrumb_Factory(t) { return new (t || DxBreadcrumb)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxBreadcrumb.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxBreadcrumb, selectors: [["dx-breadcrumb"]], outputs: { navigateHome: "navigateHome", navigate: "navigate" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxBreadcrumb_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxBreadcrumb.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxBreadcrumbItem = class DxBreadcrumbItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxBreadcrumbItem.ɵfac = function DxBreadcrumbItem_Factory(t) { return new (t || DxBreadcrumbItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxBreadcrumbItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxBreadcrumbItem, selectors: [["dx-breadcrumb-item"]], inputs: { label: "label", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxBreadcrumbItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxBreadcrumbItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxBreadcrumbItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'value']
    })
], DxBreadcrumbItem);
let DxButton = class DxButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxButton.ɵfac = function DxButton_Factory(t) { return new (t || DxButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxButton, selectors: [["dx-button"]], inputs: { disabled: "disabled", icon: "icon", iconposition: "iconposition", label: "label", loading: "loading", stretch: "stretch", theme: "theme", type: "type", unfocusable: "unfocusable" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable'],
        methods: ['focusControl']
    })
], DxButton);
class DxCard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCard.ɵfac = function DxCard_Factory(t) { return new (t || DxCard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCard.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCard, selectors: [["dx-card"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardCollapsable = class DxCardCollapsable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardCollapsable.ɵfac = function DxCardCollapsable_Factory(t) { return new (t || DxCardCollapsable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCardCollapsable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCardCollapsable, selectors: [["dx-card-collapsable"]], inputs: { open: "open" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCardCollapsable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCardCollapsable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardCollapsable = __decorate([
    ProxyCmp({
        inputs: ['open']
    })
], DxCardCollapsable);
class DxCardContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxCardContent.ɵfac = function DxCardContent_Factory(t) { return new (t || DxCardContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCardContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCardContent, selectors: [["dx-card-content"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCardContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCardContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxCardHeader = class DxCardHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardHeader.ɵfac = function DxCardHeader_Factory(t) { return new (t || DxCardHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCardHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCardHeader, selectors: [["dx-card-header"]], inputs: { icon: "icon", iconcolor: "iconcolor", label: "label" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCardHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCardHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardHeader = __decorate([
    ProxyCmp({
        inputs: ['icon', 'iconcolor', 'label']
    })
], DxCardHeader);
let DxCardImage = class DxCardImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxCardImage.ɵfac = function DxCardImage_Factory(t) { return new (t || DxCardImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCardImage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCardImage, selectors: [["dx-card-image"]], inputs: { coverheightmq1: "coverheightmq1", coverheightmq2: "coverheightmq2", coverheightmq3: "coverheightmq3", coverheightmq4: "coverheightmq4", coverheightmq5: "coverheightmq5", coverpositionmq1: "coverpositionmq1", coverpositionmq2: "coverpositionmq2", coverpositionmq3: "coverpositionmq3", coverpositionmq4: "coverpositionmq4", coverpositionmq5: "coverpositionmq5", fit: "fit", url: "url" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCardImage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCardImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCardImage = __decorate([
    ProxyCmp({
        inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
    })
], DxCardImage);
let DxChartSample = class DxChartSample {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxChartSample.ɵfac = function DxChartSample_Factory(t) { return new (t || DxChartSample)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxChartSample.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxChartSample, selectors: [["dx-chart-sample"]], inputs: { color: "color", icon: "icon", label: "label", selectedcolor: "selectedcolor", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxChartSample_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxChartSample.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxChartSample = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
        methods: ['toChartSample']
    })
], DxChartSample);
let DxCheckbox = class DxCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxCheckbox.ɵfac = function DxCheckbox_Factory(t) { return new (t || DxCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCheckbox, selectors: [["dx-checkbox"]], inputs: { checked: "checked", disabled: "disabled", errormessage: "errormessage", kisynced: "kisynced", label: "label", readonly: "readonly", required: "required" }, outputs: { checkedChange: "checkedChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
        methods: ['focusControl']
    })
], DxCheckbox);
let DxCombobox = class DxCombobox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']);
    }
};
DxCombobox.ɵfac = function DxCombobox_Factory(t) { return new (t || DxCombobox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxCombobox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxCombobox, selectors: [["dx-combobox"]], inputs: { disabled: "disabled", emptysearchtext: "emptysearchtext", errormessage: "errormessage", kisynced: "kisynced", label: "label", limitlength: "limitlength", loadingtext: "loadingtext", maxlistheight: "maxlistheight", placeholder: "placeholder", presearchconditiontext: "presearchconditiontext", presearchlettercount: "presearchlettercount", readonly: "readonly", required: "required", size: "size", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete", search: "search", selectSearchOption: "selectSearchOption", enterPress: "enterPress" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxCombobox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxCombobox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxCombobox = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxCombobox);
let DxContainer = class DxContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxContainer.ɵfac = function DxContainer_Factory(t) { return new (t || DxContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxContainer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxContainer, selectors: [["dx-container"]], inputs: { color: "color", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxContainer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxContainer = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxContainer);
let DxDateInput = class DxDateInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'errorFound']);
    }
};
DxDateInput.ɵfac = function DxDateInput_Factory(t) { return new (t || DxDateInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxDateInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxDateInput, selectors: [["dx-date-input"]], inputs: { disabled: "disabled", errormessage: "errormessage", kisynced: "kisynced", label: "label", max: "max", min: "min", mode: "mode", readonly: "readonly", required: "required", size: "size", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete", errorFound: "errorFound" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDateInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxDateInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxDateInput);
let DxDateRange = class DxDateRange {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDateRange.ɵfac = function DxDateRange_Factory(t) { return new (t || DxDateRange)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxDateRange.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxDateRange, selectors: [["dx-date-range"]], inputs: { max: "max", min: "min", mode: "mode", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDateRange_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxDateRange.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDateRange = __decorate([
    ProxyCmp({
        inputs: ['max', 'min', 'mode', 'value'],
        methods: ['focusControl']
    })
], DxDateRange);
let DxDonutChart = class DxDonutChart {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['segmentSelect']);
    }
};
DxDonutChart.ɵfac = function DxDonutChart_Factory(t) { return new (t || DxDonutChart)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxDonutChart.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxDonutChart, selectors: [["dx-donut-chart"]], inputs: { colorscheme: "colorscheme", label: "label", selected: "selected", showsegmentlabels: "showsegmentlabels", sublabel: "sublabel" }, outputs: { segmentSelect: "segmentSelect" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDonutChart_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxDonutChart.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDonutChart = __decorate([
    ProxyCmp({
        inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
        methods: ['update']
    })
], DxDonutChart);
let DxDropdown = class DxDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxDropdown.ɵfac = function DxDropdown_Factory(t) { return new (t || DxDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxDropdown.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxDropdown, selectors: [["dx-dropdown"]], inputs: { disabled: "disabled", elseoption: "elseoption", elseoptionbuttonlabel: "elseoptionbuttonlabel", elseoptioninputlabel: "elseoptioninputlabel", elseoptionselected: "elseoptionselected", errormessage: "errormessage", icon: "icon", kisynced: "kisynced", label: "label", placeholder: "placeholder", popupposition: "popupposition", readonly: "readonly", required: "required", size: "size", textalign: "textalign", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
        methods: ['focusControl']
    })
], DxDropdown);
let DxDropdownOption = class DxDropdownOption {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxDropdownOption.ɵfac = function DxDropdownOption_Factory(t) { return new (t || DxDropdownOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxDropdownOption.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxDropdownOption, selectors: [["dx-dropdown-option"]], inputs: { icon: "icon", label: "label", selected: "selected", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxDropdownOption_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxDropdownOption.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxDropdownOption = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxDropdownOption);
let DxErrorMessage = class DxErrorMessage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['forceUpdateOnChange']);
    }
};
DxErrorMessage.ɵfac = function DxErrorMessage_Factory(t) { return new (t || DxErrorMessage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxErrorMessage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxErrorMessage, selectors: [["dx-error-message"]], inputs: { lines: "lines" }, outputs: { forceUpdateOnChange: "forceUpdateOnChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxErrorMessage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxErrorMessage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorMessage = __decorate([
    ProxyCmp({
        inputs: ['lines']
    })
], DxErrorMessage);
let DxErrorPage = class DxErrorPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['action']);
    }
};
DxErrorPage.ɵfac = function DxErrorPage_Factory(t) { return new (t || DxErrorPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxErrorPage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxErrorPage, selectors: [["dx-error-page"]], inputs: { actiondescription: "actiondescription", actionlabel: "actionlabel", description: "description", reason: "reason" }, outputs: { action: "action" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxErrorPage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxErrorPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxErrorPage = __decorate([
    ProxyCmp({
        inputs: ['actiondescription', 'actionlabel', 'description', 'reason']
    })
], DxErrorPage);
class DxExpanded {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxExpanded.ɵfac = function DxExpanded_Factory(t) { return new (t || DxExpanded)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxExpanded.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxExpanded, selectors: [["dx-expanded"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxExpanded_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxExpanded.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxFdOutlineBox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxFdOutlineBox.ɵfac = function DxFdOutlineBox_Factory(t) { return new (t || DxFdOutlineBox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxFdOutlineBox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxFdOutlineBox, selectors: [["dx-fd-outline-box"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxFdOutlineBox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxFdOutlineBox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxFdSeparator = class DxFdSeparator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFdSeparator.ɵfac = function DxFdSeparator_Factory(t) { return new (t || DxFdSeparator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxFdSeparator.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxFdSeparator, selectors: [["dx-fd-separator"]], inputs: { fromcolor: "fromcolor", tocolor: "tocolor" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxFdSeparator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxFdSeparator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFdSeparator = __decorate([
    ProxyCmp({
        inputs: ['fromcolor', 'tocolor']
    })
], DxFdSeparator);
let DxFooter = class DxFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFooter.ɵfac = function DxFooter_Factory(t) { return new (t || DxFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxFooter.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxFooter, selectors: [["dx-footer"]], inputs: { fromcolor: "fromcolor" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxFooter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFooter = __decorate([
    ProxyCmp({
        inputs: ['fromcolor']
    })
], DxFooter);
let DxFormWrapper = class DxFormWrapper {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxFormWrapper.ɵfac = function DxFormWrapper_Factory(t) { return new (t || DxFormWrapper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxFormWrapper.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxFormWrapper, selectors: [["dx-form-wrapper"]], inputs: { errormessage: "errormessage", kisynced: "kisynced", label: "label", required: "required" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxFormWrapper_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxFormWrapper.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxFormWrapper = __decorate([
    ProxyCmp({
        inputs: ['errormessage', 'kisynced', 'label', 'required']
    })
], DxFormWrapper);
let DxGoldenStage = class DxGoldenStage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGoldenStage.ɵfac = function DxGoldenStage_Factory(t) { return new (t || DxGoldenStage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxGoldenStage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxGoldenStage, selectors: [["dx-golden-stage"]], inputs: { alignment: "alignment", backgroundcolor: "backgroundcolor", contentoffsety: "contentoffsety", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxGoldenStage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxGoldenStage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGoldenStage = __decorate([
    ProxyCmp({
        inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
    })
], DxGoldenStage);
let DxGrid = class DxGrid {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxGrid.ɵfac = function DxGrid_Factory(t) { return new (t || DxGrid)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxGrid.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxGrid, selectors: [["dx-grid"]], inputs: { base: "base", mq1: "mq1", mq2: "mq2", mq3: "mq3", mq4: "mq4", mq5: "mq5", rowgap: "rowgap" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxGrid_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxGrid.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxGrid = __decorate([
    ProxyCmp({
        inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
    })
], DxGrid);
let DxHeader = class DxHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigateHome']);
    }
};
DxHeader.ɵfac = function DxHeader_Factory(t) { return new (t || DxHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeader, selectors: [["dx-header"]], inputs: { appname: "appname", brand: "brand", logo: "logo", showannouncement: "showannouncement", theme: "theme" }, outputs: { navigateHome: "navigateHome" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeader = __decorate([
    ProxyCmp({
        inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme']
    })
], DxHeader);
let DxHeaderAppFavorites = class DxHeaderAppFavorites {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']);
    }
};
DxHeaderAppFavorites.ɵfac = function DxHeaderAppFavorites_Factory(t) { return new (t || DxHeaderAppFavorites)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderAppFavorites.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderAppFavorites, selectors: [["dx-header-app-favorites"]], inputs: { notifications: "notifications", notificationstheme: "notificationstheme", priority: "priority" }, outputs: { menuInteraction: "menuInteraction", deleteApp: "deleteApp", sortApps: "sortApps", addApp: "addApp", editApps: "editApps", launchApp: "launchApp" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderAppFavorites_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderAppFavorites.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavorites = __decorate([
    ProxyCmp({
        inputs: ['notifications', 'notificationstheme', 'priority']
    })
], DxHeaderAppFavorites);
let DxHeaderAppFavoritesApp = class DxHeaderAppFavoritesApp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderAppFavoritesApp.ɵfac = function DxHeaderAppFavoritesApp_Factory(t) { return new (t || DxHeaderAppFavoritesApp)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderAppFavoritesApp.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderAppFavoritesApp, selectors: [["dx-header-app-favorites-app"]], inputs: { appid: "appid", appname: "appname", icon: "icon" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderAppFavoritesApp_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderAppFavoritesApp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderAppFavoritesApp = __decorate([
    ProxyCmp({
        inputs: ['appid', 'appname', 'icon'],
        methods: ['toAppFavoritesApp']
    })
], DxHeaderAppFavoritesApp);
let DxHeaderMenuCustom = class DxHeaderMenuCustom {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuCustom.ɵfac = function DxHeaderMenuCustom_Factory(t) { return new (t || DxHeaderMenuCustom)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderMenuCustom.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderMenuCustom, selectors: [["dx-header-menu-custom"]], inputs: { priority: "priority" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderMenuCustom_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderMenuCustom.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuCustom = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuCustom);
let DxHeaderMenuGroup = class DxHeaderMenuGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeaderMenuGroup.ɵfac = function DxHeaderMenuGroup_Factory(t) { return new (t || DxHeaderMenuGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderMenuGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderMenuGroup, selectors: [["dx-header-menu-group"]], inputs: { priority: "priority" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderMenuGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderMenuGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuGroup = __decorate([
    ProxyCmp({
        inputs: ['priority']
    })
], DxHeaderMenuGroup);
let DxHeaderMenuItem = class DxHeaderMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuItem.ɵfac = function DxHeaderMenuItem_Factory(t) { return new (t || DxHeaderMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderMenuItem, selectors: [["dx-header-menu-item"]], inputs: { connectedslot: "connectedslot", icon: "icon", notifications: "notifications", notificationstheme: "notificationstheme", priority: "priority" }, outputs: { menuInteraction: "menuInteraction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderMenuItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuItem = __decorate([
    ProxyCmp({
        inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderMenuItem);
let DxHeaderMenuLink = class DxHeaderMenuLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderMenuLink.ɵfac = function DxHeaderMenuLink_Factory(t) { return new (t || DxHeaderMenuLink)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderMenuLink.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderMenuLink, selectors: [["dx-header-menu-link"]], inputs: { connectednavigationvalue: "connectednavigationvalue", label: "label", priority: "priority", selected: "selected" }, outputs: { menuInteraction: "menuInteraction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderMenuLink_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderMenuLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderMenuLink = __decorate([
    ProxyCmp({
        inputs: ['connectednavigationvalue', 'label', 'priority', 'selected']
    })
], DxHeaderMenuLink);
let DxHeaderNavigation = class DxHeaderNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['menuInteraction']);
    }
};
DxHeaderNavigation.ɵfac = function DxHeaderNavigation_Factory(t) { return new (t || DxHeaderNavigation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderNavigation.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderNavigation, selectors: [["dx-header-navigation"]], inputs: { autoclose: "autoclose", notification: "notification", notificationstheme: "notificationstheme" }, outputs: { menuInteraction: "menuInteraction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderNavigation_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigation = __decorate([
    ProxyCmp({
        inputs: ['autoclose', 'notification', 'notificationstheme']
    })
], DxHeaderNavigation);
let DxHeaderNavigationItem = class DxHeaderNavigationItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxHeaderNavigationItem.ɵfac = function DxHeaderNavigationItem_Factory(t) { return new (t || DxHeaderNavigationItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderNavigationItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderNavigationItem, selectors: [["dx-header-navigation-item"]], inputs: { label: "label", size: "size", value: "value" }, outputs: { interaction: "interaction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderNavigationItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderNavigationItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderNavigationItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'size', 'value']
    })
], DxHeaderNavigationItem);
let DxHeaderUser = class DxHeaderUser {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['signOut', 'accountInteraction', 'menuInteraction']);
    }
};
DxHeaderUser.ɵfac = function DxHeaderUser_Factory(t) { return new (t || DxHeaderUser)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeaderUser.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeaderUser, selectors: [["dx-header-user"]], inputs: { accountavailable: "accountavailable", imageurl: "imageurl", name: "name", notifications: "notifications", notificationstheme: "notificationstheme", priority: "priority" }, outputs: { signOut: "signOut", accountInteraction: "accountInteraction", menuInteraction: "menuInteraction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeaderUser_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeaderUser.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeaderUser = __decorate([
    ProxyCmp({
        inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority']
    })
], DxHeaderUser);
let DxHeroImage = class DxHeroImage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxHeroImage.ɵfac = function DxHeroImage_Factory(t) { return new (t || DxHeroImage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxHeroImage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxHeroImage, selectors: [["dx-hero-image"]], inputs: { mq1: "mq1", mq2: "mq2", mq3: "mq3", mq4: "mq4", mq5: "mq5" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxHeroImage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxHeroImage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxHeroImage = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxHeroImage);
let DxIcon = class DxIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxIcon.ɵfac = function DxIcon_Factory(t) { return new (t || DxIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxIcon, selectors: [["dx-icon"]], inputs: { color: "color", icon: "icon", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxIcon_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxIcon = __decorate([
    ProxyCmp({
        inputs: ['color', 'icon', 'size']
    })
], DxIcon);
let DxInfo = class DxInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxInfo.ɵfac = function DxInfo_Factory(t) { return new (t || DxInfo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxInfo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxInfo, selectors: [["dx-info"]], inputs: { hidebutton: "hidebutton", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxInfo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxInfo = __decorate([
    ProxyCmp({
        inputs: ['hidebutton', 'size'],
        methods: ['setModal']
    })
], DxInfo);
let DxLegend = class DxLegend {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLegend.ɵfac = function DxLegend_Factory(t) { return new (t || DxLegend)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxLegend.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxLegend, selectors: [["dx-legend"]], inputs: { kisynchint: "kisynchint", requiredhint: "requiredhint" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxLegend_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxLegend.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLegend = __decorate([
    ProxyCmp({
        inputs: ['kisynchint', 'requiredhint']
    })
], DxLegend);
let DxLink = class DxLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLink.ɵfac = function DxLink_Factory(t) { return new (t || DxLink)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxLink.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxLink, selectors: [["dx-link"]], inputs: { target: "target", url: "url" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxLink_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLink = __decorate([
    ProxyCmp({
        inputs: ['target', 'url']
    })
], DxLink);
let DxList = class DxList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxList.ɵfac = function DxList_Factory(t) { return new (t || DxList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxList, selectors: [["dx-list"]], inputs: { contentbelow: "contentbelow", size: "size", width: "width" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxList_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxList = __decorate([
    ProxyCmp({
        inputs: ['contentbelow', 'size', 'width']
    })
], DxList);
let DxListItem = class DxListItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxListItem.ɵfac = function DxListItem_Factory(t) { return new (t || DxListItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxListItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxListItem, selectors: [["dx-list-item"]], inputs: { actionindicator: "actionindicator", disabled: "disabled", icon: "icon", label: "label", selected: "selected", sublabel: "sublabel", textalign: "textalign", type: "type", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxListItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxListItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxListItem = __decorate([
    ProxyCmp({
        inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value'],
        methods: ['getRadioElement', 'focusControl']
    })
], DxListItem);
let DxLogo = class DxLogo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxLogo.ɵfac = function DxLogo_Factory(t) { return new (t || DxLogo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxLogo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxLogo, selectors: [["dx-logo"]], inputs: { type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxLogo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxLogo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxLogo = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxLogo);
let DxMediaQueryValue = class DxMediaQueryValue {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxMediaQueryValue.ɵfac = function DxMediaQueryValue_Factory(t) { return new (t || DxMediaQueryValue)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxMediaQueryValue.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxMediaQueryValue, selectors: [["dx-media-query-value"]], inputs: { mq1: "mq1", mq2: "mq2", mq3: "mq3", mq4: "mq4", mq5: "mq5", property: "property" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxMediaQueryValue_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxMediaQueryValue.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMediaQueryValue = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
    })
], DxMediaQueryValue);
let DxModal = class DxModal {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['modalOpened', 'modalClosed']);
    }
};
DxModal.ɵfac = function DxModal_Factory(t) { return new (t || DxModal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxModal.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxModal, selectors: [["dx-modal"]], inputs: { height: "height", label: "label", visible: "visible", width: "width" }, outputs: { modalOpened: "modalOpened", modalClosed: "modalClosed" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxModal_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxModal.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxModal = __decorate([
    ProxyCmp({
        inputs: ['height', 'label', 'visible', 'width']
    })
], DxModal);
let DxMultiDropdown = class DxMultiDropdown {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxMultiDropdown.ɵfac = function DxMultiDropdown_Factory(t) { return new (t || DxMultiDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxMultiDropdown.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxMultiDropdown, selectors: [["dx-multi-dropdown"]], inputs: { disabled: "disabled", errormessage: "errormessage", icon: "icon", kisynced: "kisynced", label: "label", placeholder: "placeholder", popupposition: "popupposition", readonly: "readonly", required: "required", selectionlabel: "selectionlabel", size: "size", textalign: "textalign" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxMultiDropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxMultiDropdown.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxMultiDropdown = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
        methods: ['focusControl']
    })
], DxMultiDropdown);
let DxNotificationBar = class DxNotificationBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationBar.ɵfac = function DxNotificationBar_Factory(t) { return new (t || DxNotificationBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxNotificationBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxNotificationBar, selectors: [["dx-notification-bar"]], inputs: { visible: "visible" }, outputs: { closeNotification: "closeNotification" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxNotificationBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxNotificationBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationBar = __decorate([
    ProxyCmp({
        inputs: ['visible']
    })
], DxNotificationBar);
let DxNotificationToast = class DxNotificationToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['closeNotification']);
    }
};
DxNotificationToast.ɵfac = function DxNotificationToast_Factory(t) { return new (t || DxNotificationToast)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxNotificationToast.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxNotificationToast, selectors: [["dx-notification-toast"]], inputs: { closeafter: "closeafter", icon: "icon", iconcolor: "iconcolor", subcontent: "subcontent", titlestring: "titlestring", visible: "visible" }, outputs: { closeNotification: "closeNotification" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxNotificationToast_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxNotificationToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNotificationToast = __decorate([
    ProxyCmp({
        inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible']
    })
], DxNotificationToast);
let DxNumberInput = class DxNumberInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxNumberInput.ɵfac = function DxNumberInput_Factory(t) { return new (t || DxNumberInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxNumberInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxNumberInput, selectors: [["dx-number-input"]], inputs: { disabled: "disabled", errormessage: "errormessage", kisynced: "kisynced", label: "label", limitlength: "limitlength", max: "max", min: "min", placeholder: "placeholder", precision: "precision", profile: "profile", readonly: "readonly", required: "required", size: "size", step: "step", thousandseparator: "thousandseparator", unit: "unit", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxNumberInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxNumberInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
        methods: ['focusControl']
    })
], DxNumberInput);
let DxNumberPaginator = class DxNumberPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxNumberPaginator.ɵfac = function DxNumberPaginator_Factory(t) { return new (t || DxNumberPaginator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxNumberPaginator.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxNumberPaginator, selectors: [["dx-number-paginator"]], inputs: { count: "count", current: "current" }, outputs: { pageChanged: "pageChanged" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxNumberPaginator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxNumberPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxNumberPaginator);
let DxNumberPicker = class DxNumberPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxNumberPicker.ɵfac = function DxNumberPicker_Factory(t) { return new (t || DxNumberPicker)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxNumberPicker.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxNumberPicker, selectors: [["dx-number-picker"]], inputs: { align: "align", value: "value", values: "values" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxNumberPicker_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxNumberPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxNumberPicker = __decorate([
    ProxyCmp({
        inputs: ['align', 'value', 'values']
    })
], DxNumberPicker);
let DxOverflowMenu = class DxOverflowMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['selection', 'listOpenChange']);
    }
};
DxOverflowMenu.ɵfac = function DxOverflowMenu_Factory(t) { return new (t || DxOverflowMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxOverflowMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxOverflowMenu, selectors: [["dx-overflow-menu"]], inputs: { align: "align", label: "label", maxlabels: "maxlabels", maxselections: "maxselections", selectionmode: "selectionmode" }, outputs: { selection: "selection", listOpenChange: "listOpenChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxOverflowMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxOverflowMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenu = __decorate([
    ProxyCmp({
        inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode']
    })
], DxOverflowMenu);
let DxOverflowMenuItem = class DxOverflowMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxOverflowMenuItem.ɵfac = function DxOverflowMenuItem_Factory(t) { return new (t || DxOverflowMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxOverflowMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxOverflowMenuItem, selectors: [["dx-overflow-menu-item"]], inputs: { icon: "icon", label: "label", selected: "selected", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxOverflowMenuItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxOverflowMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxOverflowMenuItem = __decorate([
    ProxyCmp({
        inputs: ['icon', 'label', 'selected', 'value']
    })
], DxOverflowMenuItem);
let DxPaginator = class DxPaginator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChanged']);
    }
};
DxPaginator.ɵfac = function DxPaginator_Factory(t) { return new (t || DxPaginator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxPaginator.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxPaginator, selectors: [["dx-paginator"]], inputs: { count: "count", current: "current" }, outputs: { pageChanged: "pageChanged" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxPaginator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxPaginator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPaginator = __decorate([
    ProxyCmp({
        inputs: ['count', 'current']
    })
], DxPaginator);
let DxPlaceholder = class DxPlaceholder {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxPlaceholder.ɵfac = function DxPlaceholder_Factory(t) { return new (t || DxPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxPlaceholder.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxPlaceholder, selectors: [["dx-placeholder"]], inputs: { box: "box", card: "card" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxPlaceholder_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxPlaceholder.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxPlaceholder = __decorate([
    ProxyCmp({
        inputs: ['box', 'card']
    })
], DxPlaceholder);
let DxProcessHeader = class DxProcessHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxProcessHeader.ɵfac = function DxProcessHeader_Factory(t) { return new (t || DxProcessHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxProcessHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxProcessHeader, selectors: [["dx-process-header"]], inputs: { headline: "headline" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxProcessHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxProcessHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxProcessHeader = __decorate([
    ProxyCmp({
        inputs: ['headline']
    })
], DxProcessHeader);
let DxRadioButton = class DxRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRadioButton.ɵfac = function DxRadioButton_Factory(t) { return new (t || DxRadioButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxRadioButton.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxRadioButton, selectors: [["dx-radio-button"]], inputs: { disabled: "disabled", label: "label", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxRadioButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'label', 'value'],
        methods: ['focusControl']
    })
], DxRadioButton);
let DxRadioButtonGroup = class DxRadioButtonGroup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxRadioButtonGroup.ɵfac = function DxRadioButtonGroup_Factory(t) { return new (t || DxRadioButtonGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxRadioButtonGroup.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxRadioButtonGroup, selectors: [["dx-radio-button-group"]], inputs: { disabled: "disabled", errormessage: "errormessage", kisynced: "kisynced", label: "label", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxRadioButtonGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxRadioButtonGroup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRadioButtonGroup = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
        methods: ['focusControl', 'connectRadioButton', 'disconnectRadioButton']
    })
], DxRadioButtonGroup);
let DxRepresentativeInfo = class DxRepresentativeInfo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxRepresentativeInfo.ɵfac = function DxRepresentativeInfo_Factory(t) { return new (t || DxRepresentativeInfo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxRepresentativeInfo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxRepresentativeInfo, selectors: [["dx-representative-info"]], inputs: { name: "name", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxRepresentativeInfo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxRepresentativeInfo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxRepresentativeInfo = __decorate([
    ProxyCmp({
        inputs: ['name', 'type']
    })
], DxRepresentativeInfo);
class DxSidebarContent {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxSidebarContent.ɵfac = function DxSidebarContent_Factory(t) { return new (t || DxSidebarContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSidebarContent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSidebarContent, selectors: [["dx-sidebar-content"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSidebarContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSidebarContent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxSiteNavigation = class DxSiteNavigation {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigation.ɵfac = function DxSiteNavigation_Factory(t) { return new (t || DxSiteNavigation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSiteNavigation.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSiteNavigation, selectors: [["dx-site-navigation"]], inputs: { expandedlayoutat: "expandedlayoutat" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSiteNavigation_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSiteNavigation.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigation = __decorate([
    ProxyCmp({
        inputs: ['expandedlayoutat']
    })
], DxSiteNavigation);
let DxSiteNavigationMenu = class DxSiteNavigationMenu {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['navigate']);
    }
};
DxSiteNavigationMenu.ɵfac = function DxSiteNavigationMenu_Factory(t) { return new (t || DxSiteNavigationMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSiteNavigationMenu.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSiteNavigationMenu, selectors: [["dx-site-navigation-menu"]], inputs: { autonavigation: "autonavigation", selectedvalue: "selectedvalue", titlestring: "titlestring" }, outputs: { navigate: "navigate" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSiteNavigationMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSiteNavigationMenu.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenu = __decorate([
    ProxyCmp({
        inputs: ['autonavigation', 'selectedvalue', 'titlestring']
    })
], DxSiteNavigationMenu);
let DxSiteNavigationMenuItem = class DxSiteNavigationMenuItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationMenuItem.ɵfac = function DxSiteNavigationMenuItem_Factory(t) { return new (t || DxSiteNavigationMenuItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSiteNavigationMenuItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSiteNavigationMenuItem, selectors: [["dx-site-navigation-menu-item"]], inputs: { label: "label", state: "state", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSiteNavigationMenuItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSiteNavigationMenuItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationMenuItem = __decorate([
    ProxyCmp({
        inputs: ['label', 'state', 'value']
    })
], DxSiteNavigationMenuItem);
let DxSiteNavigationScope = class DxSiteNavigationScope {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSiteNavigationScope.ɵfac = function DxSiteNavigationScope_Factory(t) { return new (t || DxSiteNavigationScope)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSiteNavigationScope.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSiteNavigationScope, selectors: [["dx-site-navigation-scope"]], inputs: { value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSiteNavigationScope_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSiteNavigationScope.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSiteNavigationScope = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSiteNavigationScope);
let DxSlideShow = class DxSlideShow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['pageChange']);
    }
};
DxSlideShow.ɵfac = function DxSlideShow_Factory(t) { return new (t || DxSlideShow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSlideShow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSlideShow, selectors: [["dx-slide-show"]], inputs: { initialpage: "initialpage", mq1amount: "mq1amount", mq2amount: "mq2amount", mq3amount: "mq3amount", mq4amount: "mq4amount", mq5amount: "mq5amount", spacebetween: "spacebetween", viewmode: "viewmode" }, outputs: { pageChange: "pageChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSlideShow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSlideShow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlideShow = __decorate([
    ProxyCmp({
        inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
        methods: ['setPage']
    })
], DxSlideShow);
let DxSlider = class DxSlider {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxSlider.ɵfac = function DxSlider_Factory(t) { return new (t || DxSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSlider.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSlider, selectors: [["dx-slider"]], inputs: { disabled: "disabled", formattingpattern: "formattingpattern", label: "label", max: "max", min: "min", readonly: "readonly", showminmaxlabel: "showminmaxlabel", showvaluelabel: "showvaluelabel", step: "step", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSlider_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSlider.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSlider = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value']
    })
], DxSlider);
let DxSort = class DxSort {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['sort']);
    }
};
DxSort.ɵfac = function DxSort_Factory(t) { return new (t || DxSort)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSort.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSort, selectors: [["dx-sort"]], inputs: { sortable: "sortable" }, outputs: { sort: "sort" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSort_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSort.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSort = __decorate([
    ProxyCmp({
        inputs: ['sortable']
    })
], DxSort);
let DxSortItem = class DxSortItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSortItem.ɵfac = function DxSortItem_Factory(t) { return new (t || DxSortItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSortItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSortItem, selectors: [["dx-sort-item"]], inputs: { value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSortItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSortItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSortItem = __decorate([
    ProxyCmp({
        inputs: ['value']
    })
], DxSortItem);
let DxSpacer = class DxSpacer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpacer.ɵfac = function DxSpacer_Factory(t) { return new (t || DxSpacer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSpacer.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSpacer, selectors: [["dx-spacer"]], inputs: { mq1: "mq1", mq2: "mq2", mq3: "mq3", mq4: "mq4", mq5: "mq5" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSpacer_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSpacer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpacer = __decorate([
    ProxyCmp({
        inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
    })
], DxSpacer);
let DxSpinner = class DxSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxSpinner.ɵfac = function DxSpinner_Factory(t) { return new (t || DxSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxSpinner, selectors: [["dx-spinner"]], inputs: { size: "size", theme: "theme" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxSpinner_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxSpinner = __decorate([
    ProxyCmp({
        inputs: ['size', 'theme']
    })
], DxSpinner);
let DxTabBar = class DxTabBar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tabChange']);
    }
};
DxTabBar.ɵfac = function DxTabBar_Factory(t) { return new (t || DxTabBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTabBar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTabBar, selectors: [["dx-tab-bar"]], inputs: { selected: "selected" }, outputs: { tabChange: "tabChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTabBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTabBar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabBar = __decorate([
    ProxyCmp({
        inputs: ['selected']
    })
], DxTabBar);
let DxTabPage = class DxTabPage {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTabPage.ɵfac = function DxTabPage_Factory(t) { return new (t || DxTabPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTabPage.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTabPage, selectors: [["dx-tab-page"]], inputs: { label: "label", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTabPage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTabPage.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTabPage = __decorate([
    ProxyCmp({
        inputs: ['label', 'value'],
        methods: ['toTabPage']
    })
], DxTabPage);
let DxTable = class DxTable {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']);
    }
};
DxTable.ɵfac = function DxTable_Factory(t) { return new (t || DxTable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTable.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTable, selectors: [["dx-table"]], inputs: { initialsort: "initialsort", initialsortdirection: "initialsortdirection", mode: "mode", pagesize: "pagesize", pagesizes: "pagesizes", rowcount: "rowcount", scrollable: "scrollable", selectionenabled: "selectionenabled", selectionmode: "selectionmode" }, outputs: { tableStateChanged: "tableStateChanged", selectionStateChanged: "selectionStateChanged", expansionChanged: "expansionChanged", rowsSelected: "rowsSelected" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTable_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTable.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTable = __decorate([
    ProxyCmp({
        inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode']
    })
], DxTable);
let DxTableCell = class DxTableCell {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableCell.ɵfac = function DxTableCell_Factory(t) { return new (t || DxTableCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTableCell.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTableCell, selectors: [["dx-table-cell"]], inputs: { align: "align", color: "color", type: "type", value: "value" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTableCell_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTableCell.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableCell = __decorate([
    ProxyCmp({
        inputs: ['align', 'color', 'type', 'value']
    })
], DxTableCell);
class DxTableFooter {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableFooter.ɵfac = function DxTableFooter_Factory(t) { return new (t || DxTableFooter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTableFooter.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTableFooter, selectors: [["dx-table-footer"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTableFooter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTableFooter.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
class DxTableHeader {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
DxTableHeader.ɵfac = function DxTableHeader_Factory(t) { return new (t || DxTableHeader)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTableHeader.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTableHeader, selectors: [["dx-table-header"]], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTableHeader_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTableHeader.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let DxTableHeaderItem = class DxTableHeaderItem {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTableHeaderItem.ɵfac = function DxTableHeaderItem_Factory(t) { return new (t || DxTableHeaderItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTableHeaderItem.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTableHeaderItem, selectors: [["dx-table-header-item"]], inputs: { align: "align", columnid: "columnid", customSort: "customSort", label: "label", linesize: "linesize", maxwidth: "maxwidth", minwidth: "minwidth", sortable: "sortable", sortpriority: "sortpriority", sticky: "sticky", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTableHeaderItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTableHeaderItem.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableHeaderItem = __decorate([
    ProxyCmp({
        inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type'],
        methods: ['getMinWidth', 'getMaxWidth']
    })
], DxTableHeaderItem);
let DxTableRow = class DxTableRow {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['rowSelected']);
    }
};
DxTableRow.ɵfac = function DxTableRow_Factory(t) { return new (t || DxTableRow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTableRow.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTableRow, selectors: [["dx-table-row"]], inputs: { rowid: "rowid", selected: "selected" }, outputs: { rowSelected: "rowSelected" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTableRow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTableRow.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTableRow = __decorate([
    ProxyCmp({
        inputs: ['rowid', 'selected']
    })
], DxTableRow);
let DxTag = class DxTag {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['remove', 'selectChange']);
    }
};
DxTag.ɵfac = function DxTag_Factory(t) { return new (t || DxTag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTag.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTag, selectors: [["dx-tag"]], inputs: { color: "color", label: "label", removeable: "removeable", selectable: "selectable", selected: "selected", textcolor: "textcolor", theme: "theme", type: "type" }, outputs: { remove: "remove", selectChange: "selectChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTag_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTag.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTag = __decorate([
    ProxyCmp({
        inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type']
    })
], DxTag);
let DxText = class DxText {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxText.ɵfac = function DxText_Factory(t) { return new (t || DxText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxText.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxText, selectors: [["dx-text"]], inputs: { color: "color", type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxText_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxText.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxText = __decorate([
    ProxyCmp({
        inputs: ['color', 'type']
    })
], DxText);
let DxTextArea = class DxTextArea {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete']);
    }
};
DxTextArea.ɵfac = function DxTextArea_Factory(t) { return new (t || DxTextArea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTextArea.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTextArea, selectors: [["dx-text-area"]], inputs: { disabled: "disabled", errormessage: "errormessage", kisynced: "kisynced", label: "label", lines: "lines", maxlength: "maxlength", placeholder: "placeholder", readonly: "readonly", required: "required", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTextArea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTextArea.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextArea = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
        methods: ['focusControl']
    })
], DxTextArea);
let DxTextInput = class DxTextInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']);
    }
};
DxTextInput.ɵfac = function DxTextInput_Factory(t) { return new (t || DxTextInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTextInput.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTextInput, selectors: [["dx-text-input"]], inputs: { disabled: "disabled", errormessage: "errormessage", icon: "icon", kisynced: "kisynced", label: "label", limitlength: "limitlength", placeholder: "placeholder", readonly: "readonly", required: "required", size: "size", value: "value" }, outputs: { valueChange: "valueChange", valueComplete: "valueComplete", autocomplete: "autocomplete", selectAutocomplete: "selectAutocomplete", enterPress: "enterPress" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTextInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTextInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextInput = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
        methods: ['focusControl']
    })
], DxTextInput);
let DxTextList = class DxTextList {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxTextList.ɵfac = function DxTextList_Factory(t) { return new (t || DxTextList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxTextList.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxTextList, selectors: [["dx-text-list"]], inputs: { type: "type" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxTextList_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxTextList.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxTextList = __decorate([
    ProxyCmp({
        inputs: ['type']
    })
], DxTextList);
let DxToggle = class DxToggle {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['checkedChange']);
    }
};
DxToggle.ɵfac = function DxToggle_Factory(t) { return new (t || DxToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxToggle, selectors: [["dx-toggle"]], inputs: { checked: "checked", disabled: "disabled" }, outputs: { checkedChange: "checkedChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxToggle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxToggle.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxToggle = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled']
    })
], DxToggle);
let DxUserAvatar = class DxUserAvatar {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
DxUserAvatar.ɵfac = function DxUserAvatar_Factory(t) { return new (t || DxUserAvatar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxUserAvatar.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxUserAvatar, selectors: [["dx-user-avatar"]], inputs: { imageurl: "imageurl", initials: "initials", size: "size" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxUserAvatar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxUserAvatar.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxUserAvatar = __decorate([
    ProxyCmp({
        inputs: ['imageurl', 'initials', 'size']
    })
], DxUserAvatar);
let DxWizard = class DxWizard {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['currentStepChange']);
    }
};
DxWizard.ɵfac = function DxWizard_Factory(t) { return new (t || DxWizard)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxWizard.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxWizard, selectors: [["dx-wizard"]], inputs: { currentstep: "currentstep", expandedlayoutat: "expandedlayoutat", headline: "headline", orientation: "orientation" }, outputs: { currentStepChange: "currentStepChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxWizard_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxWizard.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizard = __decorate([
    ProxyCmp({
        inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation']
    })
], DxWizard);
let DxWizardStep = class DxWizardStep {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['interaction']);
    }
};
DxWizardStep.ɵfac = function DxWizardStep_Factory(t) { return new (t || DxWizardStep)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxWizardStep.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxWizardStep, selectors: [["dx-wizard-step"]], inputs: { finished: "finished", label: "label", value: "value" }, outputs: { interaction: "interaction" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxWizardStep_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxWizardStep.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxWizardStep = __decorate([
    ProxyCmp({
        inputs: ['finished', 'label', 'value']
    })
], DxWizardStep);
let DxYesNo = class DxYesNo {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['valueChange']);
    }
};
DxYesNo.ɵfac = function DxYesNo_Factory(t) { return new (t || DxYesNo)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
DxYesNo.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxYesNo, selectors: [["dx-yes-no"]], inputs: { disabled: "disabled", errormessage: "errormessage", size: "size", value: "value" }, outputs: { valueChange: "valueChange" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxYesNo_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2, changeDetection: 0 });
DxYesNo.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
DxYesNo = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'errormessage', 'size', 'value']
    })
], DxYesNo);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsActionList, [{
        type: Component,
        args: [{
                selector: 'ds-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsActionListItem, [{
        type: Component,
        args: [{
                selector: 'ds-action-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsAlert, [{
        type: Component,
        args: [{
                selector: 'ds-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'visible'],
                outputs: ['buttonClick']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsAlertButton, [{
        type: Component,
        args: [{
                selector: 'ds-alert-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'confirm', 'disabled', 'highlight', 'label', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsAnnouncementBar, [{
        type: Component,
        args: [{
                selector: 'ds-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsApp, [{
        type: Component,
        args: [{
                selector: 'ds-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsBorderedFormGroup, [{
        type: Component,
        args: [{
                selector: 'ds-bordered-form-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsBorderedFormItem, [{
        type: Component,
        args: [{
                selector: 'ds-bordered-form-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsButton, [{
        type: Component,
        args: [{
                selector: 'ds-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'size', 'stretch', 'type', 'unfocusable']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsButtonBar, [{
        type: Component,
        args: [{
                selector: 'ds-button-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['direction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCard, [{
        type: Component,
        args: [{
                selector: 'ds-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['shadow']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardCollapsable, [{
        type: Component,
        args: [{
                selector: 'ds-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardContent, [{
        type: Component,
        args: [{
                selector: 'ds-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardHeader, [{
        type: Component,
        args: [{
                selector: 'ds-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardImageHeader, [{
        type: Component,
        args: [{
                selector: 'ds-card-image-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardTabBar, [{
        type: Component,
        args: [{
                selector: 'ds-card-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['show'],
                outputs: ['showChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCardTabPage, [{
        type: Component,
        args: [{
                selector: 'ds-card-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'name']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCenteredBoard, [{
        type: Component,
        args: [{
                selector: 'ds-centered-board',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['columns']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCenteredBoardItem, [{
        type: Component,
        args: [{
                selector: 'ds-centered-board-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsChartSample, [{
        type: Component,
        args: [{
                selector: 'ds-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'formattedValue', 'label', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsCheckbox, [{
        type: Component,
        args: [{
                selector: 'ds-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'error', 'errormessage', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsColumn, [{
        type: Component,
        args: [{
                selector: 'ds-column',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsDateInput, [{
        type: Component,
        args: [{
                selector: 'ds-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsDateRange, [{
        type: Component,
        args: [{
                selector: 'ds-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsDonutChart, [{
        type: Component,
        args: [{
                selector: 'ds-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['offset', 'radius', 'scale', 'segmentwidth', 'startangle'],
                outputs: ['segmentSelect']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsDropdown, [{
        type: Component,
        args: [{
                selector: 'ds-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'error', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsDropdownOption, [{
        type: Component,
        args: [{
                selector: 'ds-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'secondarylabel', 'tertiarylabel', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFmErgebnisuebersicht, [{
        type: Component,
        args: [{
                selector: 'ds-fm-ergebnisuebersicht',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['donutcenterlabel', 'donutlabel', 'donutsublabel', 'donutvisible', 'firstcolumn', 'firstcolumninfo', 'firstcontributionlabel', 'firstcontributionsublabel', 'secondcolumn', 'secondcolumninfo', 'secondcontributionlabel', 'secondcontributionsublabel']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFmErgebnisuebersichtItem, [{
        type: Component,
        args: [{
                selector: 'ds-fm-ergebnisuebersicht-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['firstcolumninfo', 'firstcolumnvalue', 'label', 'secondcolumninfo', 'secondcolumnvalue', 'sublabel']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFmErgebnisuebersichtTable, [{
        type: Component,
        args: [{
                selector: 'ds-fm-ergebnisuebersicht-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFooter, [{
        type: Component,
        args: [{
                selector: 'ds-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['companyinfo', 'showimprint', 'showtermsofuse'],
                outputs: ['infoButtonClicked']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFormLayout, [{
        type: Component,
        args: [{
                selector: 'ds-form-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFullscreenSpinner, [{
        type: Component,
        args: [{
                selector: 'ds-fullscreen-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsFunctionIconButton, [{
        type: Component,
        args: [{
                selector: 'ds-function-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'unfocusable']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsGrid, [{
        type: Component,
        args: [{
                selector: 'ds-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'l', 'm', 's', 'xl']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsGroupedTextInput, [{
        type: Component,
        args: [{
                selector: 'ds-grouped-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'mask', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsGrowBox, [{
        type: Component,
        args: [{
                selector: 'ds-grow-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['animateoninit', 'open', 'slidecontent'],
                outputs: ['growStart', 'contentVisibilityChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeader, [{
        type: Component,
        args: [{
                selector: 'ds-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['brand', 'fullscreen']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeaderAction, [{
        type: Component,
        args: [{
                selector: 'ds-header-action',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['highlight', 'label'],
                outputs: ['interaction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeaderActionList, [{
        type: Component,
        args: [{
                selector: 'ds-header-action-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeaderCustomer, [{
        type: Component,
        args: [{
                selector: 'ds-header-customer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'typelabel']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeaderUser, [{
        type: Component,
        args: [{
                selector: 'ds-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'name', 'usernameinteractable'],
                outputs: ['signOut', 'usernameInteraction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHeroImage, [{
        type: Component,
        args: [{
                selector: 'ds-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['url']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsHr, [{
        type: Component,
        args: [{
                selector: 'ds-hr',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsIcon, [{
        type: Component,
        args: [{
                selector: 'ds-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsIconButton, [{
        type: Component,
        args: [{
                selector: 'ds-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'backgroundcolor', 'color', 'disabled', 'size', 'unfocusable']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsInfo, [{
        type: Component,
        args: [{
                selector: 'ds-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'popupvisible', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsLink, [{
        type: Component,
        args: [{
                selector: 'ds-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsLogo, [{
        type: Component,
        args: [{
                selector: 'ds-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsModal, [{
        type: Component,
        args: [{
                selector: 'ds-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['allowbackgroundclose', 'contentcolor', 'label', 'size', 'visible'],
                outputs: ['modalOpened', 'modalClosed']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsNavigatedContent, [{
        type: Component,
        args: [{
                selector: 'ds-navigated-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsNavigatedContentMenu, [{
        type: Component,
        args: [{
                selector: 'ds-navigated-content-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['active'],
                outputs: ['navigate']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsNavigatedContentMenuItem, [{
        type: Component,
        args: [{
                selector: 'ds-navigated-content-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['error', 'label', 'success', 'value', 'warning']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsNotificationToast, [{
        type: Component,
        args: [{
                selector: 'ds-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsNumberInput, [{
        type: Component,
        args: [{
                selector: 'ds-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'thousandseparator', 'uniticon', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsPage, [{
        type: Component,
        args: [{
                selector: 'ds-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsPaginator, [{
        type: Component,
        args: [{
                selector: 'ds-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current', 'range'],
                outputs: ['pageChanged']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsPlaceholder, [{
        type: Component,
        args: [{
                selector: 'ds-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsRadioButton, [{
        type: Component,
        args: [{
                selector: 'ds-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsRadioButtonGroup, [{
        type: Component,
        args: [{
                selector: 'ds-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsSearch, [{
        type: Component,
        args: [{
                selector: 'ds-search',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoscrollintoview', 'noresultstext', 'placeholder', 'value', 'visibleentries'],
                outputs: ['search', 'selectSearch', 'valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsSlider, [{
        type: Component,
        args: [{
                selector: 'ds-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['formattedvalue', 'label', 'max', 'min', 'readonly', 'step', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsSpinner, [{
        type: Component,
        args: [{
                selector: 'ds-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTable, [{
        type: Component,
        args: [{
                selector: 'ds-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode', 'view'],
                outputs: ['tableStateChanged', 'rowsSelected']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTableCell, [{
        type: Component,
        args: [{
                selector: 'ds-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTableFooter, [{
        type: Component,
        args: [{
                selector: 'ds-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTableHeader, [{
        type: Component,
        args: [{
                selector: 'ds-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTableHeaderItem, [{
        type: Component,
        args: [{
                selector: 'ds-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTableRow, [{
        type: Component,
        args: [{
                selector: 'ds-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsText, [{
        type: Component,
        args: [{
                selector: 'ds-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'screensize', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTextArea, [{
        type: Component,
        args: [{
                selector: 'ds-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'label', 'lines', 'maxlength', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTextButton, [{
        type: Component,
        args: [{
                selector: 'ds-text-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'disabled', 'screensize', 'unfocusable']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTextInput, [{
        type: Component,
        args: [{
                selector: 'ds-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'kisynced', 'label', 'limitlength', 'mask', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsTextList, [{
        type: Component,
        args: [{
                selector: 'ds-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsUserAvatar, [{
        type: Component,
        args: [{
                selector: 'ds-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsWorkflowProgress, [{
        type: Component,
        args: [{
                selector: 'ds-workflow-progress',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['progress']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsWrappedLayout, [{
        type: Component,
        args: [{
                selector: 'ds-wrapped-layout',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DsYesNo, [{
        type: Component,
        args: [{
                selector: 'ds-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'error', 'errormessage', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxAccordion, [{
        type: Component,
        args: [{
                selector: 'dx-accordion',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'open']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxAccordionGroup, [{
        type: Component,
        args: [{
                selector: 'dx-accordion-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxAlert, [{
        type: Component,
        args: [{
                selector: 'dx-alert',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionsdirection', 'content', 'icon', 'sublabel', 'titlestring', 'type', 'visible']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxAnnouncementBar, [{
        type: Component,
        args: [{
                selector: 'dx-announcement-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'iconcolor']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxApp, [{
        type: Component,
        args: [{
                selector: 'dx-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxBreadcrumb, [{
        type: Component,
        args: [{
                selector: 'dx-breadcrumb',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                outputs: ['navigateHome', 'navigate']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxBreadcrumbItem, [{
        type: Component,
        args: [{
                selector: 'dx-breadcrumb-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxButton, [{
        type: Component,
        args: [{
                selector: 'dx-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'icon', 'iconposition', 'label', 'loading', 'stretch', 'theme', 'type', 'unfocusable']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCard, [{
        type: Component,
        args: [{
                selector: 'dx-card',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCardCollapsable, [{
        type: Component,
        args: [{
                selector: 'dx-card-collapsable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['open']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCardContent, [{
        type: Component,
        args: [{
                selector: 'dx-card-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCardHeader, [{
        type: Component,
        args: [{
                selector: 'dx-card-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'iconcolor', 'label']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCardImage, [{
        type: Component,
        args: [{
                selector: 'dx-card-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['coverheightmq1', 'coverheightmq2', 'coverheightmq3', 'coverheightmq4', 'coverheightmq5', 'coverpositionmq1', 'coverpositionmq2', 'coverpositionmq3', 'coverpositionmq4', 'coverpositionmq5', 'fit', 'url']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxChartSample, [{
        type: Component,
        args: [{
                selector: 'dx-chart-sample',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'label', 'selectedcolor', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCheckbox, [{
        type: Component,
        args: [{
                selector: 'dx-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required'],
                outputs: ['checkedChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxCombobox, [{
        type: Component,
        args: [{
                selector: 'dx-combobox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'emptysearchtext', 'errormessage', 'kisynced', 'label', 'limitlength', 'loadingtext', 'maxlistheight', 'placeholder', 'presearchconditiontext', 'presearchlettercount', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'search', 'selectSearchOption', 'enterPress']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxContainer, [{
        type: Component,
        args: [{
                selector: 'dx-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxDateInput, [{
        type: Component,
        args: [{
                selector: 'dx-date-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'max', 'min', 'mode', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'errorFound']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxDateRange, [{
        type: Component,
        args: [{
                selector: 'dx-date-range',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['max', 'min', 'mode', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxDonutChart, [{
        type: Component,
        args: [{
                selector: 'dx-donut-chart',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['colorscheme', 'label', 'selected', 'showsegmentlabels', 'sublabel'],
                outputs: ['segmentSelect']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxDropdown, [{
        type: Component,
        args: [{
                selector: 'dx-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'elseoption', 'elseoptionbuttonlabel', 'elseoptioninputlabel', 'elseoptionselected', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'size', 'textalign', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxDropdownOption, [{
        type: Component,
        args: [{
                selector: 'dx-dropdown-option',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxErrorMessage, [{
        type: Component,
        args: [{
                selector: 'dx-error-message',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['lines'],
                outputs: ['forceUpdateOnChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxErrorPage, [{
        type: Component,
        args: [{
                selector: 'dx-error-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actiondescription', 'actionlabel', 'description', 'reason'],
                outputs: ['action']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxExpanded, [{
        type: Component,
        args: [{
                selector: 'dx-expanded',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxFdOutlineBox, [{
        type: Component,
        args: [{
                selector: 'dx-fd-outline-box',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxFdSeparator, [{
        type: Component,
        args: [{
                selector: 'dx-fd-separator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor', 'tocolor']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxFooter, [{
        type: Component,
        args: [{
                selector: 'dx-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fromcolor']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxFormWrapper, [{
        type: Component,
        args: [{
                selector: 'dx-form-wrapper',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['errormessage', 'kisynced', 'label', 'required']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxGoldenStage, [{
        type: Component,
        args: [{
                selector: 'dx-golden-stage',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['alignment', 'backgroundcolor', 'contentoffsety', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxGrid, [{
        type: Component,
        args: [{
                selector: 'dx-grid',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['base', 'mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'rowgap']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeader, [{
        type: Component,
        args: [{
                selector: 'dx-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appname', 'brand', 'logo', 'showannouncement', 'theme'],
                outputs: ['navigateHome']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderAppFavorites, [{
        type: Component,
        args: [{
                selector: 'dx-header-app-favorites',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction', 'deleteApp', 'sortApps', 'addApp', 'editApps', 'launchApp']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderAppFavoritesApp, [{
        type: Component,
        args: [{
                selector: 'dx-header-app-favorites-app',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appid', 'appname', 'icon']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderMenuCustom, [{
        type: Component,
        args: [{
                selector: 'dx-header-menu-custom',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderMenuGroup, [{
        type: Component,
        args: [{
                selector: 'dx-header-menu-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['priority']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderMenuItem, [{
        type: Component,
        args: [{
                selector: 'dx-header-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectedslot', 'icon', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['menuInteraction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderMenuLink, [{
        type: Component,
        args: [{
                selector: 'dx-header-menu-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['connectednavigationvalue', 'label', 'priority', 'selected'],
                outputs: ['menuInteraction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderNavigation, [{
        type: Component,
        args: [{
                selector: 'dx-header-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoclose', 'notification', 'notificationstheme'],
                outputs: ['menuInteraction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderNavigationItem, [{
        type: Component,
        args: [{
                selector: 'dx-header-navigation-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'size', 'value'],
                outputs: ['interaction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeaderUser, [{
        type: Component,
        args: [{
                selector: 'dx-header-user',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['accountavailable', 'imageurl', 'name', 'notifications', 'notificationstheme', 'priority'],
                outputs: ['signOut', 'accountInteraction', 'menuInteraction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxHeroImage, [{
        type: Component,
        args: [{
                selector: 'dx-hero-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxIcon, [{
        type: Component,
        args: [{
                selector: 'dx-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'icon', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxInfo, [{
        type: Component,
        args: [{
                selector: 'dx-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['hidebutton', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxLegend, [{
        type: Component,
        args: [{
                selector: 'dx-legend',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['kisynchint', 'requiredhint']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxLink, [{
        type: Component,
        args: [{
                selector: 'dx-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['target', 'url']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxList, [{
        type: Component,
        args: [{
                selector: 'dx-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['contentbelow', 'size', 'width']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxListItem, [{
        type: Component,
        args: [{
                selector: 'dx-list-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['actionindicator', 'disabled', 'icon', 'label', 'selected', 'sublabel', 'textalign', 'type', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxLogo, [{
        type: Component,
        args: [{
                selector: 'dx-logo',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxMediaQueryValue, [{
        type: Component,
        args: [{
                selector: 'dx-media-query-value',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5', 'property']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxModal, [{
        type: Component,
        args: [{
                selector: 'dx-modal',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['height', 'label', 'visible', 'width'],
                outputs: ['modalOpened', 'modalClosed']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxMultiDropdown, [{
        type: Component,
        args: [{
                selector: 'dx-multi-dropdown',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'placeholder', 'popupposition', 'readonly', 'required', 'selectionlabel', 'size', 'textalign'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxNotificationBar, [{
        type: Component,
        args: [{
                selector: 'dx-notification-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['visible'],
                outputs: ['closeNotification']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxNotificationToast, [{
        type: Component,
        args: [{
                selector: 'dx-notification-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['closeafter', 'icon', 'iconcolor', 'subcontent', 'titlestring', 'visible'],
                outputs: ['closeNotification']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxNumberInput, [{
        type: Component,
        args: [{
                selector: 'dx-number-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'limitlength', 'max', 'min', 'placeholder', 'precision', 'profile', 'readonly', 'required', 'size', 'step', 'thousandseparator', 'unit', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxNumberPaginator, [{
        type: Component,
        args: [{
                selector: 'dx-number-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxNumberPicker, [{
        type: Component,
        args: [{
                selector: 'dx-number-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'value', 'values'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxOverflowMenu, [{
        type: Component,
        args: [{
                selector: 'dx-overflow-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'label', 'maxlabels', 'maxselections', 'selectionmode'],
                outputs: ['selection', 'listOpenChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxOverflowMenuItem, [{
        type: Component,
        args: [{
                selector: 'dx-overflow-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['icon', 'label', 'selected', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxPaginator, [{
        type: Component,
        args: [{
                selector: 'dx-paginator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['count', 'current'],
                outputs: ['pageChanged']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxPlaceholder, [{
        type: Component,
        args: [{
                selector: 'dx-placeholder',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['box', 'card']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxProcessHeader, [{
        type: Component,
        args: [{
                selector: 'dx-process-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['headline']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxRadioButton, [{
        type: Component,
        args: [{
                selector: 'dx-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'label', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxRadioButtonGroup, [{
        type: Component,
        args: [{
                selector: 'dx-radio-button-group',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'readonly', 'required', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxRepresentativeInfo, [{
        type: Component,
        args: [{
                selector: 'dx-representative-info',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSidebarContent, [{
        type: Component,
        args: [{
                selector: 'dx-sidebar-content',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSiteNavigation, [{
        type: Component,
        args: [{
                selector: 'dx-site-navigation',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['expandedlayoutat']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSiteNavigationMenu, [{
        type: Component,
        args: [{
                selector: 'dx-site-navigation-menu',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autonavigation', 'selectedvalue', 'titlestring'],
                outputs: ['navigate']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSiteNavigationMenuItem, [{
        type: Component,
        args: [{
                selector: 'dx-site-navigation-menu-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'state', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSiteNavigationScope, [{
        type: Component,
        args: [{
                selector: 'dx-site-navigation-scope',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSlideShow, [{
        type: Component,
        args: [{
                selector: 'dx-slide-show',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialpage', 'mq1amount', 'mq2amount', 'mq3amount', 'mq4amount', 'mq5amount', 'spacebetween', 'viewmode'],
                outputs: ['pageChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSlider, [{
        type: Component,
        args: [{
                selector: 'dx-slider',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'formattingpattern', 'label', 'max', 'min', 'readonly', 'showminmaxlabel', 'showvaluelabel', 'step', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSort, [{
        type: Component,
        args: [{
                selector: 'dx-sort',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['sortable'],
                outputs: ['sort']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSortItem, [{
        type: Component,
        args: [{
                selector: 'dx-sort-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSpacer, [{
        type: Component,
        args: [{
                selector: 'dx-spacer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['mq1', 'mq2', 'mq3', 'mq4', 'mq5']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxSpinner, [{
        type: Component,
        args: [{
                selector: 'dx-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['size', 'theme']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTabBar, [{
        type: Component,
        args: [{
                selector: 'dx-tab-bar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['selected'],
                outputs: ['tabChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTabPage, [{
        type: Component,
        args: [{
                selector: 'dx-tab-page',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['label', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTable, [{
        type: Component,
        args: [{
                selector: 'dx-table',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['initialsort', 'initialsortdirection', 'mode', 'pagesize', 'pagesizes', 'rowcount', 'scrollable', 'selectionenabled', 'selectionmode'],
                outputs: ['tableStateChanged', 'selectionStateChanged', 'expansionChanged', 'rowsSelected']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTableCell, [{
        type: Component,
        args: [{
                selector: 'dx-table-cell',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'color', 'type', 'value']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTableFooter, [{
        type: Component,
        args: [{
                selector: 'dx-table-footer',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTableHeader, [{
        type: Component,
        args: [{
                selector: 'dx-table-header',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTableHeaderItem, [{
        type: Component,
        args: [{
                selector: 'dx-table-header-item',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['align', 'columnid', 'customSort', 'label', 'linesize', 'maxwidth', 'minwidth', 'sortable', 'sortpriority', 'sticky', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTableRow, [{
        type: Component,
        args: [{
                selector: 'dx-table-row',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['rowid', 'selected'],
                outputs: ['rowSelected']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTag, [{
        type: Component,
        args: [{
                selector: 'dx-tag',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'label', 'removeable', 'selectable', 'selected', 'textcolor', 'theme', 'type'],
                outputs: ['remove', 'selectChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxText, [{
        type: Component,
        args: [{
                selector: 'dx-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['color', 'type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTextArea, [{
        type: Component,
        args: [{
                selector: 'dx-text-area',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'kisynced', 'label', 'lines', 'maxlength', 'placeholder', 'readonly', 'required', 'value'],
                outputs: ['valueChange', 'valueComplete']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTextInput, [{
        type: Component,
        args: [{
                selector: 'dx-text-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'icon', 'kisynced', 'label', 'limitlength', 'placeholder', 'readonly', 'required', 'size', 'value'],
                outputs: ['valueChange', 'valueComplete', 'autocomplete', 'selectAutocomplete', 'enterPress']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxTextList, [{
        type: Component,
        args: [{
                selector: 'dx-text-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['type']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxToggle, [{
        type: Component,
        args: [{
                selector: 'dx-toggle',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled'],
                outputs: ['checkedChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxUserAvatar, [{
        type: Component,
        args: [{
                selector: 'dx-user-avatar',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['imageurl', 'initials', 'size']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxWizard, [{
        type: Component,
        args: [{
                selector: 'dx-wizard',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['currentstep', 'expandedlayoutat', 'headline', 'orientation'],
                outputs: ['currentStepChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxWizardStep, [{
        type: Component,
        args: [{
                selector: 'dx-wizard-step',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['finished', 'label', 'value'],
                outputs: ['interaction']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxYesNo, [{
        type: Component,
        args: [{
                selector: 'dx-yes-no',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'errormessage', 'size', 'value'],
                outputs: ['valueChange']
            }]
    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();

const DIRECTIVES = [
    DsActionList,
    DsActionListItem,
    DsAlert,
    DsAlertButton,
    DsAnnouncementBar,
    DsApp,
    DsBorderedFormGroup,
    DsBorderedFormItem,
    DsButton,
    DsButtonBar,
    DsCard,
    DsCardCollapsable,
    DsCardContent,
    DsCardHeader,
    DsCardImageHeader,
    DsCardTabBar,
    DsCardTabPage,
    DsCenteredBoard,
    DsCenteredBoardItem,
    DsChartSample,
    DsCheckbox,
    DsColumn,
    DsDateInput,
    DsDateRange,
    DsDonutChart,
    DsDropdown,
    DsDropdownOption,
    DsFmErgebnisuebersicht,
    DsFmErgebnisuebersichtItem,
    DsFmErgebnisuebersichtTable,
    DsFooter,
    DsFormLayout,
    DsFullscreenSpinner,
    DsFunctionIconButton,
    DsGrid,
    DsGroupedTextInput,
    DsGrowBox,
    DsHeader,
    DsHeaderAction,
    DsHeaderActionList,
    DsHeaderCustomer,
    DsHeaderUser,
    DsHeroImage,
    DsHr,
    DsIcon,
    DsIconButton,
    DsInfo,
    DsLink,
    DsLogo,
    DsModal,
    DsNavigatedContent,
    DsNavigatedContentMenu,
    DsNavigatedContentMenuItem,
    DsNotificationToast,
    DsNumberInput,
    DsPage,
    DsPaginator,
    DsPlaceholder,
    DsRadioButton,
    DsRadioButtonGroup,
    DsSearch,
    DsSlider,
    DsSpinner,
    DsTable,
    DsTableCell,
    DsTableFooter,
    DsTableHeader,
    DsTableHeaderItem,
    DsTableRow,
    DsText,
    DsTextArea,
    DsTextButton,
    DsTextInput,
    DsTextList,
    DsUserAvatar,
    DsWorkflowProgress,
    DsWrappedLayout,
    DsYesNo,
    DxAccordion,
    DxAccordionGroup,
    DxAlert,
    DxAnnouncementBar,
    DxApp,
    DxBreadcrumb,
    DxBreadcrumbItem,
    DxButton,
    DxCard,
    DxCardCollapsable,
    DxCardContent,
    DxCardHeader,
    DxCardImage,
    DxChartSample,
    DxCheckbox,
    DxCombobox,
    DxContainer,
    DxDateInput,
    DxDateRange,
    DxDonutChart,
    DxDropdown,
    DxDropdownOption,
    DxErrorMessage,
    DxErrorPage,
    DxExpanded,
    DxFdOutlineBox,
    DxFdSeparator,
    DxFooter,
    DxFormWrapper,
    DxGoldenStage,
    DxGrid,
    DxHeader,
    DxHeaderAppFavorites,
    DxHeaderAppFavoritesApp,
    DxHeaderMenuCustom,
    DxHeaderMenuGroup,
    DxHeaderMenuItem,
    DxHeaderMenuLink,
    DxHeaderNavigation,
    DxHeaderNavigationItem,
    DxHeaderUser,
    DxHeroImage,
    DxIcon,
    DxInfo,
    DxLegend,
    DxLink,
    DxList,
    DxListItem,
    DxLogo,
    DxMediaQueryValue,
    DxModal,
    DxMultiDropdown,
    DxNotificationBar,
    DxNotificationToast,
    DxNumberInput,
    DxNumberPaginator,
    DxNumberPicker,
    DxOverflowMenu,
    DxOverflowMenuItem,
    DxPaginator,
    DxPlaceholder,
    DxProcessHeader,
    DxRadioButton,
    DxRadioButtonGroup,
    DxRepresentativeInfo,
    DxSidebarContent,
    DxSiteNavigation,
    DxSiteNavigationMenu,
    DxSiteNavigationMenuItem,
    DxSiteNavigationScope,
    DxSlideShow,
    DxSlider,
    DxSort,
    DxSortItem,
    DxSpacer,
    DxSpinner,
    DxTabBar,
    DxTabPage,
    DxTable,
    DxTableCell,
    DxTableFooter,
    DxTableHeader,
    DxTableHeaderItem,
    DxTableRow,
    DxTag,
    DxText,
    DxTextArea,
    DxTextInput,
    DxTextList,
    DxToggle,
    DxUserAvatar,
    DxWizard,
    DxWizardStep,
    DxYesNo
];

class ValueAccessor {
    constructor(el) {
        this.el = el;
        this.onChange = () => { };
        this.onTouched = () => { };
    }
    writeValue(value) {
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
    }
    handleChangeEvent(value) {
        if (value !== this.lastValue) {
            this.lastValue = value;
            this.onChange(value);
        }
    }
    _handleBlurEvent() {
        this.onTouched();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.el.nativeElement.disabled = isDisabled;
    }
}
ValueAccessor.ɵfac = function ValueAccessor_Factory(t) { return new (t || ValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ValueAccessor, hostBindings: function ValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focusout", function ValueAccessor_focusout_HostBindingHandler() { return ctx._handleBlurEvent(); });
    } } });
ValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
ValueAccessor.propDecorators = {
    _handleBlurEvent: [{ type: HostListener, args: ['focusout',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ValueAccessor, [{
        type: Directive,
        args: [{}]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _handleBlurEvent: [{
            type: HostListener,
            args: ['focusout']
        }] }); })();

class NumericValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
    registerOnChange(fn) {
        super.registerOnChange(value => {
            fn(value === '' ? null : parseFloat(value));
        });
    }
}
NumericValueAccessor.ɵfac = function NumericValueAccessor_Factory(t) { return new (t || NumericValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
NumericValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NumericValueAccessor, selectors: [["ds-slider"], ["dx-slider"], ["ds-number-input"], ["dx-number-input"]], hostBindings: function NumericValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("valueChange", function NumericValueAccessor_valueChange_HostBindingHandler($event) { return ctx.handleChangeEvent($event.target.value); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: NumericValueAccessor,
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
NumericValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NumericValueAccessor, [{
        type: Directive,
        args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-slider, dx-slider, ds-number-input, dx-number-input',
                host: {
                    '(valueChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: NumericValueAccessor,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

class TextValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
}
TextValueAccessor.ɵfac = function TextValueAccessor_Factory(t) { return new (t || TextValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
TextValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TextValueAccessor, selectors: [["ds-text-input"], ["ds-radio-button-group"], ["ds-grouped-text-input"], ["ds-dropdown"], ["ds-yes-no"], ["ds-date-input"], ["ds-text-area"], ["ds-search"], ["dx-combobox"], ["dx-dropdown"], ["dx-date-input"], ["dx-radio-button-group"], ["dx-text-input"], ["dx-text-area"], ["dx-yes-no"]], hostBindings: function TextValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("valueChange", function TextValueAccessor_valueChange_HostBindingHandler($event) { return ctx.handleChangeEvent($event.target.value); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: TextValueAccessor,
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
TextValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextValueAccessor, [{
        type: Directive,
        args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-text-input, ds-radio-button-group, ds-grouped-text-input, ds-dropdown, ds-yes-no, ds-date-input, ds-text-area, ds-search, dx-combobox, dx-dropdown, dx-date-input, dx-radio-button-group, dx-text-input, dx-text-area, dx-yes-no',
                host: {
                    '(valueChange)': 'handleChangeEvent($event.target.value)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: TextValueAccessor,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

class BooleanValueAccessor extends ValueAccessor {
    constructor(el) {
        super(el);
    }
    writeValue(value) {
        this.el.nativeElement.checked = this.lastValue = value == null ? false : value;
    }
}
BooleanValueAccessor.ɵfac = function BooleanValueAccessor_Factory(t) { return new (t || BooleanValueAccessor)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
BooleanValueAccessor.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: BooleanValueAccessor, selectors: [["ds-checkbox"], ["dx-checkbox"], ["dx-toggle"], ["ds-table-row"], ["dx-table-row"], ["dx-card-header"]], hostBindings: function BooleanValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("checkedChange", function BooleanValueAccessor_checkedChange_HostBindingHandler($event) { return ctx.handleChangeEvent($event.target.checked); })("rowSelected", function BooleanValueAccessor_rowSelected_HostBindingHandler($event) { return ctx.handleChangeEvent($event.target.selected); })("headerSelected", function BooleanValueAccessor_headerSelected_HostBindingHandler($event) { return ctx.handleChangeEvent($event.target.selected); });
    } }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: BooleanValueAccessor,
                multi: true
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
BooleanValueAccessor.ctorParameters = () => [
    { type: ElementRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BooleanValueAccessor, [{
        type: Directive,
        args: [{
                /* tslint:disable-next-line:directive-selector */
                selector: 'ds-checkbox, dx-checkbox, dx-toggle, ds-table-row, dx-table-row, dx-card-header',
                host: {
                    '(checkedChange)': 'handleChangeEvent($event.target.checked)',
                    '(rowSelected)': 'handleChangeEvent($event.target.selected)',
                    '(headerSelected)': 'handleChangeEvent($event.target.selected)'
                },
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: BooleanValueAccessor,
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

const components = [
    ...DIRECTIVES,
    NumericValueAccessor,
    TextValueAccessor,
    BooleanValueAccessor
];
class DesignSystemModule {
    constructor() {
        defineCustomElements().then();
    }
}
DesignSystemModule.ɵfac = function DesignSystemModule_Factory(t) { return new (t || DesignSystemModule)(); };
DesignSystemModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DesignSystemModule });
DesignSystemModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
DesignSystemModule.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DesignSystemModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    components,
                ],
                imports: [],
                exports: components
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DesignSystemModule, { declarations: [DsActionList, DsActionListItem, DsAlert, DsAlertButton, DsAnnouncementBar, DsApp, DsBorderedFormGroup, DsBorderedFormItem, DsButton, DsButtonBar, DsCard, DsCardCollapsable, DsCardContent, DsCardHeader, DsCardImageHeader, DsCardTabBar, DsCardTabPage, DsCenteredBoard, DsCenteredBoardItem, DsChartSample, DsCheckbox, DsColumn, DsDateInput, DsDateRange, DsDonutChart, DsDropdown, DsDropdownOption, DsFmErgebnisuebersicht, DsFmErgebnisuebersichtItem, DsFmErgebnisuebersichtTable, DsFooter, DsFormLayout, DsFullscreenSpinner, DsFunctionIconButton, DsGrid, DsGroupedTextInput, DsGrowBox, DsHeader, DsHeaderAction, DsHeaderActionList, DsHeaderCustomer, DsHeaderUser, DsHeroImage, DsHr, DsIcon, DsIconButton, DsInfo, DsLink, DsLogo, DsModal, DsNavigatedContent, DsNavigatedContentMenu, DsNavigatedContentMenuItem, DsNotificationToast, DsNumberInput, DsPage, DsPaginator, DsPlaceholder, DsRadioButton, DsRadioButtonGroup, DsSearch, DsSlider, DsSpinner, DsTable, DsTableCell, DsTableFooter, DsTableHeader, DsTableHeaderItem, DsTableRow, DsText, DsTextArea, DsTextButton, DsTextInput, DsTextList, DsUserAvatar, DsWorkflowProgress, DsWrappedLayout, DsYesNo, DxAccordion, DxAccordionGroup, DxAlert, DxAnnouncementBar, DxApp, DxBreadcrumb, DxBreadcrumbItem, DxButton, DxCard, DxCardCollapsable, DxCardContent, DxCardHeader, DxCardImage, DxChartSample, DxCheckbox, DxCombobox, DxContainer, DxDateInput, DxDateRange, DxDonutChart, DxDropdown, DxDropdownOption, DxErrorMessage, DxErrorPage, DxExpanded, DxFdOutlineBox, DxFdSeparator, DxFooter, DxFormWrapper, DxGoldenStage, DxGrid, DxHeader, DxHeaderAppFavorites, DxHeaderAppFavoritesApp, DxHeaderMenuCustom, DxHeaderMenuGroup, DxHeaderMenuItem, DxHeaderMenuLink, DxHeaderNavigation, DxHeaderNavigationItem, DxHeaderUser, DxHeroImage, DxIcon, DxInfo, DxLegend, DxLink, DxList, DxListItem, DxLogo, DxMediaQueryValue, DxModal, DxMultiDropdown, DxNotificationBar, DxNotificationToast, DxNumberInput, DxNumberPaginator, DxNumberPicker, DxOverflowMenu, DxOverflowMenuItem, DxPaginator, DxPlaceholder, DxProcessHeader, DxRadioButton, DxRadioButtonGroup, DxRepresentativeInfo, DxSidebarContent, DxSiteNavigation, DxSiteNavigationMenu, DxSiteNavigationMenuItem, DxSiteNavigationScope, DxSlideShow, DxSlider, DxSort, DxSortItem, DxSpacer, DxSpinner, DxTabBar, DxTabPage, DxTable, DxTableCell, DxTableFooter, DxTableHeader, DxTableHeaderItem, DxTableRow, DxTag, DxText, DxTextArea, DxTextInput, DxTextList, DxToggle, DxUserAvatar, DxWizard, DxWizardStep, DxYesNo, NumericValueAccessor, TextValueAccessor, BooleanValueAccessor], exports: [DsActionList, DsActionListItem, DsAlert, DsAlertButton, DsAnnouncementBar, DsApp, DsBorderedFormGroup, DsBorderedFormItem, DsButton, DsButtonBar, DsCard, DsCardCollapsable, DsCardContent, DsCardHeader, DsCardImageHeader, DsCardTabBar, DsCardTabPage, DsCenteredBoard, DsCenteredBoardItem, DsChartSample, DsCheckbox, DsColumn, DsDateInput, DsDateRange, DsDonutChart, DsDropdown, DsDropdownOption, DsFmErgebnisuebersicht, DsFmErgebnisuebersichtItem, DsFmErgebnisuebersichtTable, DsFooter, DsFormLayout, DsFullscreenSpinner, DsFunctionIconButton, DsGrid, DsGroupedTextInput, DsGrowBox, DsHeader, DsHeaderAction, DsHeaderActionList, DsHeaderCustomer, DsHeaderUser, DsHeroImage, DsHr, DsIcon, DsIconButton, DsInfo, DsLink, DsLogo, DsModal, DsNavigatedContent, DsNavigatedContentMenu, DsNavigatedContentMenuItem, DsNotificationToast, DsNumberInput, DsPage, DsPaginator, DsPlaceholder, DsRadioButton, DsRadioButtonGroup, DsSearch, DsSlider, DsSpinner, DsTable, DsTableCell, DsTableFooter, DsTableHeader, DsTableHeaderItem, DsTableRow, DsText, DsTextArea, DsTextButton, DsTextInput, DsTextList, DsUserAvatar, DsWorkflowProgress, DsWrappedLayout, DsYesNo, DxAccordion, DxAccordionGroup, DxAlert, DxAnnouncementBar, DxApp, DxBreadcrumb, DxBreadcrumbItem, DxButton, DxCard, DxCardCollapsable, DxCardContent, DxCardHeader, DxCardImage, DxChartSample, DxCheckbox, DxCombobox, DxContainer, DxDateInput, DxDateRange, DxDonutChart, DxDropdown, DxDropdownOption, DxErrorMessage, DxErrorPage, DxExpanded, DxFdOutlineBox, DxFdSeparator, DxFooter, DxFormWrapper, DxGoldenStage, DxGrid, DxHeader, DxHeaderAppFavorites, DxHeaderAppFavoritesApp, DxHeaderMenuCustom, DxHeaderMenuGroup, DxHeaderMenuItem, DxHeaderMenuLink, DxHeaderNavigation, DxHeaderNavigationItem, DxHeaderUser, DxHeroImage, DxIcon, DxInfo, DxLegend, DxLink, DxList, DxListItem, DxLogo, DxMediaQueryValue, DxModal, DxMultiDropdown, DxNotificationBar, DxNotificationToast, DxNumberInput, DxNumberPaginator, DxNumberPicker, DxOverflowMenu, DxOverflowMenuItem, DxPaginator, DxPlaceholder, DxProcessHeader, DxRadioButton, DxRadioButtonGroup, DxRepresentativeInfo, DxSidebarContent, DxSiteNavigation, DxSiteNavigationMenu, DxSiteNavigationMenuItem, DxSiteNavigationScope, DxSlideShow, DxSlider, DxSort, DxSortItem, DxSpacer, DxSpinner, DxTabBar, DxTabPage, DxTable, DxTableCell, DxTableFooter, DxTableHeader, DxTableHeaderItem, DxTableRow, DxTag, DxText, DxTextArea, DxTextInput, DxTextList, DxToggle, DxUserAvatar, DxWizard, DxWizardStep, DxYesNo, NumericValueAccessor, TextValueAccessor, BooleanValueAccessor] }); })();

/*
 * Public API Surface of design-system-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DesignSystemModule, DsActionList, DsActionListItem, DsAlert, DsAlertButton, DsAnnouncementBar, DsApp, DsBorderedFormGroup, DsBorderedFormItem, DsButton, DsButtonBar, DsCard, DsCardCollapsable, DsCardContent, DsCardHeader, DsCardImageHeader, DsCardTabBar, DsCardTabPage, DsCenteredBoard, DsCenteredBoardItem, DsChartSample, DsCheckbox, DsColumn, DsDateInput, DsDateRange, DsDonutChart, DsDropdown, DsDropdownOption, DsFmErgebnisuebersicht, DsFmErgebnisuebersichtItem, DsFmErgebnisuebersichtTable, DsFooter, DsFormLayout, DsFullscreenSpinner, DsFunctionIconButton, DsGrid, DsGroupedTextInput, DsGrowBox, DsHeader, DsHeaderAction, DsHeaderActionList, DsHeaderCustomer, DsHeaderUser, DsHeroImage, DsHr, DsIcon, DsIconButton, DsInfo, DsLink, DsLogo, DsModal, DsNavigatedContent, DsNavigatedContentMenu, DsNavigatedContentMenuItem, DsNotificationToast, DsNumberInput, DsPage, DsPaginator, DsPlaceholder, DsRadioButton, DsRadioButtonGroup, DsSearch, DsSlider, DsSpinner, DsTable, DsTableCell, DsTableFooter, DsTableHeader, DsTableHeaderItem, DsTableRow, DsText, DsTextArea, DsTextButton, DsTextInput, DsTextList, DsUserAvatar, DsWorkflowProgress, DsWrappedLayout, DsYesNo, DxAccordion, DxAccordionGroup, DxAlert, DxAnnouncementBar, DxApp, DxBreadcrumb, DxBreadcrumbItem, DxButton, DxCard, DxCardCollapsable, DxCardContent, DxCardHeader, DxCardImage, DxChartSample, DxCheckbox, DxCombobox, DxContainer, DxDateInput, DxDateRange, DxDonutChart, DxDropdown, DxDropdownOption, DxErrorMessage, DxErrorPage, DxExpanded, DxFdOutlineBox, DxFdSeparator, DxFooter, DxFormWrapper, DxGoldenStage, DxGrid, DxHeader, DxHeaderAppFavorites, DxHeaderAppFavoritesApp, DxHeaderMenuCustom, DxHeaderMenuGroup, DxHeaderMenuItem, DxHeaderMenuLink, DxHeaderNavigation, DxHeaderNavigationItem, DxHeaderUser, DxHeroImage, DxIcon, DxInfo, DxLegend, DxLink, DxList, DxListItem, DxLogo, DxMediaQueryValue, DxModal, DxMultiDropdown, DxNotificationBar, DxNotificationToast, DxNumberInput, DxNumberPaginator, DxNumberPicker, DxOverflowMenu, DxOverflowMenuItem, DxPaginator, DxPlaceholder, DxProcessHeader, DxRadioButton, DxRadioButtonGroup, DxRepresentativeInfo, DxSidebarContent, DxSiteNavigation, DxSiteNavigationMenu, DxSiteNavigationMenuItem, DxSiteNavigationScope, DxSlideShow, DxSlider, DxSort, DxSortItem, DxSpacer, DxSpinner, DxTabBar, DxTabPage, DxTable, DxTableCell, DxTableFooter, DxTableHeader, DxTableHeaderItem, DxTableRow, DxTag, DxText, DxTextArea, DxTextInput, DxTextList, DxToggle, DxUserAvatar, DxWizard, DxWizardStep, DxYesNo, DIRECTIVES as ɵa, ProxyCmp as ɵb, NumericValueAccessor as ɵc, ValueAccessor as ɵd, TextValueAccessor as ɵe, BooleanValueAccessor as ɵf };

//# sourceMappingURL=dvag-design-system-angular.js.map